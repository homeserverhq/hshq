#!/bin/bash
HSHQ_SCRIPT_VERSION=62

# Copyright (C) 2023 HomeServerHQ <drdoug@homeserverhq.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

function init()
{
  IS_STACK_DEBUG=false
  USERNAME=$(id -u -n)
  HSHQ_SCRIPT_OPEN=/tmp/hshqopen
  CONFIG_FILE_DEFAULT_LOCATION=$HOME/hshq/data/config
  HSHQ_DB=$HOME/hshq/data/config/hshq.db
  CONFIG_FILE_DEFAULT_FILENAME="config.cnf"
  ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME="config.enc"
  RS_INSTALL_SETUP_SCRIPT_NAME=setup.sh
  RS_INSTALL_FRESH_SCRIPT_NAME=install.sh
  RS_INSTALL_TRANSFER_SCRIPT_NAME=transfer.sh
  NUKE_SCRIPT_NAME=nuke.sh
  HSHQ_INSTALL_CFG=$HOME/hshq/installConfig.txt
  HSHQ_FULL_LOG_NAME=hshqInstall.log
  HSHQ_TIMESTAMP_LOG_NAME=hshqInstallTS.log
  RELAYSERVER_HSHQ_FULL_LOG_NAME=hshqRSInstall.log
  RELAYSERVER_HSHQ_TIMESTAMP_LOG_NAME=hshqRSInstallTS.log
  SCRIPTSERVER_FULL_STACKLIST_FILENAME=fullStackList.txt
  SCRIPTSERVER_OPTIONAL_STACKLIST_FILENAME=optionalStackList.txt
  SCRIPTSERVER_UPDATE_STACKLIST_FILENAME=updateStackList.txt
  NET_EXTERNAL_BRIDGE_NAME=brdockext
  NET_EXTERNAL_SUBNET=172.16.1.0/24
  NET_EXTERNAL_SUBNET_PREFIX=172.16.1
  NET_WEBPROXY_BRIDGE_NAME=brdockproxy
  NET_WEBPROXY_SUBNET=172.16.2.0/24
  NET_WEBPROXY_SUBNET_PREFIX=172.16.2
  NET_PRIVATEIP_BRIDGE_NAME=brdockpriv
  NET_PRIVATEIP_SUBNET=172.16.3.0/24
  NET_PRIVATEIP_SUBNET_PREFIX=172.16.3
  NET_INTERNALMAIL_BRIDGE_NAME=brdockmail
  NET_INTERNALMAIL_SUBNET=172.16.4.0/24
  NET_INTERNALMAIL_SUBNET_PREFIX=172.16.4
  NET_DBS_BRIDGE_NAME=brdockdbs
  NET_DBS_SUBNET=172.16.5.0/24
  NET_DBS_SUBNET_PREFIX=172.16.5
  NET_LDAP_BRIDGE_NAME=brdockldap
  NET_LDAP_SUBNET=172.16.6.0/24
  NET_LDAP_SUBNET_PREFIX=172.16.6
  NET_MAILU_EXT_BRIDGE_NAME=br-mailu-ext
  NET_MAILU_EXT_SUBNET=172.16.7.0/24
  NET_MAILU_EXT_SUBNET_PREFIX=172.16.7
  NET_MAILU_INT_BRIDGE_NAME=br-mailu-int
  NET_MAILU_INT_SUBNET=172.16.8.0/24
  NET_MAILU_INT_SUBNET_PREFIX=172.16.8
  MAX_DOCKER_PULL_TRIES=10
  MENU_WIDTH=85
  MENU_HEIGHT=25
  MENU_INT_HEIGHT=10
  ENABLE_STACK_DELETE=false
  SUDO_NORMAL_TIMEOUT=15
  SUDO_LONG_TIMEOUT=1440
  SUDO_LONG_TIMEOUT_FILENAME=sudohshqinstall
  SUDO_MAX_RETRIES=20
  STACK_VERSION_PREFIX=#HSHQManaged
  HSHQ_ADMIN_NAME="HSHQ Admin"
  HSHQ_LIB_URL=https://homeserverhq.com/hshqlib.sh
  HSHQ_LIB_VER_URL=https://homeserverhq.com/getversion
  HSHQ_WRAP_URL=https://homeserverhq.com/hshq.sh
  HSHQ_WRAP_VER_URL=https://homeserverhq.com/getwrapversion
  HSHQ_RELEASES_URL=https://homeserverhq.com/releases
  HSHQ_SIG_BASE_URL=https://homeserverhq.com/signatures/
  HSHQ_GPG_FINGERPRINT=5B9C33067C71ABCFCE1ACF8A7F46128ABB7C1E42
  HSHQ_GPG_FINGERPRINT_SHORT=7F46128ABB7C1E42
  HSHQ_LIB_TMP=$HOME/hshqlib.tmp
  HSHQ_WRAP_TMP=$HOME/hshqwrap.tmp
  HSHQ_LIB_FILENAME=hshqlib.sh
  HSHQ_WRAP_FILENAME=hshq.sh
  APPLICATION_FIRST_LINE="###################### Application Begin #######################"
  APPLICATION_LAST_LINE="####################### Application End ########################"
  INVITATION_FIRST_LINE="####################### Invitation Begin #######################"
  INVITATION_LAST_LINE="######################## Invitation End ########################"
  initServiceDefaults
  loadPinnedDockerImages
  loadDirectoryStructure
  UTILS_LIST="whiptail|whiptail awk|awk screen|screen pwgen|pwgen argon2|argon2 mailx|mailutils dig|dnsutils htpasswd|apache2-utils sshpass|sshpass wg|wireguard-tools qrencode|qrencode openssl|openssl faketime|faketime bc|bc sipcalc|sipcalc jq|jq git|git http|httpie sqlite3|sqlite3 curl|curl awk|awk sha1sum|sha1sum nano|nano cron|cron ping|iputils-ping route|net-tools grepcidr|grepcidr networkd-dispatcher|networkd-dispatcher certutil|libnss3-tools gpg|gnupg python3|python3 pip3|python3-pip unzip|unzip"
  APT_REMOVE_LIST="vim vim-tiny vim-common xxd binutils"
  RELAYSERVER_UTILS_LIST="curl|curl awk|awk whiptail|whiptail nano|nano screen|screen htpasswd|apache2-utils pwgen|pwgen git|git http|httpie jq|jq sqlite3|sqlite3 wg|wireguard-tools qrencode|qrencode route|net-tools sipcalc|sipcalc mailx|mailutils ipset|ipset uuidgen|uuid-runtime grepcidr|grepcidr networkd-dispatcher|networkd-dispatcher"
  hshqlogo=$(cat << EOF

        #===============================================================#
        # ▀█  █  ▄▄  ▄▄ ▄▄ ▄▄▄ █▀▀▀█ ▄▄▄ ▄▄▄  ▄   ▄ ▄▄▄ ▄▄▄  █  █ █▀▀█  #
        #  █▀▀█ █  █ █ █ █ ▄▄  ▀▀▀▄▄ ▄▄  ▄▄▄▀ ▀▄ ▄▀ ▄▄  ▄▄▄▀ █▀▀█ █  █  #
        #  █  █ ▀▄▄▀ █   █ ▄▄▄ █▄▄▄█ ▄▄▄ ▄▄▄▄  ▀█▀  ▄▄▄ ▄▄▄▄ █  █ █▄▄█▄ #
        #===============================================================#

EOF
  )
}

function main()
{
  init
  checkWrapperVersion
  case "$1" in
    "install")
      CONNECTING_IP=$2
      IS_PERFORM_INSTALL=true
      ;;
    "-a")
      CONNECTING_IP=$2
      ;;
    "run")
      IS_NEW_LIB=$2
      CONNECTING_IP=$3
      ;;
    *)
      ;;
  esac

  if [ -z "$CONNECTING_IP" ]; then
    CONNECTING_IP=$(getConnectingIPAddress)
  fi
  
  if [ "$IS_PERFORM_INSTALL" = "true" ]; then
    if [ "$USERNAME" = "root" ]; then
      echo "Cannot install as root user, exiting..."
      exit 1
    fi
    checkLoadConfig
    performBaseInstallation
    exit 0
  fi

  if [ "$(checkHSHQScriptOpen)" = "true" ]; then
    showYesNoMessageBox "Script Running" "It appears that this script is already running in another session. This error could occur if the script exited prematurely with an error. Unknown consequences can occur if running two different instances at the same time. Are you certain that you wish to continue?"
    mbres=$?
    if [ $mbres -ne 0 ]; then
      exit
    fi
    closeHSHQScript
  fi
  openHSHQScript
  set -e

  checkConfigAvailable
  is_hshq_installed=false
  if ! [ -z $CONFIG_FILE ] && [ -f $CONFIG_FILE ]; then
    isInstalled=$(getConfigVarFromFile IS_INSTALLED $CONFIG_FILE)
    if [ "$isInstalled" = "true" ]; then
      is_hshq_installed=true
    else
      is_hshq_installed=false
    fi
  elif ! [ -z $ENC_CONFIG_FILE ] && [ -f $ENC_CONFIG_FILE ]; then
    # Encrypted file found, assume installed.
    is_hshq_installed=true
  fi

  set +e
  mainMenuResult=1
  while  [[ $mainMenuResult -ne 0 ]]
  do
    if [ "$is_hshq_installed" = "true" ]; then
      if [ "$IS_NEW_LIB" = "true" ]; then
        checkLoadConfig
      fi
      showInstalledMenu
    else
      showNotInstalledMenu
    fi
    mainMenuResult=$?
  done
  performExitFunctions true
}

function showNotInstalledMenu()
{
  set +e
  sudo DEBIAN_FRONTEND=noninteractive apt update
  notinstalledmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$notinstalledmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Perform Base Installation" \
  "2" "Edit Configuration" \
  "3" "Install Dependencies" \
  "4" "Uninstall and Remove Everything" \
  "5" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  set -e
  case $menures in
    0)
	  return 0 ;;
    1)
      checkLoadConfig
      initConfig
      outputScripts
      initCertificateAuthority
      setupVPNConnection
      if [ $? -ne 0 ]; then
        exit
      fi
      if [ "$IS_INSTALLED" = "true" ] || [ "$IS_INSTALLING" = "true" ]; then
        showMessageBox "Error" "Already installed or existing installation is in progress."
        set +e
        exit
      fi
      initInstallation ;;
    2)
      checkLoadConfig
      initConfig
      nano $CONFIG_FILE
      loadConfigVars
      set +e
      return 1 ;;
    3)
      sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
      installDependencies
      pullBaseServicesDockerImages
      sudo reboot ;;
    4)
      nukeHSHQ
      set +e
      return 1 ;;
    5)
	  return 0 ;;
  esac
}

function showInstalledMenu()
{
  #if [ -f $HSHQ_INSTALL_CFG ]; then
  #  read -p "The installation configuration file still exists ($HSHQ_INSTALL_CFG). It contains sensitive data in plain text. If you have successfully performed the installation and utilized the information, then it is recommended that you delete this file. Do you wish to remove it? Enter yes to remove." is_rem_install_config
  #  mbres=$?
  #  if [ $mbres -eq 0 ]; then
  #    rm -f $HSHQ_INSTALL_CFG
  #    # Clean up the log files as well, don't need them anymore.
  #    rm -f $HOME/hshq/$HSHQ_FULL_LOG_NAME
  #    rm -f $HOME/hshq/$HSHQ_TIMESTAMP_LOG_NAME
  #  fi
  #fi
  installedmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$installedmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Services" \
  "2" "Network" \
  "3" "HSHQ Utils" \
  "4" "System Utils" \
  "5" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    0)
	  return 0 ;;
    1)
      checkLoadConfig
      if ! [ "$IS_INSTALLED" = "true" ]; then
        showMessageBox "System Not Installed" "You must perform a system installation first before using this utility."
        exit
      fi
      showStacksMenu
      set +e
      return 1 ;;
    2)
      checkLoadConfig
      if ! [ "$IS_INSTALLED" = "true" ]; then
        showMessageBox "System Not Installed" "You must perform a system installation first before using this utility."
        exit
      fi
      set +e
      showNetworkMenu
      set +e
      return 1 ;;
    3)
      showHSHQUtilsMenu
      set +e
	  return 1 ;;
    4)
      showSysUtilsMenu
      set +e
	  return 1 ;;
    5)
	  return 0 ;;
  esac
}

function showHSHQUtilsMenu()
{
  set +e
  utilmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$utilmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Edit Configuration File" \
  "2" "Generate Signed Certificate" \
  "3" "Reset Caddy Data" \
  "4" "Restart All Stacks" \
  "5" "Email Vaultwarden Credentials" \
  "6" "Email Root CA" \
  "7" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  set -e
  case $menures in
    0)
      set +e
	  return 1 ;;
    1)
      checkLoadConfig
      nano $CONFIG_FILE
      loadConfigVars
      set +e
      return 1 ;;
    2)
      checkLoadConfig
      if ! [ "$IS_INSTALLED" = "true" ]; then
        showMessageBox "System Not Installed" "You must perform a system installation first before using this utility."
        exit
      fi
      generateCertDialog
      set +e
      return 1 ;;
    3)
      checkLoadConfig
      if ! [ "$IS_INSTALLED" = "true" ]; then
        showMessageBox "System Not Installed" "You must perform a system installation first before using this utility."
        exit
      fi
      showResetCaddyMenu
      set +e
      return 1 ;;
    4)
      checkLoadConfig
      restartAllStacksDialog ;;
    5)
      checkLoadConfig
      emailVaultwardenCredentials false ;;
    6)
      checkLoadConfig
      sendRootCAEmail ;;
    7)
	  return 0 ;;
  esac
}

function showSysUtilsMenu()
{
  set +e
  utilmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$utilmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Update Linux OS and Reboot" \
  "2" "Download All Docker Images" \
  "3" "Change Host Static IP" \
  "4" "Uninstall and Remove Everything" \
  "5" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  set -e
  case $menures in
    0)
      set +e
	  return 1 ;;
    1)
      performExitFunctions true
      set +e
      sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y && sudo reboot ;;
    2)
      pullDockerImages
      set +e
      return 1 ;;
    3)
      checkLoadConfig
      changeHostStaticIP
      set +e
      return 1 ;;
    4)
      nukeHSHQ ;;
    5)
	  return 0 ;;
  esac
}

function showResetCaddyMenu()
{
  set +e
  caddymenu=$(cat << EOF

$hshqlogo

Select the Caddy instances that you wish to reset:
EOF
  )
  caddy_arr=($(docker ps -a --filter name=caddy- --format "{{.Names}}"))
  menu_items=""
  for curcaddy in "${caddy_arr[@]}"
  do
    menu_items=${menu_items}"$curcaddy | OFF "
  done
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    menu_items=${menu_items}"RelayServer | OFF "
  fi
  sel_caddy=($(whiptail --title "Select Instances" --checklist "$caddymenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  showYesNoMessageBox "Confirm Reset" "Perform this action on the selected Caddy server(s), Continue?"
  if [ $? -ne 0 ]; then
    set -e
    return 0
  fi
  set -e
  for curcaddy in "${sel_caddy[@]}"
  do
    curcaddy=$(echo $curcaddy | tr -d \")
    if [ "$curcaddy" = "RelayServer" ]; then
      resetCaddyDataRelayServer true
    else
      sudo $HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh $curcaddy
    fi
  done
}

function checkWrapperVersion()
{
  set +e
  curWrapV=$(sed -n 2p $HSHQ_WRAP_SCRIPT | cut -d"=" -f2)
  if ! [ -z "$curWrapV" ]; then
    if [ $curWrapV -lt 5 ]; then
      showMessageBox "Update Wrapper" "It appears you are using a deprecated version of the wrapper script. Please run the command: 'wget -q -N https://homeserverhq.com/hshq.sh' to obtain the latest version as soon as possible."
    fi
  fi
  set -e
}

function updateSysctl()
{
  isPerfUpdate=$1
  set +e
  sudo tee /etc/sysctl.d/88-hshq.conf >/dev/null <<EOFSC
kernel.panic = 10
fs.file-max = 10000000
fs.nr_open = 10000000
fs.inotify.max_user_instances = 8192
fs.inotify.max_user_watches = 524288
net.core.somaxconn = 65536
net.netfilter.nf_conntrack_max = 10485760
net.netfilter.nf_conntrack_tcp_loose = 0
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10
net.ipv4.route.flush = 1
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5
net.ipv4.tcp_timestamps = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.ip_forward = 1
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1

# Reserve for Coturn and any other ports above 10000
net.ipv4.ip_local_reserved_ports = 10000,14100-14200,22000,21027,55000

# See https://community.home-assistant.io/t/zeroconf-error/153883

# Bigger buffers (to make 40Gb more practical). These are maximums, but the default is unaffected.
net.core.wmem_max=268435456
net.core.rmem_max=268435456
net.core.netdev_max_backlog=10000

# Force IGMP v2 (required by CBF switch)
net.ipv4.conf.all.force_igmp_version=2
net.ipv4.conf.default.force_igmp_version=2

# Increase the ARP cache table
net.ipv4.neigh.default.gc_thresh3=4096
net.ipv4.neigh.default.gc_thresh2=2048
net.ipv4.neigh.default.gc_thresh1=1024

# Increase number of multicast groups permitted
net.ipv4.igmp_max_memberships=1024
EOFSC
  if ! [ "$isPerfUpdate" = "false" ]; then
    sudo sysctl --system > /dev/null 2>&1
  fi
}

function updateMOTD()
{
  cat <<EOFMD > $HOME/88-hshq
#!/bin/bash

echo
echo "#===============================================================#"
echo "# ▀█  █  ▄▄  ▄▄ ▄▄ ▄▄▄ █▀▀▀█ ▄▄▄ ▄▄▄  ▄   ▄ ▄▄▄ ▄▄▄  █  █ █▀▀█  #"
echo "#  █▀▀█ █  █ █ █ █ ▄▄  ▀▀▀▄▄ ▄▄  ▄▄▄▀ ▀▄ ▄▀ ▄▄  ▄▄▄▀ █▀▀█ █  █  #"
echo "#  █  █ ▀▄▄▀ █   █ ▄▄▄ █▄▄▄█ ▄▄▄ ▄▄▄▄  ▀█▀  ▄▄▄ ▄▄▄▄ █  █ █▄▄█▄ #"
echo "#===============================================================#"
echo

echo "    Linux OS:  \$(lsb_release -d | cut -d":" -f2 | xargs)"
if [ -f $HSHQ_LIB_SCRIPT ]; then
  echo "HSHQ Version:  \$(sed -n 2p $HSHQ_LIB_SCRIPT | cut -d'=' -f2)"
fi
printf "Memory Usage:  %.1f%% of \$(free -h | awk  '/Mem:/{print \$2}')\n" \$((10000 - \$((10**4 * \$(grep "MemAvailable" /proc/meminfo | xargs | cut -d" " -f2) / \$(grep "MemTotal" /proc/meminfo | xargs | cut -d" " -f2)))))e-2
printf "  Swap Usage:  %.1f%% of \$(free -h | awk  '/Swap:/{print \$2}')\n" \$((10000 - \$((10**4 * \$(grep "SwapFree" /proc/meminfo | xargs | cut -d" " -f2) / \$(grep "SwapTotal" /proc/meminfo | xargs | cut -d" " -f2)))))e-2

echo
echo "Disks: "
echo "-----------------------------------------------------------------"
echo "Filesystem   Size   Used   Avail   Use%   Mounted on"
echo "-----------------------------------------------------------------"
df -h | grep "^/dev"
echo
echo

# Let's only show zombie count if greater than 10
zombie_count=\$(ps aux | grep "defunct" | wc -l)
if [ \$zombie_count -gt 10 ]; then
  echo "=> There are \$zombie_count zombie processes."
  echo
  echo
fi

echo "Enter 'bash $HSHQ_WRAP_FILENAME' to run the HomeServerHQ script."
echo
EOFMD
  chmod 755 $HOME/88-hshq
  sudo chown root:root $HOME/88-hshq
  sudo chmod -x /etc/update-motd.d/*
  sudo mv $HOME/88-hshq /etc/update-motd.d/
  if [ -f /etc/motd ]; then
    sudo mv /etc/motd /etc/motd.old
  fi
}

function performSuggestedSecUpdates()
{
  disa_curE=${-//[^e]/}
  set +e
  # This function continues the process of reducing the failed checks in the Wazuh SCA scan
  # It's mostly low hanging fruit, but reducing the list of exceptions will help to focus
  # on the more important ones.
  grep "enabled=1" /etc/default/apport > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    sudo sed -i "s/enabled=1/enabled=0/" /etc/default/apport
    sudo systemctl stop apport
    sudo systemctl --now disable apport
    sudo systemctl daemon-reload
  fi
  echo "Authorized uses only." | sudo tee /etc/issue > /dev/null 2>&1
  echo "Authorized uses only." | sudo tee /etc/issue.net > /dev/null 2>&1
  sudo DEBIAN_FRONTEND=noninteractive apt purge -y telnet > /dev/null 2>&1
  # Assume the caller will restart sshd - don't want to risk breaking the installation process
  sudo sed -i "s/^#MaxAuthTries.*/MaxAuthTries 4/" /etc/ssh/sshd_config
  sudo sed -i "s/^#Banner none.*/Banner \/etc\/issue.net/" /etc/ssh/sshd_config
  sudo sed -i "s/^#MaxStartups.*/MaxStartups 10:30:60/" /etc/ssh/sshd_config
  sudo sed -i "s/^#LoginGraceTime.*/LoginGraceTime 60/" /etc/ssh/sshd_config
  sudo sed -i "s/^#AllowTcpForwarding yes.*/AllowTcpForwarding no/" /etc/ssh/sshd_config
  if ! [ -z $disa_curE ]; then
    set -e
  fi
}

function installDependencies()
{
  set +e
  # Install utils
  installHostNTPServer
  if [[ "$(isProgramInstalled ssmtp)" = "false" ]]; then
    echo "Installing ssmtp, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y ssmtp
  fi

  if [[ "$(isProgramInstalled mailx)" = "false" ]]; then
    echo "Installing mailx, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y mailutils
  fi

  sudo tee /etc/ssmtp/ssmtp.conf >/dev/null <<EOFSM
root=$EMAIL_ADMIN_EMAIL_ADDRESS
mailhub=${SUB_POSTFIX}.${HOMESERVER_DOMAIN}:587
hostname=$(cat /etc/hostname)
TLS_CA_FILE=/etc/ssl/certs/ca-certificates.crt
UseSTARTTLS=yes
FromLineOverride=no
AuthUser=$EMAIL_SMTP_EMAIL_ADDRESS
AuthPass=$EMAIL_SMTP_PASSWORD
EOFSM

  sudo tee /etc/ssmtp/revaliases >/dev/null <<EOFSM
root:$EMAIL_SMTP_EMAIL_ADDRESS
$USERNAME:$EMAIL_SMTP_EMAIL_ADDRESS
EOFSM

  getent group mailsenders >/dev/null || sudo groupadd mailsenders 
  sudo usermod -aG mailsenders $USERNAME
  sudo chown root:mailsenders /usr/bin/mail.mailutils

  for util in $UTILS_LIST; do
    if [[ "$(isProgramInstalled $util)" = "false" ]]; then
      lib_name=$(echo $util | cut -d"|" -f2)
      echo "Installing $lib_name, please wait..."
      sudo DEBIAN_FRONTEND=noninteractive apt install -y $lib_name
    fi
  done

  for rem_util in $APT_REMOVE_LIST; do
    sudo DEBIAN_FRONTEND=noninteractive apt remove -y $rem_util
  done

  if ! [ -f /etc/rsyslog.d/docker-logs.conf ]; then
    # Install Rsyslog
    sudo systemctl status rsyslog > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "Installing rsyslog, please wait..."
      sudo DEBIAN_FRONTEND=noninteractive apt install -y rsyslog
      sudo systemctl enable rsyslog
      sudo systemctl start rsyslog
    fi
  fi

  # Some host tuning
  updateSysctl true
  sudo sed -i "s|^ClientAliveInterval .*$|ClientAliveInterval 15|g" /etc/ssh/sshd_config
  sudo sed -i "s|^ClientAliveCountMax .*$|ClientAliveCountMax 3|g" /etc/ssh/sshd_config
  sudo sed -i "s|^PermitEmptyPasswords .*$|PermitEmptyPasswords no|g" /etc/ssh/sshd_config
  sudo sed -i "s|^#*ClientAliveInterval .*$|ClientAliveInterval 15|g" /etc/ssh/sshd_config
  sudo sed -i "s|^#*ClientAliveCountMax .*$|ClientAliveCountMax 3|g" /etc/ssh/sshd_config
  sudo sed -i "s|^#*PermitEmptyPasswords .*$|PermitEmptyPasswords no|g" /etc/ssh/sshd_config
  
  sudo sed -i "s/^#DefaultLimitNOFILE.*/DefaultLimitNOFILE=65536:524288/g" /etc/systemd/system.conf
  sudo sed -i "s/^#DefaultLimitNOFILE.*/DefaultLimitNOFILE=65536:524288/g" /etc/systemd/user.conf
  sudo sed -i "s/^DefaultLimitNOFILE.*/DefaultLimitNOFILE=65536:524288/g" /etc/systemd/system.conf
  sudo sed -i "s/^DefaultLimitNOFILE.*/DefaultLimitNOFILE=65536:524288/g" /etc/systemd/user.conf
  sudo grep "* - nofile" /etc/security/limits.conf >/dev/null
  if [ $? -ne 0 ]; then
    echo "* - nofile 65536" | sudo tee -a /etc/security/limits.conf >/dev/null
  fi
  sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target > /dev/null 2>&1

  installDocker
  if ! [ -z $DESKTOP_ENV ]; then
    case $DESKTOP_ENV in
      "kde")
        sudo DEBIAN_FRONTEND=noninteractive apt install -y kde-full
	    ;;
      "gnome")
        sudo DEBIAN_FRONTEND=noninteractive apt install -y ubuntu-gnome-desktop
	    ;;
    esac
    if ! [ $DESKTOP_ENV = "na" ]; then
      # Default browsers are so-so...
      sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
      echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
      sudo DEBIAN_FRONTEND=noninteractive apt update
      sudo DEBIAN_FRONTEND=noninteractive apt install -y brave-browser
      if ! [ -z "$CERTS_ROOT_CA_NAME" ]; then
        mkdir -p $HOME/.pki
        certutil -d sql:$HOME/.pki/nssdb -A -t "CT,C,C" -n "$HOMESERVER_NAME Root CA" -i /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
      fi
    fi
  fi
  sudo DEBIAN_FRONTEND=noninteractive apt autoremove -y
  set -e
}

function checkLoadConfig()
{
  set -e
  if [ -z "$CONFIG_FILE" ] || ! [ -f $CONFIG_FILE ]; then
    DEF_CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME
    if [ -f $DEF_CONFIG_FILE ]; then
      CONFIG_FILE=$DEF_CONFIG_FILE
    else
      CONFIG_FILE=""
    fi
  fi
  if [ -z "$ENC_CONFIG_FILE" ] && [ -z "$CONFIG_FILE" ]; then
    if [ -f $CONFIG_FILE_DEFAULT_LOCATION/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME ]; then
      ENC_CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME
    fi
  fi
  if ! [ -z "$ENC_CONFIG_FILE" ]; then
    set +e
    showYesNoMessageBox "Encrypted Config Found" "Encrypted configuration file found. Do you wish to decrypt it?"
    if [ $? -ne 0 ]; then
      closeHSHQScript
      exit 1
    fi
    set -e
    decryptConfigFile "$ENC_CONFIG_FILE"
    ENC_CONFIG_FILE=""
  fi
  if ! [ -z "$CONFIG_FILE" ] && [ -f $CONFIG_FILE ]; then
    loadConfigVars
  fi
}

function checkConfigAvailable()
{
  if [ -f $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME ]; then
    CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME
    return
  fi
  if [ -f $CONFIG_FILE_DEFAULT_LOCATION/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME ]; then
    ENC_CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME
    return
  fi
}

function addToDisabledServices()
{
  atds_curE=${-//[^e]/}
  set +e
  dis_svc=$1
  echo $DISABLED_SERVICES | grep $dis_svc > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    if [ -z "$DISABLED_SERVICES" ]; then
      DISABLED_SERVICES="$dis_svc"
    else
      DISABLED_SERVICES="${DISABLED_SERVICES},$dis_svc"
    fi
    updateConfigVar DISABLED_SERVICES $DISABLED_SERVICES
  fi
  set +e
  if ! [ -z $atds_curE ]; then
    set -e
  fi
}

function initConfig()
{
  if [ "$IS_INSTALLING" = "true" ]; then
    showMessageBox "Active Installation" "There is an active installation in progress, exiting..."
    exit 1
  fi
  if [ "$IS_INSTALLED" = "true" ]; then
    return 0
  fi
  if [ -z "$CONFIG_FILE" ]; then
    # Create new directories and config file
    showYesNoMessageBox "No Config Found" "No configuration file found, create initial environment (y/n)?"
	createInitialEnv
    loadConfigVars
  fi

  set +e
  total_ram=$(free --giga | grep "Mem:" | xargs | cut -d" " -f2)
  # Obviously 6 != 8, but this allows a little leeway.
  if [ $total_ram -lt 6 ]; then
    showYesNoMessageBox "Insufficient Memory" "Total memory is $total_ram GB. You should have at least 8 GB perform the installation. The process could fail or your server could crash. Are you sure you want to continue?"
    mbres=$?
    if [ $mbres -ne 0 ]; then
      exit 1
    fi
  fi
  # Need to allow for docker images already downloaded, so look at total disk space.
  # Obviously 120 != 150, but this allows a little leeway.
  # The partitioning structure could be different than expected, so user can bypass this warning.
  total_disk_space=$(($(df / | tail -1 | xargs | cut -d" " -f2) / 1048576))
  if [ $total_disk_space -lt 120 ]; then
    showYesNoMessageBox "Insufficient Disk Space" "Total size of disk is $total_disk_space GB. You should have at least 150 GB of available space to perform the installation. The process could fail or your server could crash. Are you sure you want to continue?"
    mbres=$?
    if [ $mbres -ne 0 ]; then
      exit 1
    fi
  fi
  if [[ "$(isProgramInstalled grepcidr)" = "false" ]]; then
    echo "Installing grepcidr, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y grepcidr > /dev/null 2>&1
  fi
  set -e

  HOMESERVER_HOST_IP=$(getDefaultRouteIPAddress)
  isInPrivateRange=$(checkDefaultRouteIPIsPrivateIP)
  if [ "$isInPrivateRange" = "true" ]; then
    if [[ "$HOMESERVER_HOST_IP" =~ ^10\. ]]; then
      showYesNoMessageBox "Bad Private Range" "Your current private IP address is in the 10.0.0.0/8 range. This range is reserved for VPN networking within this infrastructure. This may work fine, or you could encounter networking issues either during installation or down the road when connecting with other HomeServers. It is highly advisable to either change your router's LAN subnet or daisy-chain another router in between, and set it in the 192.168.0.0/16 range. Are you sure you want to continue?"
      mbres=$?
      if [ $mbres -ne 0 ]; then
        exit 1
      fi
    elif [[ "$HOMESERVER_HOST_IP" =~ ^172\.16\. ]]; then
      showYesNoMessageBox "Bad Private Range" "Your current private IP address is in the 172.16.0.0/24 range. This range is specifically reserved for Docker networking within this infrastructure. You must either change your router's LAN subnet or daisy-chain another router in between, and ideally set it in the 192.168.0.0/16 range. Exiting..."
      exit 1
    elif [[ "$HOMESERVER_HOST_IP" =~ ^172\. ]]; then
      showYesNoMessageBox "Bad Private Range" "Your current private IP address is in the 172.16.0.0/12 range. This range is reserved for Docker networking within this infrastructure. This may work fine, or you could encounter networking issues either during installation or down the road. It is highly advisable to either change your router's LAN subnet or daisy-chain another router in between, and set it in the 192.168.0.0/16 range. Are you sure you want to continue?"
      mbres=$?
      if [ $mbres -ne 0 ]; then
        exit 1
      fi
    fi
  fi
  HOMESERVER_HOST_IP=""

  if [ -z "$USERID" ]; then
    USERID=$(id -u)
    updateConfigVar USERID $USERID
  fi
  if [ -z "$GROUPID" ]; then
    GROUPID=$(id -g)
    # The group ID should always be 1000 on a fresh install.
    if [ $GROUPID -ne 1000 ]; then
      showMessageBox "Bad Group ID" "The group ID doesn't match ($GROUPID)"
      exit 1
    fi
    updateConfigVar GROUPID $GROUPID
  fi
  if [ -z "$XDG_RUNTIME_DIR" ]; then
    XDG_RUNTIME_DIR="/run/user/$USERID"
    updateConfigVar XDG_RUNTIME_DIR $XDG_RUNTIME_DIR
  fi
  if [ -z "$DISABLED_SERVICES" ]; then
    if [ $total_ram -lt 8 ]; then
      DISABLED_SERVICES=$DS_MEM_LOW
    elif [ $total_ram -lt 12 ]; then
      DISABLED_SERVICES=$DS_MEM_12
    elif [ $total_ram -lt 16 ]; then
      DISABLED_SERVICES=$DS_MEM_16
    elif [ $total_ram -lt 24 ]; then
      DISABLED_SERVICES=$DS_MEM_24
    else
      DISABLED_SERVICES=$DS_MEM_32
    fi
    updateConfigVar DISABLED_SERVICES $DISABLED_SERVICES
  fi
  if [ -z "$IS_ACCEPT_DEFAULTS" ]; then
    set +e
    showYesNoMessageBox "Accept Defaults?" "Do you wish to use defaults where applicable?"
    mbres=$?
    if [ $mbres -eq 0 ]; then
      IS_ACCEPT_DEFAULTS=yes
    else
      IS_ACCEPT_DEFAULTS=no
    fi
    set -e
  fi
  while [ -z "$HOMESERVER_DOMAIN" ]
  do
	HOMESERVER_DOMAIN=$(promptUserInputMenu "example.com" "Enter HomeServer Domain" "Enter your HomeServer domain name. You must own this domain to route external emails and/or post services on the public internet: ")
	if [ -z "$HOMESERVER_DOMAIN" ]; then
	  showMessageBox "Domain Empty" "The domain cannot be empty"
    elif [ $(checkValidString "$HOMESERVER_DOMAIN" ".-") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The domain contains invalid character(s). It must consist of a-z (lowercase), 0-9, and/or -."
      HOMESERVER_DOMAIN=""
    elif [ $(checkValidBaseDomain "$HOMESERVER_DOMAIN") = "false" ]; then
      showMessageBox "Invalid Domain Name" "Invalid domain name. The base domain must be of the format 'example.com'. It cannot be a subdomain."
      HOMESERVER_DOMAIN=""
	else
	  updateConfigVar HOMESERVER_DOMAIN $HOMESERVER_DOMAIN
	fi
  done

  new_hostname="HomeServer-$(getDomainNoTLD $HOMESERVER_DOMAIN)-$(getDomainTLD $HOMESERVER_DOMAIN)"
  if [ -z "$(cat /etc/hosts | grep $new_hostname)" ]; then
    echo "127.0.1.1 $new_hostname" | sudo tee -a /etc/hosts
  fi
  sudo hostnamectl set-hostname $new_hostname
  rm -f $HOME/dead.letter

  EXT_DOMAIN_PREFIX=""
  while [ -z "$EXT_DOMAIN_PREFIX" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      EXT_DOMAIN_PREFIX="external"
    else
      EXT_DOMAIN_PREFIX=$(promptUserInputMenu "external" "External Domain Prefix" "Enter the prefix for your domain to be reached externally:")
    fi
	if [ -z "$EXT_DOMAIN_PREFIX" ]; then
	  showMessageBox "Prefix Empty" "The Prefix cannot be empty"
    elif [ $(checkValidString "$EXT_DOMAIN_PREFIX" "-") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The prefix contains invalid character(s). It must consist of a-z (lowercase), 0-9, and/or -"
      EXT_DOMAIN_PREFIX=""
	else
	  updateConfigVar EXT_DOMAIN_PREFIX $EXT_DOMAIN_PREFIX
	fi
  done

  INT_DOMAIN_PREFIX=""
  while [ -z "$INT_DOMAIN_PREFIX" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      INT_DOMAIN_PREFIX="internal"
    else
      INT_DOMAIN_PREFIX=$(promptUserInputMenu "internal" "Internal Domain Prefix" "Enter the prefix for your RelayServer to be reached internally (if applicable):")
    fi
	if [ -z "$INT_DOMAIN_PREFIX" ]; then
	  showMessageBox "Prefix Empty" "The Prefix cannot be empty"
    elif [ $(checkValidString "$INT_DOMAIN_PREFIX" "-") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The prefix contains invalid character(s). It must consist of a-z (lowercase), 0-9, and/or -"
      INT_DOMAIN_PREFIX=""
	else
	  updateConfigVar INT_DOMAIN_PREFIX $INT_DOMAIN_PREFIX
	fi
  done

  while [ -z "$HOMESERVER_NAME" ]
  do
	HOMESERVER_NAME=$(promptUserInputMenu "" "Enter HomeServer Name" "Enter your HomeServer name with desired formatting, i.e. capitalization, spaces, etc (No special characters except for commas, hyphens, or periods). This will appear in window titles, certificates, among other things: ")
	if [ -z "$HOMESERVER_NAME" ]; then
	  showMessageBox "HomeServer Name Empty" "The name cannot be empty"
    elif [ $(checkValidStringUpperLowerNumbers "$HOMESERVER_NAME" " ,.-") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The HomeServer name contains invalid character(s)."
      HOMESERVER_NAME=""
	else
	  updateConfigVar HOMESERVER_NAME "$HOMESERVER_NAME"
	fi
  done
  while [ -z "$HOMESERVER_ABBREV" ]
  do
    HOMESERVER_ABBREV=$(promptUserInputMenu "abc" "Enter HomeServer Abbrev" "Enter an abbreviation for your HomeServer (3 to 10 lowercase alpha-numeric characters). This will be used as a default prefix for admin usernames as well as some other uses: ")
    if [ -z "$HOMESERVER_ABBREV" ]; then
      showMessageBox "HomeServer Abbrev Empty" "The abbreviation cannot be empty."
    elif [ $(checkValidString "$HOMESERVER_ABBREV") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The abbreviation contains invalid character(s). It must consist of a-z (lowercase) and/or 0-9"
      HOMESERVER_ABBREV=""
    elif [ ${#HOMESERVER_ABBREV} -lt 3 ] || [ ${#HOMESERVER_ABBREV} -gt 10 ]; then
      showMessageBox "Invalid Length" "The abbreviation must be 3 to 10 characters"
      HOMESERVER_ABBREV=""
    else
      updateConfigVar HOMESERVER_ABBREV $HOMESERVER_ABBREV
    fi
  done
  while [ -z "$TZ" ]
  do
    TZ=$(promptUserInputMenu "$(cat /etc/timezone)" "Enter Time Zone" "Enter your time zone. For a list of all time zones, visit https://en.wikipedia.org/wiki/List_of_tz_database_time_zones and enter the value in the [TZ database name] column: ")
    if [ -z "$TZ" ]; then
      showMessageBox "Time Zone Empty" "The time zone cannot be empty"
    else
      set +e
      sudo timedatectl set-timezone "$TZ"
      if [ $? -ne 0 ]; then
        showMessageBox "Invalid Time Zone" "The time zone is invalid. Please enter a valid time zone."
        TZ=""
      else
        updateConfigVar TZ $TZ
      fi
      set -e
    fi
  done

  while [ -z "$HOMESERVER_HOST_IP" ]
  do
    defIP=$(getDefaultRouteIPAddress)
    HOMESERVER_HOST_IP=$(promptUserInputMenu "$defIP" "Enter IP Address" "Enter your internal private IP Address. The value provided should be correct, but please confirm. If you are on a cloud-based server, then this value will be the public IP address: ")
    if [ -z "$HOMESERVER_HOST_IP" ]; then
      showMessageBox "IP Address Empty" "The IP address cannot be empty"
    else
      set +e
      if [ "$(checkValidIPAddress $HOMESERVER_HOST_IP)" = "false" ]; then
        showMessageBox "Invalid IP Address" "The IP address is invalid. Please enter a valid IP address."
        HOMESERVER_HOST_IP=""
        continue
      fi
      if [[ "$HOMESERVER_HOST_IP" =~ ^10\. ]]; then
        showYesNoMessageBox "Bad Private Range" "Your current private IP address is in the 10.0.0.0/8 range. This range is reserved for VPN networking within this infrastructure. This may work fine, or you could encounter networking issues either during installation or down the road when connecting with other HomeServers. It is highly advisable to either change your router's LAN subnet or daisy-chain another router in between, and set it in the 192.168.0.0/16 range. Are you sure you want to continue?"
        mbres=$?
        if [ $mbres -ne 0 ]; then
          HOMESERVER_HOST_IP=""
          continue
        fi
      fi
      if [[ "$HOMESERVER_HOST_IP" =~ ^172\.16\. ]]; then
        showYesNoMessageBox "Bad Private Range" "Your current private IP address is in the 172.16.0.0/24 range. This range is specifically reserved for Docker networking within this infrastructure. You must either change your router's LAN subnet or daisy-chain another router in between, and ideally set it in the 192.168.0.0/16 range."
        HOMESERVER_HOST_IP=""
        continue
      fi
      if [[ "$HOMESERVER_HOST_IP" =~ ^172\. ]]; then
        showYesNoMessageBox "Bad Private Range" "Your current private IP address is in the 172.16.0.0/12 range. This range is reserved for Docker networking within this infrastructure. This may work fine, or you could encounter networking issues either during installation or down the road. It is highly advisable to either change your router's LAN subnet or daisy-chain another router in between, and set it in the 192.168.0.0/16 range. Are you sure you want to continue?"
        mbres=$?
        if [ $mbres -ne 0 ]; then
          HOMESERVER_HOST_IP=""
          continue
        fi
      fi
      updateConfigVar HOMESERVER_HOST_IP $HOMESERVER_HOST_IP
      HOMESERVER_HOST_ISPRIVATE=$(checkDefaultRouteIPIsPrivateIP)
      updateConfigVar HOMESERVER_HOST_ISPRIVATE $HOMESERVER_HOST_ISPRIVATE
      setHomeServerPrivateRange
    fi
  done

  if [ "$HOMESERVER_HOST_ISPRIVATE" = "false" ]; then
    if [ -z $CONNECTING_IP ]; then
      echo "Could not determine connecting IP, exiting..."
      exit 1
    else
      addHomeNetIP ${CONNECTING_IP}/32 false
    fi
  fi
  set +e
  CURRENT_SSH_PORT=$(grep "^Port" /etc/ssh/sshd_config)
  if [ $? -eq 0 ]; then
    CURRENT_SSH_PORT=$(echo $CURRENT_SSH_PORT | cut -d " " -f2)
    if ! [ "$CURRENT_SSH_PORT" = "22" ]; then
      SSH_PORT=$CURRENT_SSH_PORT
      updateConfigVar SSH_PORT $SSH_PORT
    fi
  else
    CURRENT_SSH_PORT=22
    SSH_PORT=""
  fi
  updateConfigVar CURRENT_SSH_PORT $CURRENT_SSH_PORT
  set -e
  while [ -z "$SSH_PORT" ]
  do
    SSH_PORT=$(promptUserInputMenu $((9000 + $RANDOM % 999)) "Enter HomeServer SSH Port" "It is highly advised to change your default SSH port (22), since bots will constantly probe port 22. A random port between 9000-9999 has been generated for you. Ensure you remember this port in order to log back in.")
    if [ -z "$SSH_PORT" ]; then
      showMessageBox "SSH Port Empty" "The SSH port cannot be empty"
    else
      set +e
      checkAvailablePort $SSH_PORT
      if [ $? -ne 0 ]; then
        showMessageBox "Invalid Port" "The port is invalid. Please enter a valid and available port higher than 1024."
        SSH_PORT=""
      else
        updateConfigVar SSH_PORT $SSH_PORT
        # Change SSH port on host
        sudo sed -i "s|^#*Port .*$|Port ${SSH_PORT}|g" /etc/ssh/sshd_config
        sudo sed -i "s|^Port .*$|Port ${SSH_PORT}|g" /etc/ssh/sshd_config
      fi
      set -e
    fi
  done

  while [ -z "$LDAP_PRIMARY_USER_USERNAME" ]
  do
    LDAP_PRIMARY_USER_USERNAME=$(promptUserInputMenu $USERNAME "Enter First User" "Enter the username for your first HomeServer user account: ")
    if [ -z "$LDAP_PRIMARY_USER_USERNAME" ]; then
      showMessageBox "Username Empty" "The username cannot be empty"
    elif [ $(checkValidString "$LDAP_PRIMARY_USER_USERNAME") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The username contains invalid character(s). It must consist of a-z (lowercase) and/or 0-9"
      LDAP_PRIMARY_USER_USERNAME=""
    else
      updateConfigVar LDAP_PRIMARY_USER_USERNAME $LDAP_PRIMARY_USER_USERNAME
      LDAP_PRIMARY_USER_EMAIL_ADDRESS=$LDAP_PRIMARY_USER_USERNAME@$HOMESERVER_DOMAIN
      updateConfigVar LDAP_PRIMARY_USER_EMAIL_ADDRESS $LDAP_PRIMARY_USER_EMAIL_ADDRESS
    fi
  done

  if [ -z "$LDAP_PRIMARY_USER_PASSWORD_HASH" ]; then
    tmp_pw1=""
    tmp_pw2=""
    set +e
    while [ -z "$tmp_pw1" ] || ! [ "$tmp_pw1" = "$tmp_pw2" ]
    do
      tmp_pw1=$(promptPasswordMenu "Enter Password" "Enter the password for your HomeServer user ($LDAP_PRIMARY_USER_USERNAME) account: ")
      if [ $? -ne 0 ]; then exit; fi
      if [ -z "$tmp_pw1" ]; then
        showMessageBox "Password Empty" "The password cannot be empty, please try again."
      fi
      tmp_pw2=$(promptPasswordMenu "Confirm Password" "Enter the password again to confirm: ")
      if [ $? -ne 0 ]; then exit; fi
      if ! [ "$tmp_pw1" = "$tmp_pw2" ]; then
        showMessageBox "Password Mismatch" "The passwords do not match, please try again."
      fi
    done
    LDAP_PRIMARY_USER_PASSWORD_HASH=$(openssl passwd -6 $tmp_pw1)
    updateConfigVar LDAP_PRIMARY_USER_PASSWORD_HASH $LDAP_PRIMARY_USER_PASSWORD_HASH
    tmp_pw1=""
    tmp_pw2=""
    set -e
  fi

  while [ -z "$PORTAINER_LOCAL_HTTPS_PORT" ] || [ "$PORTAINER_LOCAL_HTTPS_PORT" = "$SSH_PORT" ]
  do
    tmp_port=$((9000 + $RANDOM % 999))
    while [ "$tmp_port" = "$SSH_PORT" ]
    do
      tmp_port=$((9000 + $RANDOM % 999))
    done
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      PORTAINER_LOCAL_HTTPS_PORT=$tmp_port
    else
      PORTAINER_LOCAL_HTTPS_PORT=$(promptUserInputMenu $tmp_port "Enter Local Portainer Port" "Enter a local port to use for portainer. A random port between 9000-9999 has been generated for you.")
      if [ -z "$PORTAINER_LOCAL_HTTPS_PORT" ] || [ "$PORTAINER_LOCAL_HTTPS_PORT" = "$SSH_PORT" ]; then
        showMessageBox "Portainer Port Error" "The port cannot be empty or the same as the SSH port"
      elif [ "$(checkValidNumber $PORTAINER_LOCAL_HTTPS_PORT '-')" = "false" ]; then
        showMessageBox "Invalid Character(s)" "The port contains invalid character(s). It must consist of 0-9"
        PORTAINER_LOCAL_HTTPS_PORT=""
      fi
      set +e
      if ! [ -z "$PORTAINER_LOCAL_HTTPS_PORT" ]; then
        checkAvailablePort $PORTAINER_LOCAL_HTTPS_PORT
        if [ $? -ne 0 ]; then
          showMessageBox "Invalid Port" "The port is invalid. Please enter a valid and available port higher than 1024."
          PORTAINER_LOCAL_HTTPS_PORT=""
        fi
      fi
      set -e
    fi
    updateConfigVar PORTAINER_LOCAL_HTTPS_PORT $PORTAINER_LOCAL_HTTPS_PORT
  done
  while [ -z "$ADMIN_USERNAME_BASE" ] || [ "$ADMIN_USERNAME_BASE" = "admin" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      ADMIN_USERNAME_BASE=$HOMESERVER_ABBREV"admin"
    else
      ADMIN_USERNAME_BASE=$(promptUserInputMenu $HOMESERVER_ABBREV"admin" "Enter Admin Base" "Enter the base admin username (it cannot be \"admin\"): ")
    fi
    if [ $(checkValidString "$ADMIN_USERNAME_BASE") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The username contains invalid character(s). It must consist of a-z (lowercase) and/or 0-9"
      ADMIN_USERNAME_BASE=""
    fi
    updateConfigVar ADMIN_USERNAME_BASE $ADMIN_USERNAME_BASE
  done

  if [[ "$(isProgramInstalled pwgen)" = "false" ]]; then
    echo "Installing pwgen, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y pwgen > /dev/null 2>&1
  fi

  while [ -z "$EMAIL_ADMIN_USERNAME" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      EMAIL_ADMIN_USERNAME="mailmanager"
    else
      EMAIL_ADMIN_USERNAME=$(promptUserInputMenu "mailmanager" "Enter Admin Email" "Enter the admin email username: ")
    fi
    if [ $(checkValidString "$EMAIL_ADMIN_USERNAME") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The username contains invalid character(s). It must consist of a-z (lowercase) and/or 0-9"
      EMAIL_ADMIN_USERNAME=""
    fi
    updateConfigVar EMAIL_ADMIN_USERNAME $EMAIL_ADMIN_USERNAME
  done
  if [ -z "$DESKTOP_ENV" ]; then
    set +e
    guimenu=$(cat << EOF

$hshqlogo

Do you want to install a desktop GUI environment for this machine? This is generally not recommended, as this machine should be used as a dedicated server. However, it can be used this way if necessary. Ensure you have plenty of RAM (32GB) for this option. This can easily be added or removed later.
EOF
  )
    whiptail --title "Install Desktop GUI" --yesno "$guimenu" $MENU_HEIGHT $MENU_WIDTH --yes-button "No" --no-button "Yes"
    mbres=$?
    if [ $mbres -eq 0 ]; then
      DESKTOP_ENV="na"
      updateConfigVar DESKTOP_ENV $DESKTOP_ENV
    else
      desktopmenu=$(cat << EOF

$hshqlogo

EOF
)
     menures=$(whiptail --title "Select Desktop Environment" --menu "$desktopmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
      "1" "No Desktop Environment" \
      "2" "Gnome" \
      "3" "KDE" 3>&1 1>&2 2>&3)
      if [ $? -ne 0 ]; then
        menures=1
      fi
      set -e
      case $menures in
        1)
          DESKTOP_ENV="na" ;;
        2)
          DESKTOP_ENV="gnome" ;;
        3)
          DESKTOP_ENV="kde" ;;
      esac
      updateConfigVar DESKTOP_ENV $DESKTOP_ENV
      set -e
    fi
  fi
  initServicesCredentials
}

function initInstallation()
{
  if [[ "$(isProgramInstalled screen)" = "false" ]]; then
    echo "Installing screen, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y screen > /dev/null 2>&1
  fi
  if [[ "$(isProgramInstalled nano)" = "false" ]]; then
    echo "Installing nano, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y nano > /dev/null 2>&1
  fi
  # Show info to user and prompt for confirmation
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    rs_wg_user_conf=$(sudo cat $HSHQ_WIREGUARD_DIR/users/${RELAYSERVER_WG_VPN_NETNAME}-user1.conf)
  fi
  clear
  strInstallConfig=""
  strInstallConfig="${strInstallConfig}#######################################################\n"
  strInstallConfig="${strInstallConfig}===================== General Info ====================\n"
  strInstallConfig="${strInstallConfig}- Root CA URL: http://$SUB_FILES.$HOMESERVER_DOMAIN/ca.crt\n"
  strInstallConfig="${strInstallConfig}- Home Page: https://home.$HOMESERVER_DOMAIN\n"
  strInstallConfig="${strInstallConfig}- Email Admin Username: $EMAIL_ADMIN_EMAIL_ADDRESS\n"
  strInstallConfig="${strInstallConfig}- Email Admin Password: $EMAIL_ADMIN_PASSWORD\n"
  strInstallConfig="${strInstallConfig}- HomeServer Current SSH Port: $CURRENT_SSH_PORT\n"
  strInstallConfig="${strInstallConfig}- HomeServer New SSH Port: $SSH_PORT\n"
  strInstallConfig="${strInstallConfig}- HomeServer Portainer IP URL: https://$HOMESERVER_HOST_IP:$PORTAINER_LOCAL_HTTPS_PORT\n"
  strInstallConfig="${strInstallConfig}- HomeServer Portainer Username: $PORTAINER_ADMIN_USERNAME\n"
  strInstallConfig="${strInstallConfig}- HomeServer Portainer Password: $PORTAINER_ADMIN_PASSWORD\n"
  strInstallConfig="${strInstallConfig}- Script-server URL: https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN\n"
  strInstallConfig="${strInstallConfig}- Script-server IP URL: https://$HOMESERVER_HOST_IP:$SCRIPTSERVER_LOCALHOST_PORT\n"
  strInstallConfig="${strInstallConfig}- Script-server Username: $SCRIPTSERVER_ADMIN_USERNAME\n"
  strInstallConfig="${strInstallConfig}- Script-server Password: $SCRIPTSERVER_ADMIN_PASSWORD\n"
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    strInstallConfig="${strInstallConfig}- RelayServer IP Address: $RELAYSERVER_SERVER_IP\n"
    strInstallConfig="${strInstallConfig}- RelayServer Host Current SSH Port: $RELAYSERVER_CURRENT_SSH_PORT\n"
    strInstallConfig="${strInstallConfig}- RelayServer Host New SSH Port: $RELAYSERVER_SSH_PORT\n"
    strInstallConfig="${strInstallConfig}- RelayServer Host Username: $RELAYSERVER_REMOTE_USERNAME\n"
  fi
  strInstallConfig="${strInstallConfig}=======================================================\n\n"
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    strInstallConfig="${strInstallConfig}$(getDNSRecordsInfo $HOMESERVER_DOMAIN)\n\n"
  fi
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    strInstallConfig="${strInstallConfig}============= User WireGuard Configuration ============\n"
    strInstallConfig="${strInstallConfig}""""$rs_wg_user_conf""""\n"
    strInstallConfig="${strInstallConfig}=======================================================\n\n"
  fi
  #strInstallConfig="${strInstallConfig}======================= Root CA =======================\n"
  #strInstallConfig="${strInstallConfig}""""$(cat "$HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt")""""\n"
  #strInstallConfig="${strInstallConfig}=======================================================\n"
  strInstallConfig="${strInstallConfig}#######################################################\n\n"
  strInstallConfig="${strInstallConfig}The system is prepped for installation. It will take around\n"
  strInstallConfig="${strInstallConfig}15 minutes to perform the base installation, depending on\n"
  strInstallConfig="${strInstallConfig}hardward specs and download speeds. Copy the above info\n"
  strInstallConfig="${strInstallConfig}before proceeding. (Ensure to scroll up and retain everything\n"
  strInstallConfig="${strInstallConfig}between the ##### borders)\n\n"
  strInstallConfig="${strInstallConfig}The process will run continuously uninterrupted in a 'screen'\n"
  strInstallConfig="${strInstallConfig}If you lose connection, then enter 'screen -r hshqInstall' to\n"
  strInstallConfig="${strInstallConfig}resume the screen if you want to continue to view the process.\n"
  strInstallConfig="${strInstallConfig}To exit the screen, press CTRL-a, then release both keys,\n"
  strInstallConfig="${strInstallConfig}then press d to detach.\n\n"
  strInstallConfig="${strInstallConfig}The system will automatically reboot upon completion.\n\n"
  strInstallConfig="${strInstallConfig}If you want to completely remove everything, run the utility\n"
  strInstallConfig="${strInstallConfig}inside this script (System Utils -> Uninstall and Remove\n"
  strInstallConfig="${strInstallConfig}Everything) and follow the prompts.\n\n"
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    strInstallConfig="${strInstallConfig}The installation must also be performed on your RelayServer.\n"
    strInstallConfig="${strInstallConfig}You have the option of initiating the installation of your\n"
    strInstallConfig="${strInstallConfig}RelayServer directly within this session or creating a new\n"
    strInstallConfig="${strInstallConfig}SSH session to start and monitor the process. If a separate\n"
    strInstallConfig="${strInstallConfig}session, you will need to log into your RelayServer as your\n"
    strInstallConfig="${strInstallConfig}new user ($RELAYSERVER_REMOTE_USERNAME) and initiate the installation process by\n"
    strInstallConfig="${strInstallConfig}entering: 'bash $RS_INSTALL_FRESH_SCRIPT_NAME'. The installation script has already\n"
    strInstallConfig="${strInstallConfig}been transferred to your RelayServer in the user's home\n"
    strInstallConfig="${strInstallConfig}directory (/home/$RELAYSERVER_REMOTE_USERNAME). Start the installation on your\n"
    strInstallConfig="${strInstallConfig}RelayServer first before starting the installation here."
  fi
  #rm -f $HSHQ_INSTALL_CFG
  #echo -e "$strInstallConfig" > $HSHQ_INSTALL_CFG
  #chmod 0400 $HSHQ_INSTALL_CFG
  echo -e "${strInstallConfig}"
  isRelayInstallInit=false
  while true;
  do
    if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] && [ "$isRelayInstallInit" = "false" ]; then
      echo -e "\nIf you want to initiate the installation on your RelayServer"
      echo -e "directly within this session, enter 'relay' below and follow"
      echo -e "the subsequent instructions. Enter 'install' to perform the"
      echo -e "HomeServer installation."
      echo -e "________________________________________________________________________"
      read -p "After reading/copying the above section, enter 'relay', 'install', or 'exit': " is_install
    else
      echo -e "________________________________________________________________________"
      read -p "After reading/copying the above section, enter 'install' or 'exit': " is_install
    fi
    if [ "$is_install" = "exit" ]; then
      echo "Exiting..."
      closeHSHQScript
      exit 1
    fi
    if [ "$is_install" = "install" ]; then
      break
    elif [ "$is_install" = "relay" ] && [ "$isRelayInstallInit" = "false" ]; then
      echo -e "________________________________________________________________________"
      echo -e "\n\nYou will now be logged in to your RelayServer to initiate"
      echo -e "that part of the installation. If the 'screen' utility needs to"
      echo -e "installed, then it will be installed first. After that, the screen"
      echo -e "will clear and you will be provided with instructions and prompted"
      echo -e "for your password. Once the installation process starts, and you"
      echo -e "have followed the instructions to detach from the screen, you will"
      echo -e "be returned back to your HomeServer session so that you can"
      echo -e "start the installation here.\n\n"
      read -p "Press enter to continue."
      loadSSHKey
      ssh -p $RELAYSERVER_CURRENT_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP "bash install.sh"
      isRelayInstallInit=true
      unloadSSHKey
      echo -e "\n\n\n________________________________________________________________________\n"
      echo -e "You're back!"
      echo -e "If the installation process on your RelayServer has been properly"
      echo -e "initiated, then you can proceed with HomeServer installation.\n"
      continue
    else
      echo "Unknown response, please try again."
    fi
  done
  set -e
  sudo -v
  screen -L -Logfile $HSHQ_BASE_DIR/$HSHQ_FULL_LOG_NAME -S hshqInstall bash $0 install $CONNECTING_IP
  exit 0
}

function setSudoTimeoutInstall()
{
  sudo tee $HOME/$SUDO_LONG_TIMEOUT_FILENAME >/dev/null <<EOFSU
Defaults timestamp_timeout=$SUDO_LONG_TIMEOUT
EOFSU
  sudo chmod 0600 $HOME/$SUDO_LONG_TIMEOUT_FILENAME
  sudo mv $HOME/$SUDO_LONG_TIMEOUT_FILENAME /etc/sudoers.d/
}

function removeSudoTimeoutInstall()
{
  sudo rm -f /etc/sudoers.d/$SUDO_LONG_TIMEOUT_FILENAME
}

function performBaseInstallation()
{
  if [ "$IS_INSTALLED" = "true" ] || [ "$IS_INSTALLING" = "true" ]; then
    echo "Already installed or existing installation is in progress, exiting..."
    exit 1
  fi
  IS_INSTALLING=true
  updateConfigVar IS_INSTALLING $IS_INSTALLING
  set -e
  setSudoTimeoutInstall
  sudo DEBIAN_FRONTEND=noninteractive apt update && sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y && sudo DEBIAN_FRONTEND=noninteractive apt autoremove -y
  echo "Setting static IP..."
  setStaticIPToCurrent
  echo "Setting MOTD..."
  updateMOTD
  performSuggestedSecUpdates
  installLogNotify "Install Dependencies"
  installDependencies
  pullBaseServicesDockerImages
  installLogNotify "Init DH Params"
  initDHParams
  getUpdateAssets
  installLogNotify "Starting Stack Installs"
  installBaseStacks
  set +e
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
      installLogNotify "Configure Docker WireGuard Network"
      connectPrimaryInternet
	  outputBootScripts
    elif [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
      dns_file=$HOME/dns.tmp
      if [ -f $dns_file ]; then
        docker container stop heimdall >/dev/null
        updateHomeServerDNS $dns_file
        rm -f $dns_file
        docker container start heimdall >/dev/null
      fi
    fi
    installLogNotify "Connect Services To VPN"
    connectPrimaryVPN
    echo "Waiting 30s for services to initialize..."
    sleep 30
  fi
  initCronJobs
  clearQueryLogAndStatsAdguardHS
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    clearQueryLogAndStatsAdguardRS
  fi
  installLogNotify "Post Installation"
  removeSudoTimeoutInstall
  postInstallation
}

function postInstallation()
{
  sudo -v
  echo "Performing post-installation tasks..."
  # No reason to send this. It becomes a security risk if left in the mailbox
  #mail_msg=""
  #mail_msg=${mail_msg}"Below is a copy of your configuration file:\n\n"
  #mail_msg=${mail_msg}"""$(tail -n +10 $HSHQ_CONFIG_DIR/${CONFIG_FILE_DEFAULT_FILENAME})"""
  #sendEmail -s "Configuration File" -b "$mail_msg" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>" -t $EMAIL_ADMIN_EMAIL_ADDRESS
  echo "Emailing Root CA..."
  sendRootCAEmail true
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    #echo "Emailing DNS Info..."
    #sendEmail -s "DNS Info for $HOMESERVER_DOMAIN" -b "$(getDNSRecordsInfo $HOMESERVER_DOMAIN)"
    echo ""
  fi
  sleep 5
  # Need to wait until emails have been sent before changing permissions.
  sudo chmod 750 /usr/bin/mail.mailutils
  echo "Sanitizing installation log..."
  sanitizeFullLog
  echo "Installed"
  IS_INSTALLED=true
  updateConfigVar IS_INSTALLED $IS_INSTALLED
  IS_INSTALLING=false
  updateConfigVar IS_INSTALLING $IS_INSTALLING
  encryptConfigFile
  echo -e "\n\n\n\n########################################\n\n"
  echo "HomeServer Installation Complete!"
  echo "The system will automatically reboot in 60 seconds..."
  echo -e "\n\n########################################\n\n"
  sleep 60
  installLogNotify "Rebooting"
  sudo reboot
}

function sanitizeFullLog()
{
  sed -i "s|$USERNAME|hshquser|g" $HSHQ_BASE_DIR/$HSHQ_FULL_LOG_NAME
  sed -i "s|$LDAP_PRIMARY_USER_USERNAME|hshquser|g" $HSHQ_BASE_DIR/$HSHQ_FULL_LOG_NAME
  sed -i "s|$LDAP_ADMIN_USER_USERNAME|hshqadmin|g" $HSHQ_BASE_DIR/$HSHQ_FULL_LOG_NAME
  sed -i "s|$HOMESERVER_DOMAIN|hshqexample.com|g" $HSHQ_BASE_DIR/$HSHQ_FULL_LOG_NAME
}

function installLogNotify()
{
  log_message=$1
  if [ "$IS_INSTALLING" = "true" ]; then
    echo $(date)" - $log_message" >> ${HSHQ_BASE_DIR}/${HSHQ_TIMESTAMP_LOG_NAME}
  fi
}

# Stacks Functions
function showStacksMenu()
{
  set +e
  if ! [ "$IS_INSTALLED" = "true" ]; then
    showMessageBox "System Not Installed" "You must perform a system installation first before using this utility."
    exit
  fi
  svcsmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$svcsmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Install Service(s) From List" \
  "2" "Install All Available Services" \
  "3" "Update Service(s) From List" \
  "4" "Update All Available Services" \
  "5" "Remove Service(s) From List" \
  "6" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    0)
	  return 0 ;;
    1)
      installStacksFromList
      set +e
      return 1 ;;
    2)
      installAllAvailableStacks true
      set +e
      return 1 ;;
    3)
      performStackUpdatesFromList
      set +e
      return 1 ;;
    4)
      performAllAvailableStackUpdates true
      set +e
      return 1 ;;
    5)
      deleteStacksFromList
      set +e
      return 1 ;;
    6)
	  return 0 ;;
  esac
}

function installStacksFromList()
{
  set +e
  sortedStackList=$(sortCSVList $HSHQ_OPTIONAL_STACKS)
  stackListArr=($(echo $sortedStackList | tr "," "\n"))
  menu_items=""
  for curStack in "${stackListArr[@]}"
  do
    if ! [ -d $HSHQ_STACKS_DIR/$curStack ]; then
      menu_items=${menu_items}"$curStack | OFF "
    fi
  done
  if [ -z "$menu_items" ]; then
    showMessageBox "No Available Services" "There are no available services to install."
    return
  fi
  selsvcsmenu=$(cat << EOF

$hshqlogo

Select the services that you wish to install:
EOF
  )
  sel_svcs=($(whiptail --title "Select Services" --checklist "$selsvcsmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  if [ -z $sel_svcs ]; then
    showMessageBox "Empty Selection" "You have not selected anything, returning to main menu..."
    return 0
  fi
  showYesNoMessageBox "Perform Integration?" "Do you want to automatically integrate these services, i.e. within Caddy, Heimdall, UptimeKuma, etc.?"
  if [ $? -eq 0 ]; then
    is_integrate=true
  else
    is_integrate=false
  fi
  showYesNoMessageBox "Confirm Installation" "This selected service(s) will be installed, Continue?"
  if [ $? -ne 0 ]; then
    return
  fi
  setSudoTimeoutInstall
  getUpdateAssets
  for cur_svc in "${sel_svcs[@]}"
  do
    installStackByName ${cur_svc//\"} $is_integrate
  done
  removeSudoTimeoutInstall
  outputStackListsScriptServer
}

function installListOfServices()
{
  echo "Installing list of services, Start time: $(date '+%Y-%m-%d %H:%M:%S')"
  stackListArr=($(echo "$1" | tr "," "\n"))
  setSudoTimeoutInstall
  getUpdateAssets
  for curStack in "${stackListArr[@]}"
  do
    installStackByName $curStack true
  done
  sudo systemctl restart ntp
  docker container restart authelia > /dev/null 2>&1
  removeSudoTimeoutInstall
  outputStackListsScriptServer
  echo "Installing list of services, End time: $(date '+%Y-%m-%d %H:%M:%S')"
}

function installAllAvailableStacks()
{
  is_msgbox_prompt="$1"
  set +e
  stackListArr=($(echo $HSHQ_OPTIONAL_STACKS | tr "," "\n"))
  sel_svcs=()
  is_list_emtpy=true
  for curStack in "${stackListArr[@]}"
  do
    if ! [ -d $HSHQ_STACKS_DIR/$curStack ] && ! [ "$(isServiceDisabled $curStack)" = "true" ]; then
      sel_svcs+=($curStack)
      is_list_emtpy=false
    fi
  done
  if [ "$is_list_emtpy" = "true" ]; then
    if [ "$is_msgbox_prompt" = "true" ]; then
      showMessageBox "No Available Services" "There are no available services to install."
    fi
    return
  fi
  is_integrate=true
  if [ "$is_msgbox_prompt" = "true" ]; then
    showYesNoMessageBox "Perform Integration?" "Do you want to automatically integrate these services, i.e. within Caddy, Heimdall, UptimeKuma, etc.?"
    if [ $? -eq 0 ]; then
      is_integrate=true
    else
      is_integrate=false
    fi
    showYesNoMessageBox "Confirm Installation" "All available service(s) will be installed, Continue?"
    if [ $? -ne 0 ]; then
      return
    fi
  fi
  echo "Installing all services, Start time: $(date '+%Y-%m-%d %H:%M:%S')"
  setSudoTimeoutInstall
  getUpdateAssets
  for cur_svc in "${sel_svcs[@]}"
  do
    installStackByName $cur_svc $is_integrate
  done
  sudo systemctl restart ntp
  docker container restart authelia > /dev/null 2>&1
  removeSudoTimeoutInstall
  outputStackListsScriptServer
  echo "Installing all services, End time: $(date '+%Y-%m-%d %H:%M:%S')"
}

function getStacksToUpdate()
{
  set +e
  stacks_to_update_list=""
  # Special case for portainer compose
  check_stack_firstline=$(sudo sed -n 1p $HSHQ_STACKS_DIR/portainer/docker-compose.yml)
  if [ "$(checkStackHSHQManaged $check_stack_firstline)" = "true" ]; then
    check_stack_name=$(getStackNameFromComposeLine "$check_stack_firstline")
    if [ $? -eq 0 ]; then
      check_stack_version=$(getVersionFromComposeLine "$check_stack_firstline")
      if [ $? -eq 0 ]; then
        hshq_stack_ver=$(getScriptStackVersionNumber $(getScriptStackVersion $check_stack_name))
        if [ $? -eq 0 ]; then
          if [ $check_stack_version -lt $hshq_stack_ver ]; then
            stacks_to_update_list=${stacks_to_update_list}"${check_stack_name},"
          fi
        fi
      fi
    fi
  fi
  dirList=($(sudo ls $HSHQ_STACKS_DIR/portainer/compose/))
  for curDir in "${dirList[@]}"
  do
    check_stack_firstline=$(sudo sed -n 1p $HSHQ_STACKS_DIR/portainer/compose/$curDir/docker-compose.yml)
    if ! [ "$(checkStackHSHQManaged $check_stack_firstline)" = "true" ]; then
      continue
    fi
    check_stack_name=$(getStackNameFromComposeLine "$check_stack_firstline")
    if [ $? -ne 0 ]; then continue; fi
    check_stack_version=$(getVersionFromComposeLine "$check_stack_firstline")
    if [ $? -ne 0 ] || [ -z $check_stack_version ]; then continue; fi
    hshq_stack_ver=$(getScriptStackVersionNumber $(getScriptStackVersion $check_stack_name))
    if [ $? -ne 0 ] || [ -z $hshq_stack_ver ]; then continue; fi
    if [ $check_stack_version -lt $hshq_stack_ver ]; then
      stacks_to_update_list=${stacks_to_update_list}"${check_stack_name},"
    fi
    if [ $? -ne 0 ]; then continue; fi
  done
  if ! [ -z "$stacks_to_update_list" ]; then
    stacks_to_update_list=${stacks_to_update_list%?}
  fi
  sortCSVList "$stacks_to_update_list"
}

function performStackUpdatesFromList()
{
  set +e
  this_stack_list=$(getStacksToUpdate)
  stackListArr=($(echo $this_stack_list | tr "," "\n"))
  menu_items=""
  for curStack in "${stackListArr[@]}"
  do
    if [ -z "$curStack" ]; then
      continue
    fi
    menu_items=${menu_items}"$curStack | OFF "
  done
  if [ -z "$menu_items" ]; then
    showMessageBox "No Available Updates" "All services are updated."
    return
  fi
  selsvcsmenu=$(cat << EOF

$hshqlogo

Select the services that you wish to update:
EOF
  )
  sel_svcs=($(whiptail --title "Select Services" --checklist "$selsvcsmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  if [ -z $sel_svcs ]; then
    showMessageBox "Empty Selection" "You have not selected anything, returning to main menu..."
    return 0
  fi
  showYesNoMessageBox "Confirm Updates" "This selected service(s) will be updated, Continue?"
  if [ $? -ne 0 ]; then
    return
  fi
  update_list=""
  for cur_svc in "${sel_svcs[@]}"
  do
    update_list="${update_list}${cur_svc//\"},"
  done
  updateListOfStacks "$update_list"
}

function performAllAvailableStackUpdates()
{
  is_msgbox_prompt="$1"
  stacksToUpdate="$(getStacksToUpdate)"
  if [ -z "$stacksToUpdate" ]; then
    if [ "$is_msgbox_prompt" = "true" ]; then
      showMessageBox "No Available Updates" "All services are updated."
    else
      echo "All services are updated."
    fi
    return
  fi
  if [ "$is_msgbox_prompt" = "true" ]; then
    showYesNoMessageBox "Confirm Updates" "All available stacks will be updated, Continue?"
    if [ $? -ne 0 ]; then
      return
    fi
  fi
  updateListOfStacks "$stacksToUpdate"
}

function updateListOfStacks()
{
  echo "Updating list of services, Start time: $(date '+%Y-%m-%d %H:%M:%S')"
  stackListArr=($(echo "$1" | tr "," "\n"))
  stacks_need_update_list="$(getStacksToUpdate)"
  setSudoTimeoutInstall
  portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  report_start_time=$(date)
  full_update_report=""
  full_update_report="${full_update_report}                    Successful                    \n"
  full_update_report="${full_update_report}--------------------------------------------------"
  upgrade_error_report="\n\n"
  upgrade_error_report="${upgrade_error_report}                      Errors                      \n"
  upgrade_error_report="${upgrade_error_report}--------------------------------------------------"
  set +e
  for cur_svc in "${stackListArr[@]}"
  do
    if [ -z "$cur_svc" ]; then continue; fi
    unset is_upgrade_error
    echo -e "\n\nUpdating ${cur_svc}..."
    if ! [ "$(isItemInCSVList $cur_svc $stacks_need_update_list)" = "true" ]; then
      continue
    fi
    performUpdateStackByName "$cur_svc" "$portainerToken"
    if [ "$is_upgrade_error" = "true" ]; then
      upgrade_error_report="${upgrade_error_report}\n$perform_update_report\n"
    else
      full_update_report="${full_update_report}\n$perform_update_report"
    fi
  done
  full_update_report="${full_update_report}\n${upgrade_error_report}"
  removeSudoTimeoutInstall
  report_end_time=$(date)
  full_update_report_header=""
  full_update_report_header="${full_update_report_header}==================================================\n"
  full_update_report_header="${full_update_report_header}             Services Upgrade Report              \n"
  full_update_report_header="${full_update_report_header}==================================================\n"
  full_update_report_header="${full_update_report_header}Start Time: $report_start_time\n"
  full_update_report_header="${full_update_report_header}  End Time: $report_end_time\n\n"
  sendEmail -s "Services Upgrade Report" -b "${full_update_report_header}$full_update_report" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>" -t $EMAIL_ADMIN_EMAIL_ADDRESS
  echo "Sending update results to email manager ($EMAIL_ADMIN_EMAIL_ADDRESS). Refer to this for further details."
  outputStackListsScriptServer
  echo "Updating list of services, End time: $(date '+%Y-%m-%d %H:%M:%S')"
}

function deleteStacksFromList()
{
  sortedStackList=$(sortCSVList $HSHQ_OPTIONAL_STACKS)
  stackListArr=($(echo $sortedStackList | tr "," "\n"))
  menu_items=""
  for curStack in "${stackListArr[@]}"
  do
    if [ -d $HSHQ_STACKS_DIR/$curStack ]; then
      menu_items=${menu_items}"$curStack | OFF "
    fi
  done
  if [ -z "$menu_items" ]; then
    showMessageBox "No Available Services" "There are no available services to remove."
    return
  fi
  selsvcsmenu=$(cat << EOF

$hshqlogo

Select the services that you wish to remove:
EOF
  )
  sel_svcs=($(whiptail --title "Select Services" --checklist "$selsvcsmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  if [ -z $sel_svcs ]; then
    showMessageBox "Empty Selection" "You have not selected anything, returning to main menu..."
    return 0
  fi
  showYesNoMessageBox "Confirm Installation" "This selected service(s) will be removed, Continue?"
  if [ $? -ne 0 ]; then
    return
  fi
  del_stack_list=""
  for svc in "${sel_svcs[@]}"
  do
    del_stack_list="${del_stack_list}${svc//\"},"
    cur_svc=${svc//\"}
  done
  ENABLE_STACK_DELETE=true
  deleteListOfStacks false "$del_stack_list"
  ENABLE_STACK_DELETE=false
}

function deleteListOfStacks()
{
  is_force_delete_stack="$1"
  stackListArr=($(echo "$2" | tr "," "\n"))
  setSudoTimeoutInstall
  docker container stop uptimekuma >/dev/null
  docker container stop heimdall >/dev/null
  for cur_stack in "${stackListArr[@]}"
  do
    checkDeleteStackAndDirectory $cur_stack $cur_stack true "$is_force_delete_stack"
    for curSVC in "${SVCS_ARR[@]}"
    do
      cur_stack_name=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f1)
      if [ "${cur_stack_name//\"}" = "$cur_stack" ]; then
        user_type=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f4)
        subdom=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f6)
        disableSvcAll "${user_type//\"}" "https://${subdom//\"}.$HOMESERVER_DOMAIN" false
      fi
    done
  done
  docker container start uptimekuma >/dev/null
  docker container start heimdall >/dev/null
  removeSudoTimeoutInstall
  restartAllCaddyContainers
  outputStackListsScriptServer
}

# VPN Setup
function setupVPNConnection()
{
  if [[ "$(isProgramInstalled wg)" = "false" ]]; then
    echo "Installing WireGuard utils, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y wireguard-tools > /dev/null 2>&1
  fi
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "none" ]; then
    initWireGuardDB
    vpnmenu=$(cat << EOF

$hshqlogo

EOF
)
    menures=$(whiptail --title "Select an option for your PRIMARY VPN connection" --menu "$vpnmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
    "1" "Host a VPN" \
    "2" "Setup Later" 3>&1 1>&2 2>&3)

    case $menures in
      1)
        PRIMARY_VPN_SETUP_TYPE=host
        setupHostedVPN
        if [ $? -ne 0 ]; then
          return 1
        fi
        ;;
      #2)
      #  setupJoinPrimaryVPN
      #  join_res=$?
      #  if [ $join_res -ne 0 ]; then
      #    return 1
      #  fi
      #  ;;
      2)
        PRIMARY_VPN_SETUP_TYPE=manual
        ;;
    esac
    updateConfigVar PRIMARY_VPN_SETUP_TYPE $PRIMARY_VPN_SETUP_TYPE
  fi
}

function resetRSInit()
{
  RELAYSERVER_IS_INIT=false
  updateConfigVar RELAYSERVER_IS_INIT $RELAYSERVER_IS_INIT
}

function setupJoinPrimaryVPN()
{
  vpnmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$vpnmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
    "1" "Generate Join Application" \
    "2" "Submit Join Configuration" \
    "3" "Exit" 3>&1 1>&2 2>&3)

  case $menures in
    1)
      applyHomeServerPrimaryVPNConfig
      closeHSHQScript
      return 1 ;;
    2)
      createNetworkJoin false
      if [ $? -ne 0 ]; then
        return 1
      fi
      PRIMARY_VPN_SETUP_TYPE=join
      updateConfigVar PRIMARY_VPN_SETUP_TYPE $PRIMARY_VPN_SETUP_TYPE ;;
    3)
      return 1 ;;
  esac
}

function setupHostedVPN()
{
  if [[ "$(isProgramInstalled dig)" = "false" ]]; then
    echo "Installing dig, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y dnsutils > /dev/null 2>&1
  fi
  if [[ "$(isProgramInstalled sshpass)" = "false" ]]; then
    echo "Installing sshpass, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y sshpass > /dev/null 2>&1
  fi
  if [[ "$(isProgramInstalled sipcalc)" = "false" ]]; then
    echo "Installing sipcalc, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y sipcalc > /dev/null 2>&1
  fi
  if [[ "$(isProgramInstalled jq)" = "false" ]]; then
    echo "Installing jq, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y jq > /dev/null 2>&1
  fi

  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$RELAYSERVER_IS_INIT" = "true" ]; then
    echo "setupHostedVPN - RelayServer is initialized, PRIMARY_VPN_SETUP_TYPE=$PRIMARY_VPN_SETUP_TYPE, RELAYSERVER_IS_INIT=$RELAYSERVER_IS_INIT"
    return 0
  fi
  sleep_interval_after_api_request=5
  sleep_interval_after_create_stack=5
  resetRelayServerData

  if [ -z $RELAYSERVER_WG_VPN_NETNAME ]; then
    RELAYSERVER_WG_VPN_NETNAME=${HOMESERVER_ABBREV:0:6}"-vpn"
    curNum=1
    while [ "$(checkInterfaceNameExists $RELAYSERVER_WG_VPN_NETNAME)" = "true" ] && [ $curNum -lt 100 ]
    do
      RELAYSERVER_WG_VPN_NETNAME=${HOMESERVER_ABBREV:0:5}"${curNum}-vpn"
      ((curNum++))
    done
    if [ "$(checkInterfaceNameExists $RELAYSERVER_WG_VPN_NETNAME)" = "true" ]; then
      showMessageBox "Too Many Connections" "You have 99 other connections that start with ${HOMESERVER_ABBREV:0:5}?!?"
      return 1
    fi
    updateConfigVar RELAYSERVER_WG_VPN_NETNAME "$RELAYSERVER_WG_VPN_NETNAME"
  fi

  if [ -z $RELAYSERVER_WG_INTERNET_NETNAME ]; then
    RELAYSERVER_WG_INTERNET_NETNAME=${HOMESERVER_ABBREV:0:6}"-ext"
    curNum=1
    while [ "$(checkInterfaceNameExists $RELAYSERVER_WG_INTERNET_NETNAME)" = "true" ] && [ $curNum -lt 100 ]
    do
      RELAYSERVER_WG_INTERNET_NETNAME=${HOMESERVER_ABBREV:0:5}"${curNum}-ext"
      ((curNum++))
    done
    if [ "$(checkInterfaceNameExists $RELAYSERVER_WG_INTERNET_NETNAME)" = "true" ]; then
      showMessageBox "Too Many Connections" "You have 99 other connections that start with ${HOMESERVER_ABBREV:0:5}?!?"
      return 1
    fi
    updateConfigVar RELAYSERVER_WG_INTERNET_NETNAME "$RELAYSERVER_WG_INTERNET_NETNAME"
  fi

  if [ -z "$IS_ACCEPT_DEFAULTS" ]; then
    set +e
    showYesNoMessageBox "Accept Defaults?" "Do you wish to use defaults where applicable?"
    mbres=$?
    if [ $mbres -eq 0 ]; then
      IS_ACCEPT_DEFAULTS=yes
    else
      IS_ACCEPT_DEFAULTS=no
    fi
    set -e
  fi
  set -e

  RELAYSERVER_EXT_EMAIL_HOSTNAME=$SUB_POSTFIX.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN
  updateConfigVar RELAYSERVER_EXT_EMAIL_HOSTNAME $RELAYSERVER_EXT_EMAIL_HOSTNAME

  RELAYSERVER_SSH_PORT=""
  while [ -z "$RELAYSERVER_SSH_PORT" ]
  do
	RELAYSERVER_SSH_PORT=$(promptUserInputMenu "$SSH_PORT" "Enter NEW RelayServer SSH Port" "Enter your desired SSH Port for your RelayServer. It is highly advised to change your default SSH port (22). (Bots will constantly probe port 22)")
	if [ -z "$RELAYSERVER_SSH_PORT" ]; then
	  showMessageBox "SSH Port Empty" "The SSH port cannot be empty"
    elif [ "$(checkValidNumber $RELAYSERVER_SSH_PORT)" = "false" ]; then
      showMessageBox "Invalid Character(s)" "The port contains invalid character(s). It must consist of 0-9"
      RELAYSERVER_SSH_PORT=""
	else
	  updateConfigVar RELAYSERVER_SSH_PORT $RELAYSERVER_SSH_PORT
	fi
    resetRSInit
  done
  RELAYSERVER_NAME=""
  while [ -z "$RELAYSERVER_NAME" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      RELAYSERVER_NAME="$HOMESERVER_NAME RelayServer"
    else
      RELAYSERVER_NAME=$(promptUserInputMenu "$HOMESERVER_NAME RelayServer" "Enter RelayServer Name" "Enter the RelayServer Name:")
    fi
	if [ -z "$RELAYSERVER_NAME" ]; then
	  showMessageBox "RelayServer Name Empty" "The RelayServer Name cannot be empty"
	else
	  updateConfigVar RELAYSERVER_NAME "$RELAYSERVER_NAME"
	fi
    resetRSInit
  done

  RELAYSERVER_LE_CERT_DOMAINS=unset
  while [ "$RELAYSERVER_LE_CERT_DOMAINS" = "unset" ]
  do
    lecert_def=$(getLetsEncryptCertsDefault)
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      RELAYSERVER_LE_CERT_DOMAINS="$lecert_def"
    else
      RELAYSERVER_LE_CERT_DOMAINS=$(promptUserInputMenu "$lecert_def" "Enter LE Cert Subdomains" "Enter the subdomains for which the certificates will be managed by LetsEncrypt (comma-separated):")
	  if [ $(checkValidString "$RELAYSERVER_LE_CERT_DOMAINS" ",.-") = "false" ]; then
        showMessageBox "Invalid Character(s)" "The domain list contains invalid character(s). It must consist of a-z (lowercase), 0-9, -, and/or ."
        RELAYSERVER_LE_CERT_DOMAINS=unset
	  fi
    fi
    resetRSInit
  done
  updateConfigVar RELAYSERVER_LE_CERT_DOMAINS $RELAYSERVER_LE_CERT_DOMAINS
  leCertsArr=($(echo $RELAYSERVER_LE_CERT_DOMAINS | tr "," "\n"))
  isReload=false
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from lecertdomains;"
  for leCert in "${leCertsArr[@]}"
  do
    sqlite3 $HSHQ_DB "insert or ignore into lecertdomains(Domain,BaseDomain) values('$leCert','$HOMESERVER_DOMAIN');"
    curBaseDomain=$(getBaseDomain $leCert)
    curSubDomain=$(getSubDomain $leCert)
    if [ "$curBaseDomain" = "$HOMESERVER_DOMAIN" ]; then
      for curSVC in "${SVCS_ARR[@]}"
      do
        var_base=$(echo $curSVC | cut -d"=" -f1 | cut -d"_" -f 2-)
        subdom=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f6)
        subdom="${subdom//\"}"
        if [ "$subdom" = "$curSubDomain" ]; then
          var_name="SVCD_"$var_base
          var_value=$(getConfigVar $var_name)
          var_valueArr=($(echo $var_value | tr "," "\n"))
          var_valueArr[6]=le
          printf -v new_value '%s,' "${var_valueArr[@]}"
          new_value=""$(echo "${new_value%,}")"\""
          updateConfigVar $var_name $new_value
          isReload=true
        fi
      done
    fi
  done
  if [ "$isReload" = "true" ]; then
    loadSvcVars
  fi
  resetRSInit
  num_tries=1
  max_tries=100
  RELAYSERVER_WG_VPN_SUBNET=""
  while [ -z "$RELAYSERVER_WG_VPN_SUBNET" ] && [ $num_tries -lt $max_tries ]
  do
    ((num_tries++))
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      RELAYSERVER_WG_VPN_SUBNET=10.$(( $RANDOM % 256 )).$(( $RANDOM % 256 )).0/24
    else
      RELAYSERVER_WG_VPN_SUBNET=$(promptUserInputMenu "10.$(( $RANDOM % 256 )).$(( $RANDOM % 256 )).0/24" "Enter Subnet" "Enter the VPN Hosting Subnet (in CIDR): ")
    fi
	if [ -z "$RELAYSERVER_WG_VPN_SUBNET" ] || [ "$(checkValidIPAddress $RELAYSERVER_WG_VPN_SUBNET)" = "false" ]; then
	  showMessageBox "Invalid Subnet" "The VPN Subnet is invalid."
      continue
	fi
    is_intersect="$(isNetworkIntersectOurNetworks $RELAYSERVER_WG_VPN_SUBNET false)"
    if ! [ -z "$is_intersect" ]; then
      if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then continue; fi
	  showMessageBox "Network Collision" "Network Collision: $is_intersect"
      continue
    fi
	updateConfigVar RELAYSERVER_WG_VPN_SUBNET $RELAYSERVER_WG_VPN_SUBNET
    resetRSInit
  done
  if [ -z "$RELAYSERVER_WG_VPN_SUBNET" ]; then
    # We tried...
    echo "ERROR: Could not allocate VPN network subnet."
    return 1
  fi

  if [ -z "$RELAYSERVER_PORTAINER_ADMIN_USERNAME" ]; then
    RELAYSERVER_PORTAINER_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_portainer"
    updateConfigVar RELAYSERVER_PORTAINER_ADMIN_USERNAME $RELAYSERVER_PORTAINER_ADMIN_USERNAME
  fi
  if [ -z "$RELAYSERVER_PORTAINER_ADMIN_PASSWORD" ]; then
    RELAYSERVER_PORTAINER_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_PORTAINER_ADMIN_PASSWORD $RELAYSERVER_PORTAINER_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT" ]; then
    RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT=$PORTAINER_LOCAL_HTTPS_PORT
    updateConfigVar RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT $RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT
  fi
  if [ -z "$RELAYSERVER_ADGUARD_ADMIN_USERNAME" ]; then
    RELAYSERVER_ADGUARD_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_adguard"
    updateConfigVar RELAYSERVER_ADGUARD_ADMIN_USERNAME $RELAYSERVER_ADGUARD_ADMIN_USERNAME
  fi
  if [ -z "$RELAYSERVER_ADGUARD_ADMIN_PASSWORD" ]; then
    RELAYSERVER_ADGUARD_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_ADGUARD_ADMIN_PASSWORD $RELAYSERVER_ADGUARD_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_CADDYDNS_ADMIN_USERNAME" ]; then
    RELAYSERVER_CADDYDNS_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_caddydns"
    updateConfigVar RELAYSERVER_CADDYDNS_ADMIN_USERNAME $RELAYSERVER_CADDYDNS_ADMIN_USERNAME
  fi
  if [ -z "$RELAYSERVER_CADDYDNS_ADMIN_PASSWORD" ]; then
    RELAYSERVER_CADDYDNS_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_CADDYDNS_ADMIN_PASSWORD $RELAYSERVER_CADDYDNS_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_WGPORTAL_ADMIN_USERNAME" ]; then
    RELAYSERVER_WGPORTAL_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_wgportal"
    updateConfigVar RELAYSERVER_WGPORTAL_ADMIN_USERNAME $RELAYSERVER_WGPORTAL_ADMIN_USERNAME
    RELAYSERVER_WGPORTAL_ADMIN_EMAIL=$RELAYSERVER_WGPORTAL_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar RELAYSERVER_WGPORTAL_ADMIN_EMAIL $RELAYSERVER_WGPORTAL_ADMIN_EMAIL
  fi
  if [ -z "$RELAYSERVER_WGPORTAL_ADMIN_PASSWORD" ]; then
    RELAYSERVER_WGPORTAL_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_WGPORTAL_ADMIN_PASSWORD $RELAYSERVER_WGPORTAL_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_CLIENTDNS_ADMIN_USERNAME" ]; then
    RELAYSERVER_CLIENTDNS_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_clientdns"
    updateConfigVar RELAYSERVER_CLIENTDNS_ADMIN_USERNAME $RELAYSERVER_CLIENTDNS_ADMIN_USERNAME
  fi
  if [ -z "$RELAYSERVER_CLIENTDNS_ADMIN_PASSWORD" ]; then
    RELAYSERVER_CLIENTDNS_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_CLIENTDNS_ADMIN_PASSWORD $RELAYSERVER_CLIENTDNS_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_RSPAMD_ADMIN_USERNAME" ]; then
    RELAYSERVER_RSPAMD_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_rspamd"
    updateConfigVar RELAYSERVER_RSPAMD_ADMIN_USERNAME $RELAYSERVER_RSPAMD_ADMIN_USERNAME
  fi
  if [ -z "$RELAYSERVER_RSPAMD_ADMIN_PASSWORD" ]; then
    RELAYSERVER_RSPAMD_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_RSPAMD_ADMIN_PASSWORD $RELAYSERVER_RSPAMD_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_FILEBROWSER_ADMIN_USERNAME" ]; then
    RELAYSERVER_FILEBROWSER_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_filebrowser"
    updateConfigVar RELAYSERVER_FILEBROWSER_ADMIN_USERNAME $RELAYSERVER_FILEBROWSER_ADMIN_USERNAME
  fi
  if [ -z "$RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD" ]; then
    RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD $RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_SYNCTHING_ADMIN_USERNAME" ]; then
    RELAYSERVER_SYNCTHING_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_rs_syncthing"
    updateConfigVar RELAYSERVER_SYNCTHING_ADMIN_USERNAME $RELAYSERVER_SYNCTHING_ADMIN_USERNAME
  fi
  if [ -z "$RELAYSERVER_SYNCTHING_ADMIN_PASSWORD" ]; then
    RELAYSERVER_SYNCTHING_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_SYNCTHING_ADMIN_PASSWORD $RELAYSERVER_SYNCTHING_ADMIN_PASSWORD
  fi
  if [ -z "$RELAYSERVER_SYNCTHING_API_KEY" ]; then
    RELAYSERVER_SYNCTHING_API_KEY=$(pwgen -c -n 32 1)
    updateConfigVar RELAYSERVER_SYNCTHING_API_KEY $RELAYSERVER_SYNCTHING_API_KEY
  fi
  if [ -z "$RELAYSERVER_SYNCTHING_FOLDER_ID" ]; then
    RELAYSERVER_SYNCTHING_FOLDER_ID=$(pwgen -c -n 5 1)-$(pwgen -c -n 5 1)
    updateConfigVar RELAYSERVER_SYNCTHING_FOLDER_ID $RELAYSERVER_SYNCTHING_FOLDER_ID
  fi
  RELAYSERVER_WG_SV_IP=$(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f2- | rev).$(($(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f1 | rev)))
  updateConfigVar RELAYSERVER_WG_SV_IP $RELAYSERVER_WG_SV_IP
  if [ -z "$RELAYSERVER_WG_SV_PRIVATEKEY" ]; then
    RELAYSERVER_WG_SV_PRIVATEKEY=$(wg genkey)
    updateConfigVar RELAYSERVER_WG_SV_PRIVATEKEY $RELAYSERVER_WG_SV_PRIVATEKEY
    RELAYSERVER_WG_SV_PUBLICKEY=$(echo $RELAYSERVER_WG_SV_PRIVATEKEY | wg pubkey)
    updateConfigVar RELAYSERVER_WG_SV_PUBLICKEY $RELAYSERVER_WG_SV_PUBLICKEY
  fi
  RELAYSERVER_WG_SV_PRESHAREDKEY=$(wg genpsk)
  updateConfigVar RELAYSERVER_WG_SV_PRESHAREDKEY $RELAYSERVER_WG_SV_PRESHAREDKEY
  RELAYSERVER_WG_SV_CLIENTDNS_IP=$(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f2- | rev).$(($(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f1 | rev)-1))
  updateConfigVar RELAYSERVER_WG_SV_CLIENTDNS_IP $RELAYSERVER_WG_SV_CLIENTDNS_IP
  RELAYSERVER_WG_SV_CLIENTDNS_PRIVATEKEY=$(wg genkey)
  updateConfigVar RELAYSERVER_WG_SV_CLIENTDNS_PRIVATEKEY $RELAYSERVER_WG_SV_CLIENTDNS_PRIVATEKEY
  RELAYSERVER_WG_SV_CLIENTDNS_PRESHAREDKEY=$(wg genpsk)
  updateConfigVar RELAYSERVER_WG_SV_CLIENTDNS_PRESHAREDKEY $RELAYSERVER_WG_SV_CLIENTDNS_PRESHAREDKEY
  RELAYSERVER_WG_SV_CLIENTDNS_PUBLICKEY=$(echo $RELAYSERVER_WG_SV_CLIENTDNS_PRIVATEKEY | wg pubkey)
  RELAYSERVER_WG_HS_IP=$(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f2- | rev).$(($(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f1 | rev)-2))
  updateConfigVar RELAYSERVER_WG_HS_IP $RELAYSERVER_WG_HS_IP
  RELAYSERVER_WG_HS_PRIVATEKEY=$(wg genkey)
  updateConfigVar RELAYSERVER_WG_HS_PRIVATEKEY $RELAYSERVER_WG_HS_PRIVATEKEY
  RELAYSERVER_WG_HS_PRESHAREDKEY=$(wg genpsk)
  updateConfigVar RELAYSERVER_WG_HS_PRESHAREDKEY $RELAYSERVER_WG_HS_PRESHAREDKEY
  RELAYSERVER_WG_HS_PUBLICKEY=$(echo $RELAYSERVER_WG_HS_PRIVATEKEY | wg pubkey)
  RELAYSERVER_WG_HS_CLIENTDNS_IP=$(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f2- | rev).$(($(sipcalc $RELAYSERVER_WG_VPN_SUBNET | grep "^Usable range" | rev | cut -d" " -f1 | cut -d"." -f1 | rev)-3))
  updateConfigVar RELAYSERVER_WG_HS_CLIENTDNS_IP $RELAYSERVER_WG_HS_CLIENTDNS_IP
  RELAYSERVER_WG_HS_CLIENTDNS_PRIVATEKEY=$(wg genkey)
  updateConfigVar RELAYSERVER_WG_HS_CLIENTDNS_PRIVATEKEY $RELAYSERVER_WG_HS_CLIENTDNS_PRIVATEKEY
  RELAYSERVER_WG_HS_CLIENTDNS_PRESHAREDKEY=$(wg genpsk)
  updateConfigVar RELAYSERVER_WG_HS_CLIENTDNS_PRESHAREDKEY $RELAYSERVER_WG_HS_CLIENTDNS_PRESHAREDKEY
  RELAYSERVER_WG_HS_CLIENTDNS_PUBLICKEY=$(echo $RELAYSERVER_WG_HS_CLIENTDNS_PRIVATEKEY | wg pubkey)
  RELAYSERVER_WG_INTERNET_HS_IP=$(getRandomWireGuardIP)
  RELAYSERVER_WG_INTERNET_HS_PRIVATEKEY=$(wg genkey)
  updateConfigVar RELAYSERVER_WG_INTERNET_HS_PRIVATEKEY $RELAYSERVER_WG_INTERNET_HS_PRIVATEKEY
  RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY=$(wg genpsk)
  updateConfigVar RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY $RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY
  RELAYSERVER_WG_INTERNET_HS_PUBLICKEY=$(echo $RELAYSERVER_WG_INTERNET_HS_PRIVATEKEY | wg pubkey)
  RELAYSERVER_WG_USER_IP=$(getRandomWireGuardIP)
  RELAYSERVER_WG_USER_PRIVATEKEY=$(wg genkey)
  RELAYSERVER_WG_USER_PRESHAREDKEY=$(wg genpsk)
  RELAYSERVER_WG_USER_PUBLICKEY=$(echo $RELAYSERVER_WG_USER_PRIVATEKEY | wg pubkey)
  SMTP_RELAY_HOST="[$SUB_POSTFIX.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN]:587"
  updateConfigVar SMTP_RELAY_HOST $SMTP_RELAY_HOST
  SMTP_RELAY_USERNAME=$HOMESERVER_DOMAIN
  updateConfigVar SMTP_RELAY_USERNAME $SMTP_RELAY_USERNAME
  SMTP_RELAY_PASSWORD=$(pwgen -c -n 32 1)
  updateConfigVar SMTP_RELAY_PASSWORD $SMTP_RELAY_PASSWORD

  sudo rm -f $HSHQ_WIREGUARD_DIR/vpn/${RELAYSERVER_WG_VPN_NETNAME}.conf
  sudo tee $HSHQ_WIREGUARD_DIR/vpn/${RELAYSERVER_WG_VPN_NETNAME}.conf >/dev/null <<EOFCF
[Interface]
PrivateKey = $RELAYSERVER_WG_HS_PRIVATEKEY
Address = ${RELAYSERVER_WG_HS_IP}/32
MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU

[Peer]
PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY
PresharedKey = $RELAYSERVER_WG_HS_PRESHAREDKEY
AllowedIPs = $RELAYSERVER_WG_VPN_SUBNET
Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT
PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE
EOFCF
  sudo chmod 0400 $HSHQ_WIREGUARD_DIR/vpn/${RELAYSERVER_WG_VPN_NETNAME}.conf
  sudo cp $HSHQ_WIREGUARD_DIR/vpn/${RELAYSERVER_WG_VPN_NETNAME}.conf /etc/wireguard/${RELAYSERVER_WG_VPN_NETNAME}.conf

  sudo rm -f $HSHQ_WIREGUARD_DIR/internet/${RELAYSERVER_WG_INTERNET_NETNAME}.conf
  tableid=$(getNextWGRoutingTableID)
  dockerNetworkName="dwg-${RELAYSERVER_WG_INTERNET_NETNAME}"
  sudo tee $HSHQ_WIREGUARD_DIR/internet/${RELAYSERVER_WG_INTERNET_NETNAME}.conf >/dev/null <<EOFCF
#NETNAME=$RELAYSERVER_WG_INTERNET_NETNAME
#ROUTING_TABLE_ID=$tableid
#DOCKER_NETWORK_NAME=$dockerNetworkName
#DOCKER_NETWORK_SUBNET=
#CLIENT_ADDRESS=${RELAYSERVER_WG_INTERNET_HS_IP}/32
#MTU=$RELAYSERVER_CLIENT_DEFAULT_MTU
#IS_ENABLED=true
#EXT_DOMAIN=$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN

[Interface]
PrivateKey = $RELAYSERVER_WG_INTERNET_HS_PRIVATEKEY

[Peer]
PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY
PresharedKey = $RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY
AllowedIPs = $(getAllowedPublicIPs)
Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT
PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE
EOFCF
  sudo chmod 0400 $HSHQ_WIREGUARD_DIR/internet/${RELAYSERVER_WG_INTERNET_NETNAME}.conf

  sudo tee $HSHQ_SCRIPTS_DIR/boot/bootscripts/20-restartWG.sh >/dev/null <<EOFPO
#!/bin/bash

systemctl restart wg-quick@${RELAYSERVER_WG_VPN_NETNAME}
$HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh $HSHQ_WIREGUARD_DIR/internet/${RELAYSERVER_WG_INTERNET_NETNAME}.conf restart

EOFPO
  sudo chmod 0500 $HSHQ_SCRIPTS_DIR/boot/bootscripts/20-restartWG.sh

  sudo rm -f $HSHQ_WIREGUARD_DIR/users/${RELAYSERVER_WG_VPN_NETNAME}-user1.conf
  sudo tee $HSHQ_WIREGUARD_DIR/users/${RELAYSERVER_WG_VPN_NETNAME}-user1.conf >/dev/null <<EOFCF
[Interface]
PrivateKey = $RELAYSERVER_WG_USER_PRIVATEKEY
Address = ${RELAYSERVER_WG_USER_IP}/32
MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU
# DNS Servers (Use only one at a time)
# Home Network DNS Server
DNS = $RELAYSERVER_WG_HS_CLIENTDNS_IP
# VPN DNS Server
#DNS = $RELAYSERVER_WG_SV_CLIENTDNS_IP

[Peer]
PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY
PresharedKey = $RELAYSERVER_WG_USER_PRESHAREDKEY
AllowedIPs = $(getAllowedPublicIPs $RELAYSERVER_WG_VPN_SUBNET)
Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT
PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE
EOFCF
  sudo chmod 0400 $HSHQ_WIREGUARD_DIR/users/${RELAYSERVER_WG_VPN_NETNAME}-user1.conf

  sudo rm -f $HSHQ_WIREGUARD_DIR/users/clientdns-user1.conf
  sudo tee $HSHQ_WIREGUARD_DIR/users/clientdns-user1.conf >/dev/null <<EOFCF
[Interface]
PrivateKey = $RELAYSERVER_WG_HS_CLIENTDNS_PRIVATEKEY
Address = ${RELAYSERVER_WG_HS_CLIENTDNS_IP}/32
MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU

[Peer]
PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY
PresharedKey = $RELAYSERVER_WG_HS_CLIENTDNS_PRESHAREDKEY
AllowedIPs = $RELAYSERVER_WG_VPN_SUBNET
Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT
PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE
EOFCF
  sudo chmod 0400 $HSHQ_WIREGUARD_DIR/users/clientdns-user1.conf
  outputRelayServerInstallSetupScript
  outputRelayServerInstallFreshScript
  outputRelayServerInstallTransferScript
  uploadVPNInstallScripts false
  if [ $? -ne 0 ]; then
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from lecertdomains;"
    return 1
  fi

  if [ "$IS_INSTALLED" = "true" ]; then
    startStopStack mailu stop
    sleep 5
    generateCert mail "$SMTP_HOSTNAME,$SUB_POSTFIX.$HOMESERVER_DOMAIN"
    startStopStack mailu start
    docker container stop heimdall > /dev/null 2>&1
    docker container stop uptimekuma > /dev/null 2>&1
    insertEnableSvcHeimdall adguard "${FMLNAME_ADGUARD}" relayserver "https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "adguardhome.png" false
    insertEnableSvcUptimeKuma adguard "${FMLNAME_ADGUARD}-RelayServer" relayserver "https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    insertEnableSvcHeimdall clientdns "${FMLNAME_CLIENTDNS}" relayserver "https://$SUB_CLIENTDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "dnsmasq.png" false
    checkInsertServiceHeimdall caddy-dns "${FMLNAME_CADDYDNS}" relayserver "https://$SUB_CADDYDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "dnsmasq.png" false 0
    insertEnableSvcHeimdall portainer "${FMLNAME_PORTAINER}" relayserver "https://$SUB_PORTAINER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "portainer.png" false
    insertEnableSvcUptimeKuma portainer "${FMLNAME_PORTAINER}-RelayServer" relayserver "https://$SUB_PORTAINER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    insertEnableSvcHeimdall rspamd "${FMLNAME_RSPAMD}" relayserver "https://$SUB_RSPAMD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "rspamd.png" false
    insertEnableSvcUptimeKuma rspamd "${FMLNAME_RSPAMD}-RelayServer" relayserver "https://$SUB_RSPAMD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    insertEnableSvcHeimdall syncthing "${FMLNAME_SYNCTHING}" relayserver "https://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "syncthing.png" false
    insertEnableSvcUptimeKuma syncthing "${FMLNAME_SYNCTHING}-RelayServer" relayserver "https://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    checkInsertServiceHeimdall wgportal "${FMLNAME_WGPORTAL}" relayserver "https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "wgportal.png" false 0
    insertEnableSvcUptimeKuma wgportal "${FMLNAME_WGPORTAL}-RelayServer" relayserver "https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    checkInsertServiceUptimeKuma filebrowser "${FMLNAME_FILEBROWSER}-RelayServer" relayserver "https://$SUB_FILEBROWSER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false 0
    checkInsertServiceHeimdall filebrowser "${FMLNAME_FILEBROWSER}" relayserver "https://$SUB_FILEBROWSER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "filebrowser.png" false 0
    docker container start heimdall > /dev/null 2>&1
    docker container start uptimekuma > /dev/null 2>&1
    emailVaultwardenCredentials true
  fi
  # Update Advertise IPs for Jitsi
  addAdvertiseIP $RELAYSERVER_WG_HS_IP

  curdt=$(getCurrentDate)
  sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('WireGuardServer','$EMAIL_ADMIN_EMAIL_ADDRESS','wgserver','relayserver','$RELAYSERVER_WG_SV_PUBLICKEY','$RELAYSERVER_WG_SV_PRESHAREDKEY','$RELAYSERVER_WG_SV_IP',false,'$RELAYSERVER_WG_INTERFACE_NAME','$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$curdt');"
  sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('RelayServerClientDNS','$EMAIL_ADMIN_EMAIL_ADDRESS','clientdns','relayserver','$RELAYSERVER_WG_SV_CLIENTDNS_PUBLICKEY','$RELAYSERVER_WG_SV_CLIENTDNS_PRESHAREDKEY','$RELAYSERVER_WG_SV_CLIENTDNS_IP',false,'wg0','$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$curdt');"
  db_id=$(sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('Primary-VPN-${HOMESERVER_DOMAIN}','$EMAIL_ADMIN_EMAIL_ADDRESS','homeserver_vpn','primary','$RELAYSERVER_WG_HS_PUBLICKEY','$RELAYSERVER_WG_HS_PRESHAREDKEY','$RELAYSERVER_WG_HS_IP',false,'$RELAYSERVER_WG_VPN_NETNAME','$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$curdt');select last_insert_rowid();")
  mail_host_id=$(sqlite3 $HSHQ_DB "insert into mailhosts(MailHost) values('$SUB_POSTFIX.$HOMESERVER_DOMAIN');select last_insert_rowid();")
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;insert into hsvpn_connections(ID,HomeServerName,IsPrimary,DomainName,ExternalPrefix,InternalPrefix,MailHostID,CA_Abbrev,CA_IP,CA_Subdomain,CA_URL,VPN_Subnet,RS_VPN_IP) values($db_id,'$HOMESERVER_NAME',1,'$HOMESERVER_DOMAIN','$EXT_DOMAIN_PREFIX','$INT_DOMAIN_PREFIX',$mail_host_id,'$HOMESERVER_ABBREV','$RELAYSERVER_WG_HS_IP','$SUB_CADDY.$HOMESERVER_DOMAIN','https://$SUB_CADDY.$HOMESERVER_DOMAIN/acme/$HOMESERVER_ABBREV/directory' ,'$RELAYSERVER_WG_VPN_SUBNET','$RELAYSERVER_WG_SV_IP');"
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;insert into mailhostmap(MailHostID,Domain,IsFirstDomain) values ($mail_host_id,'$HOMESERVER_DOMAIN',true);"
  sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('clientdns-user1','$EMAIL_ADMIN_EMAIL_ADDRESS','clientdns','primary','$RELAYSERVER_WG_HS_CLIENTDNS_PUBLICKEY','$RELAYSERVER_WG_HS_CLIENTDNS_PRESHAREDKEY','$RELAYSERVER_WG_HS_CLIENTDNS_IP',false,'wg0','$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$curdt');"
  sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('Primary-Internet-${HOMESERVER_DOMAIN}','$EMAIL_ADMIN_EMAIL_ADDRESS','homeserver_internet','primary','$RELAYSERVER_WG_INTERNET_HS_PUBLICKEY','$RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY','$RELAYSERVER_WG_INTERNET_HS_IP',true,'$RELAYSERVER_WG_INTERNET_NETNAME','$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$curdt');"
  sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,EndpointHostname,LastUpdated) values('User-$LDAP_PRIMARY_USER_USERNAME','$LDAP_PRIMARY_USER_EMAIL_ADDRESS','user','mynetwork','$RELAYSERVER_WG_USER_PUBLICKEY','$RELAYSERVER_WG_USER_PRESHAREDKEY','$RELAYSERVER_WG_USER_IP',true,'$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$curdt');"

  RELAYSERVER_IS_INIT=true
  updateConfigVar RELAYSERVER_IS_INIT $RELAYSERVER_IS_INIT
}

function transferHostedVPN()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    showMessageBox "Invalid Selection" "You are not hosting a RelayServer, returning..."
    return
  fi
  set +e
  is_transfer=$(promptUserInputMenu "" "Transfer RelayServer" "If you wish to transfer your RelayServer, enter the word 'transfer' below:")
  if ! [ $is_transfer = "transfer" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return 0
  fi
  # Pause syncthing RelayServer
  jsonbody="{\"paused\": true}"
  curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X PATCH -d "$jsonbody" -k https://127.0.0.1:8384/rest/config/devices/$RELAYSERVER_SYNCTHING_DEVICE_ID
  uploadVPNInstallScripts true
  sudo tar cvzf $HOME/rsbackup.tar.gz -C $HSHQ_RELAYSERVER_DIR/ ./backup >/dev/null
  loadSSHKey
  scp -P $RELAYSERVER_CURRENT_SSH_PORT $HOME/rsbackup.tar.gz $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP:/home/$RELAYSERVER_REMOTE_USERNAME
  unloadSSHKey
  sudo rm -f $HOME/rsbackup.tar.gz
  showMessageBox "Upload Success" "The scripts and data have been uploaded to the RelayServer host. Please run 'bash $RS_INSTALL_TRANSFER_SCRIPT_NAME' on the remote host. Press okay to begin monitoring for a successful connection transfer."
  set +e
  totalTries=720
  numTries=1
  sleepSeconds=5
  isMatchWG=false
  isMatchRS=false
  while [ $numTries -lt $totalTries ]
  do
    ipFromHostname=$(getIPFromHostname $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN)
    if [ "$RELAYSERVER_SERVER_IP" = "$ipFromHostname" ]; then
      isMatchWG=true
    else
      isMatchWG=false
    fi
    ipFromHostname=$(getIPFromHostname $RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN)
    if [ "$RELAYSERVER_SERVER_IP" = "$ipFromHostname" ]; then
      isMatchRS=true
    else
      isMatchRS=false
    fi
    if [ "$isMatchWG" = "true" ] && [ "$isMatchRS" = "true" ]; then
      break
    else
      echo "($numTries/$totalTries)RelayServer IP: $RELAYSERVER_SERVER_IP, $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN points to $ipFromHostname, $RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN points to $ipFromHostname. Trying again in $sleepSeconds seconds..."
    fi
    sleep $sleepSeconds
    ((numTries++))
  done
  if [ "$isMatchWG" = "true" ] && [ "$isMatchRS" = "true" ]; then
    echo "External IP updated successfully!"
  else
    echo "The RelayServer IP does not match."
  fi
  echo "Updating endpoint IP addresses..."
  sudo $HSHQ_WIREGUARD_DIR/scripts/updateEndpointIPs.sh
  numTries=1
  isMatch=false
  timeout_length=5
  while [ $numTries -lt $totalTries ]
  do
    timeout $timeout_length ping -c 1 $RELAYSERVER_SUB_RELAYSERVER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN > /dev/null
    if [ $? -eq 0 ]; then
      isMatch=true
      break
    fi
    echo "($numTries/$totalTries)Could not ping RelayServer. Trying again in $sleepSeconds seconds..."
    sleep $sleepSeconds
    ((numTries++))
  done
  if [ "$isMatch" = "true" ]; then
    echo "Successfully connected to RelayServer!"
  else
    echo "Unable to ping RelayServer."
  fi
  # Resume syncthing RelayServer
  jsonbody="{\"paused\": false}"
  curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X PATCH -d "$jsonbody" -k https://127.0.0.1:8384/rest/config/devices/$RELAYSERVER_SYNCTHING_DEVICE_ID
  docker container restart syncthing
  loadSSHKey
  echo "Test login to new RelayServer: $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN"
  ssh -p $RELAYSERVER_SSH_PORT -o 'StrictHostKeyChecking accept-new' $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN 'echo Successful! IP Address is: $(curl --silent https://api.ipify.org)'
  unloadSSHKey
  notifyMyNetworkTransferRelayServer "$RELAYSERVER_SERVER_IP"
}

function outputRelayServerInstallSetupScript()
{
  cat <<EOFRS > $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_SETUP_SCRIPT_NAME
#!/bin/bash

set -e

USERNAME=\$(id -u -n)
RELAYSERVER_HSHQ_BASE_DIR=\$HOME/hshq
RELAYSERVER_HSHQ_DATA_DIR=\$RELAYSERVER_HSHQ_BASE_DIR/data
RELAYSERVER_HSHQ_NONBACKUP_DIR=\$RELAYSERVER_HSHQ_BASE_DIR/nonbackup
RELAYSERVER_HSHQ_SCRIPTS_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/scripts

function main()
{
  echo "Running setup script..."
  set +e
  new_hostname="RelayServer-$(getDomainNoTLD $HOMESERVER_DOMAIN)-$(getDomainTLD $HOMESERVER_DOMAIN)"
  if [ -z "\$(cat /etc/hosts | grep \$new_hostname)" ]; then
    echo "127.0.1.1 \$new_hostname" | sudo tee -a /etc/hosts
  fi
  sudo hostnamectl set-hostname \$new_hostname
  rm -f \$HOME/dead.letter

  # Ensure we can login during the installation process,
  # since the firewall will block the connection if we
  # haven't logged in before the firewall goes up.
  cur_ssh_port=\$(sudo grep ^Port /etc/ssh/sshd_config)
  if [ \$? -ne 0 ]; then
    cur_ssh_port=22
  else
    cur_ssh_port=\$(sudo grep ^Port /etc/ssh/sshd_config | xargs | cut -d" " -f2)
  fi
  sudo iptables -C INPUT -p tcp -m tcp --dport \$cur_ssh_port -j ACCEPT > /dev/null 2>&1 || sudo iptables -A INPUT -p tcp -m tcp --dport \$cur_ssh_port -j ACCEPT

  set -e
  # Change SSH port on host
  sudo sed -i "s|^#*Port .*\$|Port $RELAYSERVER_SSH_PORT|g" /etc/ssh/sshd_config
  sudo sed -i "s|^Port .*\$|Port $RELAYSERVER_SSH_PORT|g" /etc/ssh/sshd_config
  
  # Some other SSH settings
  sudo sed -i "s|^ClientAliveInterval .*\$|ClientAliveInterval 15|g" /etc/ssh/sshd_config
  sudo sed -i "s|^ClientAliveCountMax .*\$|ClientAliveCountMax 3|g" /etc/ssh/sshd_config
  sudo sed -i "s|^PermitEmptyPasswords .*\$|PermitEmptyPasswords no|g" /etc/ssh/sshd_config
  sudo sed -i "s|^#*ClientAliveInterval .*\$|ClientAliveInterval 15|g" /etc/ssh/sshd_config
  sudo sed -i "s|^#*ClientAliveCountMax .*\$|ClientAliveCountMax 3|g" /etc/ssh/sshd_config
  sudo sed -i "s|^#*PermitEmptyPasswords .*\$|PermitEmptyPasswords no|g" /etc/ssh/sshd_config

  # Update sudoers file
  sudo sed -i '/\/userasroot/d' /etc/sudoers >/dev/null
  echo "\$USERNAME ALL=(ALL) NOPASSWD: \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/*.sh" | sudo tee -a /etc/sudoers >/dev/null
  sudo sed -i '/timestamp_timeout/d' /etc/sudoers >/dev/null
  echo "Defaults timestamp_timeout=$SUDO_NORMAL_TIMEOUT" | sudo tee -a /etc/sudoers >/dev/null
  sudo sed -i '/includedir/d' /etc/sudoers >/dev/null
  echo "@includedir /etc/sudoers.d" | sudo tee -a /etc/sudoers >/dev/null

  # Set timezone
  sudo timedatectl set-timezone "$TZ"

  installDependencies
  outputNukeScript
  createDockerNetworks
}

function updateSysctl()
{
  set +e
  sudo tee /etc/sysctl.d/88-hshq.conf >/dev/null <<EOFSC
kernel.panic = 10
fs.file-max = 10000000
fs.nr_open = 10000000
fs.inotify.max_user_instances = 8192
fs.inotify.max_user_watches = 524288
net.core.rmem_max = 4194304
net.core.wmem_max = 4194304
net.core.somaxconn = 65536
net.netfilter.nf_conntrack_max = 10485760
net.netfilter.nf_conntrack_tcp_loose = 0
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10
net.ipv4.route.flush = 1
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5
net.ipv4.tcp_timestamps = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.ip_forward = 1
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.default.rp_filter = 2
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
EOFSC

  sudo sysctl --system > /dev/null 2>&1
}

function updateMOTD()
{
  cat <<EOFMD > \$HOME/88-hshq
#!/bin/bash

echo
echo "#===============================================================#"
echo "# ▀█  █  ▄▄  ▄▄ ▄▄ ▄▄▄ █▀▀▀█ ▄▄▄ ▄▄▄  ▄   ▄ ▄▄▄ ▄▄▄  █  █ █▀▀█  #"
echo "#  █▀▀█ █  █ █ █ █ ▄▄  ▀▀▀▄▄ ▄▄  ▄▄▄▀ ▀▄ ▄▀ ▄▄  ▄▄▄▀ █▀▀█ █  █  #"
echo "#  █  █ ▀▄▄▀ █   █ ▄▄▄ █▄▄▄█ ▄▄▄ ▄▄▄▄  ▀█▀  ▄▄▄ ▄▄▄▄ █  █ █▄▄█▄ #"
echo "#===============================================================#"
echo

echo "    Linux OS:  \\\$(lsb_release -d | cut -d":" -f2 | xargs)"
printf "Memory Usage:  %.1f%% of \\\$(free -h | awk  '/Mem:/{print \\\$2}')\n" \\\$((10000 - \\\$((10**4 * \\\$(grep "MemAvailable" /proc/meminfo | xargs | cut -d" " -f2) / \\\$(grep "MemTotal" /proc/meminfo | xargs | cut -d" " -f2)))))e-2
printf "  Swap Usage:  %.1f%% of \\\$(free -h | awk  '/Swap:/{print \\\$2}')\n" \\\$((10000 - \\\$((10**4 * \\\$(grep "SwapFree" /proc/meminfo | xargs | cut -d" " -f2) / \\\$(grep "SwapTotal" /proc/meminfo | xargs | cut -d" " -f2)))))e-2

echo
echo "Disks: "
echo "-----------------------------------------------------------------"
echo "Filesystem   Size   Used   Avail   Use%   Mounted on"
echo "-----------------------------------------------------------------"
df -h | grep "^/dev"
echo
echo

# Let's only show zombie count if greater than 10
zombie_count=\\\$(ps aux | grep "defunct" | wc -l)
if [ \\\$zombie_count -gt 10 ]; then
  echo "=> There are \\\$zombie_count zombie processes."
  echo
  echo
fi

EOFMD
  chmod 755 \$HOME/88-hshq
  sudo chown root:root \$HOME/88-hshq
  sudo chmod -x /etc/update-motd.d/*
  sudo mv \$HOME/88-hshq /etc/update-motd.d/
  if [ -f /etc/motd ]; then
    sudo mv /etc/motd /etc/motd.old
  fi
}

function performSuggestedSecUpdates()
{
  disa_curE=\${-//[^e]/}
  set +e
  grep "enabled=1" /etc/default/apport > /dev/null 2>&1
  if [ \$? -eq 0 ]; then
    sudo sed -i "s/enabled=1/enabled=0/g" /etc/default/apport
    sudo systemctl stop apport
    sudo systemctl --now disable apport
    sudo systemctl daemon-reload
  fi
  echo "Authorized uses only." | sudo tee /etc/issue > /dev/null 2>&1
  echo "Authorized uses only." | sudo tee /etc/issue.net > /dev/null 2>&1
  sudo DEBIAN_FRONTEND=noninteractive apt purge -y telnet > /dev/null 2>&1
  # Assume the caller will restart sshd - don't want to risk breaking the installation process
  sudo sed -i "s/^#MaxAuthTries.*/MaxAuthTries 4/" /etc/ssh/sshd_config
  sudo sed -i "s/^#Banner none.*/Banner \/etc\/issue.net/" /etc/ssh/sshd_config
  sudo sed -i "s/^#MaxStartups.*/MaxStartups 10:30:60/" /etc/ssh/sshd_config
  sudo sed -i "s/^#LoginGraceTime.*/LoginGraceTime 60/" /etc/ssh/sshd_config
  sudo sed -i "s/^#AllowTcpForwarding yes.*/AllowTcpForwarding no/" /etc/ssh/sshd_config
  if ! [ -z \$disa_curE ]; then
    set -e
  fi
}

function installDependencies()
{
  UTILS_LIST="$RELAYSERVER_UTILS_LIST"
  APT_REMOVE_LIST="$APT_REMOVE_LIST"

  sudo DEBIAN_FRONTEND=noninteractive apt update
  if [[ "\$(isProgramInstalled needrestart)" = "true" ]]; then
    echo "Removing needrestart, please wait..."
    sudo sed -i "s/#\\\$nrconf{kernelhints} = -1;/\\\$nrconf{kernelhints} = -1;/g" /etc/needrestart/needrestart.conf
    sudo DEBIAN_FRONTEND=noninteractive apt remove -y needrestart > /dev/null 2>&1
  fi
  sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y && sudo DEBIAN_FRONTEND=noninteractive apt autoremove -y

  sudo DEBIAN_FRONTEND=noninteractive apt install ssmtp -y
  sudo tee /etc/ssmtp/ssmtp.conf >/dev/null <<EOFSM
root=$EMAIL_ADMIN_EMAIL_ADDRESS
mailhub=${SUB_POSTFIX}.${HOMESERVER_DOMAIN}:587
hostname=\$(cat /etc/hostname)
TLS_CA_FILE=/etc/ssl/certs/ca-certificates.crt
UseSTARTTLS=yes
FromLineOverride=no
AuthUser=$EMAIL_SMTP_EMAIL_ADDRESS
AuthPass=$EMAIL_SMTP_PASSWORD
EOFSM

  sudo tee /etc/ssmtp/revaliases >/dev/null <<EOFSM
root:$EMAIL_SMTP_EMAIL_ADDRESS
\$USERNAME:$EMAIL_SMTP_EMAIL_ADDRESS
EOFSM

  sudo DEBIAN_FRONTEND=noninteractive apt install mailutils -y
  getent group mailsenders >/dev/null || sudo groupadd mailsenders
  sudo usermod -aG mailsenders \$USERNAME
  sudo chown root:mailsenders /usr/bin/mail.mailutils
  sudo chmod 750 /usr/bin/mail.mailutils

  # Install Rsyslog
  sudo systemctl status rsyslog > /dev/null 2>&1
  if [ \$? -ne 0 ]; then
    echo "Installing rsyslog, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y rsyslog > /dev/null 2>&1
    sudo systemctl enable rsyslog
    sudo systemctl start rsyslog
  fi

  set +e
  for util in \$UTILS_LIST; do
    if [[ "\$(isProgramInstalled \$util)" = "false" ]]; then
      lib_name=\$(echo \$util | cut -d"|" -f2)
      echo "Installing \$lib_name, please wait..."
      sudo DEBIAN_FRONTEND=noninteractive apt install -y \$lib_name > /dev/null 2>&1
    fi
  done

  for rem_util in \$APT_REMOVE_LIST; do
    sudo DEBIAN_FRONTEND=noninteractive apt remove -y \$rem_util
  done

  updateSysctl
  updateMOTD
  performSuggestedSecUpdates

  util="docker|docker"
  if ! [ "\$(isProgramInstalled \$util)" = "true" ]; then
    # Install Docker (https://docs.docker.com/engine/install/ubuntu/)
    echo "Installing docker, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates curl gnupg lsb-release > /dev/null 2>&1
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
    sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=\$(dpkg --print-architecture) \
    signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
    https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo DEBIAN_FRONTEND=noninteractive apt update
    echo "Installing docker, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y docker-ce=5:25.0.5-1~ubuntu.22.04~jammy docker-ce-cli=5:25.0.5-1~ubuntu.22.04~jammy containerd.io docker-compose docker-compose-plugin > /dev/null 2>&1
    # See https://www.portainer.io/blog/portainer-and-docker-26
    sudo apt-mark hold docker-ce
    sudo apt-mark hold docker-ce-cli
  fi

  sudo usermod -aG docker \$USERNAME
  sudo mkdir -p /etc/docker
  sudo tee /etc/docker/daemon.json >/dev/null <<EOFRL
{
  "default-address-pools":
  [
    {"base":"$DEFAULT_NETWORK_POOL","size":$DEFAULT_NETWORK_SIZE}
  ],
  "log-driver": "syslog",
  "log-opts": {
    "syslog-address": "unixgram:///dev/log",
    "tag": "docker/{{.Name}}"
  },
  "ipv6": false
}
EOFRL
  set +e
  grep DockerDaemonLogFileName /etc/rsyslog.d/docker-logs.conf > /dev/null 2>&1
  if [ \$? -ne 0 ]; then
    sudo tee /etc/rsyslog.d/docker-logs.conf >/dev/null <<EOFRL
\\\$FileCreateMode 0644
\\\$template DockerDaemonLogFileName,"/var/log/docker/docker.log"
\\\$template DockerContainerLogFileName,"/var/log/docker/%SYSLOGTAG:R,ERE,1,FIELD:docker/(.*)\[--end:secpath-replace%.log"
if \\\$programname == 'dockerd' then {
  ?DockerDaemonLogFileName
  stop
}
if \\\$programname == 'containerd' then {
  ?DockerDaemonLogFileName
  stop
}
if \\\$programname == 'docker' then {
  if \\\$syslogtag contains 'docker/' then {
  ?DockerContainerLogFileName
  stop
  }
}
\\\$FileCreateMode 0600
EOFRL
  fi
  sudo systemctl restart rsyslog
  sudo systemctl restart docker
  sudo DEBIAN_FRONTEND=noninteractive apt autoremove -y
}

function outputNukeScript()
{
  cat <<EOFNS > \$HOME/$NUKE_SCRIPT_NAME
HSHQ_BASE_DIR=\$RELAYSERVER_HSHQ_BASE_DIR
HSHQ_SCRIPTS_DIR=\$RELAYSERVER_HSHQ_SCRIPTS_DIR

set +e
function removeWGInterfaceQuick()
{
  config_filename=\\\$1
  sudo systemctl stop wg-quick@\\\${config_filename}.service
  sudo systemctl disable wg-quick@\\\${config_filename}.service
  sudo systemctl daemon-reload
  sudo rm -f /etc/wireguard/\\\${config_filename}.conf
}

function main()
{
  echo
  echo
  echo
  echo
  echo "============================================================"
  echo "This script will entirely remove HSHQ and all artifacts."
  echo "It will permanently delete ALL data"
  echo "It will not delete any previously downloaded docker images."
  echo "In order to remove them as well, type 'docker image prune -f'"
  echo "Please type 'nuclear' in order to continue."
  echo "============================================================"
  echo
  echo
  read -p "Type 'nuclear' (no quotes): " isnuke
  if ! [ "\\\$isnuke" = "nuclear" ]; then
    echo "String does not match, exiting..."
    exit 1
  fi
  sudo -k
  sudo crontab -r
  sudo docker ps -q | xargs sudo docker stop
  sleep 5
  sudo docker container prune -f
  sudo docker volume rm \\\$(sudo docker volume ls -q)
  sudo docker network prune -f
  sudo ls /etc/wireguard | while read fname
  do
    bname=\\\$(basename \\\$fname .conf)
    removeWGInterfaceQuick \\\$bname
  done
  sudo systemctl stop runOnBootRoot
  sudo systemctl disable runOnBootRoot
  sudo rm -f /etc/systemd/system/runOnBootRoot.service
  sudo \\\$HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh
  sudo \\\$HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh
  sudo rm -f /etc/sysctl.d/88-hshq.conf
  sudo sysctl --system > /dev/null 2>&1
  sudo rm -f /etc/resolv.conf > /dev/null 2>&1
  sudo systemctl enable systemd-resolved > /dev/null 2>&1
  sudo systemctl start systemd-resolved > /dev/null 2>&1
  sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
  sudo systemctl restart docker
  sudo docker container prune -f
  sudo docker volume rm \\\$(sudo docker volume ls -q)
  sudo docker network prune -f
  sudo systemctl stop wazuh-agent
  sudo systemctl disable wazuh-agent
  sudo DEBIAN_FRONTEND=noninteractive apt remove --purge wazuh-agent -y
  sudo systemctl daemon-reload
  sudo rm -f /usr/local/share/ca-certificates/*
  sudo update-ca-certificates
  sudo systemctl stop docker
  sudo systemctl start docker
  sudo rm -fr \\\$HSHQ_BASE_DIR
  sudo rm -f \$HOME/$NUKE_SCRIPT_NAME
  sudo rm -fr \$HOME/.ssh/*
  sudo rm -f $HSHQ_SCRIPT_OPEN
  sudo rm /etc/update-motd.d/88-hshq
  if [ -f /etc/motd.old ]; then
    sudo mv /etc/motd.old /etc/motd
  else
    sudo chmod +x /etc/update-motd.d/*
  fi
}

main "\\\$@"
EOFNS
  chmod 0600 \$HOME/$NUKE_SCRIPT_NAME
}

function isProgramInstalled()
{
  bin_name=\$(echo \$1 | cut -d"|" -f1)
  lib_name=\$(echo \$1 | cut -d"|" -f2)
  if [[ -z \$(which \${bin_name}) ]]; then
    echo "false"
  else
    echo "true"
  fi
}

function getDockerSubnet()
{
  echo \$(docker network inspect \$1 | grep Subnet | awk '{print \$2}' | sed 's/[",]//g')
}

function createDockerNetworks()
{
  set -e
  docker network create -o com.docker.network.bridge.name=$NET_EXTERNAL_BRIDGE_NAME --driver=bridge --subnet $NET_EXTERNAL_SUBNET dock-ext
  docker network create -o com.docker.network.bridge.name=$NET_WEBPROXY_BRIDGE_NAME --driver=bridge --subnet $NET_WEBPROXY_SUBNET --internal dock-proxy
}

main "\$@"

EOFRS
  chmod 0400 $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_SETUP_SCRIPT_NAME
}

function outputRelayServerInstallTransferScript()
{
  cat <<EOFRS > $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_TRANSFER_SCRIPT_NAME
#!/bin/bash

set -e

TZ=$TZ
USERNAME=\$(id -u -n)
RELAYSERVER_HSHQ_BASE_DIR=\$HOME/hshq
RELAYSERVER_HSHQ_DATA_DIR=\$RELAYSERVER_HSHQ_BASE_DIR/data
RELAYSERVER_HSHQ_NONBACKUP_DIR=\$RELAYSERVER_HSHQ_BASE_DIR/nonbackup
RELAYSERVER_HSHQ_SCRIPTS_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/scripts
RELAYSERVER_HSHQ_SECRETS_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/secrets
RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/stacks
RELAYSERVER_HSHQ_SSL_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/ssl

function main()
{
  RELAYSERVER_SERVER_IP=\$(getHostIP)
  mkdir -p \$RELAYSERVER_HSHQ_BASE_DIR
  bash \$HOME/$RS_INSTALL_SETUP_SCRIPT_NAME
  sudo tar xvzf \$HOME/rsbackup.tar.gz >/dev/null
  sudo rm -f \$HOME/rsbackup.tar.gz
  sudo rm -fr \$RELAYSERVER_HSHQ_DATA_DIR
  sudo mv \$HOME/backup \$RELAYSERVER_HSHQ_DATA_DIR
  restoreNonBackupDir
  restoreSSL
  pullDockerImages
  restoreScripts
  restorePortainer
  restoreAdguard
  restoreMailRelay
  haltAndWaitForConfirmation
  restoreWireGuard
  restoreCaddy
  restoreOfelia
  restoreSyncthing
  startWazuhAgent
  sudo rm -f \$HOME/$RS_INSTALL_SETUP_SCRIPT_NAME
  sudo rm -f \$HOME/$RS_INSTALL_TRANSFER_SCRIPT_NAME
  clear
  echo
  echo
  echo
  echo
  echo "============================================================"
  echo "Transfer Complete!"
  echo "Rebooting in 60 seconds..."
  echo "============================================================"
  echo
  echo
  sleep 60
  sudo reboot
}

function getHostIP()
{
  echo \$(curl --silent https://api.ipify.org)
}

function getIPFromHostname()
{
  echo \$(dig \$1 +short | grep '^[.0-9]*\$')
}

function haltAndWaitForConfirmation()
{
  clear
  echo
  echo
  echo
  echo
  echo "============================================================"
  echo "This server has been prepped for transfer. Please modify"
  echo "your DNS A record to point to this new IP Address:"
  echo
  echo "\$RELAYSERVER_SERVER_IP"
  echo
  echo "After this has been done, enter 'transfer' to complete"
  echo "the remaining steps of the process."
  echo "============================================================"
  echo
  echo
  read -p "Type 'transfer' (no quotes) to continue: " isTransfer
  while ! [ "\$isTransfer" = "transfer" ]
  do
    echo "The string does not match, please try again."
    read -p "Type 'transfer' (no quotes) to continue: " isTransfer
  done
  totalTries=720
  numTries=1
  sleepSeconds=5
  isMatch=false
  while [ \$numTries -lt \$totalTries ]
  do
    ipFromHostname=\$(getIPFromHostname $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN)
    if [ "\$RELAYSERVER_SERVER_IP" = "\$ipFromHostname" ]; then
      isMatch=true
      break
    fi
    echo "(\$numTries/\$totalTries)This host's IP: \$RELAYSERVER_SERVER_IP, $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN points to \$ipFromHostname. Trying again in \$sleepSeconds seconds..."
    sleep \$sleepSeconds
    ((numTries++))
  done

  if [ "\$isMatch" = "true" ]; then
    echo "Success! The IP matches the hostname, continuing the installation..."
  else
    read -p "Failure. The IP does not match. The installation will continue, but you need to point the IP address correctly in order for everything to function properly. Press Enter to continue.   "
  fi
}

function restoreNonBackupDir()
{
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/adguard
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/adguard/work
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy/config
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy/data
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/syncthing
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/syncthing/data
}

function restoreSSL()
{
  docker volume create --driver local -o device=\$RELAYSERVER_HSHQ_SSL_DIR/caddy -o o=bind -o type=none caddy-certs
  sudo cp \$RELAYSERVER_HSHQ_DATA_DIR/ssl/${CERTS_ROOT_CA_NAME}.crt /usr/local/share/ca-certificates/
  sudo cp \$RELAYSERVER_HSHQ_DATA_DIR/ssl/relayserver-ca.crt /usr/local/share/ca-certificates/
  sudo update-ca-certificates
}

function pullImage()
{
  img_and_version=\$1
  echo "Pulling Image: \$img_and_version"
  is_success=1
  num_tries=1
  set +e
  while [ \$is_success -ne 0 ] && [ \$num_tries -lt $MAX_DOCKER_PULL_TRIES ]
  do
    # Refresh the sudo timestamp
    sudo -v
    docker pull \$img_and_version > /dev/null 2>&1
    img_name=\$(echo \$img_and_version | cut -d":" -f1)
    docker image ls | grep "\$img_name"
    is_success=\$?
    ((num_tries++))
  done
  set -e
  if [ \$is_success -ne 0 ]; then
    echo "Error pulling docker image: $img_and_version"
    return 5
  fi
  set -e
}

function pullDockerImages()
{
  OIFS=\$IFS
  IFS=\$(echo -en "\n\b")
  img_arr=(\$(sudo grep -r "image: " \$RELAYSERVER_HSHQ_STACKS_DIR/portainer/compose))
  for cur_item in "\${img_arr[@]}"
  do
    cur_img=\$(echo \$cur_item | xargs | cut -d" " -f3)
    if [[ "\$cur_img" =~ ^hshq ]]; then continue; fi
    pullImage \$cur_img
  done
  IFS=\$OIFS

  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build
  sudo rm -fr \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay
  git clone https://github.com/homeserverhq/mail-relay.git \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay
  docker image build --network host -t $IMG_MAIL_RELAY_POSTFIX -f \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/postfix/Dockerfile \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/postfix
  docker image build --network host -t $IMG_MAIL_RELAY_RSPAMD -f \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/rspamd/Dockerfile \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/rspamd
  sudo rm -fr \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay
}

function restoreScripts()
{
  sudo \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh

  sudo rm -f /etc/systemd/system/runOnBootRoot.service
  sudo ln -s \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service /etc/systemd/system/runOnBootRoot.service
  sudo systemctl daemon-reload
  sudo systemctl enable runOnBootRoot
}

function getPortainerToken()
{
  while [ -n "\$1" ]
  do case "\$1" in
  -u) port_username="\$2";;
  -p) port_password="\$2"
  shift ;;
  --) shift
  break ;;
  esac
  shift
  done
  if [ -z "\$port_username" ]; then
    read -p "Enter the portainer username: " port_username
	echo
  fi
  if [ -z "\$port_password" ]; then
    read -s -p "Enter the portainer password: " port_password
	echo
  fi

  echo \$(http --check-status --ignore-stdin --verify=no https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/auth username=\$port_username password=\$port_password | jq -r .jwt)
}

function getStackID()
{
  stackID="NA"
  stackName=\$1
  qry=\$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer \$RELAYSERVER_PORTAINER_TOKEN" endpointId==1)
  for row in \$(echo "\${qry}" | jq -r '.[] | @base64'); do
    _jq()
    {
      echo \${row} | base64 --decode | jq -r \${1}
    }
    if [ "\$(_jq '.Name')" = "\$stackName" ]; then
      stackID=\$(_jq '.Id')
      break
    fi
  done
  if ! [ "\$stackID" = "NA" ]; then
    echo \$stackID
  fi
}

function startStopStack()
{
  stackName=\$1
  startStop=\$2
  stackID=\$(getStackID \$stackName)
  http --check-status --ignore-stdin --verify=no --timeout=300 POST https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/stacks/\$stackID/\$startStop "Authorization: Bearer \$RELAYSERVER_PORTAINER_TOKEN" endpointId==1 > /dev/null
}

function restorePortainer()
{
  docker-compose -f \$RELAYSERVER_HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d
  RELAYSERVER_PORTAINER_TOKEN="\$(getPortainerToken -u $RELAYSERVER_PORTAINER_ADMIN_USERNAME -p $RELAYSERVER_PORTAINER_ADMIN_PASSWORD)"
}

function restoreAdguard()
{
  sudo systemctl stop systemd-resolved > /dev/null 2>&1
  sudo systemctl disable systemd-resolved > /dev/null 2>&1
  sudo rm -f /etc/resolv.conf > /dev/null 2>&1
  sudo tee /etc/resolv.conf >/dev/null <<EOFR
nameserver 127.0.0.1
EOFR
  np_path="/etc/netplan/*"
  for cur_np in "\$np_path"
  do
    sudo sed -i "s|8.8.8.8|9.9.9.9|g" \$cur_np
    sudo sed -i "s|8.8.4.4|149.112.112.112|g" \$cur_np
  done
  sudo netplan apply > /dev/null 2>&1

  startStopStack adguard stop
  startStopStack adguard start

  basic_auth="$(getAdguardCredentialsRS)"

  del_domain="*.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN"
  del_ip_addr=\$(curl -s -H "Authorization: Basic \$basic_auth" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/list | jq -r --arg del_domain \$del_domain '.[] | select(.domain==\$del_domain) | .answer')
  dom_json=\$(jq -n --arg del_domain \$del_domain --arg del_ip_addr \$del_ip_addr '{domain: \$del_domain, answer: \$del_ip_addr}')
  curl -s -H "Authorization: Basic \$basic_auth" -H 'Content-Type: application/json' -d "\$dom_json" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/delete

  add_domain="*.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN"
  add_ip_addr="\$RELAYSERVER_SERVER_IP"
  dom_json=\$(jq -n --arg add_domain \$add_domain --arg add_ip_addr \$add_ip_addr '{domain: \$add_domain, answer: \$add_ip_addr}')
  curl -s -H "Authorization: Basic \$basic_auth" -H 'Content-Type: application/json' -d "\$dom_json" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/add
}

function restoreMailRelay()
{
  startStopStack mail-relay stop
  startStopStack mail-relay start
}

function restoreWireGuard()
{
  sudo cp \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/$RELAYSERVER_WG_INTERFACE_NAME.conf /etc/wireguard/$RELAYSERVER_WG_INTERFACE_NAME.conf
  sudo systemctl enable wg-quick@$RELAYSERVER_WG_INTERFACE_NAME.service
  sudo systemctl start wg-quick@$RELAYSERVER_WG_INTERFACE_NAME.service
  startStopStack wgportal stop
  startStopStack wgportal start
  startStopStack clientdns stop
  startStopStack clientdns start
}

function restoreCaddy()
{
  startStopStack caddy stop
  startStopStack caddy start
}

function restoreOfelia()
{
  startStopStack ofelia stop
  startStopStack ofelia start
}

function restoreSyncthing()
{
  startStopStack syncthing stop
  startStopStack syncthing start
}

function startWazuhAgent()
{
  curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | sudo gpg --no-default-keyring --keyring gnupg-ring:/usr/share/keyrings/wazuh.gpg --import && sudo chmod 644 /usr/share/keyrings/wazuh.gpg
  echo "deb [signed-by=/usr/share/keyrings/wazuh.gpg] https://packages.wazuh.com/4.x/apt/ stable main" | sudo tee /etc/apt/sources.list.d/wazuh.list
  sudo DEBIAN_FRONTEND=noninteractive apt update
  sudo WAZUH_MANAGER="$SUB_WAZUH.$HOMESERVER_DOMAIN" DEBIAN_FRONTEND=noninteractive apt install wazuh-agent
  sudo systemctl daemon-reload
  set +e
  sudo grep "/var/log/docker/" /var/ossec/etc/ossec.conf
  if [ \$? -ne 0 ]; then
    sudo sed -i "/<\/ossec_config>/{s//  <localfile>\n    <log_format>syslog<\/log_format>\n    <location>\/var\/log\/docker\/*<\/location>\n  <\/localfile>\n\n<\/ossec_config>/;:p;n;bp}" /var/ossec/etc/ossec.conf
  fi
  set -e
  sudo systemctl enable wazuh-agent
  sudo systemctl start wazuh-agent
}

main "\$@"
EOFRS
  chmod 0400 $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_TRANSFER_SCRIPT_NAME
}

function outputRelayServerInstallFreshScript()
{
  cat <<EOFRS > $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_FRESH_SCRIPT_NAME
#!/bin/bash

set -e
TZ=$TZ
USERNAME=\$(id -u -n)
USERID=\$(id -u)
GROUPID=\$(id -g)
RELAYSERVER_HSHQ_BASE_DIR=\$HOME/hshq
RELAYSERVER_HSHQ_DATA_DIR=\$RELAYSERVER_HSHQ_BASE_DIR/data
RELAYSERVER_HSHQ_NONBACKUP_DIR=\$RELAYSERVER_HSHQ_BASE_DIR/nonbackup
RELAYSERVER_HSHQ_SCRIPTS_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/scripts
RELAYSERVER_HSHQ_SECRETS_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/secrets
RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/stacks
RELAYSERVER_HSHQ_SSL_DIR=\$RELAYSERVER_HSHQ_DATA_DIR/ssl

function main()
{
  RELAYSERVER_SERVER_IP=\$(getHostIP)
  mkdir -p \$RELAYSERVER_HSHQ_BASE_DIR
  installLogNotify "Begin Main"
  while getopts ':i' opt; do
    case "\$opt" in
      i)
        IS_PERFORM_INSTALL=true ;;
      ?|h)
        echo "Usage: \$(basename \$0)"
        exit 1 ;;
    esac
  done
  shift "\$((\$OPTIND -1))"
  if [ -f $HSHQ_SCRIPT_OPEN ]; then
    echo "Installation already in progess, exiting..."
    exit 1
  fi
  if [ "\$IS_PERFORM_INSTALL" = "true" ]; then
    touch $HSHQ_SCRIPT_OPEN
    install
  else
    if [[ "\$(isProgramInstalled screen)" = "false" ]]; then
      echo "Installing screen, please wait..."
      sudo DEBIAN_FRONTEND=noninteractive apt update
      sudo DEBIAN_FRONTEND=noninteractive apt install -y screen > /dev/null 2>&1
    fi
    screen -L -Logfile \$RELAYSERVER_HSHQ_BASE_DIR/$RELAYSERVER_HSHQ_FULL_LOG_NAME -S hshqInstall bash \$0 -i
  fi
}

function isProgramInstalled()
{
  bin_name=\$(echo \$1 | cut -d"|" -f1)
  lib_name=\$(echo \$1 | cut -d"|" -f2)
  if [[ -z \$(which \${bin_name}) ]]; then
    echo "false"
  else
    echo "true"
  fi
}

function installLogNotify()
{
  log_message=\$1
  echo \$(date)" - \$log_message" >> \$RELAYSERVER_HSHQ_BASE_DIR/$RELAYSERVER_HSHQ_TIMESTAMP_LOG_NAME
}

function getIPFromHostname()
{
  echo \$(dig \$1 +short | grep '^[.0-9]*\$')
}

function getHostIP()
{
  echo \$(curl --silent https://api.ipify.org)
}

function getConnectingIPAddress()
{
  echo \$(echo \$SSH_CLIENT | xargs | cut -d" " -f1)
}

function checkIsIPPrivate()
{
  check_ip="\$1"
  set +e
  priv_arr=(10.0.0.0/8 172.16.0.0/12 192.168.0.0/16)
  for subnet in "\${priv_arr[@]}"
  do
    is_in_subnet=\$(isIPInSubnet \$check_ip \$subnet)
    if [ "\$is_in_subnet" = "true" ]; then
      echo "true"
      return
    fi
  done
  echo "false"
}

function isIPInSubnet()
{
  iiis_curE=\${-//[^e]/}
  check_ipaddr=\$1
  check_subnet=\$2
  set +e
  grepcidr \${check_subnet} <(echo \${check_ipaddr}) > /dev/null 2>&1
  if [ \$? -eq 0 ]; then
    echo "true"
  else
    echo "false"
  fi
  set +e
  if ! [ -z \$iiis_curE ]; then
    set -e
  fi
}

function install()
{
  echo "The installation process is ready to initiate."
  echo "You can safely exit the screen after it starts"
  echo "by pressing CTRL-a, then release, then press d"
  echo "to detach. Enter your password to start."
  sudo -v
  bash \$HOME/$RS_INSTALL_SETUP_SCRIPT_NAME
  set -e
  mkdir -p \$RELAYSERVER_HSHQ_DATA_DIR
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR
  mkdir -p \$RELAYSERVER_HSHQ_SCRIPTS_DIR
  mkdir -p \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot
  mkdir -p \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts
  mkdir -p \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user
  sudo mkdir -p \$RELAYSERVER_HSHQ_SCRIPTS_DIR/root
  sudo chmod 700 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/root
  sudo mkdir -p \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot
  sudo chmod 700 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot

  sudo mkdir -p \$RELAYSERVER_HSHQ_SECRETS_DIR
  mkdir -p \$RELAYSERVER_HSHQ_SSL_DIR
  mkdir -p \$RELAYSERVER_HSHQ_STACKS_DIR

  outputCerts
  pullDockerImages
  outputScripts
  installLogNotify "Installing Stacks"
  installPortainer
  installAdGuard
  installMailRelay
  installWireGuard
  installFileBrowser
  installCaddy
  installOfelia
  installSyncthing
  installLogNotify "Starting Wazuh Agent"
  startWazuhAgent
  sudo rm -f \$HOME/$RS_INSTALL_FRESH_SCRIPT_NAME
  sudo rm -f \$HOME/$RS_INSTALL_SETUP_SCRIPT_NAME
  docker image prune -af
  installLogNotify "Rebooting"
  echo -e "\n\n\n\n########################################\n\n"
  echo "RelayServer Installation Complete!"
  echo "The system is rebooting..."
  echo -e "\n\n########################################\n\n"
  rm -f $HSHQ_SCRIPT_OPEN
  # Successfull installation, clean up the logs
  #rm -f \$RELAYSERVER_HSHQ_BASE_DIR/$RELAYSERVER_HSHQ_FULL_LOG_NAME
  #rm -f \$RELAYSERVER_HSHQ_BASE_DIR/$RELAYSERVER_HSHQ_TIMESTAMP_LOG_NAME
  sudo reboot
}

function outputCerts()
{
  mkdir \$RELAYSERVER_HSHQ_SSL_DIR/caddy
  docker volume create --driver local -o device=\$RELAYSERVER_HSHQ_SSL_DIR/caddy -o o=bind -o type=none caddy-certs
  echo """$(cat $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt)""" > \$RELAYSERVER_HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt
  openssl x509 -in \$RELAYSERVER_HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -out \$RELAYSERVER_HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der -outform DER
  openssl dhparam -out \$RELAYSERVER_HSHQ_SSL_DIR/dhparam.pem $CERTS_INTERNAL_DHPARAMS_KEYLENGTH
  chmod 0444 \$RELAYSERVER_HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt
  chmod 0444 \$RELAYSERVER_HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der
  chmod 0444 \$RELAYSERVER_HSHQ_SSL_DIR/dhparam.pem
  sudo cp \$RELAYSERVER_HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
  initCertificateAuthority
  sudo update-ca-certificates
}

function initCertificateAuthority()
{
  # Certificate Authority Key
  openssl genrsa -out \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.key 4096

  cat <<EOFCA > \$HOME/ca.conf 
[ req ]
distinguished_name = req_distinguished_name
prompt = no
x509_extensions = v3_ca

[ req_distinguished_name ]
C   = $CERTS_INTERNAL_COUNTRY
ST  = $CERTS_INTERNAL_STATE
L   = $CERTS_INTERNAL_LOCALITY
O   = $HOMESERVER_NAME RelayServer
OU  = $CERTS_INTERNAL_OU_NAME
CN  = $CERTS_INTERNAL_ROOT_CN

[ v3_ca ]
basicConstraints = critical,CA:TRUE
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
keyUsage = critical, cRLSign, keyCertSign
EOFCA

  # Certificate Authority Certificate
  openssl req -new -x509 -sha256 -nodes -days $CERTS_INTERNAL_CA_DAYS -key \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.key -out \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.crt -config \$HOME/ca.conf
  rm -f \$HOME/ca.conf

  chmod 0400 \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.key
  chmod 0444 \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.crt

  sudo cp \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.crt /usr/local/share/ca-certificates/
}

function generateCert()
{
  CERT_NAME=\$1
  DNS=\$2
  IP_ADDRESSES=\$3

  rm -fr \$RELAYSERVER_HSHQ_SSL_DIR/\$CERT_NAME.key
  rm -fr \$RELAYSERVER_HSHQ_SSL_DIR/\$CERT_NAME.crt

  CERTS_INTERNAL_COUNTRY="$CERTS_INTERNAL_COUNTRY"
  CERTS_INTERNAL_STATE="$CERTS_INTERNAL_STATE"
  CERTS_INTERNAL_LOCALITY="$CERTS_INTERNAL_LOCALITY"
  CERTS_INTERNAL_OU_NAME="$CERTS_INTERNAL_OU_NAME"
  ORGANIZATION_NAME="$HOMESERVER_NAME"
  CERTS_INTERNAL_CA_DAYS=$CERTS_INTERNAL_CA_DAYS

  # Generate certificate key
  openssl genrsa -out \$RELAYSERVER_HSHQ_SSL_DIR/\$CERT_NAME.key 4096

  cat <<EOFCR > \$HOME/\$CERT_NAME-csr.cnf
[ req ]
distinguished_name = req_distinguished_name
prompt = no
req_extensions = req_ext

[ req_distinguished_name ]
C   = \$CERTS_INTERNAL_COUNTRY
ST  = \$CERTS_INTERNAL_STATE
L   = \$CERTS_INTERNAL_LOCALITY
O   = \$ORGANIZATION_NAME RelayServer
OU  = \$CERTS_INTERNAL_OU_NAME
CN  = \$CERT_NAME

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
EOFCR

  cat <<EOFCR > \$HOME/\$CERT_NAME-ext.cnf
basicConstraints = CA:FALSE
nsComment = "OpenSSL Certificate Generated By \$ORGANIZATION_NAME"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth,clientAuth
subjectAltName = @alt_names

[ alt_names ]
EOFCR

  dnslist=\$(sed 's|,|\n|g' <<< \$DNS)
  ipnum=1
  for dn in \$dnslist
  do
    echo "DNS."\$ipnum" = "\$dn >> \$HOME/\$CERT_NAME-csr.cnf
    echo "DNS."\$ipnum" = "\$dn >> \$HOME/\$CERT_NAME-ext.cnf
    ((ipnum++))
  done

  iplist=\$(sed 's|,|\n|g' <<< \$IP_ADDRESSES)
  ipnum=1
  for ip in \$iplist
  do
    echo "IP."\$ipnum" = "\$ip >> \$HOME/\$CERT_NAME-csr.cnf
    echo "IP."\$ipnum" = "\$ip >> \$HOME/\$CERT_NAME-ext.cnf
    ((ipnum++))
  done

  # Generate certificate request
  openssl req -config \$HOME/\$CERT_NAME-csr.cnf -new -sha256 -key \$RELAYSERVER_HSHQ_SSL_DIR/\$CERT_NAME.key -out \$HOME/\$CERT_NAME.csr
  openssl x509 -req -sha256 -days \$CERTS_INTERNAL_CA_DAYS -in \$HOME/\$CERT_NAME.csr -CA \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.crt -CAkey \$RELAYSERVER_HSHQ_SSL_DIR/relayserver-ca.key -out \$RELAYSERVER_HSHQ_SSL_DIR/\$CERT_NAME.crt -extfile \$HOME/\$CERT_NAME-ext.cnf -CAcreateserial
  rm -f \$HOME/\$CERT_NAME-csr.cnf
  rm -f \$HOME/\$CERT_NAME-ext.cnf
  rm -f \$HOME/\$CERT_NAME.csr
  chmod 0444 \$RELAYSERVER_HSHQ_SSL_DIR/\$CERT_NAME.key
  chmod 0444 \$RELAYSERVER_HSHQ_SSL_DIR/\$CERT_NAME.crt
}

function pullImage()
{
  img_and_version=\$1
  echo "Pulling Image: \$img_and_version"
  is_success=1
  num_tries=1
  set +e
  while [ \$is_success -ne 0 ] && [ \$num_tries -lt $MAX_DOCKER_PULL_TRIES ]
  do
    # Refresh the sudo timestamp
    sudo -v
    docker pull \$img_and_version > /dev/null 2>&1
    img_name=\$(echo \$img_and_version | cut -d":" -f1)
    docker image ls | grep "\$img_name"
    is_success=\$?
    ((num_tries++))
  done
  set -e
  if [ \$is_success -ne 0 ]; then
    echo "Error pulling docker image: $img_and_version"
    exit 5
  fi
  set -e
}

function pullDockerImages()
{
  pullImage $IMG_ADGUARD
  pullImage $IMG_CADDY
  pullImage $IMG_DNSMASQ
  pullImage $IMG_MAIL_RELAY_UNBOUND
  pullImage $IMG_FILEBROWSER
  pullImage $IMG_OFELIA
  pullImage $IMG_PORTAINER
  pullImage $IMG_SYNCTHING
  pullImage $IMG_REDIS
  pullImage $IMG_WGPORTAL
  pullImage $IMG_WIREGUARD
  mkdir -p \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build
  sudo rm -fr \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay
  git clone https://github.com/homeserverhq/mail-relay.git \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay
  docker image build --network host -t $IMG_MAIL_RELAY_POSTFIX -f \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/postfix/Dockerfile \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/postfix
  docker image build --network host -t $IMG_MAIL_RELAY_RSPAMD -f \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/rspamd/Dockerfile \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay/rspamd
  sudo rm -fr \$RELAYSERVER_HSHQ_NONBACKUP_DIR/build/mail-relay
}

function outputScripts()
{
  outputBootScripts
  outputCaddyScripts
  outputRelayedDomainsScript
}

function outputBootScripts()
{
  exposedPortsList=53,587,$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT,$RELAYSERVER_WG_PORTAL_PORT,22000,21027
  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh >/dev/null <<EOFBS
#!/bin/bash
set +e

chmod 744 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/*.sh
run-parts --regex '.*sh\$' \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts
EOFBS
  sudo chmod 744 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh

  default_iface=\$(ip route | grep -e "^default" | awk -F'dev ' '{print \$2}' | xargs | cut -d" " -f1)
  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh >/dev/null <<EOFBS
#!/bin/bash
  set +e

  SSH_PORT=$RELAYSERVER_SSH_PORT
  WG_CON_PORT=$RELAYSERVER_WG_PORT
  WG_PORTAL_PORT=$RELAYSERVER_WG_PORTAL_PORT
  DOCK_EXT_NET=$NET_EXTERNAL_SUBNET
  ports_list=53,587,$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT,22000,21027

  portsArr=(\\\$(echo \\\$ports_list | tr "," "\n"))
  for cur_port in "\\\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \\\$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
    iptables -D DOCKER-USER -m conntrack --ctorigdstport \\\$cur_port --ctdir ORIGINAL -j DROP 2> /dev/null
    iptables -I DOCKER-USER -m conntrack --ctorigdstport \\\$cur_port --ctdir ORIGINAL -j DROP
    iptables -I DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \\\$cur_port --ctdir ORIGINAL -j ACCEPT
  done

  # See https://gist.github.com/mattia-beta/bd5b1c68e3d51db933181d8a3dc0ba64?permalink_comment_id=3728715#gistcomment-3728715
  iptables -t raw -F PREROUTING
  iptables -t raw -F chain-icmp > /dev/null 2>&1
  iptables -t raw -F chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -X chain-icmp > /dev/null 2>&1
  iptables -t raw -X chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -N chain-icmp > /dev/null 2>&1
  iptables -t raw -N chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -A PREROUTING -s 192.0.0.0/24,192.0.2.0/24,198.51.100.0/24,203.0.113.0/24 -j DROP
  iptables -t raw -A PREROUTING -d 192.0.0.0/24,192.0.2.0/24,198.51.100.0/24,203.0.113.0/24 -j DROP
  iptables -t raw -A PREROUTING -d 0.0.0.0/8 -j DROP
  # Block spoofed packets
  iptables -t raw -A PREROUTING -s 0.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,169.254.0.0/16,224.0.0.0/4,198.18.0.0/15,100.64.0.0/10,192.88.99.0/24 -i \$default_iface -j DROP
  iptables -t raw -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
  iptables -t raw -A PREROUTING -p udp -m udp -m multiport --ports 0 -j DROP
  iptables -t raw -A PREROUTING -p icmp -j chain-icmp
  iptables -t raw -A PREROUTING -p tcp -m tcp -j chain-bad_tcp
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-reply -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type network-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type host-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type protocol-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type port-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type fragmentation-needed -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-request -i \$default_iface -j DROP
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-request -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type time-exceeded -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type parameter-problem -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type any -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,ACK FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,URG URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,FIN FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,PSH PSH -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL ALL -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL NONE -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp -m tcp -m multiport --ports 0 -j DROP
  iptables -t raw -P PREROUTING ACCEPT

  # Limit connections per source IP
  iptables -C INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset > /dev/null 2>&1 || iptables -A INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset

  # Allow established connections
  iptables -C INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

  # Drop invalid packets
  iptables -C INPUT -m conntrack --ctstate INVALID -j DROP > /dev/null 2>&1 || iptables -A INPUT -m conntrack --ctstate INVALID -j DROP

  # Drop fragments
  iptables -C INPUT -f -j DROP > /dev/null 2>&1 || iptables -A INPUT -f -j DROP

  # Drop SYN packets with suspicious MSS value
  iptables -C INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP > /dev/null 2>&1 || iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

  # Configure loopback
  iptables -C INPUT -i lo -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -i lo -j ACCEPT
  iptables -C INPUT ! -i lo -s 127.0.0.0/8 -j DROP > /dev/null 2>&1 || iptables -A INPUT ! -i lo -s 127.0.0.0/8 -j DROP

  # Allow ICMP
  iptables -C INPUT -p icmp -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p icmp -j ACCEPT

  # Allow SSH
  iptables -C INPUT -p tcp -m tcp --dport \\\$SSH_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp --dport \\\$SSH_PORT -j ACCEPT

  # Allow WireGuard
  iptables -C INPUT -p udp --dport \\\$WG_CON_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p udp --dport \\\$WG_CON_PORT -j ACCEPT

  # Special case for WG Portal from reverse proxy
  iptables -C INPUT -p tcp -m tcp -i brdockext -s \\\$DOCK_EXT_NET --dport \\\$WG_PORTAL_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp -i brdockext -s \\\$DOCK_EXT_NET --dport \\\$WG_PORTAL_PORT -j ACCEPT
  iptables -D DOCKER-USER -s 127.0.0.0/8 -m conntrack --ctorigdstport \\\$WG_PORTAL_PORT --ctdir ORIGINAL -j ACCEPT 2> /dev/null
  iptables -D DOCKER-USER -m conntrack --ctorigdstport \\\$WG_PORTAL_PORT --ctdir ORIGINAL -j DROP 2> /dev/null
  iptables -I DOCKER-USER -m conntrack --ctorigdstport \\\$WG_PORTAL_PORT --ctdir ORIGINAL -j DROP
  iptables -I DOCKER-USER -s 127.0.0.0/8 -m conntrack --ctorigdstport \\\$WG_PORTAL_PORT --ctdir ORIGINAL -j ACCEPT

  # Policy drop for input and forward
  iptables -P INPUT DROP
  iptables -P FORWARD DROP

  # Policy drop all ipv6 traffic
  ip6tables -P INPUT DROP
  ip6tables -P FORWARD DROP
  ip6tables -P OUTPUT DROP

  sysctl --system > /dev/null 2>&1

EOFBS

# Special case - if RelayServer is behind a firewall and using a private IP for default route,
# then allow traffic from the gateway, since raw table blocks all private ranges
def_route_gate=\$(ip route | grep -e "^default" | awk '{print \$3}')
is_def_priv=\$(checkIsIPPrivate \$def_route_gate)
def_route_cidr_part=\$(ip route | grep src | grep \$(ip route | grep -e "^default" | awk -F'dev ' '{print \$2}' | xargs | cut -d" " -f1) | grep / | xargs | cut -d" " -f1 | cut -d"/" -f2)
if [ "\$is_def_priv" = "true" ]; then
  echo "Default route is in private range, adding allowance to (raw)iptables..."
  sudo sed -i "/  # Block spoofed packets.*/a\  iptables -t raw -C PREROUTING -s \$def_route_gate\/\$def_route_cidr_part -i \$default_iface -j ACCEPT > \/dev\/null 2>&1 || iptables -t raw -I PREROUTING -s \$def_route_gate\/\$def_route_cidr_part -i \$default_iface -j ACCEPT" \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
else
  echo "Default route is in public range."
fi

  sudo chmod 744 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
  sudo \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh >/dev/null <<EOFBS
#!/bin/bash
  set +e

  SSH_PORT=$RELAYSERVER_SSH_PORT
  WG_CON_PORT=$RELAYSERVER_WG_PORT
  WG_PORTAL_PORT=$RELAYSERVER_WG_PORTAL_PORT
  DOCK_EXT_NET=$NET_EXTERNAL_SUBNET
  ports_list=53,587,$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT,22000,21027

  portsArr=(\\\$(echo \\\$ports_list | tr "," "\n"))
  for cur_port in "\\\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \\\$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
    iptables -D DOCKER-USER -m conntrack --ctorigdstport \\\$cur_port --ctdir ORIGINAL -j DROP 2> /dev/null
  done

  iptables -D INPUT -f -j DROP > /dev/null 2>&1
  iptables -D INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP > /dev/null 2>&1
  iptables -D INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset > /dev/null 2>&1
  iptables -D INPUT -m conntrack --ctstate INVALID -j DROP > /dev/null 2>&1
  iptables -D INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -i lo -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT ! -i lo -s 127.0.0.0/8 -j DROP > /dev/null 2>&1
  iptables -D INPUT -p icmp -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -p tcp -m tcp --dport \\\$SSH_PORT -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -p udp --dport \\\$WG_CON_PORT -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -p tcp -m tcp -i brdockext -s \\\$DOCK_EXT_NET --dport \\\$WG_PORTAL_PORT -j ACCEPT > /dev/null 2>&1
  iptables -D DOCKER-USER -s 127.0.0.0/8 -m conntrack --ctorigdstport \\\$WG_PORTAL_PORT --ctdir ORIGINAL -j ACCEPT 2> /dev/null
  iptables -D DOCKER-USER -m conntrack --ctorigdstport \\\$WG_PORTAL_PORT --ctdir ORIGINAL -j DROP 2> /dev/null

  iptables -t raw -F PREROUTING
  iptables -t raw -F chain-icmp > /dev/null 2>&1
  iptables -t raw -F chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -X chain-icmp > /dev/null 2>&1
  iptables -t raw -X chain-bad_tcp > /dev/null 2>&1

  iptables -P INPUT ACCEPT
  ip6tables -P INPUT ACCEPT
  ip6tables -P FORWARD ACCEPT
  ip6tables -P OUTPUT ACCEPT

EOFBS
  sudo chmod 500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh
  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service >/dev/null <<EOFBS
[Unit]
Description=HSHQ Startup Script(s) with root privileges
After=default.target

[Service]
Type=oneshot
ExecStart=\$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh

[Install]
WantedBy=default.target
EOFBS
  sudo chmod 644 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service
  sudo chown root:root \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service
  sudo rm -f /etc/systemd/system/runOnBootRoot.service
  sudo ln -s \$RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service /etc/systemd/system/runOnBootRoot.service
  sudo systemctl daemon-reload
  sudo systemctl enable runOnBootRoot

  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh >/dev/null <<EOFWG
#!/bin/bash
set +e
ip rule delete priority 10

ip rule delete priority 15
while [ \\\$? -eq 0 ]
do
  ip rule delete priority 15
done

ip rule delete priority 20
while [ \\\$? -eq 0 ]
do
  ip rule delete priority 20
done

ip route flush table 42

EOFWG
  sudo chmod 0500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh

}

function outputCaddyScripts()
{
  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh >/dev/null <<EOFCD
#!/bin/bash
RELAYSERVER_HSHQ_NONBACKUP_DIR=\$RELAYSERVER_HSHQ_NONBACKUP_DIR
docker container stop caddy
rm -fr \\\$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy/config/*
rm -fr \\\$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy/data/*
docker container start caddy

EOFCD

  sudo chmod 0500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh
  sudo chown root:root \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh
  cat <<EOFCD > \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addLECertDomains.sh
#!/bin/bash

subdomlist=\\\$1
RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  set +e
  leCertsArr=(\\\$(echo "\\\$subdomlist" | tr "," "\n"))
  for subdom in "\\\${leCertsArr[@]}"
  do
    if [ -z "\\\$subdom" ]; then continue; fi
    grep "# LE certs path \\\$subdom BEGIN" \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile >/dev/null
    if [ \\\$? -ne 0 ]; then
      strBlock=""
      strBlock=\\\$strBlock"# LE certs path \\\$subdom BEGIN\n"
      strBlock=\\\$strBlock"http://\\\$subdom {\n"
      strBlock=\\\$strBlock"  handle /.well-known/acme-challenge/* {\n"
      strBlock=\\\$strBlock"    reverse_proxy \\\$subdom {\n"
      strBlock=\\\$strBlock"      import sn-resolver\n"
      strBlock=\\\$strBlock"    }\n"
      strBlock=\\\$strBlock"  }\n"
      strBlock=\\\$strBlock"}\n"
      strBlock=\\\$strBlock"# LE certs path \\\$subdom END\n"
      echo -e "\\\$strBlock" >> \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
    fi
  done
  docker container restart caddy
}

main "\\\$@"
EOFCD
  chmod 0500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addLECertDomains.sh


  cat <<EOFCD > \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeLECertDomains.sh
#!/bin/bash
set +e

RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  subdomlist="\\\$1"
  leCertsArr=(\\\$(echo "\\\$subdomlist" | tr "," "\n"))
  for subdom in "\\\${leCertsArr[@]}"
  do
    if [ -z "\\\$subdom" ]; then continue; fi
    sed -i "/# LE certs path \\\$subdom BEGIN/,/# LE certs path \\\$subdom END/d" \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  done
  cat -s \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile > \\\$HOME/tmpcadfile
  mv \\\$HOME/tmpcadfile \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  docker container restart caddy
}

main "\\\$@"
EOFCD
  chmod 0500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeLECertDomains.sh

  cat <<EOFEX > \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addExposeDomains.sh
#!/bin/bash

RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  subdomlist="\\\$1"
  exposeArr=(\\\$(echo "\\\$subdomlist" | tr "," "\n"))
  for subdom in "\\\${exposeArr[@]}"
  do
    if [ -z "\\\$subdom" ]; then continue; fi
    grep "# Expose domain \\\$subdom BEGIN" \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile >/dev/null
    if [ \\\$? -ne 0 ]; then
      strBlock=""
      strBlock=\\\$strBlock"# Expose domain \\\$subdom BEGIN\n"
      strBlock=\\\$strBlock"https://\\\$subdom {\n"
      strBlock=\\\$strBlock"  import safe-header\n"
      strBlock=\\\$strBlock"  reverse_proxy https://\\\$subdom {\n"
      strBlock=\\\$strBlock"    import sn-resolver\n"
      strBlock=\\\$strBlock"  }\n"
      strBlock=\\\$strBlock"}\n"
      strBlock=\\\$strBlock"# Expose domain \\\$subdom END\n"
      echo -e "\\\$strBlock" >> \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
    fi
  done
  docker container restart caddy
}
main "\\\$@"
EOFEX
  chmod 500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addExposeDomains.sh

  cat <<EOFEX > \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeExposeDomains.sh
#!/bin/bash
set +e

RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  subdomlist="\\\$1"
  exposeArr=(\\\$(echo "\\\$subdomlist" | tr "," "\n"))
  for subdom in "\\\${exposeArr[@]}"
  do
    if [ -z "\\\$subdom" ]; then continue; fi
    sed -i "/# Expose domain \\\$subdom BEGIN/,/# Expose domain \\\$subdom END/d" \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  done
  cat -s \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile > \\\$HOME/tmpcadfile
  mv \\\$HOME/tmpcadfile \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  docker container restart caddy
}

main "\\\$@"
EOFEX
  chmod 500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeExposeDomains.sh

}

function outputRelayedDomainsScript()
{
  cat <<EOFRD > \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addRelayedDomains.sh
#!/bin/bash
set +e

domains_to_add=\\\$1
deliver_to_host=\\\$2
deliver_to_ip=\\\$3
RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  addRelayedDomains
}

function addRelayedDomains()
{
  if [ -z \\\$deliver_to_ip ]; then
    deliver_ip=\\\$(getIPFromHostname \\\$deliver_to_host)
  else
    deliver_ip=\\\$deliver_to_ip
  fi
  docker exec mail-relay-postfix /etc/postfix/scripts/addRelayedMailDomains.sh \\\$domains_to_add \\\$deliver_to_host
  # Add domains to caddy dnsmasq container
  domains_to_add_Arr=(\\\$(echo \\\$domains_to_add | tr "," "\n"))
  for add_domain in "\\\${domains_to_add_Arr[@]}"
  do
    sed -i "/.\\\$add_domain/d" \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/dns/dnsmasq.conf
    echo "address=/.\\\$add_domain/\\\$deliver_ip" >> \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/dns/dnsmasq.conf
  done
  docker container restart caddy-dns
  
  grep \\\${deliver_to_host} \\\$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/mailhosts.conf >/dev/null
  if [ \\\$? -ne 0 ]; then
    echo "local-data: \"\\\${deliver_to_host}. A \\\$deliver_ip\"" >> \\\$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/mailhosts.conf
    echo "local-data-ptr: \"\\\$deliver_ip \\\${deliver_to_host}.\"" >> \\\$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/mailhosts.conf
  fi
  docker container restart mail-relay-unbound
}

function getIPFromHostname()
{
  echo \\\$(dig \\\$1 +short | grep '^[.0-9]*\\\$')
}

main "\\\$@"
EOFRD
  chmod 0500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addRelayedDomains.sh

  cat <<EOFRD > \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeRelayedDomains.sh
#!/bin/bash
set +e

domains_to_remove=\\\$1
deliver_to_host=\\\$2
mail_user_domain=\\\$3
RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  removeRelayedDomains
}

function removeRelayedDomains()
{
  docker exec mail-relay-postfix /etc/postfix/scripts/removeRelayedMailDomains.sh \\\$domains_to_remove \\\$mail_user_domain

  # Remove domains from caddy dnsmasq container
  domains_to_rem_Arr=(\\\$(echo \\\$domains_to_remove | tr "," "\n"))
  for rem_domain in "\\\${domains_to_rem_Arr[@]}"
  do
    sed -i "/.\\\$rem_domain/d" \\\$RELAYSERVER_HSHQ_STACKS_DIR/caddy/dns/dnsmasq.conf
  done
  docker container restart caddy-dns

  if ! [ -z \\\$deliver_to_host ]; then
    sed -i "/\\\$deliver_to_host/d" \\\$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/mailhosts.conf
    docker container restart mail-relay-unbound
  fi
}

main "\\\$@"
EOFRD
  chmod 0500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeRelayedDomains.sh
}

function getPortainerToken()
{
  while [ -n "\$1" ]
  do case "\$1" in
  -u) port_username="\$2";;
  -p) port_password="\$2"
  shift ;;
  --) shift
  break ;;
  esac
  shift
  done
  if [ -z "\$port_username" ]; then
    read -p "Enter the portainer username: " port_username
	echo
  fi
  if [ -z "\$port_password" ]; then
    read -s -p "Enter the portainer password: " port_password
	echo
  fi

  echo \$(http --check-status --ignore-stdin --verify=no https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/auth username=\$port_username password=\$port_password | jq -r .jwt)
}

function createStackJson()
{
  echo "{\"Name\":\"\$1\",""\$( jq -Rscjr '{StackFileContent: . }' \$2 | tail -c +2 | head -c -1 )"",\"Env\":"\$(envToJson \$3)"}"
}

function envToJson()
{
  if [ -z "\$1" ]; then
    echo "[]"
	return
  fi
  OLDIFS=\$IFS
  IFS=\$(echo -en "\n\b")
  lines=\$(cat \$1)
  jsonstring="["
  for line in \$lines
  do
    key="\$(sed 's/=.*//' <<< "\$line")"
    value="\$(sed 's/^[^=]*=//' <<< "\$line")"
    jsonstring="\$jsonstring{\"name\":\"\$key\",\"value\":\"\$value\"},"
  done
  jsonstring="\${jsonstring%?}]"
  IFS=\$OLDIFS
  echo \$jsonstring
}

function getStackID()
{
  stackID="NA"
  stackName=\$1
  qry=\$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer \$RELAYSERVER_PORTAINER_TOKEN" endpointId==1)
  for row in \$(echo "\${qry}" | jq -r '.[] | @base64'); do
    _jq()
    {
      echo \${row} | base64 --decode | jq -r \${1}
    }
    if [ "\$(_jq '.Name')" = "\$stackName" ]; then
      stackID=\$(_jq '.Id')
      break
    fi
  done
  if ! [ "\$stackID" = "NA" ]; then
    echo \$stackID
  fi
}

function startStopStack()
{
  stackName=\$1
  startStop=\$2
  stackID=\$(getStackID \$stackName)
  http --check-status --ignore-stdin --verify=no --timeout=300 POST https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/stacks/\$stackID/\$startStop "Authorization: Bearer \$RELAYSERVER_PORTAINER_TOKEN" endpointId==1 > /dev/null
}

function installStack()
{
  stack_name=\$1
  container_name=\$2
  stack_search_string=\$3
  envfile=\$4
  installLogNotify "Installing Stack (\$stack_name)"
  sudo -v
  echo
  echo "Creating stack: \$stack_name"
  echo "\$(createStackJson \$stack_name \$HOME/\$stack_name-compose.yml "\$envfile")" > \$HOME/\$stack_name-json.tmp
  http --check-status --ignore-stdin --verify=no --timeout=300 https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/stacks/create/standalone/string "Authorization: Bearer \$RELAYSERVER_PORTAINER_TOKEN" endpointId==1 @\$HOME/\$stack_name-json.tmp > /dev/null
  search=\$stack_search_string
  isFound="F"
  i=0
  set +e
  while [ \$i -le 300 ]
  do
    findtext=\$(docker logs \$container_name 2>&1 | grep "\$search")
    if ! [ -z "\$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 1 second, total wait=\$i seconds..."
    sleep 1
    i=\$((i+1))
  done
  set -e
  if [ \$isFound == "F" ]; then
    echo "\$stack_name did not start up correctly..."
    exit 1
  fi
  sleep $sleep_interval_after_create_stack
  echo
  rm -f \$HOME/\$stack_name-json.tmp
  rm -f \$HOME/\$stack_name-compose.yml
  rm -f \$envfile
}

function startWazuhAgent()
{
  curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | sudo gpg --no-default-keyring --keyring gnupg-ring:/usr/share/keyrings/wazuh.gpg --import && sudo chmod 644 /usr/share/keyrings/wazuh.gpg
  echo "deb [signed-by=/usr/share/keyrings/wazuh.gpg] https://packages.wazuh.com/4.x/apt/ stable main" | sudo tee /etc/apt/sources.list.d/wazuh.list
  sudo DEBIAN_FRONTEND=noninteractive apt update
  sudo WAZUH_MANAGER="$SUB_WAZUH.$HOMESERVER_DOMAIN" DEBIAN_FRONTEND=noninteractive apt install wazuh-agent
  sudo systemctl daemon-reload
  set +e
  sudo grep "/var/log/docker/" /var/ossec/etc/ossec.conf
  if [ \$? -ne 0 ]; then
    sudo sed -i "/<\/ossec_config>/{s//  <localfile>\n    <log_format>syslog<\/log_format>\n    <location>\/var\/log\/docker\/*<\/location>\n  <\/localfile>\n\n<\/ossec_config>/;:p;n;bp}" /var/ossec/etc/ossec.conf
  fi
  set -e
  sudo systemctl enable wazuh-agent
  sudo systemctl start wazuh-agent
}

function getDockerSubnet()
{
  echo \$(docker network inspect \$1 | grep Subnet | awk '{print \$2}' | sed 's/[",]//g')
}

function installPortainer()
{
  if [ -d "\$RELAYSERVER_HSHQ_STACKS_DIR/portainer" ]; then
    return
  fi
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/portainer
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/portainer/certs
  outputConfigPortainer

  generateCert portainer portainer
  
  PORTAINER_DB_KEY=\$(pwgen -c -n 64 1)
  echo \$PORTAINER_DB_KEY | sudo tee \$RELAYSERVER_HSHQ_SECRETS_DIR/portainer_key.txt >/dev/null
  sudo chmod 0400 \$RELAYSERVER_HSHQ_SECRETS_DIR/portainer_key.txt

  docker-compose -f \$RELAYSERVER_HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d
  search="starting HTTPS server"
  isFound="F"
  i=0
  set +e
  while [ \$i -le 300 ]
  do
    findtext=\$(docker logs portainer 2>&1 | grep "\$search")
    if ! [ -z "\$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 1 second, total wait=\$i seconds..."
    sleep 1
    i=\$((i+1))
  done
  set -e
  if [ \$isFound == "F" ]; then
    echo "Portainer did not start up correctly..."
    exit 1
  fi

  echo "Portainer has been loaded and started..."
  echo "Sleeping 10 seconds to ensure Portainer has loaded completely."
  sleep 10

  RELAYSERVER_PORTAINER_ADMIN_USERID=\$(http --verify=no --print="b" POST https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/users/admin/init Username="$RELAYSERVER_PORTAINER_ADMIN_USERNAME" Password="$RELAYSERVER_PORTAINER_ADMIN_PASSWORD" | jq -r .Id)
  RELAYSERVER_PORTAINER_TOKEN="\$(getPortainerToken -u $RELAYSERVER_PORTAINER_ADMIN_USERNAME -p $RELAYSERVER_PORTAINER_ADMIN_PASSWORD)"
  http -f --verify=no --timeout=300 --print="b" POST https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/endpoints "Authorization: Bearer \$RELAYSERVER_PORTAINER_TOKEN" Name="$RELAYSERVER_NAME" EndpointCreationType=1 >/dev/null

  # Enable dark mode because it looks better
  echo "{\"theme\":{\"color\":\"dark\"}}" > portainer-json.tmp
  http --verify=no --timeout=300 PUT https://127.0.0.1:$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT/api/users/\$RELAYSERVER_PORTAINER_ADMIN_USERID "Authorization: Bearer \$RELAYSERVER_PORTAINER_TOKEN" @portainer-json.tmp > /dev/null
  rm portainer-json.tmp
}

function outputConfigPortainer()
{
  cat <<EOFPC > \$RELAYSERVER_HSHQ_STACKS_DIR/portainer/docker-compose.yml
$STACK_VERSION_PREFIX portainer $(getScriptStackVersion portainer)
version: '3.5'

services:
  portainer:
    image: $IMG_PORTAINER
    container_name: portainer
    hostname: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    env_file: portainer.env
    networks:
      - dock-proxy-net
      # Comment out the external network to disable external (web) access
      # Also ensure to comment out the ports section and dock-ext-net section at the bottom
      - dock-ext-net
    ports:
      - $RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT:9443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - \$RELAYSERVER_HSHQ_STACKS_DIR/portainer:/data
      - \$RELAYSERVER_HSHQ_SSL_DIR/portainer.crt:/certs/portainer.crt
      - \$RELAYSERVER_HSHQ_SSL_DIR/portainer.key:/certs/portainer.key
      - \$RELAYSERVER_HSHQ_SECRETS_DIR/portainer_key.txt:/run/secrets/portainer
    command:
      --sslcert /certs/portainer.crt
      --sslkey /certs/portainer.key
      --http-disabled

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFPC

  cat <<EOFPC > \$RELAYSERVER_HSHQ_STACKS_DIR/portainer/portainer.env
RELAYSERVER_HSHQ_DATA_DIR=\$RELAYSERVER_HSHQ_DATA_DIR
RELAYSERVER_HSHQ_NONBACKUP_DIR=\$RELAYSERVER_HSHQ_NONBACKUP_DIR
RELAYSERVER_HSHQ_SCRIPTS_DIR=\$RELAYSERVER_HSHQ_SCRIPTS_DIR
RELAYSERVER_HSHQ_SECRETS_DIR=\$RELAYSERVER_HSHQ_SECRETS_DIR
RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR
RELAYSERVER_HSHQ_SSL_DIR=\$RELAYSERVER_HSHQ_SSL_DIR
TZ=\$TZ
UID=\$USERID
GID=\$GROUPID
EOFPC
}

function installAdGuard()
{
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/adguard
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/adguard/conf
  mkdir \$RELAYSERVER_HSHQ_NONBACKUP_DIR/adguard
  mkdir \$RELAYSERVER_HSHQ_NONBACKUP_DIR/adguard/work

  outputConfigAdGuard
  generateCert adguard adguard

  sudo systemctl stop systemd-resolved > /dev/null 2>&1
  sudo systemctl disable systemd-resolved > /dev/null 2>&1
  sudo rm -f /etc/resolv.conf > /dev/null 2>&1
  sudo tee /etc/resolv.conf >/dev/null <<EOFR
nameserver 127.0.0.1
EOFR

  np_path="/etc/netplan/*"
  for cur_np in "\$np_path"
  do
    sudo sed -i "s|8.8.8.8|9.9.9.9|g" \$cur_np
    sudo sed -i "s|8.8.4.4|149.112.112.112|g" \$cur_np
  done
  sudo netplan apply > /dev/null 2>&1

  installStack adguard adguard "entering tls listener loop on" \$HOME/adguard.env
}

function outputConfigAdGuard()
{
  RELAYSERVER_ADGUARD_ADMIN_PASSWORD_HASH=\$(htpasswd -B -n -b $RELAYSERVER_ADGUARD_ADMIN_USERNAME $RELAYSERVER_ADGUARD_ADMIN_PASSWORD | cut -d":" -f2-)
  
  cat <<EOFAC > \$HOME/adguard-compose.yml
$STACK_VERSION_PREFIX adguard $(getScriptStackVersion adguard)
version: '3.5'

services:
  adguard:
    image: $IMG_ADGUARD
    container_name: adguard
    hostname: adguard
    restart: unless-stopped
    env_file: stack.env
    user: "\\\${UID}:\\\${GID}"
    security_opt:
      - no-new-privileges:true
    networks:
      dock-proxy-net:
      dock-ext-net:
        ipv4_address: ${NET_EXTERNAL_SUBNET_PREFIX}.253
    ports:
      - 53:53/tcp
      - 53:53/udp
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/adguard/conf:/opt/adguardhome/conf
      - \\\${RELAYSERVER_HSHQ_NONBACKUP_DIR}/adguard/work:/opt/adguardhome/work
      - \\\${RELAYSERVER_HSHQ_SSL_DIR}/adguard.crt:/opt/adguardhome/conf/cert.pem
      - \\\${RELAYSERVER_HSHQ_SSL_DIR}/adguard.key:/opt/adguardhome/conf/key.pem

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFAC

  cat <<EOFAC > \$HOME/adguard.env
UID=\$USERID
GID=\$GROUPID
EOFAC

  cat <<EOFAD > \$RELAYSERVER_HSHQ_STACKS_DIR/adguard/conf/AdGuardHome.yaml
http:
  pprof:
    port: 6060
    enabled: false
  address: 0.0.0.0:3000
  session_ttl: 720h
users:
  - name: $RELAYSERVER_ADGUARD_ADMIN_USERNAME
    password: \$RELAYSERVER_ADGUARD_ADMIN_PASSWORD_HASH
auth_attempts: 5
block_auth_min: 15
http_proxy: ""
language: en
theme: dark
dns:
  bind_hosts:
    - 0.0.0.0
  port: 53
  anonymize_client_ip: false
  ratelimit: 0
  ratelimit_whitelist: []
  refuse_any: true
  upstream_dns:
    - https://dns.quad9.net/dns-query
    - https://anycast.dns.nextdns.io/dns-query
    - quic://dns-unfiltered.adguard.com:784
    - https://dns.nextdns.io/dns-query
  upstream_dns_file: ""
  bootstrap_dns:
    - 9.9.9.9
    - 149.112.112.112
  fallback_dns: []
  all_servers: false
  fastest_addr: false
  fastest_timeout: 1s
  allowed_clients:
    - 127.0.0.0/8
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
  disallowed_clients: []
  blocked_hosts:
    - version.bind
    - id.server
    - hostname.bind
  trusted_proxies:
    - 127.0.0.0/8
    - ::1/128
  cache_size: 41943040
  cache_ttl_min: 0
  cache_ttl_max: 0
  cache_optimistic: true
  bogus_nxdomain: []
  aaaa_disabled: true
  enable_dnssec: true
  edns_client_subnet:
    custom_ip: ""
    enabled: false
    use_custom: false
  max_goroutines: 300
  handle_ddr: true
  ipset: []
  ipset_file: ""
  bootstrap_prefer_ipv6: false
  upstream_timeout: 3s
  private_networks: []
  use_private_ptr_resolvers: true
  local_ptr_upstreams: []
  use_dns64: false
  dns64_prefixes: []
  serve_http3: false
  use_http3_upstreams: false
tls:
  enabled: true
  server_name: adguard
  force_https: true
  port_https: 443
  port_dns_over_tls: 853
  port_dns_over_quic: 853
  port_dnscrypt: 0
  dnscrypt_config_file: ""
  allow_unencrypted_doh: false
  certificate_chain: ""
  private_key: ""
  certificate_path: /opt/adguardhome/conf/cert.pem
  private_key_path: /opt/adguardhome/conf/key.pem
  strict_sni_check: false
querylog:
  ignored:
    - $HOMESERVER_DOMAIN
    - '*.$HOMESERVER_DOMAIN'
  interval: 720h
  size_memory: 1000
  enabled: true
  file_enabled: true
statistics:
  ignored:
    - $HOMESERVER_DOMAIN
    - '*.$HOMESERVER_DOMAIN'
  interval: 720h
  enabled: true
filters:
  - enabled: true
    url: https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
    name: AdGuard DNS filter
    id: 1
  - enabled: true
    url: https://adaway.org/hosts.txt
    name: AdAway Default Blocklist
    id: 2
  - enabled: true
    url: https://someonewhocares.org/hosts/zero/hosts
    name: Dan Pollock's List
    id: 1657273139
  - enabled: true
    url: https://raw.githubusercontent.com/Perflyst/PiHoleBlocklist/master/SmartTV-AGH.txt
    name: Perflyst and Dandelion Sprout's Smart-TV Blocklist
    id: 1657273140
  - enabled: true
    url: https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt
    name: WindowsSpyBlocker - Hosts spy rules
    id: 1657273141
  - enabled: true
    url: https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareAdGuardHome.txt
    name: Dandelion Sprout's Anti-Malware List
    id: 1657273142
  - enabled: true
    url: https://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/hosts.txt
    name: NoCoin Filter List
    id: 1657273143
  - enabled: true
    url: https://raw.githubusercontent.com/durablenapkin/scamblocklist/master/adguard.txt
    name: Scam Blocklist by DurableNapkin
    id: 1657273144
  - enabled: true
    url: https://raw.githubusercontent.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites/master/hosts
    name: The Big List of Hacked Malware Web Sites
    id: 1657273145
  - enabled: true
    url: https://malware-filter.gitlab.io/malware-filter/urlhaus-filter-agh-online.txt
    name: Online Malicious URL Blocklist
    id: 1657273146
  - enabled: true
    url: https://pgl.yoyo.org/adservers/serverlist.php?hostformat=adblockplus&showintro=1&mimetype=plaintext
    name: Peter Lowe's List
    id: 1657273147
whitelist_filters: []
user_rules:
  - '@@||api.ipify.org^'
dhcp:
  enabled: false
  interface_name: ""
  local_domain_name: lan
  dhcpv4:
    gateway_ip: ""
    subnet_mask: ""
    range_start: ""
    range_end: ""
    lease_duration: 86400
    icmp_timeout_msec: 1000
    options: []
  dhcpv6:
    range_start: ""
    lease_duration: 86400
    ra_slaac_only: false
    ra_allow_slaac: false
filtering:
  blocking_ipv4: ""
  blocking_ipv6: ""
  blocked_services:
    schedule:
      time_zone: Local
    ids: []
  rewrites:
    - domain: '*.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN'
      answer: \$RELAYSERVER_SERVER_IP
    - domain: '*.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN'
      answer: $RELAYSERVER_WG_SV_IP
    - domain: '$HOMESERVER_DOMAIN'
      answer: $RELAYSERVER_WG_HS_IP
    - domain: '*.$HOMESERVER_DOMAIN'
      answer: $RELAYSERVER_WG_HS_IP
  protection_disabled_until: null
  safe_search:
    enabled: false
    bing: true
    duckduckgo: true
    google: true
    pixabay: true
    yandex: true
    youtube: true
  blocking_mode: default
  parental_block_host: family-block.dns.adguard.com
  safebrowsing_block_host: standard-block.dns.adguard.com
  safebrowsing_cache_size: 10485760
  safesearch_cache_size: 10485760
  parental_cache_size: 10485760
  cache_time: 30
  filters_update_interval: 24
  blocked_response_ttl: 10
  filtering_enabled: true
  parental_enabled: false
  safebrowsing_enabled: true
  protection_enabled: true
clients:
  runtime_sources:
    whois: true
    arp: true
    rdns: true
    dhcp: true
    hosts: true
  persistent: []
log:
  file: ""
  max_backups: 0
  max_size: 100
  max_age: 3
  compress: false
  local_time: false
  verbose: false
os:
  group: ""
  user: ""
  rlimit_nofile: 0
schema_version: 27
EOFAD
}

function installMailRelay()
{
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/config
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/sasl
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/tls
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/var
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/redis
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/clamav
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound

  # Create temp network to determine available subnet
  docker network create --driver=bridge mail-relay-tmp > /dev/null
  mail_relay_subnet=\$(getDockerSubnet mail-relay-tmp)
  mail_relay_net_prefix=\$(echo \$mail_relay_subnet | rev | cut -d '.' -f2- | rev)
  docker network rm mail-relay-tmp
  docker network create -o com.docker.network.bridge.name=brd-mailrelay --driver=bridge --subnet \$mail_relay_subnet dock-mailrelay

  pw_hash=\$(docker run --rm $IMG_MAIL_RELAY_RSPAMD rspamadm pw -p $RELAYSERVER_RSPAMD_ADMIN_PASSWORD)
  outputConfigMailRelay
  openssl dhparam -out \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/tls/dh1024.pem 1024
  openssl dhparam -out \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/tls/dh512.pem 512
  openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:4096 -keyout \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/tls/key.pem -out \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/tls/cert.pem -subj "/C=US/ST=MO/L=STL/O=HomeServerHQ/OU=SampleCert/CN=$RELAYSERVER_EXT_EMAIL_HOSTNAME"
  chmod 0400 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/tls/cert.pem
  chmod 0400 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/tls/key.pem
  installStack mail-relay mail-relay-postfix "Starting Postfix Mail Transport Agent" \$HOME/mail-relay.env
  docker exec mail-relay-postfix bash -c "echo $SMTP_RELAY_PASSWORD | saslpasswd2 -c -p -f /etc/postfix/sasl/sasldb2 $SMTP_RELAY_USERNAME"
}

function outputConfigMailRelay()
{
  cat <<EOFPF > \$HOME/mail-relay-compose.yml
$STACK_VERSION_PREFIX mail-relay $(getScriptStackVersion mail-relay)
version: '3.5'

services:
  mail-relay-postfix:
    image: $IMG_MAIL_RELAY_POSTFIX
    container_name: mail-relay-postfix
    hostname: mail-relay-postfix
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ext-net
      - dock-mailrelay-net
    ports:
      - 25:25
      - 587:587
    dns:
      - \\\${SUBNET_PREFIX}.253
    depends_on:
      - mail-relay-redis
      - mail-relay-unbound
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt:/etc/postfix/tls/${CERTS_ROOT_CA_NAME}.crt:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/postfix/config:/etc/postfix/config
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/postfix/sasl:/etc/postfix/sasl
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/postfix/scripts:/etc/postfix/scripts
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/postfix/tls:/etc/postfix/tls
      - caddy-certs:/caddycerts:ro
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.mailcerts-15minute.schedule=@every 15m"
      - "ofelia.job-exec.mailcerts-15minute.command=/etc/postfix/scripts/copycerts.sh"
      - "ofelia.job-exec.mailcerts-daily.schedule=0 0 8 * * *"
      - "ofelia.job-exec.mailcerts-daily.command=/etc/postfix/scripts/copycerts.sh"
      - "ofelia.job-exec.mailcerts-daily.smtp-host=$SUB_POSTFIX.$HOMESERVER_DOMAIN"
      - "ofelia.job-exec.mailcerts-daily.smtp-port=587"
      - "ofelia.job-exec.mailcerts-daily.smtp-user=$EMAIL_SMTP_EMAIL_ADDRESS"
      - "ofelia.job-exec.mailcerts-daily.smtp-password=$EMAIL_SMTP_PASSWORD"
      - "ofelia.job-exec.mailcerts-daily.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.mailcerts-daily.email-from=Mail Certificate Updater <$EMAIL_SMTP_EMAIL_ADDRESS>"
      - "ofelia.job-exec.mailcerts-daily.mail-only-on-error=true"

  mail-relay-rspamd:
    image: $IMG_MAIL_RELAY_RSPAMD
    container_name: mail-relay-rspamd
    hostname: mail-relay-rspamd
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ext-net
      - dock-proxy-net
      - dock-mailrelay-net
    dns:
      - \\\${SUBNET_PREFIX}.253
    depends_on:
      - mail-relay-redis
      - mail-relay-unbound
      - mail-relay-postfix
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-mail-relay-rspamd-var:/var/lib/rspamd
      - v-mail-relay-rspamd-conf:/etc/rspamd/local.d

  mail-relay-unbound:
    image: $IMG_MAIL_RELAY_UNBOUND
    container_name: mail-relay-unbound
    hostname: mail-relay-unbound
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      dock-ext-net:
      dock-mailrelay-net:
        ipv4_address: \\\${SUBNET_PREFIX}.253
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/unbound/mailhosts.conf:/opt/unbound/etc/unbound/a-records.conf:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/unbound/forward-records.conf:/opt/unbound/etc/unbound/forward-records.conf:ro

#  mail-relay-clamav:
#    image: $IMG_MAIL_RELAY_CLAMAV
#    container_name: mail-relay-clamav
#    hostname: mail-relay-clamav
#    restart: unless-stopped
#    env_file: stack.env
#    security_opt:
#      - no-new-privileges:true
#    networks:
#      - dock-ext-net
#      - dock-mailrelay-net
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#      - v-mail-relay-clamav:/var/lib/clamav

  mail-relay-redis:
    image: $IMG_REDIS
    container_name: mail-relay-redis
    hostname: mail-relay-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailrelay-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-mail-relay-redis:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

volumes:
  caddy-certs:
    external: true
  v-mail-relay-rspamd-var:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/rspamd/var
  v-mail-relay-rspamd-conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/rspamd/conf
#  v-mail-relay-clamav:
#    driver: local
#    driver_opts:
#      type: none
#      o: bind
#      device: \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/clamav
  v-mail-relay-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \\\${RELAYSERVER_HSHQ_STACKS_DIR}/mail-relay/redis

networks:
  dock-ext-net:
    name: dock-ext
    external: true
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-mailrelay-net:
    name: dock-mailrelay
    external: true

EOFPF

  cat <<EOFPF > \$HOME/mail-relay.env
TZ=\\\${TZ}
MAIL_FQDN=$RELAYSERVER_EXT_EMAIL_HOSTNAME
POSTMASTER_ADDRESS=$EMAIL_ADMIN_EMAIL_ADDRESS
INTERNAL_CA_CERT_FILENAME=${CERTS_ROOT_CA_NAME}.crt
REDIS_HOST=mail-relay-redis
WEB_GUI_PASSWORD_HASH='\$pw_hash'
SUBNET=\$mail_relay_subnet
SUBNET_PREFIX=\$mail_relay_net_prefix
EOFPF

  cat <<EOFHC > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/groups.conf
group "policies" {
  symbols = {
    "DMARC_POLICY_REJECT" = {
      weight = 100.0;
    }
  }
}

EOFHC
  sudo chown root:root \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/groups.conf
  sudo chmod 644 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/groups.conf

  cat <<EOFHC > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/multimap.conf
IP_WHITELIST {
  type = "ip";
  prefilter = true;
  map = "/etc/rspamd/local.d/ip_whitelist.map";
  action = "accept";
}

IP_BLACKLIST {
  type = "ip";
  prefilter = true;
  map = "/etc/rspamd/local.d/ip_blacklist.map";
  action = "reject";
}

DOMAIN_WHITELIST {
  regexp = true;
  type = "from";
  filter = "email:domain";
  map = "/etc/rspamd/local.d/domain_whitelist.map";
  score = -100.0;
  action = "accept";
}

DOMAIN_BLACKLIST {
  regexp = true;
  type = "from";
  filter = "email:domain";
  map = "/etc/rspamd/local.d/domain_blacklist.map";
  score = 100.0;
  action = "reject";
}

EOFHC

  touch \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/ip_whitelist.map
  sudo chown 101:102 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/ip_whitelist.map
  sudo chmod 644 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/ip_whitelist.map
  touch \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/ip_blacklist.map
  sudo chown 101:102 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/ip_blacklist.map
  sudo chmod 644 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/ip_blacklist.map
  touch \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/domain_whitelist.map
  sudo chown 101:102 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/domain_whitelist.map
  sudo chmod 644 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/domain_whitelist.map
  touch \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/domain_blacklist.map
  sudo chown 101:102 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/domain_blacklist.map
  sudo chmod 644 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/domain_blacklist.map

  sudo chown 101:102 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf

  cat <<EOFHC > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/config/header_checks
/^Received:/              IGNORE
/^X-Originating-IP:/    IGNORE
/^X-Mailer:/            IGNORE
/^User-Agent:/          IGNORE
/^X-Mailer-Type:/       IGNORE
/^Authentication-Results:/      IGNORE
EOFHC

  cat <<EOFHC > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/config/relay
$HOMESERVER_DOMAIN     OK
EOFHC

  cat <<EOFHC > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/config/transport
$HOMESERVER_DOMAIN     relay:[$SUB_POSTFIX.$HOMESERVER_DOMAIN]:25
EOFHC

  cat <<EOFHC > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/config/sasl_senders
@$HOMESERVER_DOMAIN     $HOMESERVER_DOMAIN@mail-relay-postfix
EOFHC

  cat <<EOFCC > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/copycerts.sh
#!/bin/bash

find_certs=(\\\$(find /caddycerts -name \\\${MAIL_FQDN}.crt))
find_cert=\\\${find_certs[0]}
if ! [ -z "\\\$find_cert" ]; then
  find_key=\\\$(dirname \\\$find_cert)/\\\${MAIL_FQDN}.key
fi
if ! [ -z "\\\$find_cert" ] && ! [ -z "\\\$find_key" ] && [ -f \\\$find_key ]; then
  diff \\\$find_cert /etc/postfix/tls/cert.pem >/dev/null
  if [ \\\$? -ne 0 ]; then
    cp \\\$find_cert /etc/postfix/tls/cert.pem
    cp \\\$find_key /etc/postfix/tls/key.pem
    # Bypass the health check reload
    rm -rf /tmp/tls 2> /dev/null
    cp -a /etc/postfix/tls /tmp/tls
    postfix reload
    echo "Certificates Successfully Updated"
    exit 2
  fi
else
  echo "Certificate (\\\${MAIL_FQDN}.crt) does not exist"
  exit 1
fi
EOFCC
  chmod 544 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/copycerts.sh

  cat <<EOFCS > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/addRelayedMailDomains.sh
#!/bin/bash
set -e
domains_to_add=\\\$1
deliver_to_host=\\\$2

if [ -z "\\\$domains_to_add" ] || [ -z "\\\$deliver_to_host" ]; then
  echo "Empty Parameters"
  exit 1
fi

deliver_to_host_dom=\\\$(echo \\\$deliver_to_host | rev | cut -d"." -f2 | rev)
deliver_to_host_tld=\\\$(echo \\\$deliver_to_host | rev | cut -d"." -f1 | rev)
deliver_to_host_username=\\\$deliver_to_host_dom.\\\$deliver_to_host_tld

domains_to_add_Arr=(\\\$(echo \\\$domains_to_add | tr "," "\n"))

for curDomain in "\\\${domains_to_add_Arr[@]}"
do
  sed -i "/^@\\\$curDomain /d" /etc/postfix/config/sasl_senders
  sed -i "/\\\$curDomain/d" /etc/postfix/config/transport
  sed -i "/^\\\$curDomain /d" /etc/postfix/config/relay
  echo "@\\\${curDomain}     \\\${deliver_to_host_username}@mail-relay-postfix" >> /etc/postfix/config/sasl_senders
  sed -i "1s/^/\\\${curDomain}     relay:[\\\${deliver_to_host}]:25\n/" /etc/postfix/config/transport
  echo "\\\${curDomain}     OK" >> /etc/postfix/config/relay
done

postmap /etc/postfix/config/transport
postmap /etc/postfix/config/sasl_senders
postmap /etc/postfix/config/relay
postfix reload
EOFCS
  chmod 544 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/addRelayedMailDomains.sh

  cat <<EOFCS > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/removeRelayedMailDomains.sh
#!/bin/bash
set +e
domains_to_remove=\\\$1
mail_user_domain=\\\$2

domains_to_rem_Arr=(\\\$(echo \\\$domains_to_remove | tr "," "\n"))

for curDomain in "\\\${domains_to_rem_Arr[@]}"
do
  sed -i "/^@\\\$curDomain /d" /etc/postfix/config/sasl_senders
  sed -i "/\\\$curDomain/d" /etc/postfix/config/transport
  sed -i "/^\\\$curDomain /d" /etc/postfix/config/relay
done

if ! [ -z \\\$mail_user_domain ]; then
  saslpasswd2 -f /etc/postfix/sasl/sasldb2 -d \\\$mail_user_domain
fi

postmap /etc/postfix/config/transport
postmap /etc/postfix/config/sasl_senders
postmap /etc/postfix/config/relay
postfix reload
EOFCS
  chmod 544 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/removeRelayedMailDomains.sh

  cat <<EOFCS > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/addMailUser.sh
#!/bin/bash
set -e
username=\\\$1
password=\\\$2

echo \\\$password | saslpasswd2 -c -p -f /etc/postfix/sasl/sasldb2 \\\$username

postfix reload
EOFCS
  chmod 544 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/postfix/scripts/addMailUser.sh

  cat <<EOFUB > \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/mailhosts.conf
local-data: "$SUB_POSTFIX.${HOMESERVER_DOMAIN}. A $RELAYSERVER_WG_HS_IP"
local-data-ptr: "$RELAYSERVER_WG_HS_IP $SUB_POSTFIX.${HOMESERVER_DOMAIN}."
EOFUB
  chmod 644 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/mailhosts.conf

  touch \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/forward-records.conf
  chmod 644 \$RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/unbound/forward-records.conf
}

function getAllowedPublicIPs()
{
  set +e
  ips="0.0.0.0/5,8.0.0.0/7,11.0.0.0/8,12.0.0.0/6,16.0.0.0/4,32.0.0.0/3,64.0.0.0/2,128.0.0.0/3,160.0.0.0/5,168.0.0.0/6,172.0.0.0/12,172.32.0.0/11,172.64.0.0/10,172.128.0.0/9,173.0.0.0/8,174.0.0.0/7,176.0.0.0/4,192.0.0.0/9,192.128.0.0/11,192.160.0.0/13,192.169.0.0/16,192.170.0.0/15,192.172.0.0/14,192.176.0.0/12,192.192.0.0/10,193.0.0.0/8,194.0.0.0/7,196.0.0.0/6,200.0.0.0/5,208.0.0.0/4"
  if ! [ -z \$1 ]; then
    ips+=","\$1
  fi
  set -e
  echo \$ips
}

function installWireGuard()
{
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/clientdns
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/wgportal
  wgdate=\$(date)
  wginitdate=\$(date --date="\$wgdate" -u '+%Y-%m-%d %H:%M:%S.%N %z %Z')
  wgdbdate=\$(date --date="\$wgdate" -u '+%Y-%m-%d %H:%M:%S.%N')

  docker network create --driver=bridge tmpnet >/dev/null
  clientdns_subnet=\$(getDockerSubnet tmpnet)
  clientdns_subnet_prefix=\$(echo \$clientdns_subnet | rev | cut -d "." -f2- | rev)
  docker network rm tmpnet >/dev/null
  docker network create -o com.docker.network.bridge.name=brcd-user1 --driver=bridge --subnet \$clientdns_subnet cdns-user1

  outputConfigWireGuard
  sudo ln /etc/wireguard/$RELAYSERVER_WG_INTERFACE_NAME.conf \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/$RELAYSERVER_WG_INTERFACE_NAME.conf
  sudo systemctl enable wg-quick@$RELAYSERVER_WG_INTERFACE_NAME.service
  sudo systemctl start wg-quick@$RELAYSERVER_WG_INTERFACE_NAME.service
  installStack wgportal wgportal "starting web service on" \$HOME/wgportal.env
  startStopStack wgportal stop
  sudo sqlite3 \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/wgportal/wg_portal.db "update devices set display_name='WireGuard Server', mtu=$RELAYSERVER_SERVER_DEFAULT_MTU, dns_str='$RELAYSERVER_WG_SV_IP', post_up='\$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/wgupdown.sh up;', post_down='\$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/wgupdown.sh down;', default_endpoint='$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT', default_allowed_ips_str='\$(getAllowedPublicIPs $RELAYSERVER_WG_VPN_SUBNET)', default_persistent_keepalive=0, created_at='\$wgdbdate', updated_at='\$wgdbdate' where device_name='$RELAYSERVER_WG_INTERFACE_NAME';"
  startStopStack wgportal start
  sleep 2
  wgPortalAuth="\$(echo \$(echo -n ${RELAYSERVER_WGPORTAL_ADMIN_EMAIL}:${RELAYSERVER_WGPORTAL_ADMIN_PASSWORD} | base64) | sed 's| ||g')"
  sudo \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh "RelayServerClientDNS" "$EMAIL_ADMIN_EMAIL_ADDRESS" "$RELAYSERVER_WG_SV_CLIENTDNS_PUBLICKEY" "$RELAYSERVER_WG_SV_CLIENTDNS_PRESHAREDKEY" "$RELAYSERVER_WG_SV_CLIENTDNS_IP" "false" "true" "\$wgPortalAuth"
  sudo \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh "HomeServerClientDNS" "$EMAIL_ADMIN_EMAIL_ADDRESS" "$RELAYSERVER_WG_HS_CLIENTDNS_PUBLICKEY" "$RELAYSERVER_WG_HS_CLIENTDNS_PRESHAREDKEY" "$RELAYSERVER_WG_HS_CLIENTDNS_IP" "false" "true" "\$wgPortalAuth"
  sudo \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh "Primary-VPN-$HOMESERVER_DOMAIN" "$EMAIL_ADMIN_EMAIL_ADDRESS" "$RELAYSERVER_WG_HS_PUBLICKEY" "$RELAYSERVER_WG_HS_PRESHAREDKEY" "$RELAYSERVER_WG_HS_IP" "false" "true" "\$wgPortalAuth"
  sudo \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh "Primary-Internet-$HOMESERVER_DOMAIN" "$EMAIL_ADMIN_EMAIL_ADDRESS" "$RELAYSERVER_WG_INTERNET_HS_PUBLICKEY" "$RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY" "$RELAYSERVER_WG_INTERNET_HS_IP" "true" "false" "\$wgPortalAuth"
  sudo \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh "User-$LDAP_PRIMARY_USER_USERNAME" "$LDAP_PRIMARY_USER_EMAIL_ADDRESS" "$RELAYSERVER_WG_USER_PUBLICKEY" "$RELAYSERVER_WG_USER_PRESHAREDKEY" "$RELAYSERVER_WG_USER_IP" "true" "false" "\$wgPortalAuth"
  sudo systemctl stop wg-quick@$RELAYSERVER_WG_INTERFACE_NAME.service
  installStack clientdns clientdns-wireguard " " \$HOME/clientdns.env
}

function outputConfigWireGuard()
{
  sudo touch \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset
  sudo chmod 600 \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset
  default_iface=\$(ip route | grep -e "^default" | awk -F'dev ' '{print \$2}' | xargs | cut -d" " -f1)
  sudo tee \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/wgupdown.sh >/dev/null <<EOFPU
#!/bin/bash
COMMAND=\\\$1
RELAYSERVER_HSHQ_STACKS_DIR=\$RELAYSERVER_HSHQ_STACKS_DIR
set +e

default_iface=\$default_iface

function main()
{
  shift
  shift
  case "\\\$COMMAND" in
    up) up ;;
    down) down ;;
  esac
}

function up()
{
  ipset create inetusers hash:net
  iplist=\\\$(cat \\\$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset)
  for curip in \\\$iplist
  do
    if [ -z \\\$curip ]; then continue; fi
    ipset add inetusers \\\$curip
  done
  ipset create alldevices hash:net
  alliplist=(\\\$(sqlite3 \\\$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/wgportal/wg_portal.db "select ips_str from peers;"))
  for cur_ip in "\\\${alliplist[@]}"
  do
    if [ -z \\\$cur_ip ]; then continue; fi
    ipset add alldevices \\\$cur_ip
  done
  iptables -A FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j ACCEPT
  iptables -A FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -A POSTROUTING -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j MASQUERADE
  iptables -A FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o \\\$default_iface -m set --match-set inetusers src -j ACCEPT
  iptables -A FORWARD -i \\\$default_iface -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -A POSTROUTING -o \\\$default_iface -m set --match-set inetusers src -j MASQUERADE
}

function down()
{
  iptables -D FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j ACCEPT
  iptables -D FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -D POSTROUTING -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j MASQUERADE
  iptables -D FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o \\\$default_iface -m set --match-set inetusers src -j ACCEPT
  iptables -D FORWARD -i \\\$default_iface -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -D POSTROUTING -o \\\$default_iface -m set --match-set inetusers -j MASQUERADE
  ipset destroy inetusers
  ipset destroy alldevices
}

main "\\\$@"
EOFPU
  sudo chmod 500 \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/wgupdown.sh

  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh >/dev/null <<EOFWA
#!/bin/bash

name=\\\$1
email=\\\$2
publicKey=\\\$3
presharedKey=\\\$4
ipAddress=\\\$5
isInet=\\\$6
isInVPNSubnet=\\\$7
auth=\\\$8

uuid=\\\$(uuidgen | sed 's|-||g')
jsonbody="{\"UID\": \"\\\$uuid\", \"DeviceName\": \"$RELAYSERVER_WG_INTERFACE_NAME\", \"DeviceType\": \"client\", \"Identifier\": \"\\\$name\", \"Email\": \"\\\$email\", \"IgnoreGlobalSettings\": true, \"PublicKey\": \"\\\$publicKey\", \"PresharedKey\": \"\\\$presharedKey\", \"Endpoint\": \"$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT\", \"PersistentKeepalive\": 0, \"IPsStr\": \"\\\${ipAddress}/32\", \"Mtu\": $RELAYSERVER_CLIENT_DEFAULT_MTU}"
curl -s -X 'POST' 'http://127.0.0.1:$RELAYSERVER_WG_PORTAL_PORT/api/v1/backend/peers?DeviceName=$RELAYSERVER_WG_INTERFACE_NAME' -H 'accept: application/json' -H "Authorization: Basic \\\$auth" -H 'Content-Type: application/json' -d "\\\$jsonbody" >/dev/null
if [ \\\$? -ne 0 ]; then
  echo "There was a problem adding this client..."
  exit 1
fi

ipset add alldevices \\\${ipAddress}/32

if ! [ "\\\$isInVPNSubnet" = "true" ]; then
  route add \\\${ipAddress}/32 $RELAYSERVER_WG_INTERFACE_NAME
fi

if [ "\\\$isInet" = "true" ]; then
  ipset add inetusers \\\${ipAddress}/32
  echo \\\${ipAddress}/32 | tee -a \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset >/dev/null
fi


EOFWA
  sudo chmod 500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh

  sudo tee \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/removePeer.sh >/dev/null <<EOFWA
#!/bin/bash
set +e
publicKey=\\\$1
ipAddress=\\\$2
isInet=\\\$3
isInVPNSubnet=\\\$4
auth=\\\$5

function main()
{
  curl -s -X 'DELETE' "http://127.0.0.1:$RELAYSERVER_WG_PORTAL_PORT/api/v1/backend/peer?PublicKey=\\\$(urlEncode \\\$publicKey)" -H 'accept: application/json' -H "Authorization: Basic \\\$auth" -H 'Content-Type: application/json' >/dev/null
  if [ \\\$? -ne 0 ]; then
    echo "There was a problem removing this client..."
  fi
  ipset del alldevices \\\${ipAddress}/32
  if ! [ "\\\$isInVPNSubnet" = "true" ]; then
    route del \\\${ipAddress}/32 $RELAYSERVER_WG_INTERFACE_NAME
  fi
  if [ "\\\$isInet" = "true" ]; then
    ipset del inetusers \\\${ipAddress}/32
    sed -i '/\\\${ipAddress}/d' \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset
  fi
}

function urlEncode()
{
  strLength="\\\${#1}"
  for (( i = 0; i < strLength; i++ )); do
    c="\\\${1:i:1}"
    case \\\$c in
      [a-zA-Z0-9.~_-]) printf "\\\$c" ;;
      *) printf '%%%02X' "'\\\$c" ;;
    esac
  done
}

function urlDecode()
{
  url_encoded="\\\${1//+/ }"
  printf '%b' "\\\${url_encoded//%/\\x}"
}

main "\\\$@"
EOFWA
  sudo chmod 500 \$RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/removePeer.sh

  network_bits=\$(echo $RELAYSERVER_WG_VPN_SUBNET | cut -d "/" -f2)
  sudo tee /etc/wireguard/$RELAYSERVER_WG_INTERFACE_NAME.conf >/dev/null <<EOFWG
# AUTOGENERATED FILE - DO NOT EDIT
# -WGP- Interface: $RELAYSERVER_WG_INTERFACE_NAME / Updated: \$wginitdate / Created: \$wginitdate
# -WGP- Interface display name: WireGuard Server
# -WGP- Interface mode: server
# -WGP- PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY

[Interface]

# Core settings
PrivateKey = $RELAYSERVER_WG_SV_PRIVATEKEY
Address    = ${RELAYSERVER_WG_SV_IP}/\$network_bits

# Misc. settings (optional)
ListenPort = $RELAYSERVER_WG_PORT
MTU        = $RELAYSERVER_SERVER_DEFAULT_MTU

# Interface hooks (optional)
PostUp     = \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/wgupdown.sh up
PostDown   = \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/wgupdown.sh down

#
# Peers
#

EOFWG
  sudo chmod 500 /etc/wireguard/$RELAYSERVER_WG_INTERFACE_NAME.conf

  cat <<EOFWP > \$HOME/wgportal-compose.yml
$STACK_VERSION_PREFIX wgportal $(getScriptStackVersion wgportal)
version: '3.5'

services:
  wgportal:
    image: $IMG_WGPORTAL
    container_name: wgportal
    hostname: wgportal
    restart: unless-stopped
    env_file: stack.env
    network_mode: "host"
    cap_add:
      - NET_ADMIN
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/wireguard:/etc/wireguard
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/wireguard/wgportal:/app/data
EOFWP

  cat <<EOFWP > \$HOME/wgportal.env
CONFIG_FILE=/app/data/config.yml
EOFWP

  cat <<EOFWC > \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/wgportal/config.yml
core:
  listeningAddress: :$RELAYSERVER_WG_PORTAL_PORT
  externalUrl: https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/
  adminUser: $RELAYSERVER_WGPORTAL_ADMIN_EMAIL
  adminPass: $RELAYSERVER_WGPORTAL_ADMIN_PASSWORD
  editableKeys: true
  createDefaultPeer: false
  ldapEnabled: false
  company: $RELAYSERVER_NAME
  title: $RELAYSERVER_NAME WG Portal
  mailFrom: WireGuard <$EMAIL_SMTP_EMAIL_ADDRESS>
database:
  type: sqlite
  database: data/wg_portal.db
email:
  host: $SUB_POSTFIX.$HOMESERVER_DOMAIN
  port: 587
  tls: true
  user: $EMAIL_SMTP_EMAIL_ADDRESS
  pass: $EMAIL_SMTP_PASSWORD
wg:
  devices:
    - $RELAYSERVER_WG_INTERFACE_NAME
  defaultDevice: $RELAYSERVER_WG_INTERFACE_NAME
  configDirectory: /etc/wireguard
  manageIPAddresses: true
EOFWC

  cat <<EOFCD > \$HOME/clientdns-compose.yml
$STACK_VERSION_PREFIX clientdns $(getScriptStackVersion clientdns)
version: '3.5'

services:
  clientdns-dnsmasq:
    image: $IMG_DNSMASQ
    container_name: clientdns-dnsmasq
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      dock-ext-net:
      dock-proxy-net:
      cdns-user1-net:
        ipv4_address: \\\${CLIENTDNS_SUBNET_PREFIX}.253
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/wireguard/clientdns/dnsmasq.conf:/etc/dnsmasq.conf
    environment:
      - HTTP_USER=$RELAYSERVER_CLIENTDNS_ADMIN_USERNAME
      - HTTP_PASS=$RELAYSERVER_CLIENTDNS_ADMIN_PASSWORD

  clientdns-wireguard:
    image: $IMG_WIREGUARD
    container_name: clientdns-wireguard
    hostname: clientdns-wireguard
    restart: unless-stopped
    env_file: stack.env
    cap_add:
      - NET_ADMIN
    networks:
      - dock-ext-net
      - cdns-user1-net
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/wireguard/clientdns/Corefile:/config/coredns/Corefile:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/wireguard/clientdns/rsClientDNS.conf:/config/wg0.conf

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  cdns-user1-net:
    name: cdns-user1
    external: true
EOFCD

  cat <<EOFCD > \$HOME/clientdns.env
TZ=\\\${TZ}
CLIENTDNS_SUBNET_PREFIX=\$clientdns_subnet_prefix
USE_COREDNS=true
EOFCD

  cat <<EOFCD > \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/clientdns/dnsmasq.conf
# IP Address of this DNS Server: ${RELAYSERVER_WG_SV_CLIENTDNS_IP}/32
#======================
no-resolv
no-hosts
domain-needed
bogus-priv
server=127.0.0.11
cache-size=0
#======================
# Add new entries here


EOFCD

  cat <<EOFCF > \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/clientdns/Corefile
. {
    loop
    reload 15s
    forward . \${clientdns_subnet_prefix}.253
}
EOFCF

  sudo tee \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/clientdns/rsClientDNS.conf >/dev/null <<EOFWQ
[Interface]
PrivateKey = $RELAYSERVER_WG_SV_CLIENTDNS_PRIVATEKEY
Address = ${RELAYSERVER_WG_SV_CLIENTDNS_IP}/32
MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU

[Peer]
PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY
PresharedKey = $RELAYSERVER_WG_SV_CLIENTDNS_PRESHAREDKEY
AllowedIPs = $RELAYSERVER_WG_VPN_SUBNET
Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT
PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE
EOFWQ

  sudo chmod 0400 \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/clientdns/rsClientDNS.conf
}

function installFileBrowser()
{
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/filebrowser
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/filebrowser/db
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/filebrowser/srv
  RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD=$RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD
  FILEBROWSER_PASSWORD_HASH=\$(htpasswd -bnBC 10 "" \$RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD | tr -d ':\n' | sed 's/\$2y/\$2a/')
  outputConfigFileBrowser
  installStack filebrowser filebrowser "Listening on" \$HOME/filebrowser.env
  startStopStack filebrowser stop
}

function outputConfigFileBrowser()
{
  cat <<EOFFB > \$HOME/filebrowser-compose.yml
$STACK_VERSION_PREFIX filebrowser $(getScriptStackVersion filebrowser)
version: '3.5'

services:
  filebrowser:
    image: $IMG_FILEBROWSER
    container_name: filebrowser
    hostname: filebrowser
    restart: unless-stopped
    env_file: stack.env
    user: "\\\${UID}:\\\${GID}"
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/filebrowser/filebrowser.json:/.filebrowser.json
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/filebrowser/srv:/srv
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/filebrowser/db:/database

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true

EOFFB

  cat <<EOFFB > \$HOME/filebrowser.env
UID=\$USERID
GID=\$GROUPID
FB_USERNAME=$RELAYSERVER_FILEBROWSER_ADMIN_USERNAME
FB_PASSWORD='\$FILEBROWSER_PASSWORD_HASH'
EOFFB

  cat <<EOFFB > \$RELAYSERVER_HSHQ_STACKS_DIR/filebrowser/filebrowser.json
{
  "port": 80,
  "baseURL": "",
  "address": "",
  "log": "stdout",
  "database": "/database/filebrowser.db",
  "root": "/srv"
}
EOFFB

}

function installCaddy()
{
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/caddy
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/dns
  mkdir \$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy
  mkdir \$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy/data
  mkdir \$RELAYSERVER_HSHQ_NONBACKUP_DIR/caddy/config
  outputConfigCaddy
  installStack caddy caddy "serving initial configuration" \$HOME/caddy.env
}

function outputConfigCaddy()
{
  cat <<EOFCC > \$HOME/caddy-compose.yml
$STACK_VERSION_PREFIX caddy $(getScriptStackVersion caddy)
version: '3.5'

services:
  caddy:
    image: $IMG_CADDY
    container_name: caddy
    hostname: caddy
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/caddy/Caddyfile:/etc/caddy/Caddyfile
      - \\\${RELAYSERVER_HSHQ_NONBACKUP_DIR}/caddy/data:/data
      - \\\${RELAYSERVER_HSHQ_NONBACKUP_DIR}/caddy/config:/config
      - caddy-certs:/data/caddy/certificates

  caddy-dns:
    image: $IMG_DNSMASQ
    container_name: caddy-dns
    hostname: caddy-dns
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      dock-proxy-net:
        ipv4_address: \\\${NET_WEBPROXY_SUBNET_PREFIX}.253
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/caddy/dns/dnsmasq.conf:/etc/dnsmasq.conf

volumes:
  caddy-certs:
    external: true

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFCC

  cat <<EOFCC > \$HOME/caddy.env
CERT_RENEW_INTERVAL=1h
PRIVATE_SUBNETS=${RELAYSERVER_WG_HS_IP}/32 ${RELAYSERVER_WG_USER_IP}/32 \$(getConnectingIPAddress)/32
INTERNAL_SUBNETS=10.0.0.0/8
NET_WEBPROXY_SUBNET_PREFIX=$NET_WEBPROXY_SUBNET_PREFIX
HTTP_USER=$RELAYSERVER_CADDYDNS_ADMIN_USERNAME
HTTP_PASS=$RELAYSERVER_CADDYDNS_ADMIN_PASSWORD
EOFCC

  cat <<EOFDM > \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/dns/dnsmasq.conf
no-resolv
address=/.$HOMESERVER_DOMAIN/$RELAYSERVER_WG_HS_IP
address=/.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/$RELAYSERVER_WG_SV_IP
EOFDM

  cat <<EOFCA > \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
{
  email $CERTS_EMAIL_ADDRESS
  acme_ca https://acme.zerossl.com/v2/DV90
  renew_interval {\\\$CERT_RENEW_INTERVAL}
}

(rip-private) {
  @subnet remote_ip {\\\$PRIVATE_SUBNETS}
}

(rip-internal) {
  @subnet remote_ip {\\\$INTERNAL_SUBNETS}
}

(tls-$HOMESERVER_ABBREV) {
  tls {
    ca https://$SUB_CADDY.$HOMESERVER_DOMAIN/acme/$HOMESERVER_ABBREV/directory
  }
}

(rip-private-tls-$HOMESERVER_ABBREV) {
  import rip-private
  import tls-$HOMESERVER_ABBREV
}

(rip-internal-tls-$HOMESERVER_ABBREV) {
  import rip-internal
  import tls-$HOMESERVER_ABBREV
}

(safe-header) {
  header {
    Referrer-Policy "same-origin"
    Strict-Transport-Security "max-age=31536000;"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    X-Frame-Options "SAMEORIGIN"
    X-Robots-Tag "noindex, nofollow"
    -Server
  }
}

(safe-header-allow-frame) {
  header {
    Referrer-Policy "same-origin"
    Strict-Transport-Security "max-age=31536000;"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    X-Robots-Tag "noindex, nofollow"
    -Server
  }
}

(safe-header-cors) {
  @origin{args[0]} header Origin {args[0]}
  header @origin{args[0]} {
    Access-Control-Allow-Origin "{args[0]}"
    Referrer-Policy "same-origin"
    Strict-Transport-Security "max-age=31536000;"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    X-Robots-Tag "noindex, nofollow"
    -Server
  }
}

($CADDY_SNIPPET_TRUSTEDPROXIES) {
  trusted_proxies $TRUSTED_PROXIES
}

(sn-resolver) {
  transport http {
    resolvers {\\\$NET_WEBPROXY_SUBNET_PREFIX}.253:53
  }
}

# This obtains/maintains the external ZeroSSL certificate for the postfix mail relay

https://$RELAYSERVER_EXT_EMAIL_HOSTNAME {
  templates
  header Content-Type text/plain
  respond "Your IP Address is {{.RemoteIP}}"
}

# This provides a way to share files externally
# The service is disabled by default.

https://$SUB_FILEBROWSER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import safe-header
  reverse_proxy http://filebrowser {
    import trusted-proxy-list
  }
}

# Sample for providing public internet access to a service.
# Remove the # from the beginning of each line in the block
# below and restart caddy to enable. If adding Mastodon or 
# Matrix, you must also add a route for the base domain.

#https://$SUB_FILEBROWSER.$HOMESERVER_DOMAIN {
#  import safe-header
#  reverse_proxy https://$SUB_FILEBROWSER.$HOMESERVER_DOMAIN {
#    import sn-resolver
#  }
#}

# Internal admin services only available on VPN to specific IPs.

https://$SUB_PORTAINER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import rip-private-tls-$HOMESERVER_ABBREV
  handle @subnet {
    reverse_proxy https://portainer:9443 {
      import $CADDY_SNIPPET_TRUSTEDPROXIES
    }
  }
  respond 404
}

https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import rip-private-tls-$HOMESERVER_ABBREV
  handle @subnet {
    reverse_proxy https://adguard {
      import $CADDY_SNIPPET_TRUSTEDPROXIES
    }
  }
  respond 404
}

https://$SUB_CADDYDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import rip-private-tls-$HOMESERVER_ABBREV
  handle @subnet {
    reverse_proxy http://caddy-dns:8080 {
      import $CADDY_SNIPPET_TRUSTEDPROXIES
    }
  }
  respond 404
}

https://$SUB_CLIENTDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import rip-private-tls-$HOMESERVER_ABBREV
  handle @subnet {
    reverse_proxy http://clientdns-dnsmasq:8080 {
      import $CADDY_SNIPPET_TRUSTEDPROXIES
    }
  }
  respond 404
}

https://$SUB_RSPAMD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import rip-private-tls-$HOMESERVER_ABBREV
  handle @subnet {
    reverse_proxy http://mail-relay-rspamd {
      import $CADDY_SNIPPET_TRUSTEDPROXIES
    }
  }
  respond 404
}

https://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import rip-private-tls-$HOMESERVER_ABBREV
  handle @subnet {
    reverse_proxy https://syncthing:8384 {
      import $CADDY_SNIPPET_TRUSTEDPROXIES
    }
  }
  respond 404
}

https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN {
  import rip-private-tls-$HOMESERVER_ABBREV
  handle @subnet {
    reverse_proxy http://host.docker.internal:$RELAYSERVER_WG_PORTAL_PORT {
      import $CADDY_SNIPPET_TRUSTEDPROXIES
    }
  }
  respond 404
}

# Add any internal User services here



# LetsEncrypt paths for HTTP challenge

EOFCA

  leCertsArr=(\$(echo "$RELAYSERVER_LE_CERT_DOMAINS" | tr "," "\n"))
  for leCert in "\${leCertsArr[@]}"
  do
    echo -e "# LE certs path \${leCert} BEGIN\nhttp://\${leCert} {\n  handle /.well-known/acme-challenge/* {\n    reverse_proxy \${leCert} {\n      import sn-resolver\n    }\n  }\n}\n# LE certs path \${leCert} END\n" >> \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  done
}

function installOfelia()
{
  outputConfigOfelia
  installStack ofelia ofelia " "
}

function outputConfigOfelia()
{
  cat <<EOFOF > \$HOME/ofelia-compose.yml
$STACK_VERSION_PREFIX ofelia $(getScriptStackVersion ofelia)
version: '3.5'

services:
  ofelia:
    image: $IMG_OFELIA
    container_name: ofelia
    hostname: ofelia
    restart: unless-stopped
    command: daemon --docker
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ext-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
    labels:
      - "ofelia.job-local.my-test-job.schedule=@every 5m"
      - "ofelia.job-local.my-test-job.command=date"

networks:
  dock-ext-net:
    name: dock-ext
    external: true
EOFOF
}

function installSyncthing()
{
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/syncthing
  mkdir \$RELAYSERVER_HSHQ_STACKS_DIR/syncthing/config
  mkdir \$RELAYSERVER_HSHQ_NONBACKUP_DIR/syncthing
  mkdir \$RELAYSERVER_HSHQ_NONBACKUP_DIR/syncthing/data
  generateCert syncthing syncthing
  outputConfigSyncthing

  docker-compose -f \$HOME/syncthing-compose-tmp.yml up -d

  search="Access the GUI via the following URL"
  isFound="F"
  i=0
  set +e
  while [ \$i -le 60 ]
  do
    findtext=\$(docker logs syncthing 2>&1 | grep "\$search")
    if ! [ -z "\$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 1 second, total wait=\$i seconds..."
    sleep 1
    i=\$((i+1))
  done
  if [ "\$isFound" = "F" ]; then
    echo "There was a problem installing syncthing"
    exit
  fi
  set -e
  docker-compose -f \$HOME/syncthing-compose-tmp.yml down -v
  sleep 5
  rm -f \$HOME/syncthing-compose-tmp.yml
  alltext=\$(sudo cat \$RELAYSERVER_HSHQ_STACKS_DIR/syncthing/config/config.xml)
  pwhash=\$(htpasswd -bnBC 10 "" $RELAYSERVER_SYNCTHING_ADMIN_PASSWORD | tr -d ':\n' | sed 's/\$2y/\$2a/')
  replacetext='<gui enabled="true" tls="true" debugging="false">\n        <address>127.0.0.1:8384</address>\n        <user>'$RELAYSERVER_SYNCTHING_ADMIN_USERNAME'</user>\n        <password>'\$pwhash'</password>\n        <apikey>'$RELAYSERVER_SYNCTHING_API_KEY'</apikey>\n        <theme>dark</theme>\n    </gui>'
  echo -e "\${alltext%%<gui*}\${replacetext}\${alltext##*</gui>}" > \$HOME/st_config.xml
  alltext=\$(cat \$HOME/st_config.xml)
  replacetext='<globalAnnounceEnabled>false</globalAnnounceEnabled>'
  echo -e "\${alltext%%<globalAnnounceEnabled*}\${replacetext}\${alltext##*</globalAnnounceEnabled>}" > \$HOME/st_config.xml
  alltext=\$(cat \$HOME/st_config.xml)
  replacetext='<globalAnnounceEnabled>false</globalAnnounceEnabled>'
  echo -e "\${alltext%%<globalAnnounceEnabled*}\${replacetext}\${alltext##*</globalAnnounceEnabled>}" > \$HOME/st_config.xml
  alltext=\$(cat \$HOME/st_config.xml)
  replacetext='<natEnabled>false</natEnabled>'
  echo -e "\${alltext%%<natEnabled*}\${replacetext}\${alltext##*</natEnabled>}" > \$HOME/st_config.xml
  alltext=\$(cat \$HOME/st_config.xml)
  replacetext='<localAnnounceEnabled>false</localAnnounceEnabled>'
  echo -e "\${alltext%%<localAnnounceEnabled*}\${replacetext}\${alltext##*</localAnnounceEnabled>}" > \$HOME/st_config.xml
  alltext=\$(cat \$HOME/st_config.xml)
  replacetext='<relaysEnabled>false</relaysEnabled>'
  echo -e "\${alltext%%<relaysEnabled*}\${replacetext}\${alltext##*</relaysEnabled>}" > \$HOME/st_config.xml
  chmod 600 \$HOME/st_config.xml
  sudo chown root:root \$HOME/st_config.xml
  sudo mv \$HOME/st_config.xml \$RELAYSERVER_HSHQ_STACKS_DIR/syncthing/config/config.xml

  installStack syncthing syncthing "Access the GUI via the following URL" \$HOME/syncthing.env

  sleep 3
  curl -s -H "X-API-Key: $RELAYSERVER_SYNCTHING_API_KEY" -X DELETE -k https://127.0.0.1:8384/rest/config/folders/default
}

function outputConfigSyncthing()
{
  cat <<EOFST > \$HOME/syncthing-compose-tmp.yml
version: '3.5'

services:
  syncthing:
    image: $IMG_SYNCTHING
    container_name: syncthing
    hostname: syncthing
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
      - 127.0.0.1:8384:8384
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.crt:/var/syncthing/config/cert.pem:ro
      - \${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.key:/var/syncthing/config/key.pem:ro
      - \${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.crt:/var/syncthing/config/https-cert.pem:ro
      - \${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.key:/var/syncthing/config/https-key.pem:ro
      - \${RELAYSERVER_HSHQ_STACKS_DIR}/syncthing/config:/var/syncthing/config
      - \${RELAYSERVER_HSHQ_NONBACKUP_DIR}/syncthing/data:/var/syncthing/data
      - \${RELAYSERVER_HSHQ_DATA_DIR}:/relayserver

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFST

  cat <<EOFST > \$HOME/syncthing-compose.yml
$STACK_VERSION_PREFIX syncthing $(getScriptStackVersion syncthing)
version: '3.5'

services:
  syncthing:
    image: $IMG_SYNCTHING
    container_name: syncthing
    hostname: syncthing
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
      - 127.0.0.1:8384:8384
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \\\${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.crt:/var/syncthing/config/cert.pem:ro
      - \\\${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.key:/var/syncthing/config/key.pem:ro
      - \\\${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.crt:/var/syncthing/config/https-cert.pem:ro
      - \\\${RELAYSERVER_HSHQ_SSL_DIR}/syncthing.key:/var/syncthing/config/https-key.pem:ro
      - \\\${RELAYSERVER_HSHQ_STACKS_DIR}/syncthing/config:/var/syncthing/config
      - \\\${RELAYSERVER_HSHQ_NONBACKUP_DIR}/syncthing/data:/var/syncthing/data
      - \\\${RELAYSERVER_HSHQ_DATA_DIR}:/relayserver

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFST

  cat <<EOFST > \$HOME/syncthing.env
PUID=0
PGID=0
STCONFDIR=/var/syncthing/config
STDATADIR=/var/syncthing/data
STHOMEDIR=
EOFST
}

main "\$@"
EOFRS
  chmod 0400 $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_FRESH_SCRIPT_NAME
}

function uploadVPNInstallScripts()
{
  isTransfer=$1
  if [ -z "$RELAYSERVER_SSH_PRIVATE_KEY_FILENAME" ]; then
    RELAYSERVER_SSH_PRIVATE_KEY_FILENAME=$HOMESERVER_ABBREV".key"
    updateConfigVar RELAYSERVER_SSH_PRIVATE_KEY_FILENAME $RELAYSERVER_SSH_PRIVATE_KEY_FILENAME
    rm -f $HSHQ_CONFIG_DIR/$RELAYSERVER_SSH_PRIVATE_KEY_FILENAME
    rm -f $HSHQ_CONFIG_DIR/${RELAYSERVER_SSH_PRIVATE_KEY_FILENAME}.pub
    RELAYSERVER_SSH_PRIVATE_KEY_PHRASE=$(pwgen -c -n 64 1)
    updateConfigVar RELAYSERVER_SSH_PRIVATE_KEY_PHRASE $RELAYSERVER_SSH_PRIVATE_KEY_PHRASE
    ssh-keygen -f $HSHQ_CONFIG_DIR/$RELAYSERVER_SSH_PRIVATE_KEY_FILENAME -N $RELAYSERVER_SSH_PRIVATE_KEY_PHRASE
    chmod 0400 $HSHQ_CONFIG_DIR/$RELAYSERVER_SSH_PRIVATE_KEY_FILENAME
    chmod 0400 $HSHQ_CONFIG_DIR/${RELAYSERVER_SSH_PRIVATE_KEY_FILENAME}.pub
  fi
  set +e
  echo "Checking known_hosts..."
  if ! [ -z $HOMESERVER_DOMAIN ] && ! [ -z $RELAYSERVER_SSH_PORT ] && ! [ -z $RELAYSERVER_SERVER_IP ]; then
    echo "Removing old known_hosts entry: [$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN]:$RELAYSERVER_SSH_PORT"
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN]:$RELAYSERVER_SSH_PORT"
    echo "Removing old known_hosts entry: [$RELAYSERVER_SERVER_IP]:$RELAYSERVER_SSH_PORT"
    ssh-keygen -f "$HOME/.ssh/known_hosts" -R "[$RELAYSERVER_SERVER_IP]:$RELAYSERVER_SSH_PORT"
  fi
  while true;
  do
    nonroot_username=""
    trUsername=$RELAYSERVER_REMOTE_USERNAME
    RELAYSERVER_REMOTE_USERNAME=$(promptUserInputMenu "root" "Enter Username" "Enter the CURRENT Linux OS username for the RelayServer host (a fresh installation will typically default to root): ")
    if [ $? -ne 0 ]; then
      return 1
    fi
    if [ "$RELAYSERVER_REMOTE_USERNAME" = "root" ]; then
      while [ -z "$nonroot_username" ]
      do
        if [ "$isTransfer" = "true" ]; then
          nonroot_username=$trUsername
        else
          nonroot_username=$(promptUserInputMenu "$USERNAME" "Enter New Username" "Enter a NEW Linux OS username to add (in place of root): ")
          if [ $(checkValidString "$nonroot_username") = "false" ]; then
            showMessageBox "Invalid Character(s)" "The name contains invalid character(s). It must consist of a-z (lowercase) and/or 0-9"
            nonroot_username=""
          fi
        fi
      done
      RELAYSERVER_REMOTE_USERNAME=$nonroot_username
    elif [ "$isTransfer" = "true" ] && ! [ "$RELAYSERVER_REMOTE_USERNAME" = "$trUsername" ]; then
      showMessageBox "Invalid Username" "The username must match the username from the previous installation ($trUsername) when doing a transfer. Either login with root and allow this script to create this user or create it manually on the RelayServer."
      continue
    fi

    tmp_pw1=""
    tmp_pw2=""
    while [ -z "$tmp_pw1" ] || ! [ "$tmp_pw1" = "$tmp_pw2" ]
    do
      tmp_pw1=$(promptPasswordMenu "Enter Password" "Enter the password for your RelayServer Linux OS user ($RELAYSERVER_REMOTE_USERNAME) account: ")
      if [ -z "$tmp_pw1" ]; then
        showMessageBox "Password Empty" "The password cannot be empty, please try again."
        continue
      fi
      if ! [ -z "$nonroot_username" ]; then
        if [ $(checkPasswordStrength "$tmp_pw1") = "false" ]; then
          showMessageBox "Weak Password" "The password is too weak, please make a stronger one. It must contain at least 16 characters and consist of uppercase letters, lowercase letters, and numbers."
          tmp_pw1=""
          tmp_pw2=""
          continue
        fi
        tmp_pw2=$(promptPasswordMenu "Confirm Password" "Enter the password again to confirm: ")
        if ! [ "$tmp_pw1" = "$tmp_pw2" ]; then
          showMessageBox "Password Mismatch" "The passwords do not match, please try again."
        fi
      else
        tmp_pw2=$tmp_pw1
      fi
    done
    remote_pw=$tmp_pw1
    tmp_pw1=""
    tmp_pw2=""

    domain_ip_guess=$(getIPFromHostname ip.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN)
    if [ -z $domain_ip_guess ] || [ "$isTransfer" = "true" ]; then
      domain_ip_guess="0.0.0.0"
    fi
    RELAYSERVER_SERVER_IP=""
    while [ -z "$RELAYSERVER_SERVER_IP" ]
    do
      RELAYSERVER_SERVER_IP=$(promptUserInputMenu $domain_ip_guess "Enter IP Address" "Enter the IP Address of the RelayServer. It is IMPORTANT that you enter this value correctly. If you have already pointed your DNS of your HomeServer domain to your RelayServer, then ensure the guessed IP is correct.")
      if [ $? -ne 0 ]; then
        return 1
      fi
      if [ -z "$RELAYSERVER_SERVER_IP" ]; then
        showMessageBox "IP Address Empty" "The IP Address cannot be empty"
      elif [ "$(checkValidIPAddress $RELAYSERVER_SERVER_IP)" = "false" ] || [ "$RELAYSERVER_SERVER_IP" = "0.0.0.0" ]; then
        showMessageBox "Invalid Character(s)" "The IP address contains invalid character(s)."
        RELAYSERVER_SERVER_IP=""
      fi
      resetRSInit
    done
    updateConfigVar RELAYSERVER_SERVER_IP $RELAYSERVER_SERVER_IP
    addHomeNetIP ${RELAYSERVER_SERVER_IP}/32 true

    if [ "$IS_INSTALLED" = "true" ]; then
      addDomainAdguardHS "*.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" "$RELAYSERVER_SERVER_IP"
    fi

    RELAYSERVER_CURRENT_SSH_PORT=""
    while [ -z "$RELAYSERVER_CURRENT_SSH_PORT" ]
    do
      RELAYSERVER_CURRENT_SSH_PORT=$(promptUserInputMenu "22" "Enter CURRENT SSH Port" "Enter the CURRENT SSH port for the RelayServer host (a fresh installation defaults to port 22): ")
      if [ -z "$RELAYSERVER_CURRENT_SSH_PORT" ]; then
        showMessageBox "SSH Port Empty" "The SSH port cannot be empty"
      fi
      resetRSInit
    done
    set +e
    if ! [ -z "$nonroot_username" ]; then
      pubkey=$(cat $HSHQ_CONFIG_DIR/${RELAYSERVER_SSH_PRIVATE_KEY_FILENAME}.pub)
      pw_hash=$(openssl passwd -6 $remote_pw)
      remote_pw=$(promptPasswordMenu "Enter Password" "Enter the password for your RelayServer Linux OS root account: ")
      sshpass -p $remote_pw ssh -o 'StrictHostKeyChecking accept-new' -o ConnectTimeout=10 -p $RELAYSERVER_CURRENT_SSH_PORT root@$RELAYSERVER_SERVER_IP "useradd -m -G sudo -s /bin/bash $nonroot_username && getent group docker >/dev/null || sudo groupadd docker && usermod -aG docker $nonroot_username && echo '$nonroot_username:$pw_hash' | chpasswd --encrypted && mkdir -p /home/$nonroot_username/.ssh && chmod 775 /home/$nonroot_username/.ssh && echo "$pubkey" >> /home/$nonroot_username/.ssh/authorized_keys && chown -R $nonroot_username:$nonroot_username /home/$nonroot_username/.ssh"
      is_err=$?
    else
      loadSSHKey
      set +e
      ssh -q -o ConnectTimeout=10 -o "BatchMode=yes" -p $RELAYSERVER_CURRENT_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP exit
      if [ $? -ne 0 ]; then
        # Key not present
        sshpass -p $remote_pw ssh-copy-id -o 'StrictHostKeyChecking accept-new' -o ConnectTimeout=10 -i $HSHQ_CONFIG_DIR/${RELAYSERVER_SSH_PRIVATE_KEY_FILENAME}.pub -p $RELAYSERVER_CURRENT_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP
      fi
      is_err=$?
      if [ $is_err -eq 0 ]; then
        ssh -p $RELAYSERVER_CURRENT_SSH_PORT -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP "echo $remote_pw | sudo -S getent group docker >/dev/null || sudo groupadd docker > /dev/null 2>&1 && sudo usermod -aG sudo,docker $RELAYSERVER_REMOTE_USERNAME > /dev/null 2>&1 && rm -f /home/$RELAYSERVER_REMOTE_USERNAME/$RS_INSTALL_SETUP_SCRIPT_NAME && rm -f /home/$RELAYSERVER_REMOTE_USERNAME/$RS_INSTALL_FRESH_SCRIPT_NAME"
        is_err=$?
        unloadSSHKey
      fi
    fi
    if [ $is_err -eq 0 ]; then
      break
    else
      errmenu=$(cat << EOF
$hshqlogo

There is a problem logging into the RelayServer host. Press Retry or Cancel.
EOF
  )
      if ! (whiptail --title "Login Error" --yesno "$errmenu" $MENU_HEIGHT $MENU_WIDTH --no-button "Cancel" --yes-button "Retry"); then
        return 1
      fi
    fi
    remote_pw=""
  done
  set -e
  updateConfigVar RELAYSERVER_CURRENT_SSH_PORT $RELAYSERVER_CURRENT_SSH_PORT
  if ! [ "$isTransfer" = "true" ]; then
    updateConfigVar RELAYSERVER_REMOTE_USERNAME $RELAYSERVER_REMOTE_USERNAME
    RELAYSERVER_HSHQ_BASE_DIR=/home/$RELAYSERVER_REMOTE_USERNAME/hshq
    RELAYSERVER_HSHQ_DATA_DIR=$RELAYSERVER_HSHQ_BASE_DIR/data
    RELAYSERVER_HSHQ_NONBACKUP_DIR=$RELAYSERVER_HSHQ_BASE_DIR/nonbackup
    RELAYSERVER_HSHQ_SCRIPTS_DIR=$RELAYSERVER_HSHQ_DATA_DIR/scripts
    RELAYSERVER_HSHQ_SECRETS_DIR=$RELAYSERVER_HSHQ_DATA_DIR/secrets
    RELAYSERVER_HSHQ_STACKS_DIR=$RELAYSERVER_HSHQ_DATA_DIR/stacks
    RELAYSERVER_HSHQ_SSL_DIR=$RELAYSERVER_HSHQ_DATA_DIR/ssl
    updateConfigVar RELAYSERVER_HSHQ_BASE_DIR $RELAYSERVER_HSHQ_BASE_DIR
    updateConfigVar RELAYSERVER_HSHQ_DATA_DIR $RELAYSERVER_HSHQ_DATA_DIR
    updateConfigVar RELAYSERVER_HSHQ_NONBACKUP_DIR $RELAYSERVER_HSHQ_NONBACKUP_DIR
    updateConfigVar RELAYSERVER_HSHQ_SCRIPTS_DIR $RELAYSERVER_HSHQ_SCRIPTS_DIR
    updateConfigVar RELAYSERVER_HSHQ_SECRETS_DIR $RELAYSERVER_HSHQ_SECRETS_DIR
    updateConfigVar RELAYSERVER_HSHQ_STACKS_DIR $RELAYSERVER_HSHQ_STACKS_DIR
    updateConfigVar RELAYSERVER_HSHQ_SSL_DIR $RELAYSERVER_HSHQ_SSL_DIR
  fi

  loadSSHKey
  scp -P $RELAYSERVER_CURRENT_SSH_PORT $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_SETUP_SCRIPT_NAME $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP:/home/$RELAYSERVER_REMOTE_USERNAME
  if [ "$isTransfer" = "true" ]; then
    scp -P $RELAYSERVER_CURRENT_SSH_PORT $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_TRANSFER_SCRIPT_NAME $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP:/home/$RELAYSERVER_REMOTE_USERNAME
  else
    scp -P $RELAYSERVER_CURRENT_SSH_PORT $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_FRESH_SCRIPT_NAME $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SERVER_IP:/home/$RELAYSERVER_REMOTE_USERNAME
    rm -f $HSHQ_RELAYSERVER_DIR/scripts/$RS_INSTALL_FRESH_SCRIPT_NAME
  fi
  unloadSSHKey
}

function loadSSHKey()
{
  set +e
  ssh-add -L > /dev/null 2>&1
  if [ $? -eq 2 ]; then
    eval "$(ssh-agent)"
  fi
  set -e
  cat <<EOFAP > $HSHQ_CONFIG_DIR/askpass
#!/bin/bash
echo $RELAYSERVER_SSH_PRIVATE_KEY_PHRASE
EOFAP
  chmod u+x $HSHQ_CONFIG_DIR/askpass
  DISPLAY=1 SSH_ASKPASS="$HSHQ_CONFIG_DIR/askpass" ssh-add $HSHQ_CONFIG_DIR/$RELAYSERVER_SSH_PRIVATE_KEY_FILENAME < /dev/null
  rm $HSHQ_CONFIG_DIR/askpass
}

function unloadSSHKey()
{
  ssh-add -D 2> /dev/null
}

function connectPrimaryVPN()
{
  db_id=$(getPrimaryVPN_DBID)
  if ! [ -z $db_id ]; then
    connectVPN $db_id
  fi
}

function getPrimaryVPN_DBID()
{
  echo $(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType='primary';")
}

function getPrimaryVPN_IP()
{
  prim_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ConnectionType='homeserver_vpn' and NetworkType='primary';")
}

function connectPrimaryInternet()
{
  db_id=$(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_internet' and NetworkType='primary';")
  if [ -z $db_id ]; then
    return
  fi
  ifaceName=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where ID=$db_id;")
  dockerSubnet=$(getConfigVarFromFile \#DOCKER_NETWORK_SUBNET $HSHQ_WIREGUARD_DIR/internet/${ifaceName}.conf root)
  if [ -z $dockerSubnet ]; then
    dockerNetworkName=$(getConfigVarFromFile \#DOCKER_NETWORK_NAME $HSHQ_WIREGUARD_DIR/internet/${ifaceName}.conf root)
    conn_mtu=$(getConfigVarFromFile \#MTU $HSHQ_WIREGUARD_DIR/internet/${ifaceName}.conf root)
    dockerSubnet=$(getNextAvailableWGDockerNetwork $dockerNetworkName $conn_mtu)
    sudo sed -i "s|^#DOCKER_NETWORK_SUBNET.*|#DOCKER_NETWORK_SUBNET=$dockerSubnet|g" $HSHQ_WIREGUARD_DIR/internet/${ifaceName}.conf
  fi
  connectInternet $db_id
}

function connectVPN()
{
  echo "Connecting to RelayServer via WireGuard..."
  # Configuration files of this type are expected to be located in /etc/wireguard
  db_id=$1
  if [ -z $db_id ]; then
    echo "ERROR: No database ID provided."
    return
  fi
  client_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$db_id;")
  ifaceName=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where ID=$db_id;")
  hs_name=$(sqlite3 $HSHQ_DB "select HomeServerName from hsvpn_connections where ID=$db_id;")
  ext_prefix=$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$db_id;")
  int_prefix=$(sqlite3 $HSHQ_DB "select InternalPrefix from hsvpn_connections where ID=$db_id;")
  ca_abbrev=$(sqlite3 $HSHQ_DB "select CA_Abbrev from hsvpn_connections where ID=$db_id;")
  domain_name=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$db_id;")
  ca_ip=$(sqlite3 $HSHQ_DB "select CA_IP from hsvpn_connections where ID=$db_id;")
  ca_subdomain=$(sqlite3 $HSHQ_DB "select CA_Subdomain from hsvpn_connections where ID=$db_id;")
  ca_url=$(sqlite3 $HSHQ_DB "select CA_URL from hsvpn_connections where ID=$db_id;")
  vpn_subnet=$(sqlite3 $HSHQ_DB "select VPN_Subnet from hsvpn_connections where ID=$db_id;")
  rs_vpn_ip=$(sqlite3 $HSHQ_DB "select RS_VPN_IP from hsvpn_connections where ID=$db_id;")
  is_primary=$(sqlite3 $HSHQ_DB "select IsPrimary from hsvpn_connections where ID=$db_id;")
  
  enableWGInterfaceQuick $ifaceName

  # If not hosting or non-primary VPN, then add CA domain.
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || ! [ $is_primary = 1 ]; then
    addDomainAndWildcardAdguardNoReplaceHS "$domain_name" "$ca_ip"
    addDomainAdguardHS "*.$ext_prefix.$domain_name" "A"
    addDomainAndWildcardIgnoreQuerylogAndStatsHS "$domain_name"
    insertEnableSvcUptimeKuma uptimekuma "${hs_name}" homeservers "https://home.$domain_name" true
  fi
  addDomainAdguardHS "*.$int_prefix.$domain_name" "$rs_vpn_ip"
  primary_string=other
  if [ $is_primary = 1 ]; then
    primary_string=primary
    if [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
      restartAllCaddyContainers
    fi
  fi
  # Update Advertise IPs for Jitsi
  addAdvertiseIP $client_ip
  # Add new Caddy container.
  installCaddy $ifaceName $primary_string $client_ip $ca_abbrev $ca_url $ca_subdomain $ca_ip
  if [ $is_primary = 1 ] && [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    updateMailuStackRelayHost
  fi
  # If hosting VPN, add ClientDNS stack and setup Syncthing
  if [ $is_primary = 1 ] && [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "Installing ClientDNS..."
    installClientDNS user1 $RELAYSERVER_WG_HS_CLIENTDNS_IP $ADMIN_USERNAME_BASE"_clientdns" $(pwgen -c -n 32 1)
    loadSSHKey
    set +e
    while true;
    do
      total_attempts=1
      max_attempts=5
      isBreak=false
      while [ $total_attempts -le $max_attempts ]
      do
        ssh -p $RELAYSERVER_SSH_PORT -o 'StrictHostKeyChecking accept-new' $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "echo Successfully logged in to RelayServer!"
        if [ $? -eq 0 ]; then
          isBreak=true
          break
        fi
        echo "Problem connecting to RelayServer, retrying in 5 seconds..."
        sleep 5
        total_attempts=$((total_attempts + 1))
      done
      if ! [ "$isBreak" = "true" ]; then
        echo "Could not log in to RelayServer to setup Syncthing."
        echo "If this step is skipped, you will have to manually"
        echo "set up the RelayServer backup in Syncthing. "
        while true;
        do
          read -p "Enter 'retry' or 'cancel': " isRetryConnect
          case "$isRetryConnect" in
            "retry")
              break
            ;;
            "cancel")
              isBreak=true
              break
            ;;
            *)
              echo "Unknown response..."
            ;;
          esac
        done
      fi
      if [ "$isBreak" = "true" ]; then
        break
      fi
    done
    # Setup syncthing link
    echo "Setting up Syncthing..."
    SYNCTHING_DEVICE_ID=$(curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X GET -k https://127.0.0.1:8384/rest/config/devices | jq '.[0]' | jq -r '.deviceID')
    updateConfigVar SYNCTHING_DEVICE_ID $SYNCTHING_DEVICE_ID
    # Remote Syncthing
    RELAYSERVER_SYNCTHING_DEVICE_ID=$(ssh -p $RELAYSERVER_SSH_PORT -o 'StrictHostKeyChecking accept-new' $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "curl -s -H \"X-API-Key: $RELAYSERVER_SYNCTHING_API_KEY\" -X GET -k https://127.0.0.1:8384/rest/config/devices | jq '.[0]' | jq -r '.deviceID'")
    updateConfigVar RELAYSERVER_SYNCTHING_DEVICE_ID $RELAYSERVER_SYNCTHING_DEVICE_ID
    jsonbody="{\\\"deviceID\\\": \\\"$SYNCTHING_DEVICE_ID\\\", \\\"name\\\": \\\"$HOMESERVER_NAME HomeServer\\\",\\\"addresses\\\": [\\\"tcp://$SUB_SYNCTHING.$HOMESERVER_DOMAIN:22000\\\"], \\\"compression\\\": \\\"metadata\\\", \\\"certName\\\": \\\"\\\", \\\"skipIntroductionRemovals\\\": false,\\\"introducedBy\\\": \\\"\\\",\\\"paused\\\": false,\\\"allowedNetworks\\\": [],\\\"autoAcceptFolders\\\": false,\\\"maxSendKbps\\\": 0,\\\"maxRecvKbps\\\": 0,\\\"ignoredFolders\\\": [],\\\"maxRequestKiB\\\": 0,\\\"untrusted\\\": false,\\\"remoteGUIPort\\\": 0}"
    ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "curl -s -H \"X-API-Key: $RELAYSERVER_SYNCTHING_API_KEY\" -X POST -d \"$jsonbody\" -k https://127.0.0.1:8384/rest/config/devices"
    jsonbody="{\\\"id\\\": \\\"$RELAYSERVER_SYNCTHING_FOLDER_ID\\\", \\\"label\\\": \\\"RelayServer Backup\\\",\\\"filesystemType\\\": \\\"basic\\\", \\\"path\\\": \\\"/relayserver/\\\", \\\"type\\\": \\\"sendonly\\\",\\\"devices\\\": [{\\\"deviceID\\\": \\\"$RELAYSERVER_SYNCTHING_DEVICE_ID\\\",\\\"introducedBy\\\": \\\"\\\",\\\"encryptionPassword\\\": \\\"\\\"},{\\\"deviceID\\\": \\\"$SYNCTHING_DEVICE_ID\\\",\\\"introducedBy\\\": \\\"\\\",\\\"encryptionPassword\\\": \\\"\\\"}], \\\"rescanIntervalS\\\": 3600,\\\"fsWatcherEnabled\\\": true,\\\"fsWatcherDelayS\\\": 10,\\\"ignorePerms\\\": false,\\\"autoNormalize\\\": true,\\\"minDiskFree\\\": {\\\"value\\\": 1,\\\"unit\\\": \\\"%\\\"},\\\"versioning\\\": {\\\"type\\\": \\\"\\\",\\\"params\\\": {},\\\"cleanupIntervalS\\\": 3600,\\\"fsPath\\\": \\\"\\\",\\\"fsType\\\": \\\"basic\\\"},\\\"copiers\\\": 0,\\\"pullerMaxPendingKiB\\\": 0,\\\"hashers\\\": 0,\\\"order\\\": \\\"random\\\",\\\"ignoreDelete\\\": false,\\\"scanProgressIntervalS\\\": 0,\\\"pullerPauseS\\\": 0,\\\"maxConflicts\\\": 10,\\\"disableSparseFiles\\\": false,\\\"disableTempIndexes\\\": false,\\\"paused\\\": false,\\\"weakHashThresholdPct\\\": 25,\\\"markerName\\\": \\\".stfolder\\\",\\\"copyOwnershipFromParent\\\": false,\\\"modTimeWindowS\\\": 0,\\\"maxConcurrentWrites\\\": 2,\\\"disableFsync\\\": false,\\\"blockPullOrder\\\": \\\"standard\\\",\\\"copyRangeMethod\\\": \\\"standard\\\",\\\"caseSensitiveFS\\\": false,\\\"junctionsAsDirs\\\": false,\\\"syncOwnership\\\": false,\\\"sendOwnership\\\": true,\\\"syncXattrs\\\": false,\\\"sendXattrs\\\": false,\\\"xattrFilter\\\": {\\\"entries\\\": [],\\\"maxSingleEntrySize\\\": 1024,\\\"maxTotalSize\\\": 4096}}"
    ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "curl -s -H \"X-API-Key: $RELAYSERVER_SYNCTHING_API_KEY\" -X POST -d \"$jsonbody\" -k https://127.0.0.1:8384/rest/config/folders"
    # Local Syncthing
    jsonbody="{\"deviceID\": \"$RELAYSERVER_SYNCTHING_DEVICE_ID\", \"name\": \"$RELAYSERVER_NAME\",\"addresses\": [\"tcp://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:22000\"], \"compression\": \"metadata\", \"certName\": \"\", \"skipIntroductionRemovals\": false,\"introducedBy\": \"\",\"paused\": false,\"allowedNetworks\": [],\"autoAcceptFolders\": false,\"maxSendKbps\": 0,\"maxRecvKbps\": 0,\"ignoredFolders\": [],\"maxRequestKiB\": 0,\"untrusted\": false,\"remoteGUIPort\": 0}"
    curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X POST -d "$jsonbody" -k https://127.0.0.1:8384/rest/config/devices
    jsonbody="{\"id\": \"$RELAYSERVER_SYNCTHING_FOLDER_ID\", \"label\": \"RelayServer Backup\",\"filesystemType\": \"basic\", \"path\": \"/relayserver/\", \"type\": \"receiveonly\",\"devices\": [{\"deviceID\": \"$SYNCTHING_DEVICE_ID\",\"introducedBy\": \"\",\"encryptionPassword\": \"\"},{\"deviceID\": \"$RELAYSERVER_SYNCTHING_DEVICE_ID\",\"introducedBy\": \"\",\"encryptionPassword\": \"\"}], \"rescanIntervalS\": 3600,\"fsWatcherEnabled\": true,\"fsWatcherDelayS\": 10,\"ignorePerms\": false,\"autoNormalize\": true,\"minDiskFree\": {\"value\": 1,\"unit\": \"%\"},\"versioning\": {\"type\": \"\",\"params\": {},\"cleanupIntervalS\": 3600,\"fsPath\": \"\",\"fsType\": \"basic\"},\"copiers\": 0,\"pullerMaxPendingKiB\": 0,\"hashers\": 0,\"order\": \"random\",\"ignoreDelete\": false,\"scanProgressIntervalS\": 0,\"pullerPauseS\": 0,\"maxConflicts\": 10,\"disableSparseFiles\": false,\"disableTempIndexes\": false,\"paused\": false,\"weakHashThresholdPct\": 25,\"markerName\": \".stfolder\",\"copyOwnershipFromParent\": false,\"modTimeWindowS\": 0,\"maxConcurrentWrites\": 2,\"disableFsync\": false,\"blockPullOrder\": \"standard\",\"copyRangeMethod\": \"standard\",\"caseSensitiveFS\": false,\"junctionsAsDirs\": false,\"syncOwnership\": true,\"sendOwnership\": false,\"syncXattrs\": false,\"sendXattrs\": false,\"xattrFilter\": {\"entries\": [],\"maxSingleEntrySize\": 1024,\"maxTotalSize\": 4096}}"
    curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X POST -d "$jsonbody" -k https://127.0.0.1:8384/rest/config/folders
    ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "docker container restart caddy"
    set -e
    unloadSSHKey
  fi
}

function connectInternet()
{
  db_id=$1
  ifaceName=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where ID=$db_id;")
  sudo $HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh $HSHQ_WIREGUARD_DIR/internet/${ifaceName}.conf up
}

function resetRelayServerData()
{
  sudo rm -fr $HSHQ_RELAYSERVER_DIR/backup/*
  sudo rm -fr $HSHQ_RELAYSERVER_DIR/scripts/*
}

function createOrJoinPrimaryVPN()
{
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    is_remove=$(promptUserInputMenu "" "Existing RelayServer" "There is already a RelayServer set up. If you wish to remove all connections/data, enter the word 'remove' below:")
    if ! [ "$is_remove" = "remove" ]; then
      showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
      return 0
    fi
    set +e
    disconnect_reason=$(promptUserInputMenu "" "Enter Reason" "Enter a reason for removal/disconnect: ")
    removeMyNetworkPrimaryVPN "$disconnect_reason"
  fi

  vpnmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option for your PRIMARY VPN connection" --menu "$vpnmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
    "1" "Host a VPN" \
    "2" "Join a VPN" \
    "3" "Exit" 3>&1 1>&2 2>&3)

    case $menures in
      1)
        confirmHost=$(promptUserInputMenu "" "Confirmation" "This function will set up a hosted VPN. Ensure you have the RelayServer ready and you can readily log into it. Enter the word 'confirm' below:")
        if ! [ "$confirmHost" = "confirm" ]; then
          showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
          return 0
        fi
        PRIMARY_VPN_SETUP_TYPE=host
        setupHostedVPN
        if [ $? -ne 0 ]; then
          return 0
        fi
        RELAYSERVER_IS_INIT=true
        updateConfigVar RELAYSERVER_IS_INIT $RELAYSERVER_IS_INIT
        rs_wg_user_conf=$(sudo cat $HSHQ_WIREGUARD_DIR/users/${RELAYSERVER_WG_VPN_NETNAME}-user1.conf)
        # Set env vars in mailu stack
        set +e
        updateMailuStackRelayHost
        email_msg="Your new RelayServer has been configured. Below is your first WireGuard User Connection Info:\n\n================ WireGuard Configuration ================\n${rs_wg_user_conf}\n=======================================================\n"
        sendEmail -s "New RelayServer" -b "$email_msg" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
        clear
        echo -e "\n\n============= User WireGuard Configuration ============\n"
        echo -e """""$rs_wg_user_conf""""\n"
        echo -e "=======================================================\n"
        echo -e "_______________________________________________________"
        echo -e "The installation script has been uploaded. Please log in to"
        echo -e "the RelayServer and perform the installation (bash install.sh)."
        echo -e "Copy your new WireGuard configuration above for your first user."
        echo -e "After the RelayServer has completed the installation, and the server"
        echo -e "has rebooted, enter 'ok' to finish the integration. After this"
        echo -e "process completes, and you are returned to the main menu, then you can"
        echo -e "safely activate your new WireGuard connection to access your HomeServer"
        echo -e "network and masquerade your IP address."
        echo -e "Check your admin email ($EMAIL_ADMIN_EMAIL_ADDRESS) for subsequent details."
        while true;
        do
          read -p "Enter 'ok' to continue (no quotes, all lowercase): " is_continue
          if [ "$is_continue" = "ok" ]; then
            break
          fi
        done
        connectPrimaryInternet
        connectPrimaryVPN
        ;;
      2)
        confirmJoin=$(promptUserInputMenu "" "Confirmation" "This function will prepare you server to join another hosted VPN as your primary. Enter the word 'confirm' below:")
        if ! [ "$confirmJoin" = "confirm" ]; then
          showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
          return 0
        fi
        PRIMARY_VPN_SETUP_TYPE=join
        setupJoinPrimaryVPN
        join_res=$?
        if [ $join_res -ne 0 ]; then
          return
        fi
        RELAYSERVER_IS_INIT=true
        updateConfigVar RELAYSERVER_IS_INIT $RELAYSERVER_IS_INIT
        connectPrimaryVPN
        email_msg="Your joined RelayServer has been configured, please update your DNS MX record with your domain name provider to the new mail server:  $RELAYSERVER_EXT_EMAIL_HOSTNAME\n\n"
        # Set env vars in mailu stack
        set +e
        sendEmail -s "New RelayServer" -b "$email_msg" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
        showMessageBox "Joined RelayServer" "The RelayServer has been joined. Check your email ($EMAIL_ADMIN_EMAIL_ADDRESS) for further details."
        ;;
      3)
        return ;;
    esac
    updateConfigVar PRIMARY_VPN_SETUP_TYPE $PRIMARY_VPN_SETUP_TYPE
}

function showRemovePrimaryVPN()
{
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    is_remove=$(promptUserInputMenu "" "Remove RelayServer" "If you wish to remove all connections/data, enter the word 'remove' below:")
    if ! [ $is_remove = "remove" ]; then
      showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
      return 0
    fi
    set +e
    disconnect_reason=$(promptUserInputMenu "" "Enter Reason" "Enter a reason for removal/disconnect: ")
    removeMyNetworkPrimaryVPN "$disconnect_reason"
  else
    showMessageBox "Invalid Selection" "You are not currently connected to a RelayServer, returning..."
  fi
}

# VPN Menus
function showNetworkMenu()
{
  networkmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$networkmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "My Network" \
  "2" "Other Networks" \
  "3" "RelayServer Utils" \
  "4" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
        showMessageBox "No RelayServer" "You are not hosting a RelayServer, returning..."
        return
      fi
      showMyNetworkMenu ;;
    2)
      sudo -v
      showOtherNetworksMenu ;;
    3)
      showRelayServerUtilsMenu ;;
    *)
      return ;;
  esac
}

function showMyNetworkMenu()
{
  networkmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$networkmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Invite to My Network" \
  "2" "Remove from My Network" \
  "3" "My Network Utils" \
  "4" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      createMyNetworkInvite ;;
    2)
      showMyNetworkRemoveMenu ;;
    3)
      showMyNetworkUtilsMenu ;;
    *)
      return ;;
  esac
}

function showOtherNetworksMenu()
{
  networkmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$networkmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Apply to Another Network" \
  "2" "Join Another Network" \
  "3" "Disconnect From Another Network" \
  "4" "Other Network Utils" \
  "5" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      showOtherNetworkApplyMenu ;;
    2)
      showOtherNetworkJoinMenu ;;
    3)
      showOtherNetworkDisconnectMenu ;;
    4)
      showOtherNetworkUtilsMenu ;;
    *)
      return ;;
  esac
}

function showRelayServerUtilsMenu()
{
  netutilmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$netutilmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Add Domain(s) To RelayServer" \
  "2" "Remove Domain(s) From RelayServer" \
  "3" "Add Subdomain to be managed by LetsEncrypt" \
  "4" "Create or Join a VPN RelayServer" \
  "5" "Transfer RelayServer" \
  "6" "Remove VPN RelayServer" \
  "7" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      addDomainsToRelayServer ;;
    2)
      removeDomainsFromRelayServer ;;
    3)
      addLECertPathsToRelayServerMsgbox ;;
    4)
      createOrJoinPrimaryVPN ;;
    5)
      transferHostedVPN ;;
    6)
      showRemovePrimaryVPN ;;
    *)
      return ;;
  esac
}

function showMyNetworkRemoveMenu()
{
  vpnmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$vpnmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "HomeServer VPN" \
  "2" "HomeServer Internet" \
  "3" "User" \
  "4" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      showMyNetworkRemoveVPNMenu ;;
    2)
      showMyNetworkRemoveInternetMenu ;;
    3)
      showMyNetworkRemoveUserMenu ;;
    *)
      return ;;
  esac
}

function showMyNetworkUtilsMenu()
{
  netutilmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$netutilmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Email HomeServers DNS List" \
  "2" "Email Users DNS List" \
  "3" "Create ClientDNS Server" \
  "4" "Remove ClientDNS Server" \
  "5" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      showEmailMyNetworkHomeServerDNSListMenu ;;
    2)
      showEmailMyNetworkHomeServerDNSListClientDNSMenu ;;
    3)
      showMyNetworkCreateClientDNSMenu ;;
    4)
      showMyNetworkRemoveClientDNSMenu ;;
    *)
      return ;;
  esac
}

function showOtherNetworkApplyMenu()
{
  vpnmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$vpnmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "HomeServer VPN (Producer)" \
  "2" "HomeServer Internet (Consumer)" \
  "3" "User (Consumer)" \
  "4" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      createOtherNetworkApplyHomeServerVPNConfig ;;
    2)
      createOtherNetworkApplyHomeServerInternetConfig ;;
    3)
      createOtherNetworkApplyUserConfig ;;
    *)
      return ;;
  esac
}

function showOtherNetworkJoinMenu()
{
  vpnmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$vpnmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "VPN" \
  "2" "Internet" \
  "3" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      createNetworkJoin true
      if [ $? -ne 0 ]; then
        return
      fi
      ;;
    2)
      createNetworkJoin true
      if [ $? -ne 0 ]; then
        return
      fi
      ;;
    *)
      return ;;
  esac
}

function showOtherNetworkDisconnectMenu()
{
  vpnmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$vpnmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "VPN" \
  "2" "Internet" \
  "3" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      showOtherNetworkDisconnectVPNMenu ;;
    2)
      showOtherNetworkDisconnectInternetMenu ;;
    *)
      return ;;
  esac
}

function showOtherNetworkUtilsMenu()
{
  utilsmenu=$(cat << EOF

$hshqlogo

EOF
)
  menures=$(whiptail --title "Select an option" --menu "$utilsmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
  "1" "Update HomeServer DNS" \
  "2" "Sync Adguard DNS Server from DB" \
  "3" "Exit" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    menures=0
  fi
  case $menures in
    1)
      showUpdateHomeServerDNSMenu ;;
    2)
      syncAdguardDNSFromDB ;;
    *)
      return ;;
  esac
}

function showMyNetworkRemoveVPNMenu()
{
  vpnremovemenu=$(cat << EOF

$hshqlogo

Select the network connections that you wish to remove:
EOF
  )
  vpn_arr=($(sqlite3 $HSHQ_DB "select ID,Name from connections where ConnectionType='homeserver_vpn' and NetworkType='mynetwork';"))
  if [ -z $vpn_arr ]; then
    showMessageBox "Empty" "There are no eligible connections for this selection, returning..."
    return
  fi
  menu_items=""
  for curvpn in "${vpn_arr[@]}"
  do
    menu_items=${menu_items}"$(echo "("$(echo $curvpn | sed 's/|/)/1')) | OFF "
  done
  sel_vpn=($(whiptail --title "Select Network Connections" --checklist "$vpnremovemenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  is_remove=$(promptUserInputMenu "" "Confirm Removal" "This will remove all selected network connections. To confirm, enter the word 'remove' below:")
  if [ $? -ne 0 ] || [ -z $is_remove ] || ! [ "$is_remove" = "remove" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return
  fi
  removal_reason=$(promptUserInputMenu "" "Removal Reason" "Enter a reason for removal: ")
  for curvpn in "${sel_vpn[@]}"
  do
    curvpnID=$(echo $curvpn | cut -d ")" -f1 | sed 's/(//' | sed 's/"//g')
    removeMyNetworkHomeServerVPNConnection $curvpnID "$removal_reason"
  done
}

function showMyNetworkRemoveInternetMenu()
{
  vpnremovemenu=$(cat << EOF

$hshqlogo

Select the network connections that you wish to remove:
EOF
  )
  vpn_arr=($(sqlite3 $HSHQ_DB "select ID,Name from connections where ConnectionType='homeserver_internet' and NetworkType='mynetwork';"))
  if [ -z $vpn_arr ]; then
    showMessageBox "Empty" "There are no eligible connections for this selection, returning..."
    return
  fi
  menu_items=""
  for curvpn in "${vpn_arr[@]}"
  do
    menu_items=${menu_items}"$(echo "("$(echo $curvpn | sed 's/|/)/1')) | OFF "
  done
  sel_vpn=($(whiptail --title "Select Network Connections" --checklist "$vpnremovemenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  is_remove=$(promptUserInputMenu "" "Confirm Removal" "This will remove all selected network connections. To confirm, enter the word 'remove' below:")
  if [ -z $is_remove ] || ! [ "$is_remove" = "remove" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return
  fi
  removal_reason=$(promptUserInputMenu "" "Removal Reason" "Enter a reason for removal: ")
  for curvpn in "${sel_vpn[@]}"
  do
    curvpnID=$(echo $curvpn | cut -d ")" -f1 | sed 's/(//' | sed 's/"//g')
    peer_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$curvpnID;")
    removeMyNetworkNonHomeServerConnection $curvpnID
    # Notify peer that you have removed them.
    notifyHomeServerInternetNetworkRemoval "$peer_email" "$removal_reason"
  done
}

function notifyHomeServerInternetNetworkRemoval()
{
  peer_email="$1"
  removal_reason="$2"
  email_subj="HomeServer Removal Notice from $HOMESERVER_NAME"
  email_body=""
  email_body=${email_body}"HomeServer Removal Notice from $HOMESERVER_NAME\n"
  email_body=${email_body}"================================================================\n\n"
  email_body=${email_body}"Your HomeServer internet connection has been removed from the network.\n"
  email_body=${email_body}"Ensure to disconnect accordingly.\n\n"
  email_body=${email_body}"Host Domain: $HOMESERVER_DOMAIN\n"
  email_body=${email_body}"Reason Provided: $removal_reason\n\n"
  sendEmail -s "$email_subj" -b "$email_body" -t "$peer_email" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function showMyNetworkRemoveUserMenu()
{
  vpnremovemenu=$(cat << EOF

$hshqlogo

Select the network connections that you wish to remove:
EOF
  )
  vpn_arr=($(sqlite3 $HSHQ_DB "select ID,Name from connections where ConnectionType='user' and NetworkType='mynetwork';"))
  if [ -z $vpn_arr ]; then
    showMessageBox "Empty" "There are no eligible connections for this selection, returning..."
    return
  fi
  menu_items=""
  for curvpn in "${vpn_arr[@]}"
  do
    menu_items=${menu_items}"$(echo "("$(echo $curvpn | sed 's/|/)/1')) | OFF "
  done
  sel_vpn=($(whiptail --title "Select Network Connections" --checklist "$vpnremovemenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  removal_reason=$(promptUserInputMenu "" "Removal Reason" "Enter a reason for removal: ")
  is_remove=$(promptUserInputMenu "" "Confirm Removal" "This will remove all selected network connections. To confirm, enter the word 'remove' below:")
  if [ -z $is_remove ] || ! [ "$is_remove" = "remove" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return
  fi

  for curvpn in "${sel_vpn[@]}"
  do
    curvpnID=$(echo $curvpn | cut -d ")" -f1 | sed 's/(//' | sed 's/"//g')
    peer_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$curvpnID;")
    removeMyNetworkNonHomeServerConnection $curvpnID
    # Notify peer that you have removed them.
    notifyUserNetworkRemoval "$peer_email" "$removal_reason"
  done
}

function notifyUserNetworkRemoval()
{
  peer_email="$1"
  removal_reason="$2"
  email_subj="HomeServer Removal Notice from $HOMESERVER_NAME"
  email_body=""
  email_body=${email_body}"HomeServer Removal Notice from $HOMESERVER_NAME\n"
  email_body=${email_body}"================================================================\n\n"
  email_body=${email_body}"Your client connection has been removed from the network.\n"
  email_body=${email_body}"Ensure to disconnect accordingly.\n\n"
  email_body=${email_body}"Host Domain: $HOMESERVER_DOMAIN\n"
  email_body=${email_body}"Reason Provided: $removal_reason\n\n"
  sendEmail -s "$email_subj" -b "$email_body" -t "$peer_email" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function showMyNetworkCreateClientDNSMenu()
{
  clientdns_stack_name=$(promptUserInputMenu "" "ClientDNS Stack Name" "Enter a unique name for this stack (3-10 alpha-numeric lowercase characters): ")
  if [ -z "$clientdns_stack_name" ]; then
    showMessageBox "Stack Name Empty" "The name cannot be empty."
  fi
  if [ -z $clientdns_stack_name ]; then
    return
  fi
  performMyNetworkCreateClientDNS "$clientdns_stack_name"
}

function performMyNetworkCreateClientDNS()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  clientdns_stack_name="$1"
  if [ $(checkValidString "$clientdns_stack_name") = "false" ] || [ ${#clientdns_stack_name} -lt 3 ] || [ ${#clientdns_stack_name} -gt 10 ]; then
    echo "ERROR: Invalid ClientDNS stack name - must contain 3-10 lowercase alpha-numeric characters, no spaces or special characters."
    return
  fi
  # Check if name exists in DB
  cdns_stack_name=$(sqlite3 $HSHQ_DB "select Name from connections where Name='clientdns-$clientdns_stack_name';")
  if ! [ -z $cdns_stack_name ]; then
    echo "ERROR: A stack with this name already exists."
    return
  fi
  # Check if stack exists in Portainer
  checkID=$(getStackID clientdns-${clientdns_stack_name})
  if ! [ -z $checkID ]; then
    echo "ERROR: A stack with this name already exists."
    return
  fi
  # Generate WireGuard config
  wg_ip=$(getRandomVPNIP)
  if [ -z "$wg_ip" ]; then
    echo "ERROR: Could not allocate an IP address, your network is full."
    return
  fi
  wg_priv_key=$(wg genkey)
  wg_pre_key=$(wg genpsk)
  wg_pub_key=$(echo $wg_priv_key | wg pubkey)
  wgPortalAuth="$(getWGPortalAuth)"
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh \"ClientDNS-$clientdns_stack_name\" \"$EMAIL_ADMIN_EMAIL_ADDRESS\" \"$wg_pub_key\" \"$wg_pre_key\" \"$wg_ip\" \"false\" \"true\" \"$wgPortalAuth\""
  mbres=$?
  if [ $mbres -ne 0 ]; then
    echo "ERROR: Could not connect to RelayServer host or there was an error adding the peer, returning..."
    return
  fi
  sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('clientdns-$clientdns_stack_name','$EMAIL_ADMIN_EMAIL_ADDRESS','clientdns','mynetwork','$wg_pub_key','$wg_pre_key','$wg_ip',false,'wg0','$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$(getCurrentDate)');"

  sudo rm -f $HSHQ_WIREGUARD_DIR/users/clientdns-${clientdns_stack_name}.conf
  sudo tee $HSHQ_WIREGUARD_DIR/users/clientdns-${clientdns_stack_name}.conf >/dev/null <<EOFCF
[Interface]
PrivateKey = $wg_priv_key
Address = ${wg_ip}/32
MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU

[Peer]
PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY
PresharedKey = $wg_pre_key
AllowedIPs = $RELAYSERVER_WG_VPN_SUBNET
Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT
PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE
EOFCF
  sudo chmod 0400 $HSHQ_WIREGUARD_DIR/users/clientdns-${clientdns_stack_name}.conf

  adm_username=$ADMIN_USERNAME_BASE"_clientdns"
  adm_pw=$(pwgen -c -n 32 1)
  installClientDNS $clientdns_stack_name $wg_ip $adm_username $adm_pw
  email_subj="ClientDNS-${clientdns_stack_name} Setup Info"
  email_body=""
  email_body=${email_body}"ClientDNS-${clientdns_stack_name} Setup Info\n"
  email_body=${email_body}"================================================================\n\n"
  email_body=${email_body}"DNS IP Address: ${wg_ip}\n"
  email_body=${email_body}"DNSMasq URL: https://${SUB_CLIENTDNS}-${clientdns_stack_name}.${HOMESERVER_DOMAIN}\n"
  email_body=${email_body}"Admin Username: ${adm_username}\n"
  email_body=${email_body}"Admin Password: ${adm_pw}\n\n"
  sendEmail -s "$email_subj" -b "$email_body"
}

function showMyNetworkRemoveClientDNSMenu()
{
  vpnremovemenu=$(cat << EOF

$hshqlogo

Select the network connections that you wish to remove:
EOF
  )
  vpn_arr=($(sqlite3 $HSHQ_DB "select ID,Name from connections where ConnectionType='clientdns' and NetworkType='mynetwork';"))
  if [ -z $vpn_arr ]; then
    showMessageBox "Empty" "There are no eligible connections for this selection, returning..."
    return
  fi
  menu_items=""
  for curvpn in "${vpn_arr[@]}"
  do
    menu_items=${menu_items}"$(echo "("$(echo $curvpn | sed 's/|/)/1')) | OFF "
  done
  sel_vpn=($(whiptail --title "Select Network Connections" --checklist "$vpnremovemenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  is_remove=$(promptUserInputMenu "" "Confirm Removal" "This will remove all selected network connections. To confirm, enter the word 'remove' below:")
  if [ -z $is_remove ] || ! [ "$is_remove" = "remove" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return
  fi
  for curvpn in "${sel_vpn[@]}"
  do
    curvpnID=$(echo $curvpn | cut -d ")" -f1 | sed 's/(//' | sed 's/"//g')
    cdns_stack_name=$(sqlite3 $HSHQ_DB "select Name from connections where ID=$curvpnID;")
    performMyNetworkRemoveClientDNS "$curvpnID" "$cdns_stack_name" true true
  done
}

function performMyNetworkRemoveClientDNS()
{
  dbID="$1"
  cdns_stack_name="$2"
  is_remove_network_conn="$3"
  is_manage_heimdall="$4"
  removeCaddySnippetImport home sn-sub-${cdns_stack_name}
  removeCaddySnippetImport primary sn-sub-${cdns_stack_name}
  removeCaddySnippet "# sn-sub-${cdns_stack_name} BEGIN" "# sn-sub-${cdns_stack_name} END"
  removeServiceFromConfig "${cdns_stack_name}"
  checkDeleteStackAndDirectory $cdns_stack_name "$cdns_stack_name" true true
  dock_net_name_suffix=$(echo "$cdns_stack_name" | cut -d"-" -f2-)
  docker network rm cdns-$dock_net_name_suffix > /dev/null 2>&1
  deleteSvcHeimdall admin "https://${cdns_stack_name}.$HOMESERVER_DOMAIN" "$is_manage_heimdall"
  if [ "$is_remove_network_conn" = "true" ]; then
    removeMyNetworkNonHomeServerConnection $dbID true
  else
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from connections where ID=$dbID;"
  fi
}

function showOtherNetworkDisconnectVPNMenu()
{
  vpndisconnectmenu=$(cat << EOF

$hshqlogo

Select the network connections that you wish to disconnect:
EOF
  )
  vpn_arr=($(sqlite3 $HSHQ_DB "select ID,Name from connections where ConnectionType='homeserver_vpn' and NetworkType='other';"))
  if [ -z $vpn_arr ]; then
    showMessageBox "Empty" "There are no eligible connections for this selection, returning..."
    return
  fi
  menu_items=""
  for curvpn in "${vpn_arr[@]}"
  do
    menu_items=${menu_items}"$(echo "("$(echo $curvpn | sed 's/|/)/1')) | OFF "
  done
  sel_vpn=($(whiptail --title "Select Network Connections" --checklist "$vpndisconnectmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  disconnect_reason=$(promptUserInputMenu "" "Disconnect Reason" "Enter a reason for disconnecting: ")
  is_remove=$(promptUserInputMenu "" "Confirm Disconnect" "This will disconnect all selected network connections. To confirm, enter the word 'disconnect' below:")
  if [ $? -ne 0 ] || [ -z $is_remove ] || ! [ "$is_remove" = "disconnect" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return
  fi
  
  for curvpn in "${sel_vpn[@]}"
  do
    curvpnID=$(echo $curvpn | cut -d ")" -f1 | sed 's/(//' | sed 's/"//g')
    disconnectOtherNetworkHomeServerVPNConnection $curvpnID "$disconnect_reason"
  done
}

function showOtherNetworkDisconnectInternetMenu()
{
  vpndisconnectmenu=$(cat << EOF

$hshqlogo

Select the network connections that you wish to disconnect:
EOF
  )
  vpn_arr=($(sqlite3 $HSHQ_DB "select ID,Name from connections where ConnectionType='homeserver_internet' and NetworkType='other';"))
  if [ -z $vpn_arr ]; then
    showMessageBox "Empty" "There are no eligible connections for this selection, returning..."
    return
  fi
  menu_items=""
  for curvpn in "${vpn_arr[@]}"
  do
    menu_items=${menu_items}"$(echo "("$(echo $curvpn | sed 's/|/)/1')) | OFF "
  done
  sel_vpn=($(whiptail --title "Select Network Connections" --checklist "$vpndisconnectmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  disconnect_reason=$(promptUserInputMenu "" "Disconnect Reason" "Enter a reason for disconnecting: ")
  is_remove=$(promptUserInputMenu "" "Confirm Disconnect" "This will disconnect all selected network connections. To confirm, enter the word 'disconnect' below:")
  if [ $? -ne 0 ] || [ -z $is_remove ] || ! [ "$is_remove" = "disconnect" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return
  fi
  for curvpn in "${sel_vpn[@]}"
  do
    curvpnID=$(echo $curvpn | cut -d ")" -f1 | sed 's/(//' | sed 's/"//g')
    disconnectOtherNetworkHomeServerInternetConnection "$curvpnID" "$disconnect_reason"
  done
}

# VPN Apply functions
function applyHomeServerPrimaryVPNConfig()
{
  is_primary=$1
  set +e
  le_cert_domains=unset
  while [ "$le_cert_domains" = "unset" ]
  do
    le_cert_domains=$(promptUserInputMenu "$(getLetsEncryptCertsDefault)" "Enter LE Cert Subdomains" "Enter the subdomains for which the certificates will be managed by LetsEncrypt (comma-separated):")
    if [ $? -ne 0 ]; then
      return 1
    fi
	if [ $(checkValidString "$le_cert_domains" ",.-") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The domain list contains invalid character(s). It must consist of a-z (lowercase), 0-9, -, and/or ."
      le_cert_domains=unset
    fi
  done
  createOtherNetworkApplyHomeServerVPNConfig true "$le_cert_domains"
}

function createOtherNetworkApplyHomeServerVPNConfig()
{
  is_primary=$1
  le_cert_domains="$2"
  recipient_email=$(promptUserInputMenu "" "Enter Recipient" "Enter the administrator email address of the network to which you are applying:")
  if [ $? -ne 0 ]; then
    return 1
  fi
  sendOtherNetworkApplyHomeServerVPNConfig "$recipient_email" "$is_primary" "$le_cert_domains"
  if [ "$IS_INSTALLED" = "true" ]; then
    showMessageBox "Check Email" "Check your email ($EMAIL_ADMIN_EMAIL_ADDRESS) for the configuration application. You will need to forward the application to the manager of the network to which you are applying."
  fi
}

function sendOtherNetworkApplyHomeServerVPNConfig()
{
  recipient_email="$1"
  is_primary="$2"
  le_cert_domains="$3"
  set +e
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] && ! [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ] && ! [ "$is_primary" = "true" ]; then
    echo "ERROR: Cannot host on another network without a primary VPN connection."
    return 1
  fi
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] && [ "$is_primary" = "true" ]; then
    echo "ERROR: You are already hosting a VPN. You must remove this first."
    return 1
  fi
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ] && [ "$is_primary" = "true" ]; then
    echo "ERROR: You already have a primary connection. You must disconnect from your primary network first."
    return 1
  fi
  request_id=$(getRandomRequestID)
  priv_key=$(wg genkey)
  pub_key=$(echo $priv_key | wg pubkey)
  echo "RequestID = $request_id" > $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  echo "PrivateKey = $priv_key" >> $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  echo "ConnectionType = HomeServer VPN" >> $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  echo "IsPrimary = $is_primary" >> $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  chmod 0400 $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  domain_name=$HOMESERVER_DOMAIN
  msg_body="$APPLICATION_FIRST_LINE\n"
  msg_body=$msg_body"RequestID = $request_id\n"
  msg_body=$msg_body"ConnectionType = HomeServer VPN\n"
  msg_body=$msg_body"EmailAddress = $EMAIL_ADMIN_EMAIL_ADDRESS\n"
  msg_body=$msg_body"PublicKey = $pub_key\n"
  msg_body=$msg_body"DomainName = $domain_name\n"
  msg_body=$msg_body"HomeServerName = $HOMESERVER_NAME\n"
  msg_body=$msg_body"ExternalPrefix = $EXT_DOMAIN_PREFIX\n"
  if [ "$is_primary" = "true" ]; then
    RELAYSERVER_LE_CERT_DOMAINS="$le_cert_domains"
    updateConfigVar RELAYSERVER_LE_CERT_DOMAINS $RELAYSERVER_LE_CERT_DOMAINS
    leCertsArr=($(echo $RELAYSERVER_LE_CERT_DOMAINS | tr "," "\n"))
    isReload=false
    for leCert in "${leCertsArr[@]}"
    do
      curBaseDomain=$(getBaseDomain $leCert)
      curSubDomain=$(getSubDomain $leCert)
      if [ "$curBaseDomain" = "$HOMESERVER_DOMAIN" ]; then
        for curSVC in "${SVCS_ARR[@]}"
        do
          var_base=$(echo $curSVC | cut -d"=" -f1 | cut -d"_" -f 2-)
          subdom=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f6)
          subdom="${subdom//\"}"
          if [ "$subdom" = "$curSubDomain" ]; then
            var_name="SVCD_"$var_base
            var_value=$(getConfigVar $var_name)
            var_valueArr=($(echo $var_value | tr "," "\n"))
            var_valueArr[6]=le
            printf -v new_value '%s,' "${var_valueArr[@]}"
            new_value=""$(echo "${new_value%,}")"\""
            updateConfigVar $var_name $new_value
            isReload=true
          fi
        done
      fi
    done
    if [ "$isReload" = "true" ]; then
      loadSvcVars
    fi
    msg_body=$msg_body"IsPrimary = true\n"
    msg_body=$msg_body"MailSubdomain = $SUB_POSTFIX.$HOMESERVER_DOMAIN\n"
    msg_body=$msg_body"LetsEncryptDomains = $RELAYSERVER_LE_CERT_DOMAINS\n"
  else
    msg_body=$msg_body"IsPrimary = false\n"
  fi
  msg_body=$msg_body"$APPLICATION_LAST_LINE\n"
  set -e
  if ! [ "$IS_INSTALLED" = "true" ]; then
    clear
    echo -e "\n"
    echo -e "$msg_body"
    echo -e "\n"
    echo -e "Copy the above section and submit it to your RelayServer administrator."
  else
    msg_header="HomeServer VPN Application from $HOMESERVER_NAME ($request_id)\n\n"
    msg_header=${msg_header}"For the receiving manager: \n"
    msg_header=${msg_header}"1) Go to the Script-server app, and navigate to 06 My Network > 01 Invite to Network.\n"
    msg_header=${msg_header}"2) Copy everything BELOW the following line and paste the contents where appropriate.\n\n"
    msg_header=${msg_header}"_______________________________________________________________________\n\n"
    msg_body=${msg_header}"$msg_body"
    if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
      sendEmail -s "HomeServer VPN Application from $HOMESERVER_NAME ($request_id)" -b "$msg_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$recipient_email"
      echo "Application successfully sent!"
    else
      echo "You do not have a primary network, you will only receive a manager (MGR) copy of the application. Ensure to transfer this to the manager of the network to which you are applying."
    fi
    sendEmail -s "(MGR COPY)HomeServer VPN Application from $HOMESERVER_NAME ($request_id)" -b "$msg_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  fi
}

function createOtherNetworkApplyHomeServerInternetConfig()
{
  recipient_email=$(promptUserInputMenu "" "Enter Recipient" "Enter the administrator email address of the network to which you are applying:")
  if [ $? -ne 0 ]; then
    return
  fi
  sendOtherNetworkApplyHomeServerInternetConfig "$recipient_email"
}

function sendOtherNetworkApplyHomeServerInternetConfig()
{
  recipient_email="$1"
  request_id=$(getRandomRequestID)
  priv_key=$(wg genkey)
  pub_key=$(echo $priv_key | wg pubkey)
  echo "RequestID = $request_id" > $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  echo "PrivateKey = $priv_key" >> $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  echo "ConnectionType = HomeServer Internet" >> $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  echo "IsPrimary = false" >> $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  chmod 0400 $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
  msg_body=""
  msg_body=$msg_body"$APPLICATION_FIRST_LINE\n"
  msg_body=$msg_body"RequestID = $request_id\n"
  msg_body=$msg_body"ConnectionType = HomeServer Internet\n"
  msg_body=$msg_body"EmailAddress = $EMAIL_ADMIN_EMAIL_ADDRESS\n"
  msg_body=$msg_body"PublicKey = $pub_key\n"
  msg_body=$msg_body"DomainName = $HOMESERVER_DOMAIN\n"
  msg_body=$msg_body"IsInternet = true\n"
  msg_body=$msg_body"$APPLICATION_LAST_LINE\n"
  msg_header="Copy everything BELOW the following line:\n\n"
  msg_header=$msg_header"_______________________________________________________________________\n\n"
  msg_body=${msg_header}"$msg_body"
  sendEmail -s "HomeServer Internet Application from $HOMESERVER_NAME ($request_id)" -b "$msg_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$recipient_email"
  echo "Application successfully sent!"
}

function createOtherNetworkApplyUserConfig()
{
  email_address=$(promptUserInputMenu "$EMAIL_ADMIN_EMAIL_ADDRESS" "Enter Email Address" "Enter the email address that you wish to associate with this request: ")
  if [ $? -ne 0 ]; then
    return
  fi
  showYesNoMessageBox "Internet Access" "Request public internet access for this connection?"
  if [ $? -eq 0 ]; then
    isInternetAccess=true
  else
    isInternetAccess=false
  fi
  ip_address=$(promptUserInputMenu "" "Enter IP Address" "Enter your client device IP address. Leave blank if you do not have one and want it generated for you: ")
  if [ $? -ne 0 ]; then
    return
  fi
  if ! [ -z "$ip_address" ]; then
    if [ "$(checkValidIPAddress $ip_address)" = "false" ] || [ "$(isIPInSubnet $ip_address 10.0.0.0/8)" = "false" ]; then
      showMessageBox "Invalid IP" "Invalid IP address, returning..."
      return
    fi
    ip_address=$(echo $ip_address | cut -d "/" -f1)
    pub_key=$(promptUserInputMenu "" "Enter Public Key" "Enter your client device public key: ")
    if [ $? -ne 0 ]; then
      return
    fi
    if [ -z "$pub_key" ]; then
      showMessageBox "Invalid Public Key" "Invalid Public Key, returning..."
      return
    fi
  fi
  recipient_email=$(promptUserInputMenu "" "Enter Recipient" "Enter the administrator email address of the network to which you are applying:")
  if [ $? -ne 0 ]; then
    return
  fi
  description=$(promptUserInputMenu "" "Enter Description" "Enter a description of what this connection will be used for:")
  if [ $? -ne 0 ]; then
    return
  fi
  sendOtherNetworkApplyUserConfig "$recipient_email" "$email_address" "$isInternetAccess" "$ip_address" "$pub_key" "$description"
}

function sendOtherNetworkApplyUserConfig()
{
  recipient_email="$1"
  email_address="$2"
  is_internet="$3"
  ip_address="$4"
  pub_key="$5"
  description="$6"

  request_id=$(getRandomRequestID)
  if [ -z "$pub_key" ] && ! [ -z "$ip_address" ]; then
    echo "ERROR: IP address provided without public key."
    return 2
  fi
  if [ -z "$ip_address" ]; then
    ip_address="New"
  fi
  if [ -z "$pub_key" ]; then
    priv_key=$(wg genkey)
    pub_key=$(echo $priv_key | wg pubkey)
    sendEmail -s "Private Key ($request_id)" -b "DO NOT SEND THIS TO ANYONE!!!\n\nKeep it secret, keep it safe.\n\nRequestID: $request_id\nDescription: $description\nPrivate Key: $priv_key\n" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t $email_address
  elif [ "$(checkValidWireGuardKey $client_public_key)" = "false" ]; then
    echo "ERROR: Invalid public key."
    return 2
  elif ! [ -z "$(getWGNameFromPubkey $pub_key)" ]; then
    echo "ERROR: Duplicate public key."
    return 2
  fi
  msg_body=""
  msg_body=$msg_body"$APPLICATION_FIRST_LINE\n"
  msg_body=$msg_body"RequestID = $request_id\n"
  msg_body=$msg_body"ConnectionType = User\n"
  msg_body=$msg_body"EmailAddress = $email_address\n"
  msg_body=$msg_body"PublicKey = $pub_key\n"
  msg_body=$msg_body"IsInternet = $is_internet\n"
  msg_body=$msg_body"IPAddress = $ip_address\n"
  msg_body=$msg_body"$APPLICATION_LAST_LINE\n"
  msg_header=""
  msg_header=$msg_header"Description: $description\n\n"
  msg_header=$msg_header"Copy everything BELOW the following line:\n"
  msg_header=$msg_header"_______________________________________________________________________\n\n"
  msg_body=${msg_header}"$msg_body"
  sendEmail -s "User Application from $HOMESERVER_NAME ($request_id)" -b "$msg_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$recipient_email"
}

# VPN Invite functions
function getValueFromConfig()
{
  get_val="$1"
  apply_file="$2"
  retVal=$(grep "^$get_val = " $apply_file)
  if [ $? -eq 0 ]; then
    echo "$(echo $retVal | sed 's/^[^=]*=//' | sed 's/ *$//g' | sed 's/^[ \t]*//;s/[ \t]*$//')"
  fi
}

function createMyNetworkInvite()
{
  set +e
  config_name=$(promptUserInputMenu "" "Enter Config Name" "Enter a name for this configuration: ")
  if [ $? -ne 0 ]; then
    return
  fi
  apply_file=$HOME/apply_hsv.cnf
  showMessageBox "Paste Configuration" "In this next step, you will need to paste the application that you received via email. After pasting the contents, press CTRL-o to save, then Enter to confirm, then CTRL-x to exit. Please remember these key combinations. Press OK to proceed."
  nano $apply_file
  if ! [ -f $apply_file ]; then
    showMessageBox "Empty Config File" "The application is empty, returning..."
    return
  fi
  performNetworkInvite "$apply_file" "$config_name"
  rm -f $apply_file
  if [ $? -ne 0 ]; then
    showMessageBox "Config File Error" "There was an error with the config file, returning..."
    return
  fi
}

function createMyNetworkUserInvite()
{
  email_address="$1"
  is_internet="$2"
  ip_address="$3"
  pub_key="$4"
  pre_key="$5"
  apply_file="$6"
  priv_key=""
  request_id=$(getRandomRequestID)
  if [ -z "$pub_key" ] && ! [ -z "$ip_address" ]; then
    echo "ERROR: IP address provided without public key."
    return 1
  fi
  if [ -z "$ip_address" ]; then
    ip_address="New"
  fi
  if [ -z "$pub_key" ]; then
    priv_key=$(wg genkey)
    pub_key=$(echo $priv_key | wg pubkey)
  fi
  if [ -z "$pre_key" ]; then
    pre_key=$(wg genpsk)
  fi
  msg_body=""
  msg_body=$msg_body"$APPLICATION_FIRST_LINE\n"
  msg_body=$msg_body"RequestID = $request_id\n"
  msg_body=$msg_body"ConnectionType = User\n"
  msg_body=$msg_body"EmailAddress = $email_address\n"
  if ! [ -z "$priv_key" ]; then
    msg_body=$msg_body"PrivateKey = $priv_key\n"
  fi
  msg_body=$msg_body"PresharedKey = $pre_key\n"
  msg_body=$msg_body"PublicKey = $pub_key\n"
  msg_body=$msg_body"IsInternet = $is_internet\n"
  msg_body=$msg_body"IPAddress = $ip_address\n"
  msg_body=$msg_body"$APPLICATION_LAST_LINE\n"
  echo -e "$msg_body" > $apply_file
}

function performNetworkInvite()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  apply_file="$1"
  config_name="$2"
  # First check if there are any shell expansions in the file.
  # If there is, throw up a big red flag.
  check_file=$(checkFileShellExpansion $apply_file)
  if ! [ -z "$check_file" ]; then
    echo -e "$check_file"
    return 2
  fi
  # Do basic checks
  removeSpecialChars "$apply_file"
  first_line="$(awk 'NF{print;exit}' $apply_file)"
  last_line="$(awk 'NF{s=$0}END{print s}' $apply_file)"
  if ! [ "$first_line" = "$APPLICATION_FIRST_LINE" ] || ! [ "$last_line" = "$APPLICATION_LAST_LINE" ]; then
    echo "ERROR: Incomplete application."
    return 7
  fi
  request_id=$(getValueFromConfig "RequestID" $apply_file)
  if [ -z "$request_id" ]; then
    echo "ERROR: Invalid request ID."
    return 7
  fi
  conn_type=$(getValueFromConfig "ConnectionType" $apply_file)
  email_address=$(getValueFromConfig "EmailAddress" $apply_file)
  if [ "$(checkValidEmail $email_address)" = "false" ]; then
    echo "ERROR: Invalid email address."
    return 7
  fi
  pub_key=$(getValueFromConfig "PublicKey" $apply_file)
  if [ -z "$pub_key" ] || [ "$(checkValidWireGuardKey $pub_key)" = "false" ]; then
    echo "ERROR: Invalid public key."
    return 7
  fi
  if ! [ -z "$(getWGNameFromPubkey $pub_key)" ]; then
    echo "ERROR: Duplicate public key."
    return 7
  fi
  preshared_key=$(getValueFromConfig "PresharedKey" $apply_file)
  if ! [ -z "$preshared_key" ] && [ "$(checkValidWireGuardKey $preshared_key)" = "false" ]; then
    echo "ERROR: Invalid preshared key."
    return 7
  fi

  case "$conn_type" in
    "HomeServer VPN")
      domain_name=$(getValueFromConfig "DomainName" $apply_file)
      if [ -z "$domain_name" ] || [ $(checkValidBaseDomain "$domain_name") = "false" ]; then
        echo "ERROR: Invalid domain name."
        return 7
      fi
      homeserver_name=$(getValueFromConfig "HomeServerName" $apply_file)
      if [ -z "$homeserver_name" ]; then
        echo "ERROR: Invalid HomeServer name."
        return 7
      fi
      external_prefix=$(getValueFromConfig "ExternalPrefix" $apply_file)
      if [ -z "$external_prefix" ] || [ $(checkValidString "$external_prefix" "-") = "false" ]; then
        echo "ERROR: Invalid external prefix."
        return 7
      fi
      is_primary=$(getValueFromConfig "IsPrimary" $apply_file)
      if [ -z "$is_primary" ] || ! ( [ "$is_primary" = "true" ] || [ "$is_primary" = "false" ] ); then
        echo "ERROR: Invalid primary VPN selection."
        return 7
      fi
      if [ "$is_primary" = "true" ]; then
        mail_subdomain=$(getValueFromConfig "MailSubdomain" $apply_file)
        if [ -z "$mail_subdomain" ] || [ $(checkValidString "$mail_subdomain" ".-") = "false" ]; then
          echo "ERROR: Invalid mail subdomain."
          return 7
        fi
        le_domains=$(getValueFromConfig "LetsEncryptDomains" $apply_file)
        if [ -z "$le_domains" ] || [ $(checkValidString "$external_prefix" ",.-") = "false" ]; then
          echo "ERROR: Invalid LetsEncrypt subdomains."
          return 7
        fi
      fi
    ;;
    "HomeServer Internet")
      domain_name=$(getValueFromConfig "DomainName" $apply_file)
      if [ -z "$domain_name" ] || [ $(checkValidBaseDomain "$domain_name") = "false" ]; then
        echo "ERROR: Invalid domain name."
        return 7
      fi
      is_internet=$(getValueFromConfig "IsInternet" $apply_file)
      if [ -z "$is_internet" ] || ! ( [ "$is_internet" = "true" ] || [ "$is_internet" = "false" ] ); then
        echo "ERROR: Invalid IsInternet selection."
        return 7
      fi
    ;;
    "User")
      if [ -z "$config_name" ] || [ $(checkValidStringUpperLowerNumbers "$config_name" "-") = "false" ]; then
        echo "ERROR: Invalid config name."
        return 7
      fi
      is_internet=$(getValueFromConfig "IsInternet" $apply_file)
      if [ -z "$is_internet" ] || ! ( [ "$is_internet" = "true" ] || [ "$is_internet" = "false" ] ); then
        echo "ERROR: Invalid IsInternet selection."
        return 7
      fi
      ip_address=$(getValueFromConfig "IPAddress" $apply_file)
      if [ -z "$pub_key" ] && ! [ "$ip_address" = "New" ]; then
        echo "ERROR: IP address provided without public key."
        return 7
      fi
      if [ "$ip_address" = "New" ]; then
        ip_address=$(getRandomWireGuardIP)
        is_ip_provided=false
      else
        is_ip_provided=true
      fi
      if [ -z "$ip_address" ] || [ "$(checkValidIPAddress $ip_address)" = "false" ] || [ "$(isIPInSubnet $ip_address 10.0.0.0/8)" = "false" ]; then
        echo "ERROR: Invalid IP address."
        return 7
      fi
    ;;
    *)
      echo "ERROR: Connection type not found."
      return 7
    ;;
  esac

  # Do logical checks
  case "$conn_type" in
    "HomeServer VPN")
      if [ "$domain_name" = "$HOMESERVER_DOMAIN" ]; then
        echo "ERROR: This is your domain, dummy!"
        return 7
      fi
      config_name="HS-VPN-$domain_name"
      checkname_db=$(sqlite3 $HSHQ_DB "select Name from connections where Name='$config_name';")
      if ! [ -z "$checkname_db" ]; then
        echo "ERROR: There is already a connection with this name."
        return 7
      fi
      check_dom=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections join connections on hsvpn_connections.ID = connections.ID where hsvpn_connections.DomainName='$domain_name' and connections.NetworkType='mynetwork';")
      if ! [ -z "$check_dom" ]; then
        echo "ERROR: There is already a connection with this domain ($domain_name)."
        return 7
      fi
      if ! [ "$(isEmailMatchBaseDomain $email_address $domain_name)" = "true" ]; then
        echo "ERROR: Requesting email is not from the same base domain. Email: $email_address, Domain: $domain_name"
        return 7
      fi
      new_ip=$(getRandomVPNIP)
      if [ -z "$new_ip" ]; then
        echo "ERROR: The VPN network is full."
        return 7
      fi
      isPrimary=0
      if [ "$is_primary" = "true" ]; then
        isPrimary=1
      fi
    ;;
    "HomeServer Internet")
      if [ "$domain_name" = "$HOMESERVER_DOMAIN" ]; then
        echo "ERROR: This is your domain, dummy!"
        return 7
      fi
      if ! [ "$(isEmailMatchBaseDomain $email_address $domain_name)" = "true" ]; then
        echo "ERROR: Requesting email is not from the same base domain. Email: $email_address, Domain: $domain_name"
        return 7
      fi
      config_name="HS-Internet-$domain_name"
      checkname_db=$(sqlite3 $HSHQ_DB "select Name from connections where Name='$config_name';")
      if ! [ -z "$checkname_db" ]; then
        echo "ERROR: There is already a connection with this name."
        return 7
      fi
    ;;
    "User")
      is_db=$(getWGNameFromIP $ip_address)
      if ! [ -z "$is_db" ]; then
        echo "ERROR: This IP address is already being used (Connection Name: $is_db)."
        return 7
      fi
      is_in_subnet=$(isIPInSubnet $ip_address $RELAYSERVER_WG_VPN_SUBNET)
      if [ "$is_in_subnet" = "true" ]; then
        echo "ERROR: This IP address is inside of your VPN range designated for hosting HomeServers."
        return 7
      fi
    ;;
  esac

  # Perform application steps
  if [ -z "$preshared_key" ]; then
    preshared_key=$(wg genpsk)
  fi
  wgPortalAuth="$(getWGPortalAuth)"
  loadSSHKey
  curdt=$(getCurrentDate)
  case "$conn_type" in
    "HomeServer VPN")
      echo "Adding to RelayServer..."
      ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh \"HS-$domain_name\" \"$email_address\" \"$pub_key\" \"$preshared_key\" \"$new_ip\" \"false\" \"true\" \"$wgPortalAuth\""
      mbres=$?
      if [ $mbres -ne 0 ]; then
        echo "ERROR: Could not connect to RelayServer host or there was an error adding the peer."
        unloadSSHKey
        return 7
      fi
      db_id=$(sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('$config_name','$email_address','homeserver_vpn','mynetwork','$pub_key','$preshared_key','$new_ip',false,'','$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN','$curdt');select last_insert_rowid();")
      mail_host_id=NULL
      if [ "$is_primary" = "true" ]; then
        mail_host_id=$(sqlite3 $HSHQ_DB "insert into mailhosts(MailHost) values('$mail_subdomain');select last_insert_rowid();")
      fi
      sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;insert into hsvpn_connections(ID,HomeServerName,IsPrimary,DomainName,ExternalPrefix,MailHostID) values($db_id,'$homeserver_name','$isPrimary','$domain_name','$external_prefix',$mail_host_id);"
      echo "Adding DNS entries to AdguardHome..."
      addDomainAndWildcardAdguardHS "$domain_name" "$new_ip"
      addDomainAndWildcardAdguardRS "$domain_name" "$new_ip"
      addDomainAdguardHS "*.$external_prefix.$domain_name" "A"
      addDomainAdguardRS "*.$external_prefix.$domain_name" "A"
      addDomainAndWildcardIgnoreQuerylogAndStatsHS "$domain_name"
      sqlite3 $HSHQ_DB "update hsvpn_dns set IsActive=0 where PeerDomain='$domain_name';"
      sqlite3 $HSHQ_DB "insert into hsvpn_dns(HostDomain,PeerDomain,PeerDomainExtPrefix,IPAddress,DateAdded,IsActive) values('$HOMESERVER_DOMAIN','$domain_name','$external_prefix','$new_ip','$curdt',1);"
      if [ "$is_primary" = "true" ]; then
        echo "Adding mail domain to RelayServer..."
        sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;insert into mailhostmap(MailHostID,Domain,IsFirstDomain) values ($mail_host_id,'$domain_name',true);"
        mail_relay_password=$(pwgen -c -n 32 1)
        ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "docker exec mail-relay-postfix /etc/postfix/scripts/addMailUser.sh $domain_name $mail_relay_password"
        ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addRelayedDomains.sh $domain_name $mail_subdomain $new_ip"
        if ! [ -z "$le_domains" ]; then
          echo "Primary Adding LECertDomains: $le_domains"
          addLECertPathsToRelayServer "$le_domains" "$domain_name"
        fi
      fi
    ;;
    "HomeServer Internet")
      new_ip=$(getRandomWireGuardIP)
      if [ -z "$new_ip" ]; then
        echo "ERROR: The HomeServer Internet network is full."
        unloadSSHKey
        return 7
      fi
      ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh \"$config_name\" \"$email_address\" \"$pub_key\" \"$preshared_key\" \"$new_ip\" \"true\" \"false\" \"$wgPortalAuth\""
      mbres=$?
      if [ $mbres -ne 0 ]; then
        echo "ERROR: Could not connect to RelayServer host or there was an error adding the peer."
        unloadSSHKey
        return 7
      fi
      sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,LastUpdated) values('$config_name','$email_address','homeserver_internet','mynetwork','$pub_key','$preshared_key','$new_ip',true,'$curdt');"
    ;;
    "User")
      ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh \"$config_name\" \"$email_address\" \"$pub_key\" \"$preshared_key\" \"$ip_address\" \"$is_internet\" \"false\" \"$wgPortalAuth\""
      mbres=$?
      if [ $mbres -ne 0 ]; then
        echo "ERROR: Could not connect to RelayServer host or there was an error adding the peer."
        unloadSSHKey
        return 7
      fi
      isInternet=false
      if [ "$is_internet" = "true" ]; then
        isInternet=true
      fi
      sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,LastUpdated) values('$config_name','$email_address','user','mynetwork','$pub_key','$preshared_key','$ip_address',$isInternet,'$curdt');"
      priv_key=$(getValueFromConfig "PrivateKey" $apply_file)
    ;;
  esac
  unloadSSHKey
  echo "Emailing the invitation..."
  # Finally, email the invitation.
  case "$conn_type" in
    "HomeServer VPN")
      mail_subj="HomeServer VPN Invitation from $HOMESERVER_NAME, RequestID: $request_id"
      mail_body=""
      mail_body=${mail_body}"HomeServer VPN Invitation from $HOMESERVER_NAME\n"
      mail_body=${mail_body}"================================================================\n\n"
      if [ "$is_primary" = "true" ]; then
        mail_body=${mail_body}"$(getDNSRecordsInfo $domain_name)\n\n"
      fi
      mail_body=$mail_body"1) Go to the Script-server app, and navigate to 07 Other Networks > 05 Join Network.\n"
      mail_body=$mail_body"2) Copy everything BELOW the following line and paste the contents where appropriate.\n"
      mail_body=$mail_body"_______________________________________________________________________\n"
      mail_body=$mail_body"\n$INVITATION_FIRST_LINE\n"
      mail_body=$mail_body"\n###################### Base Config Begin #######################\n\n"
      mail_body=$mail_body"RequestID = $request_id\n"
      mail_body=$mail_body"ConnectionType = $conn_type\n"
      mail_body=$mail_body"InterfaceName = $RELAYSERVER_WG_VPN_NETNAME\n"
      mail_body=$mail_body"EmailAddress = $EMAIL_ADMIN_EMAIL_ADDRESS\n"
      mail_body=$mail_body"DomainName = $HOMESERVER_DOMAIN\n"
      mail_body=$mail_body"EndpointHostname = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN\n"
      mail_body=$mail_body"EndpointPort = $RELAYSERVER_WG_PORT\n"
      mail_body=$mail_body"ClientIP = $new_ip\n"
      mail_body=$mail_body"ClientPublicKey = $pub_key\n"
      mail_body=$mail_body"PresharedKey = $preshared_key\n"
      mail_body=$mail_body"HomeServerName = $HOMESERVER_NAME\n"
      mail_body=$mail_body"ExternalPrefix = $EXT_DOMAIN_PREFIX\n"
      mail_body=$mail_body"InternalPrefix = $INT_DOMAIN_PREFIX\n"
      mail_body=$mail_body"CertificateAuthorityAbbrev = $HOMESERVER_ABBREV\n"
      mail_body=$mail_body"CertificateAuthorityIP = $RELAYSERVER_WG_HS_IP\n"
      mail_body=$mail_body"CertificateAuthoritySubdomain = $SUB_CADDY.$HOMESERVER_DOMAIN\n"
      mail_body=$mail_body"CertificateAuthorityURL = https://$SUB_CADDY.$HOMESERVER_DOMAIN/acme/$HOMESERVER_ABBREV/directory\n"
      mail_body=$mail_body"VPNSubnet = $RELAYSERVER_WG_VPN_SUBNET\n"
      mail_body=$mail_body"RelayServerExternalIP = $RELAYSERVER_SERVER_IP\n"
      mail_body=$mail_body"RelayServerVPNIP = $RELAYSERVER_WG_SV_IP\n"
      mail_body=$mail_body"IsPrimary = $is_primary\n"
      if [ "$is_primary" = "true" ]; then
        mail_body=$mail_body"SMTPRelayHost = $SMTP_RELAY_HOST\n"
        mail_body=$mail_body"SMTPRelayUsername = $domain_name\n"
        mail_body=$mail_body"SMTPRelayPassword = $mail_relay_password\n"
        mail_body=$mail_body"RelayServerExtEmailHostname = $RELAYSERVER_EXT_EMAIL_HOSTNAME\n"
      fi
      mail_body=$mail_body"\n####################### Base Config End ########################\n"
      mail_body=$mail_body"\n#################### WireGuard Config Begin ####################\n\n"
      mail_body=$mail_body"[Interface]\n"
      mail_body=$mail_body"PrivateKey =\n"
      mail_body=$mail_body"Address = $new_ip/32\n"
      mail_body=$mail_body"MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU\n\n"
      mail_body=$mail_body"[Peer]\n"
      mail_body=$mail_body"PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY\n"
      mail_body=$mail_body"PresharedKey = $preshared_key\n"
      mail_body=$mail_body"AllowedIPs = $RELAYSERVER_WG_VPN_SUBNET\n"
      mail_body=$mail_body"Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT\n"
      mail_body=$mail_body"PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE\n"
      mail_body=$mail_body"\n##################### WireGuard Config End #####################\n"
      mail_body=$mail_body"\n#################### HomeServers DNS Begin #####################\n\n"
      mail_body=$mail_body"$(getMyNetworkHomeServerDNSList)"
      mail_body=$mail_body"\n##################### HomeServers DNS End ######################\n"
      mail_body=$mail_body"\n######################### Root CA Begin #########################\n\n"
      mail_body=$mail_body"""$(cat $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt)"""
      mail_body=$mail_body"\n\n########################## Root CA End ##########################\n"
      if [ "$is_primary" = "true" ]; then
        generateCert $mail_subdomain "$SMTP_HOSTNAME,$mail_subdomain"
        mail_body=$mail_body"\n######################## mail.crt Begin ########################\n\n"
        mail_body=$mail_body"""$(cat $HSHQ_SSL_DIR/${mail_subdomain}.crt)"""
        mail_body=$mail_body"\n\n######################### mail.crt End #########################\n"
        mail_body=$mail_body"\n######################## mail.key Begin ########################\n\n"
        mail_body=$mail_body"""$(cat $HSHQ_SSL_DIR/${mail_subdomain}.key)"""
        mail_body=$mail_body"\n\n######################### mail.key End #########################\n"
        rm -f $RELAYSERVER_SSH_PORT $HSHQ_SSL_DIR/$mail_subdomain*
      fi
      mail_body=$mail_body"\n$INVITATION_LAST_LINE\n\n"
      if [ "$is_primary" = "true" ]; then
        echo -e "\n\n\n\n########################################"
        echo -e "This is a primary VPN request."
        echo -e "No email will be sent to $email_address."
        echo -e "You will have to transfer your MGR copy"
        echo -e "to them through alternative means."
        echo -e "########################################\n"
      else
        sendEmail -s "$mail_subj" -b "$mail_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$email_address"
      fi
      # Send ourself a copy
      sendEmail -s "(MGR COPY)$mail_subj" -b "$mail_body"
      insertEnableSvcUptimeKuma uptimekuma "${homeserver_name}" homeservers "https://home.$domain_name" true
      insertEnableSvcHeimdall heimdall "$homeserver_name" homeservers "https://home.$domain_name" "hs2.png" true
      # Send update email to other HomeServers on our network
      notifyMyNetworkHomeServersDNSUpdate add "$homeserver_name" "$domain_name"
      # Send update email to other users on our network
      notifyMyNetworkUsersDNSUpdate add "$homeserver_name" "$domain_name" "$external_prefix" "$new_ip"
    ;;
    "HomeServer Internet")
      mail_subj="HomeServer Internet Invitation from $HOMESERVER_NAME, RequestID: $request_id"
      mail_body=""
      mail_body=${mail_body}"HomeServer Internet Invitation from $HOMESERVER_NAME\n"
      mail_body=${mail_body}"================================================================\n\n"
      mail_body=$mail_body"1) Copy everything BELOW the following line.\n"
      mail_body=$mail_body"2) Go to the Script-server app, and navigate to 07 Other Networks > 05 Join Network.\n"
      mail_body=$mail_body"3) Paste the contents where appropriate. \n"
      mail_body=$mail_body"_______________________________________________________________________\n\n"
      mail_body=$mail_body"\n$INVITATION_FIRST_LINE\n"
      mail_body=$mail_body"\n###################### Base Config Begin #######################\n\n"
      mail_body=$mail_body"RequestID = $request_id\n"
      mail_body=$mail_body"ConnectionType = $conn_type\n"
      mail_body=$mail_body"InterfaceName = $RELAYSERVER_WG_INTERNET_NETNAME\n"
      mail_body=$mail_body"EmailAddress = $EMAIL_ADMIN_EMAIL_ADDRESS\n"
      mail_body=$mail_body"DomainName = $HOMESERVER_DOMAIN\n"
      mail_body=$mail_body"EndpointHostname = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN\n"
      mail_body=$mail_body"EndpointPort = $RELAYSERVER_WG_PORT\n"
      mail_body=$mail_body"ClientIP = $new_ip\n"
      mail_body=$mail_body"ClientPublicKey = $pub_key\n"
      mail_body=$mail_body"EndpointPublicKey = $RELAYSERVER_WG_SV_PUBLICKEY\n"
      mail_body=$mail_body"PresharedKey = $preshared_key\n"
      mail_body=$mail_body"MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU\n"
      mail_body=$mail_body"\n####################### Base Config End ########################\n"
      mail_body=$mail_body"\n$INVITATION_LAST_LINE\n\n"
      # Send ourself a copy
      sendEmail -s "(MGR COPY)$mail_subj" -b "$mail_body"
      sendEmail -s "$mail_subj" -b "$mail_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$email_address"
    ;;
    "User")
      mail_subj="User Invitation from $HOMESERVER_NAME, RequestID: $request_id"
      mail_body=""
      mail_body=${mail_body}"User Invitation from $HOMESERVER_NAME\n"
      mail_body=${mail_body}"================================================================\n\n"
      mail_body=$mail_body"The public root certificate is attached to this email or downloaded via the following links (must be connected to network first):\n"
      mail_body=$mail_body"Root CA (PEM): http://$SUB_FILES.$HOMESERVER_DOMAIN/ca.crt\n"
      mail_body=$mail_body"Root CA (DER): http://$SUB_FILES.$HOMESERVER_DOMAIN/ca.der\n"
      mail_body=$mail_body"VPN Owner Home Page: https://home.$HOMESERVER_DOMAIN\n\n"
      if [ "$is_ip_provided" = "false" ]; then
        mail_body=$mail_body"The configuration can be loaded using one of the three following ways: \n"
        mail_body=$mail_body"     1. Copy and paste the configuration INSIDE the ### borders below, or\n"
        mail_body=$mail_body"     2. Scan the attached QR image (${config_name}-qr.png) from within the WireGuard client, or\n"
        mail_body=$mail_body"     3. Load the attached config file (${config_name}.conf).\n\n"
        if [ -z "$priv_key" ]; then
          mail_body=$mail_body"Ensure to replace your private key in the config before activating.\n"
        fi
      else
        mail_body=$mail_body"Append the config section below to your existing configuration.\n"
      fi
      mail_body=$mail_body"_______________________________________________________________________\n"
      if [ "$is_internet" = "true" ]; then
        allowed_ips=$(getAllowedPublicIPs $RELAYSERVER_WG_VPN_SUBNET)
      else
        allowed_ips=$RELAYSERVER_WG_VPN_SUBNET
      fi
      wg_config=""
      if [ -z "$priv_key" ]; then
        priv_key=$(wg genkey)
      fi
      if [ "$is_ip_provided" = "false" ]; then
        wg_config=$wg_config"[Interface]\n"
        wg_config=$wg_config"PrivateKey = $priv_key\n"
        wg_config=$wg_config"Address = ${ip_address}/32\n"
        wg_config=$wg_config"MTU = $RELAYSERVER_CLIENT_DEFAULT_MTU\n"
        wg_config=$wg_config"DNS = $RELAYSERVER_WG_SV_CLIENTDNS_IP\n\n"
      fi
      wg_config=$wg_config"[Peer]\n"
      wg_config=$wg_config"PublicKey = $RELAYSERVER_WG_SV_PUBLICKEY\n"
      wg_config=$wg_config"PresharedKey = $preshared_key\n"
      wg_config=$wg_config"AllowedIPs = $allowed_ips\n"
      wg_config=$wg_config"Endpoint = $RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT\n"
      wg_config=$wg_config"PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE\n"
      mail_body=$mail_body"\n#################### WireGuard Config Begin ####################\n\n"
      mail_body=$mail_body"$wg_config"
      mail_body=$mail_body"\n##################### WireGuard Config End #####################\n\n"
      mail_body=$mail_body"If this is not your primary VPN, add/update the entries below into your ClientDNS server.\n"
      mail_body=$mail_body"_______________________________________________________________________\n"
      mail_body=$mail_body"\n#################### HomeServers DNS Begin #####################\n\n"
      mail_body=$mail_body"$(getMyNetworkHomeServerDNSListForClientDNS)"
      mail_body=$mail_body"##################### HomeServers DNS End ######################\n"
      if [ "$is_ip_provided" = "false" ]; then
        echo -e "$wg_config" > $HOME/${config_name}.conf
        qrencode -t png -o $HOME/${config_name}-qr.png -r $HOME/${config_name}.conf
        mail_attachments="-a $HOME/${config_name}.conf -a $HOME/${config_name}-qr.png -a $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -a $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der"
      else
        mail_attachments="-a $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -a $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der"
      fi
      sendEmail -s "$mail_subj" -b "$mail_body" $mail_attachments -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$email_address"
      # Send ourself a copy
      sendEmail -s "(MGR COPY)$mail_subj" -b "$mail_body" $mail_attachments -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" 
      rm -f $HOME/${config_name}.conf
      rm -f $HOME/${config_name}-qr.png
    ;;
  esac
  echo "Invite complete."
}

# VPN Join functions
function createNetworkJoin()
{
  is_connect="$1"
  sudo -v
  set +e
  join_file=$HOME/joinvpn_hs.cnf
  showMessageBox "Paste Configuration" "In this next step, you will need to paste your configuration file contents that you received via email. After pasting the contents, press CTRL-o to save, then Enter to confirm, then CTRL-x to exit. Please remember these key combinations. Press OK to proceed."
  nano $join_file
  if ! [ -f $join_file ]; then
    showMessageBox "Empty Config File" "The configuration file is empty, returning..."
    return 1
  fi
  performNetworkJoin "$is_connect" "$join_file"
  rm -f $join_file
  if [ $? -ne 0 ]; then
    showMessageBox "Config File Error" "There was an error with the config file, returning..."
    return 1
  fi
}

function performNetworkJoin()
{
  is_connect="$1"
  join_file="$2"
  echo "Joining network..."
  # First check if there are any shell expansions in the file.
  # If there is, throw up a big red flag.
  check_file=$(checkFileShellExpansion $join_file)
  if ! [ -z "$check_file" ]; then
    echo -e "$check_file"
    return 2
  fi
  # Do basic checks
  removeSpecialChars "$join_file"
  first_line="$(awk 'NF{print;exit}' $join_file)"
  last_line="$(awk 'NF{s=$0}END{print s}' $join_file)"
  if ! [ "$first_line" = "$INVITATION_FIRST_LINE" ] || ! [ "$last_line" = "$INVITATION_LAST_LINE" ]; then
    echo "ERROR: Incomplete invitation."
    return 8
  fi
  # Check right away for matching RequestID
  request_id=$(getValueFromConfig "RequestID" $join_file)
  if [ -z "$request_id" ]; then
    echo "ERROR: Invalid request ID."
    return 8
  fi
  if ! [ -f $HSHQ_WIREGUARD_DIR/requestkeys/$request_id ]; then
    echo "ERROR: No matching key for this request."
    return 8
  fi
  base_config_section=$(getTextBetweenStrings $join_file "Base Config Begin" "Base Config End")
  wireguard_config_section=$(getTextBetweenStrings $join_file "WireGuard Config Begin" "WireGuard Config End")
  dns_section=$(getTextBetweenStrings $join_file "HomeServers DNS Begin" "HomeServers DNS End")
  root_ca_section=$(getTextBetweenStrings $join_file "Root CA Begin" "Root CA End")
  mail_crt_section=$(getTextBetweenStrings $join_file "mail.crt Begin" "mail.crt End")
  mail_key_section=$(getTextBetweenStrings $join_file "mail.key Begin" "mail.key End")
  join_base_config_file=$HOME/joinvpn_base_config.cnf
  echo -e "$base_config_section" > $join_base_config_file

  priv_key=$(getValueFromConfig "PrivateKey" $HSHQ_WIREGUARD_DIR/requestkeys/$request_id)
  req_conn_type=$(getValueFromConfig "ConnectionType" $HSHQ_WIREGUARD_DIR/requestkeys/$request_id)
  req_is_primary=$(getValueFromConfig "IsPrimary" $HSHQ_WIREGUARD_DIR/requestkeys/$request_id)

  conn_type=$(getValueFromConfig "ConnectionType" $join_base_config_file)
  if ! [ "$conn_type" = "$req_conn_type" ]; then
    echo "ERROR: Apply/join connection type mismatch. You applied for $req_conn_type, but invitation has $conn_type."
    rm -f $join_base_config_file
    return 8
  fi
  interface_name=$(getValueFromConfig "InterfaceName" $join_base_config_file)
  if [ -z "$interface_name" ] || [ $(checkValidString "$interface_name" "-") = "false" ]; then
    echo "ERROR: Invalid interface name."
    rm -f $join_base_config_file
    return 8
  fi
  email_address=$(getValueFromConfig "EmailAddress" $join_base_config_file)
  if [ -z "$email_address" ] || [ $(checkValidEmail "$email_address") = "false" ]; then
    echo "ERROR: Invalid email address."
    rm -f $join_base_config_file
    return 8
  fi
  domain_name=$(getValueFromConfig "DomainName" $join_base_config_file)
  if [ -z "$domain_name" ] || [ $(checkValidBaseDomain "$domain_name") = "false" ]; then
    echo "ERROR: Invalid domain name."
    rm -f $join_base_config_file
    return 8
  fi
  endpoint_hostname=$(getValueFromConfig "EndpointHostname" $join_base_config_file)
  if [ -z "$endpoint_hostname" ] || [ $(checkValidString "$endpoint_hostname" ".-") = "false" ]; then
    echo "ERROR: Invalid endpoint hostname."
    rm -f $join_base_config_file
    return 8
  fi
  endpoint_port=$(getValueFromConfig "EndpointPort" $join_base_config_file)
  if [ -z "$endpoint_port" ] || [ $(checkValidNumber "$endpoint_port") = "false" ]; then
    echo "ERROR: Invalid endpoint port."
    rm -f $join_base_config_file
    return 8
  fi
  client_ip=$(getValueFromConfig "ClientIP" $join_base_config_file)
  if [ -z "$client_ip" ] || [ $(checkValidIPAddress "$client_ip") = "false" ]; then
    echo "ERROR: Invalid client IP address."
    rm -f $join_base_config_file
    return 8
  fi
  client_public_key=$(getValueFromConfig "ClientPublicKey" $join_base_config_file)
  if [ -z "$client_public_key" ] || [ "$(checkValidWireGuardKey $client_public_key)" = "false" ]; then
    echo "ERROR: Invalid client public key."
    rm -f $join_base_config_file
    return 8
  fi
  if ! [ -z "$(getWGNameFromPubkey $client_public_key)" ]; then
    echo "ERROR: Duplicate client public key."
    rm -f $join_base_config_file
    return 8
  fi
  preshared_key=$(getValueFromConfig "PresharedKey" $join_base_config_file)
  if [ -z "$preshared_key" ]; then
    echo "ERROR: Invalid preshared key."
    rm -f $join_base_config_file
    return 8
  fi

  case "$conn_type" in
    "HomeServer VPN")
      homeserver_name=$(getValueFromConfig "HomeServerName" $join_base_config_file)
      if [ -z "$homeserver_name" ]; then
        echo "ERROR: Invalid HomeServer name."
        rm -f $join_base_config_file
        return 8
      fi
      ext_prefix=$(getValueFromConfig "ExternalPrefix" $join_base_config_file)
      if [ -z "$ext_prefix" ]; then
        echo "ERROR: Invalid external prefix."
        rm -f $join_base_config_file
        return 8
      fi
      int_prefix=$(getValueFromConfig "InternalPrefix" $join_base_config_file)
      if [ -z "$int_prefix" ]; then
        echo "ERROR: Invalid internal prefix."
        rm -f $join_base_config_file
        return 8
      fi
      ca_abbrev=$(getValueFromConfig "CertificateAuthorityAbbrev" $join_base_config_file)
      if [ -z "$ca_abbrev" ]; then
        echo "ERROR: Invalid CA abbrev."
        rm -f $join_base_config_file
        return 8
      fi
      ca_ip=$(getValueFromConfig "CertificateAuthorityIP" $join_base_config_file)
      if [ -z "$ca_ip" ] || [ $(checkValidIPAddress "$ca_ip") = "false" ]; then
        echo "ERROR: Invalid CA IP address."
        rm -f $join_base_config_file
        return 8
      fi
      ca_subdomain=$(getValueFromConfig "CertificateAuthoritySubdomain" $join_base_config_file)
      if [ -z "$ca_subdomain" ] || [ $(checkValidString "$ca_subdomain" ".-") = "false" ]; then
        echo "ERROR: Invalid CA subdomain."
        rm -f $join_base_config_file
        return 8
      fi
      ca_url=$(getValueFromConfig "CertificateAuthorityURL" $join_base_config_file)
      if [ -z "$ca_url" ]; then
        echo "ERROR: Invalid CA URL."
        rm -f $join_base_config_file
        return 8
      fi
      vpn_subnet=$(getValueFromConfig "VPNSubnet" $join_base_config_file)
      if [ -z "$vpn_subnet" ]; then
        echo "ERROR: Invalid VPN subnet."
        rm -f $join_base_config_file
        return 8
      fi
      rs_ext_ip=$(getValueFromConfig "RelayServerExternalIP" $join_base_config_file)
      if [ -z "$rs_ext_ip" ] || [ $(checkValidIPAddress "$rs_ext_ip") = "false" ]; then
        echo "ERROR: Invalid RelayServer external IP address."
        rm -f $join_base_config_file
        return 8
      fi
      rs_vpn_ip=$(getValueFromConfig "RelayServerVPNIP" $join_base_config_file)
      if [ -z "$rs_vpn_ip" ] || [ $(checkValidIPAddress "$rs_vpn_ip") = "false" ]; then
        echo "ERROR: Invalid RelayServer VPN IP address."
        rm -f $join_base_config_file
        return 8
      fi
      is_primary=$(getValueFromConfig "IsPrimary" $join_base_config_file)
      if [ -z "$is_primary" ] || ! ( [ "$is_primary" = "true" ] || [ "$is_primary" = "false" ] ); then
        echo "ERROR: Invalid primary VPN selection."
        rm -f $join_base_config_file
        return 8
      fi
      conn_type=$(getValueFromConfig "ConnectionType" $join_base_config_file)
      if ! [ "$is_primary" = "$req_is_primary" ]; then
        if [ "$is_primary" = "true" ]; then
          echo "ERROR: Apply/join IsPrimary mismatch. You applied for a non-primary connection, but the invitation indicates a primary connection."
        else
          echo "ERROR: Apply/join IsPrimary mismatch. You applied for a primary connection, but the invitation indicates a non-primary connection."
        fi
        rm -f $join_base_config_file
        return 8
      fi
      if [ "$is_primary" = "true" ]; then
        if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
          echo "ERROR: You are already hosting a VPN, cannot join another network as primary."
          rm -f $join_base_config_file
          return 8
        fi
        smtp_relay_host=$(getValueFromConfig "SMTPRelayHost" $join_base_config_file)
        if [ -z "$smtp_relay_host" ]; then
          echo "ERROR: Invalid SMTP relay host."
          rm -f $join_base_config_file
          return 8
        fi
        smtp_relay_username=$(getValueFromConfig "SMTPRelayUsername" $join_base_config_file)
        if [ -z "$smtp_relay_username" ]; then
          echo "ERROR: Invalid SMTP username."
          rm -f $join_base_config_file
          return 8
        fi
        smtp_relay_password=$(getValueFromConfig "SMTPRelayPassword" $join_base_config_file)
        if [ -z "$smtp_relay_password" ]; then
          echo "ERROR: Invalid SMTP password."
          rm -f $join_base_config_file
          return 8
        fi
        rs_ext_email_hostname=$(getValueFromConfig "RelayServerExtEmailHostname" $join_base_config_file)
        if [ -z "$rs_ext_email_hostname" ]; then
          echo "ERROR: Invalid RelayServer external email hostname."
          rm -f $join_base_config_file
          return 8
        fi
      fi
    ;;
    "HomeServer Internet")
      endpoint_pub_key=$(getValueFromConfig "EndpointPublicKey" $join_base_config_file)
      if [ -z "$endpoint_pub_key" ]; then
        echo "ERROR: Invalid endpoint public key."
        rm -f $join_base_config_file
        return 8
      fi
      mtu=$(getValueFromConfig "MTU" $join_base_config_file)
      if [ -z "$mtu" ]; then
        echo "ERROR: Invalid MTU."
        rm -f $join_base_config_file
        return 8
      fi
    ;;
    *)
      echo "ERROR: Connection type not found."
      rm -f $join_base_config_file
      return 8
    ;;
  esac

  # Do logical checks
  if [ "$domain_name" = "$HOMESERVER_DOMAIN" ]; then
    echo "ERROR: This is your domain, dummy!"
    rm -f $join_base_config_file
    return 8
  fi
  if ! [ "$(isEmailMatchBaseDomain $email_address $domain_name)" = "true" ]; then
    echo "ERROR: Join email is not from the same base domain. Email: $email_address, Domain: $domain_name"
    return 8
  fi
  if [ "$(checkInterfaceNameExists $interface_name)" = "true" ]; then
    echo "ERROR: An interface with this name already exists. Change the InterfaceName value to something unique (using 10 characters or less)."
    rm -f $join_base_config_file
    return 8
  fi
  if [ ${#interface_name} -gt 10 ]; then
    echo "ERROR: Change the InterfaceName value to something shorter, no more than 10 characters, exiting..."
    rm -f $join_base_config_file
    return 8
  fi
  my_pub_key=$(echo $priv_key | wg pubkey)
  if ! [ "$client_public_key" = "$my_pub_key" ]; then
    echo "ERROR: The private key does not align with the public key submitted in the application."
    rm -f $join_base_config_file
    return 8
  fi
  is_db=$(getWGNameFromIP $client_ip)
  if ! [ -z "$is_db" ]; then
    echo "ERROR: This IP address is already being used (Connection Name: $is_db). Please request a new one."
    rm -f $join_base_config_file
    return 8
  fi

  case "$conn_type" in
    "HomeServer VPN")
      check_ca_dom=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections join connections on hsvpn_connections.ID = connections.ID where hsvpn_connections.DomainName='$domain_name' and connections.NetworkType='other';")
      if ! [ -z "$check_ca_dom" ]; then
        echo "ERROR: There is already an existing connection with this domain ($domain_name), please disconnect that existing connection and try again."
        rm -f $join_base_config_file
        return 8
      fi
      vpn_subnet=$(getValueFromConfig VPNSubnet $join_base_config_file)
      # Check for intersection with our networks
      echo "Checking for network collision..."
      check_intersect="$(isNetworkIntersectOurNetworks $vpn_subnet false)"
      if ! [ -z "$check_intersect" ]; then
        echo "ERROR: Network collision: $check_intersect"
        rm -f $join_base_config_file
        return 8
      fi
      echo "No collision."
      join_rootca_name="$(getCACertificateNameFromDomain $domain_name)"
      join_rootca_file=$HOME/$join_rootca_name
      echo -e "$root_ca_section" > $join_rootca_file
      openssl x509 -in $join_rootca_file -noout -text 1> /dev/null 2>&1
      check_cert=$?
      if [ $check_cert -ne 0 ]; then
        echo "ERROR: There was an unknown error parsing the provided root certificate, exiting..."
        rm -f $join_base_config_file
        rm -f $join_rootca_file
        return 8
      fi
      join_wireguard_config_file=$HOME/${interface_name}.conf
      echo -e "$wireguard_config_section" > $join_wireguard_config_file
      sed -i "s|^PrivateKey =.*|PrivateKey = $priv_key|g" $join_wireguard_config_file
      config_name="Other-VPN-$domain_name"
      net_type="other"
      isPrimary=0
      if [ "$is_primary" = "true" ]; then
        isPrimary=1
        config_name="Primary-VPN-$domain_name"
        net_type="primary"
      fi
      checkname_db=$(sqlite3 $HSHQ_DB "select Name from connections where Name='$config_name';")
      if ! [ -z "$checkname_db" ]; then
        echo "ERROR: There is already a connection with this name."
        rm -f $join_base_config_file
        rm -f $join_rootca_file
        rm -f $join_wireguard_config_file
        return 8
      fi
      if [ "$is_primary" = "true" ]; then
        checkPrimary=$(sqlite3 $HSHQ_DB "select ID from connections where NetworkType='primary';")
        if ! [ -z $checkPrimary ]; then
          echo "ERROR: There is already a primary network."
          rm -f $join_base_config_file
          rm -f $join_rootca_file
          rm -f $join_wireguard_config_file
          return 8
        fi
        echo -e "$mail_crt_section" > $HOME/mail-cert.crt
        openssl x509 -in $HOME/mail-cert.crt -noout -text 1> /dev/null 2>&1
        check_cert=$?
        if [ $check_cert -ne 0 ]; then
          echo "ERROR: There was an unknown error parsing the provided mail certificate."
          rm -f $join_base_config_file
          rm -f $join_rootca_file
          rm -f $join_wireguard_config_file
          rm -f $HOME/mail-cert.crt
          return 8
        fi
        echo -e "$mail_key_section" > $HOME/mail-key.key
        openssl rsa -in $HOME/mail-key.key -check 1> /dev/null 2>&1
        check_cert=$?
        if [ $check_cert -ne 0 ]; then
          echo "ERROR: There was an unknown error parsing the provided mail certificate key, exiting..."
          rm -f $join_base_config_file
          rm -f $join_rootca_file
          rm -f $join_wireguard_config_file
          rm -f $HOME/mail-cert.crt
          rm -f $HOME/mail-key.key
          return 8
        fi
        mv -f $HOME/mail-cert.crt $HSHQ_SSL_DIR/mail.crt
        mv -f $HOME/mail-key.key $HSHQ_SSL_DIR/mail.key
        chmod 0444 $HSHQ_SSL_DIR/mail.crt
        chmod 0444 $HSHQ_SSL_DIR/mail.key
        SMTP_RELAY_HOST="$smtp_relay_host"
        updateConfigVar SMTP_RELAY_HOST $SMTP_RELAY_HOST
        SMTP_RELAY_USERNAME="$smtp_relay_username"
        updateConfigVar SMTP_RELAY_USERNAME $SMTP_RELAY_USERNAME
        SMTP_RELAY_PASSWORD="$smtp_relay_password"
        updateConfigVar SMTP_RELAY_PASSWORD $SMTP_RELAY_PASSWORD
        RELAYSERVER_SERVER_IP="$rs_ext_ip"
        updateConfigVar RELAYSERVER_SERVER_IP $RELAYSERVER_SERVER_IP
        RELAYSERVER_EXT_EMAIL_HOSTNAME=$rs_ext_email_hostname
        updateConfigVar RELAYSERVER_EXT_EMAIL_HOSTNAME $RELAYSERVER_EXT_EMAIL_HOSTNAME
        PRIMARY_VPN_SETUP_TYPE=join
        updateConfigVar PRIMARY_VPN_SETUP_TYPE $PRIMARY_VPN_SETUP_TYPE
      fi
      dns_file=$HOME/dns.tmp
      echo -e "$dns_section" > $dns_file
      curdt=$(getCurrentDate)
      db_id=$(sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('$config_name','$email_address','homeserver_vpn','$net_type','$my_pub_key','$preshared_key','$client_ip',false,'$interface_name','$endpoint_hostname','$curdt');select last_insert_rowid();")
      sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;insert into hsvpn_connections(ID,HomeServerName,IsPrimary,DomainName,ExternalPrefix,InternalPrefix,CA_Abbrev,CA_IP,CA_Subdomain,CA_URL,VPN_Subnet,RS_VPN_IP) values($db_id,'$homeserver_name','$isPrimary','$domain_name','$ext_prefix','$int_prefix','$ca_abbrev','$ca_ip','$ca_subdomain','$ca_url','$vpn_subnet','$rs_vpn_ip');"
      if [ "$IS_INSTALLED" = "true" ]; then
        echo "Updating HomeServer DNS and restarting Heimdall..."
        docker container stop heimdall >/dev/null
        updateHomeServerDNS $dns_file
        docker container start heimdall >/dev/null
        rm -f $dns_file
      fi
      JOINED_DB_ID=$db_id
      rm -f $join_base_config_file
      sudo mv $join_wireguard_config_file $HSHQ_WIREGUARD_DIR/vpn/${interface_name}.conf
      sudo chown root:root $HSHQ_WIREGUARD_DIR/vpn/${interface_name}.conf
      sudo chmod 0400 $HSHQ_WIREGUARD_DIR/vpn/${interface_name}.conf
      sudo cp $HSHQ_WIREGUARD_DIR/vpn/${interface_name}.conf /etc/wireguard/${interface_name}.conf
      sudo mv $join_rootca_file $HSHQ_SSL_DIR/$join_rootca_name
      sudo chmod 0444 $HSHQ_SSL_DIR/$join_rootca_name
      sudo cp $HSHQ_SSL_DIR/$join_rootca_name /usr/local/share/ca-certificates/
      sudo update-ca-certificates
      if [ "$IS_INSTALLED" = "true" ]; then
        docker ps | grep nextcloud-app > /dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo "Updating CA certificates in Nextcloud..."
          docker exec -u www-data nextcloud-app php occ --no-warnings security:certificates:import /usr/local/share/ca-certificates/$join_rootca_name
        fi
        #echo "Restarting HomeAssistant (if running) due to new CA certificate..."
        #restartStackIfRunning homeassistant 10
      fi
      echo "Adding advertise IP..."
      addAdvertiseIP $client_ip
      set -e
      if [ "$is_connect" = "true" ]; then
        connectVPN $db_id
      fi
    ;;
    "HomeServer Internet")
      dockerNetworkName="dwg-${interface_name}"
      config_name="Other-Internet-$domain_name"
      checkname_db=$(sqlite3 $HSHQ_DB "select Name from connections where Name='$config_name';")
      if ! [ -z "$checkname_db" ]; then
        echo "ERROR: There is already a connection with this name."
        rm -f $join_base_config_file
        return 8
      fi
      # Check for intersection with our networks
      echo "Checking for network collision..."
      check_intersect="$(isNetworkIntersectOurNetworks ${client_ip}/32 false)"
      if ! [ -z "$check_intersect" ]; then
        echo "ERROR: Network collision: $check_intersect"
        rm -f $join_base_config_file
        return 8
      fi
      echo "No collision."
      join_wireguard_config_file=$HOME/${interface_name}.conf
      tableid=$(getNextWGRoutingTableID)
      allowed_ips=$(getAllowedPublicIPs)
      dockerSubnet=$(getNextAvailableWGDockerNetwork $dockerNetworkName $mtu)
      echo -e "#NETNAME=$interface_name" > $join_wireguard_config_file
      echo -e "#ROUTING_TABLE_ID=$tableid" >> $join_wireguard_config_file
      echo -e "#DOCKER_NETWORK_NAME=$dockerNetworkName" >> $join_wireguard_config_file
      echo -e "#DOCKER_NETWORK_SUBNET=$dockerSubnet" >> $join_wireguard_config_file
      echo -e "#CLIENT_ADDRESS=$client_ip" >> $join_wireguard_config_file
      echo -e "#MTU=$mtu" >> $join_wireguard_config_file
      echo -e "#IS_ENABLED=true" >> $join_wireguard_config_file
      echo -e "#EXT_DOMAIN=$endpoint_hostname" >> $join_wireguard_config_file
      echo -e "\n[Interface]" >> $join_wireguard_config_file
      echo -e "PrivateKey = $priv_key" >> $join_wireguard_config_file
      echo -e "\n[Peer]" >> $join_wireguard_config_file
      echo -e "PublicKey = $endpoint_pub_key" >> $join_wireguard_config_file
      echo -e "PresharedKey = $preshared_key" >> $join_wireguard_config_file
      echo -e "AllowedIPs = $allowed_ips" >> $join_wireguard_config_file
      echo -e "Endpoint = ${endpoint_hostname}:${endpoint_port}" >> $join_wireguard_config_file
      echo -e "PersistentKeepalive = $RELAYSERVER_PERSISTENT_KEEPALIVE" >> $join_wireguard_config_file
      chmod 0400 $join_wireguard_config_file
      sudo chown root:root $join_wireguard_config_file
      sudo mv $join_wireguard_config_file $HSHQ_WIREGUARD_DIR/internet/${interface_name}.conf
      rm -f $join_config_file
      curdt=$(getCurrentDate)
      db_id=$(sqlite3 $HSHQ_DB "insert into connections(Name,EmailAddress,ConnectionType,NetworkType,PublicKey,PresharedKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,LastUpdated) values('$config_name','$email_address','homeserver_internet','other','$my_pub_key','$preshared_key','$client_ip',true,'$interface_name','$endpoint_hostname','$curdt');select last_insert_rowid();")
      JOINED_DB_ID=$db_id
      set -e
      if [ "$is_connect" = "true" ]; then
        connectInternet $db_id
      fi
    ;;
  esac
  rm -f $HSHQ_WIREGUARD_DIR/requestkeys/$request_id
}

# VPN Remove functions
function removeMyNetworkPrimaryVPN()
{
  sudo -v
  disconnect_reason="$1"
  db_id=$(getPrimaryVPN_DBID)
  client_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$db_id;")
  ifaceName=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where ID=$db_id;")
  ca_abbrev=$(sqlite3 $HSHQ_DB "select CA_Abbrev from hsvpn_connections where ID=$db_id;")
  domain_name=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$db_id;")
  ext_prefix=$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$db_id;")
  int_prefix=$(sqlite3 $HSHQ_DB "select InternalPrefix from hsvpn_connections where ID=$db_id;")
  ca_ip=$(sqlite3 $HSHQ_DB "select CA_IP from hsvpn_connections where ID=$db_id;")
  ca_subdomain=$(sqlite3 $HSHQ_DB "select CA_Subdomain from hsvpn_connections where ID=$db_id;")
  ca_url=$(sqlite3 $HSHQ_DB "select CA_URL from hsvpn_connections where ID=$db_id;")
  vpn_subnet=$(sqlite3 $HSHQ_DB "select VPN_Subnet from hsvpn_connections where ID=$db_id;")
  rs_vpn_ip=$(sqlite3 $HSHQ_DB "select RS_VPN_IP from hsvpn_connections where ID=$db_id;")

  # Do notifications first, since this will tear down our network.
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    # Notify everyone that they have been removed
    notifyMyNetworkFullRemoval
  elif [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    host_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$db_id;")
    # Notify host that you have disconnected.
    email_subj="HomeServer Disconnect Notice from $HOMESERVER_NAME"
    email_body=""
    email_body=${email_body}"HomeServer Disconnect Notice from $HOMESERVER_NAME\n"
    email_body=${email_body}"================================================================\n\n"
    email_body=${email_body}"Domain: $HOMESERVER_DOMAIN\n"
    email_body=${email_body}"Reason Provided: $disconnect_reason\n\n"
    sendEmail -s "$email_subj" -b "$email_body" -t "$host_email" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  fi
  echo "Waiting 30 seconds to proceed so that Disconnect Notice email(s) can get sent..."
  sleep 30

  removeWGInterfaceQuick $ifaceName
  sudo rm -f $HSHQ_WIREGUARD_DIR/vpn/${ifaceName}.conf
  deleteDomainAdguardHS "*.$int_prefix.$domain_name"
  checkDeleteStackAndDirectory caddy-$ifaceName "Caddy" true true
  removeAdvertiseIP $client_ip
  removeHomeNetIP ${RELAYSERVER_SERVER_IP}/32 true
  docker container stop uptimekuma >/dev/null
  docker container stop heimdall >/dev/null
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X DELETE -k https://127.0.0.1:8384/rest/config/folders/$RELAYSERVER_SYNCTHING_FOLDER_ID
    curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X DELETE -k https://127.0.0.1:8384/rest/config/devices/$RELAYSERVER_SYNCTHING_DEVICE_ID
    echo "Removing ClientDNS instances..."
    cdns_arr=($(sqlite3 $HSHQ_DB "select ID,Name from connections where ConnectionType='clientdns' and NetworkType in ('primary','mynetwork');"))
    for cur_cdns in "${cdns_arr[@]}"
    do
      cur_cdns_id=$(echo "$cur_cdns" | cut -d"|" -f1)
      cur_cdns_name=$(echo "$cur_cdns" | cut -d"|" -f2)
      performMyNetworkRemoveClientDNS $cur_cdns_id "$cur_cdns_name" false false
    done
    sudo $HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh $HSHQ_WIREGUARD_DIR/internet/${RELAYSERVER_WG_INTERNET_NETNAME}.conf down
    sudo rm -f $HSHQ_WIREGUARD_DIR/internet/${RELAYSERVER_WG_INTERNET_NETNAME}.conf
    docker container restart syncthing
    # Remove any DNS entries resulting from our network.
    sqlite3 $HSHQ_DB "delete from hsvpn_dns where HostDomain='$HOMESERVER_DOMAIN';"
    vpn_arr=($(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType='mynetwork';"))
    for curID in "${vpn_arr[@]}"
    do
      curDomain=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$curID;")
      curDomainExtPrefix=$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$curID;")
      curMailHostID=$(sqlite3 $HSHQ_DB "select MailHostID from hsvpn_connections where ID=$curID;")
      if ! [ -z $curMailHostID ]; then
        sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhostmap where MailHostID=$curMailHostID;"
        sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhosts where ID=$curMailHostID;"
      fi
      removeRevertDNS $curDomain $curDomainExtPrefix
    done
    curMailHostID=$(sqlite3 $HSHQ_DB "select MailHostID from hsvpn_connections join connections on connections.ID = hsvpn_connections.ID where ConnectionType = 'homeserver_vpn' and NetworkType='primary';")
    if ! [ -z $curMailHostID ]; then
      sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhostmap where MailHostID=$curMailHostID;"
      sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhosts where ID=$curMailHostID;"
    fi
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from lecertdomains;"
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from exposedomains;"
    disableSvcAll relayserver "https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    disableSvcAll relayserver "https://$SUB_PORTAINER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    disableSvcAll relayserver "https://$SUB_RSPAMD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    disableSvcAll relayserver "https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    disableSvcAll relayserver "https://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    disableSvcAll relayserver "https://$SUB_FILEBROWSER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    disableSvcHeimdall relayserver "https://$SUB_CLIENTDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
    disableSvcHeimdall relayserver "https://$SUB_CADDYDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" false
  elif [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    sudo rm -f $HSHQ_SSL_DIR/"$(getCACertificateNameFromDomain $domain_name)"
    sudo rm -f /usr/local/share/ca-certificates/"$(getCACertificateNameFromDomain $domain_name)"
    sudo update-ca-certificates
    dns_arr=($(sqlite3 $HSHQ_DB "select PeerDomain,PeerDomainExtPrefix from hsvpn_dns where HostDomain='$domain_name';"))
    sqlite3 $HSHQ_DB "delete from hsvpn_dns where HostDomain='$domain_name';"
    for cur_dns in "${dns_arr[@]}"
    do
      curPeerDomain=$(echo "$cur_dns" | cut -d "|" -f1)
      curPeerDomainExtPrefix=$(echo "$cur_dns" | cut -d "|" -f2)
      removeRevertDNS $curPeerDomain $curPeerDomainExtPrefix
      disableSvcHeimdall homeservers https://home.$curPeerDomain false
    done
  fi
  docker container start uptimekuma >/dev/null
  docker container start heimdall >/dev/null
  PRIMARY_VPN_SETUP_TYPE=manual
  updateConfigVar PRIMARY_VPN_SETUP_TYPE $PRIMARY_VPN_SETUP_TYPE
  RELAYSERVER_IS_INIT=false
  updateConfigVar RELAYSERVER_IS_INIT $RELAYSERVER_IS_INIT
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from connections where NetworkType in ('relayserver','primary','mynetwork');"
  resetRelayServerData
}

function removeMyNetworkHomeServerVPNConnection()
{
  db_id=$1
  removal_reason="$2"
  # Multiple queries is wasteful...but easier...
  pub_key=$(sqlite3 $HSHQ_DB "select PublicKey from connections where ID=$db_id;")
  ip_addr=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$db_id;")
  peer_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$db_id;")
  domain_name=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$db_id;")
  hs_name=$(sqlite3 $HSHQ_DB "select HomeServerName from hsvpn_connections where ID=$db_id;")
  is_primary=$(sqlite3 $HSHQ_DB "select IsPrimary from hsvpn_connections where ID=$db_id;")
  mail_host_id=$(sqlite3 $HSHQ_DB "select MailHostID from hsvpn_connections where ID=$db_id;")
  domain_ext_prefix=$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$db_id;")
  if [ -z $pub_key ]; then
    echo "ERROR: No matching DB entry, returning..."
    return
  fi
  # Notify peer that you are removing them.
  email_subj="HomeServer Removal Notice from $HOMESERVER_NAME"
  email_body=""
  email_body=${email_body}"HomeServer Removal Notice from $HOMESERVER_NAME\n"
  email_body=${email_body}"================================================================\n\n"
  email_body=${email_body}"Your HomeServer connection has been removed from the network.\n"
  email_body=${email_body}"Ensure to disconnect accordingly.\n\n"
  email_body=${email_body}"Host Domain: $HOMESERVER_DOMAIN\n"
  email_body=${email_body}"Reason Provided: $removal_reason\n\n"
  sendEmail -s "$email_subj" -b "$email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$peer_email" 
  if [ $is_primary = 1 ]; then
    echo "Waiting 30 seconds to proceed so that Removal Notice email(s) can get sent..."
    sleep 30
  fi

  wgPortalAuth="$(getWGPortalAuth)"
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/removePeer.sh \"$pub_key\" \"$ip_addr\" \"false\" \"true\" \"$wgPortalAuth\""
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not connect to RelayServer host or there was an error adding the peer, returning..."
    return
  fi
  sqlite3 $HSHQ_DB "delete from hsvpn_dns where HostDomain='$HOMESERVER_DOMAIN' and PeerDomain='$domain_name';"
  removeRevertDNS $domain_name $domain_ext_prefix
  deleteDomainAndWildcardAdguardRS $domain_name
  deleteDomainAdguardRS "*.$domain_ext_prefix.$domain_name"
  deleteSvcHeimdall homeservers "https://home.$domain_name" true

  if [ $is_primary = 1 ]; then
    domains_to_remove=$(sqlite3 $HSHQ_DB "select Domain from mailhostmap where MailHostID=$mail_host_id and IsFirstDomain=true;")
    domains_to_rem_qry=($(sqlite3 $HSHQ_DB "select Domain from mailhostmap where MailHostID=$mail_host_id and IsFirstDomain=false;"))
    for curdom in "${domains_to_rem_qry[@]}"
    do
      domains_to_remove="${domains_to_remove},$curdom"
    done
    deliver_to_host=$(sqlite3 $HSHQ_DB "select MailHost from mailhosts where ID=$mail_host_id;")
    ssh -p $RELAYSERVER_SSH_PORT -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeRelayedDomains.sh $domains_to_remove $deliver_to_host $domain_name"
    if [ $? -ne 0 ]; then
      echo "ERROR: Could not connect to RelayServer host or there was an error removing the peer, returning..."
      return
    fi
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhostmap where MailHostID=$mail_host_id;"
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhosts where ID=$mail_host_id;"
    removeSecondaryDomainFromRelayServer "$domain_name"
  fi
  unloadSSHKey
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from connections where ID=$db_id;"
  # Send update email to other HomeServers on our network
  notifyMyNetworkHomeServersDNSUpdate remove "$hs_name" "$domain_name"
  # Send update email to other users on our network
  notifyMyNetworkUsersDNSUpdate remove "$hs_name" "$domain_name" "$domain_ext_prefix" "$ip_addr"
}

function removeMyNetworkHomeServerInternetConnection()
{
  db_id=$1
  removal_reason="$2"
  echo "Removing $db_id"
  peer_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$db_id;")
  removeMyNetworkNonHomeServerConnection $db_id
  echo "Sending email to $peer_email"
  notifyHomeServerInternetNetworkRemoval "$peer_email" "$removal_reason"
}

function removeMyNetworkUserConnection()
{
  db_id=$1
  removal_reason="$2"
  peer_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$db_id;")
  removeMyNetworkNonHomeServerConnection $db_id
  echo "Sending email to $peer_email, reason: $removal_reason"
  notifyUserNetworkRemoval "$peer_email" "$removal_reason"
}

function removeMyNetworkNonHomeServerConnection()
{
  db_id=$1
  is_vpn=$2
  pub_key=$(sqlite3 $HSHQ_DB "select PublicKey from connections where ID=$db_id;")
  ip_addr=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$db_id;")
  is_int=$(sqlite3 $HSHQ_DB "select IsInternet from connections where ID=$db_id;")
  is_internet="false"
  if [ $is_int = 1 ]; then
    is_internet="true"
  fi
  is_in_vpn=false
  if ! [ -z $is_vpn ] && [ "$is_vpn" = "true" ]; then
    is_in_vpn=true
  fi

  wgPortalAuth="$(getWGPortalAuth)"
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/removePeer.sh \"$pub_key\" \"$ip_addr\" \"$is_internet\" \"$is_in_vpn\" \"$wgPortalAuth\""
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not connect to RelayServer host or there was an error adding the peer, returning..."
    return
  fi
  unloadSSHKey
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from connections where ID=$db_id;"
}

# VPN Disconnect functions
function disconnectOtherNetworkHomeServerVPNConnection()
{
  db_id=$1
  disconnect_reason="$2"
  ifaceName=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where ID=$db_id;")
  client_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$db_id;")
  host_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$db_id;")
  domain_name=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$db_id;")
  ext_prefix=$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$db_id;")
  int_prefix=$(sqlite3 $HSHQ_DB "select InternalPrefix from hsvpn_connections where ID=$db_id;")
  ca_ip=$(sqlite3 $HSHQ_DB "select CA_IP from hsvpn_connections where ID=$db_id;")
  if sudo test -f /etc/wireguard/${ifaceName}.conf; then
    removeWGInterfaceQuick $ifaceName
  else
    echo "ERROR: WireGuard config file not found: /etc/wireguard/${ifaceName}.conf"
  fi
  sudo rm -f $HSHQ_WIREGUARD_DIR/vpn/${ifaceName}.conf
  sudo rm -f $HSHQ_SSL_DIR/"$(getCACertificateNameFromDomain $domain_name)"
  sudo rm -f /usr/local/share/ca-certificates/"$(getCACertificateNameFromDomain $domain_name)"
  sudo update-ca-certificates
  removeAdvertiseIP $client_ip
  checkDeleteStackAndDirectory caddy-$ifaceName "Caddy" true true
  rm -f $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-caddy-$ifaceName
  deleteDomainAdguardHS "*.$int_prefix.$domain_name"
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from connections where ID=$db_id;"
  peer_list=($(sqlite3 $HSHQ_DB "select PeerDomain,PeerDomainExtPrefix,IsActive from hsvpn_dns where HostDomain='$domain_name';"))
  sqlite3 $HSHQ_DB "delete from hsvpn_dns where HostDomain='$domain_name';"
  for cur_peer in "${peer_list[@]}"
  do
    curPeerDomain=$(echo "$cur_peer" | cut -d "|" -f1)
    curPeerDomainExtPrefix=$(echo "$cur_peer" | cut -d "|" -f2)
    curIsActive=$(echo "$cur_peer" | cut -d "|" -f3)
    if [ $curIsActive = 1 ]; then
      removeRevertDNS $curPeerDomain $curPeerDomainExtPrefix
    fi
  done
  # Notify host that you have disconnected.
  email_subj="HomeServer VPN Disconnect Notice from $HOMESERVER_NAME"
  email_body=""
  email_body=${email_body}"HomeServer VPN Disconnect Notice from $HOMESERVER_NAME\n"
  email_body=${email_body}"================================================================\n\n"
  email_body=${email_body}"Domain: $HOMESERVER_DOMAIN\n"
  email_body=${email_body}"Reason Provided: $disconnect_reason\n\n"
  sendEmail -s "$email_subj" -b "$email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$host_email" 
}

function disconnectOtherNetworkHomeServerInternetConnection()
{
  db_id=$1
  disconnect_reason="$2"
  set +e
  wg_config=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where ID=$db_id;")
  host_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$db_id;")
  sudo $HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh $HSHQ_WIREGUARD_DIR/internet/${wg_config}.conf down
  del_network=$(sudo grep ^\#DOCKER_NETWORK_NAME= $HSHQ_WIREGUARD_DIR/internet/${wg_config}.conf | sed 's/^[^=]*=//')
  docker network rm $del_network > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not remove the docker network associated with this connection. There is likely one or more containers still attached to it. Ensure to shut down the container(s) and manually delete the network ($del_network)."
  fi
  sudo rm -f $HSHQ_WIREGUARD_DIR/internet/${wg_config}.conf
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from connections where ID=$db_id;"

  # Notify host that you have disconnected.
  email_subj="HomeServer Internet Disconnect Notice from $HOMESERVER_NAME"
  email_body=""
  email_body=${email_body}"HomeServer Internet Disconnect Notice from $HOMESERVER_NAME\n"
  email_body=${email_body}"================================================================\n\n"
  email_body=${email_body}"Domain: $HOMESERVER_DOMAIN\n"
  email_body=${email_body}"Reason Provided: $disconnect_reason\n\n"
  sendEmail -s "$email_subj" -b "$email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$host_email" 
}

function changeHSInternetPrimaryIPAddress()
{
  # Just in case there's a network collision, allow
  # user to change the IP address rather than having
  # to tear down the entire hosted VPN structure.
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  new_ip=$1
  echo "Checking for network collision..."
  check_intersect="$(isNetworkIntersectOurNetworks ${new_ip}/32 false)"
  if ! [ -z "$check_intersect" ]; then
    echo "ERROR: Network collision: $check_intersect"
    return 2
  fi
  echo "No collision."
  if [ "$(isIPInSubnet $new_ip 10.0.0.0/8)" = "false" ]; then
    echo "ERROR: IP not in the 10.0.0.0/8 range."
    return 3
  fi
  db_id=$(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_internet' and NetworkType='primary';")
  pub_key=$(sqlite3 $HSHQ_DB "select PublicKey from connections where ID=$db_id;")
  cur_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$db_id;")
  interface_name=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where ID=$db_id;")
  wgPortalAuth="$(getWGPortalAuth)"
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/removePeer.sh \"$pub_key\" \"$cur_ip\" \"true\" \"false\" \"$wgPortalAuth\""
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not connect to RelayServer host or there was an unknown error, returning..."
    unloadSSHKey
    return 4
  fi
  ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh \"Primary-Internet-$HOMESERVER_DOMAIN\" \"$EMAIL_ADMIN_EMAIL_ADDRESS\" \"$pub_key\" \"$RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY\" \"$new_ip\" \"true\" \"false\" \"$wgPortalAuth\""
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not connect to RelayServer host or there was an unknown error, returning..."
    unloadSSHKey
    return 5
  fi
  unloadSSHKey
  sudo $HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh $HSHQ_WIREGUARD_DIR/internet/${interface_name}.conf down
  sudo sed -i "s/^#CLIENT_ADDRESS=.*/#CLIENT_ADDRESS=$new_ip\/32/g" $HSHQ_WIREGUARD_DIR/internet/${interface_name}.conf
  sudo $HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh $HSHQ_WIREGUARD_DIR/internet/${interface_name}.conf up
  sqlite3 $HSHQ_DB "update connections set IPAddress='$new_ip' where ID=$db_id;"
}

function changeUserIPAddress()
{
  # Just in case there's a network collision, allow
  # user to change the IP address rather than having
  # to redo the apply/invite.
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  db_id=$1
  new_ip=$2

  is_db=$(getWGNameFromIP $new_ip)
  if ! [ -z "$is_db" ]; then
    echo "ERROR: This IP address is already being used (Connection Name: $is_db)."
    return 2
  fi
  is_in_subnet=$(isIPInSubnet $new_ip $RELAYSERVER_WG_VPN_SUBNET)
  if [ "$is_in_subnet" = "true" ]; then
    echo "ERROR: This IP address is inside of your VPN range designated for hosting HomeServers."
    return 3
  fi
  cur_name=$(sqlite3 $HSHQ_DB "select Name from connections where ID=$db_id;")
  email_address=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$db_id;")
  pub_key=$(sqlite3 $HSHQ_DB "select PublicKey from connections where ID=$db_id;")
  pre_key=$(sqlite3 $HSHQ_DB "select PresharedKey from connections where ID=$db_id;")
  cur_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$db_id;")
  isInt=$(sqlite3 $HSHQ_DB "select IsInternet from connections where ID=$db_id;")
  is_internet="false"
  if [ "$isInt" = "1" ]; then
    is_internet="true"
  fi
  wgPortalAuth="$(getWGPortalAuth)"
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/removePeer.sh \"$pub_key\" \"$cur_ip\" \"$is_internet\" \"false\" \"$wgPortalAuth\""
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not connect to RelayServer host or there was an unknown error, returning..."
    unloadSSHKey
    return 4
  fi
  ssh -p $RELAYSERVER_SSH_PORT -t -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh \"$cur_name\" \"$email_address\" \"$pub_key\" \"$pre_key\" \"$new_ip\" \"$is_internet\" \"false\" \"$wgPortalAuth\""
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not connect to RelayServer host or there was an unknown error, returning..."
    unloadSSHKey
    return 5
  fi
  unloadSSHKey
  sqlite3 $HSHQ_DB "update connections set IPAddress='$new_ip' where ID=$db_id;"
  email_subj="User Interface IP Address Change Notice from $HOMESERVER_NAME"
  email_body=""
  email_body=$email_body"User Interface IP Address Change Notice from $HOMESERVER_NAME\n"
  email_body=$email_body"================================================================\n\n"
  email_body=$email_body"IP address successfully changed.\n\n"
  email_body=$email_body"Old: $cur_ip\n"
  email_body=$email_body"New: $new_ip\n"
  sendEmail -s "$email_subj" -b "$email_body" -t "$email_address" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

# Util Functions
function openHSHQScript()
{
  # This ensures only one instance of the script is open at a time.
  touch $HSHQ_SCRIPT_OPEN
}

function closeHSHQScript()
{
  rm -f $HSHQ_SCRIPT_OPEN
}

function checkHSHQScriptOpen()
{
  if [ -f $HSHQ_SCRIPT_OPEN ]; then
    echo "true"
  else
    echo "false"
  fi
}

function isConfigVar()
{
  isVar=$(grep ^$1= $CONFIG_FILE)
  if [ -z "$isVar" ]; then
    echo "false"
  else
    echo "true"
  fi
}

function getConfigVar()
{
  echo $(getConfigVarFromFile $1 $CONFIG_FILE)
}

function getConfigVarFromFile()
{
  if [ "$3" = "root" ]; then
    echo $(sudo grep ^$1= $2 | sed 's/^[^=]*=//' | sed 's/ *$//g')
  else
    echo $(grep ^$1= $2 | sed 's/^[^=]*=//' | sed 's/ *$//g')
  fi
}

function updateConfigVar()
{
  ucv_curE=${-//[^e]/}
  if [ -z "$CONFIG_FILE" ]; then
    return
  fi
  set +e
  num_spaces=$(echo $2 | sed -e 's/\(.\)/\1\n/g' | grep " " | wc -l)
  is_ds=false
  if grep -q "[$]" <<< $2; then
    is_ds=true
  fi
  grep -q "${1}=" $CONFIG_FILE
  if [ $? -ne 0 ]; then
    echo "Variable not found (${1}), exiting..."
    exit 3
  fi
  if [ "$is_ds" = "true" ]; then
    sed -i "s|^${1}=.*|${1}=\'${2}\'|g" $CONFIG_FILE
  elif [ $num_spaces -ne 0 ]; then
    sed -i "s|^${1}=.*|${1}=\"${2}\"|g" $CONFIG_FILE
  else
    sed -i "s|^${1}=.*|${1}=${2}|g" $CONFIG_FILE
  fi
  set +e
  if ! [ -z $ucv_curE ]; then
    set -e
  fi
}

function getCurrentDate()
{
  date '+%Y-%m-%d %H:%M:%S'
}

function getDomainNoTLD()
{
  domain_name=$1
  echo $domain_name | rev | cut -d"." -f2 | rev
}

function getDomainTLD()
{
  domain_name=$1
  echo $domain_name | rev | cut -d"." -f1 | rev
}

function getBaseDomain()
{
  domain_name=$1
  echo "$(getDomainNoTLD $domain_name)"."$(getDomainTLD $domain_name)"
}

function getSubDomain()
{
  domain_name=$1
  echo $domain_name | rev | cut -d"." -f 3- | rev
}

function getSubDomainNoTLD()
{
  domain_name=$1
  echo $domain_name | rev | cut -d"." -f 2- | rev
}

function getAdminEmailName()
{
  #echo "${HOMESERVER_ABBREV^^} Admin"
  echo "${HOMESERVER_NAME} Admin"
}

function checkDeleteStackAndDirectory()
{
  cdsad_curE=${-//[^e]/}
  stack_name="$1"
  formal_name="$2"
  is_check_stack="$3"
  is_force_delete="$4"
  is_delete_stack=false
  is_delete_dirs=false
  sudo -v
  set +e
  if ! [ "$is_check_stack" = "false" ]; then
    stackID=$(getStackID $stack_name)
    if ! [ -z "$stackID" ]; then
      if ! [ "$ENABLE_STACK_DELETE" = "true" ] && ! [ "$is_force_delete" = "true" ]; then
        echo "ERROR: Stack deletion is disabled, exiting..."
        exit 5
      fi
      if [ "$is_force_delete" = "true" ]; then
        is_delete_stack=true
      else
        showYesNoMessageBox "Stack Exists" "The stack '$stack_name' exists. Do you wish to delete it?"
        mbres=$?
	    if [ $mbres -ne 0 ]; then
          return 1
        else
          is_delete_stack=true
        fi
      fi
    fi
  fi
  if [ -d "$HSHQ_STACKS_DIR/$stack_name" ] || [ -d "$HSHQ_NONBACKUP_DIR/$stack_name" ]; then
    if ! [ "$ENABLE_STACK_DELETE" = "true" ] && ! [ "$is_force_delete" = "true" ]; then
      echo "ERROR: Stack deletion is disabled, exiting..."
      exit 5
    fi
    if [ "$is_force_delete" = "true" ]; then
      is_delete_dirs=true
    else
      showYesNoMessageBox "$formal_name Directory Exists" "The $formal_name directory already exists. Do you wish to delete it?"
	  mbres=$?
	  if [ $mbres -eq 0 ]; then
        is_delete_dirs=true
      fi
    fi
  fi
  set -e
  if [ "$is_delete_stack" = "true" ]; then
    deleteStack $stack_name
  fi
  set +e
  if [ "$is_delete_dirs" = "true" ]; then
    sudo rm -fr $HSHQ_STACKS_DIR/$stack_name
    sudo rm -fr $HSHQ_NONBACKUP_DIR/$stack_name
    # Delete any volumes
    OLDIFS=$IFS
    IFS=$(echo -en "\n\b")
    vol_list=($(docker volume ls | grep v-${stack_name}))
    for curVol in "${vol_list[@]}"
    do
      curVolName=$(echo $curVol | xargs | cut -d" " -f2)
      docker volume rm $curVolName
    done
    IFS=$OLDIFS
  fi
  set +e
  if ! [ -z $cdsad_curE ]; then
    set -e
  fi
}

function checkAvailablePort()
{
  check_port=$1
  if [ $check_port -le 1024 ]; then
    return 1
  fi
}

function getPrivateIPRangesCaddy()
{
  if ! [ "$HOMESERVER_HOST_ISPRIVATE" = "true" ]; then
    str_res=""
    if ! [ -z $CONNECTING_IP ]; then
      str_res="${CONNECTING_IP}/32"
    fi
    rsip=$(getIPFromHostname ip.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN)
    if ! [ -z $rsip ] && ! [ "$rsip" = "$CONNECTING_IP" ]; then
      str_res=${str_res}" ${rsip}/32"
    fi
    echo "$str_res"
  fi
}

function setHomeServerPrivateRange()
{
  echo "Setting HomeServer private range..."
  shspr_curE=${-//[^e]/}
  set +e
  # getHomeServerPrivateRange has some issues, so wrapping the function call with and error handler.
  hspr=""
  num_tries=1
  max_tries=6
  if [ -z "$HOMESERVER_HOST_IP" ]; then
    echo "HOMESERVER_HOST_IP is empty, exiting..."
    exit 1
  fi
  while [ -z "$hspr" ] && [ $num_tries -lt $max_tries ]
  do
    hspr=$(getHomeServerPrivateRange)
    if ! [ -z "$hspr" ]; then
      break
    fi
    echo "Error getting network private range, retrying..."
    sleep 3
    ((num_tries++))
  done
  if [ -z "$hspr" ]; then
    echo "ERROR: Problem getting network private range, IsPrivate: ${HOMESERVER_HOST_ISPRIVATE}"
    exit 2
  fi
  HOMESERVER_HOST_RANGE="$hspr"
  updateConfigVar HOMESERVER_HOST_RANGE $HOMESERVER_HOST_RANGE
  if ! [ -z $shspr_curE ]; then
    set -e
  fi
}

function getHomeServerPrivateRange()
{
  if [ "$HOMESERVER_HOST_ISPRIVATE" = "true" ]; then
    # This function call strangely and erroneously returns nothing sometimes...
    ip route | grep src | grep $(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1) | grep / | awk '{print $1}' | head -1
  else
    echo "${HOMESERVER_HOST_IP}/32"
  fi
}

function getNonPrivateConnectingIP()
{
  if ! [ "$HOMESERVER_HOST_ISPRIVATE" = "true" ]; then
    str_res=""
    if ! [ -z $CONNECTING_IP ]; then
      str_res="${CONNECTING_IP}/32"
    fi
    rsip=$(getIPFromHostname ip.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN)
    if ! [ -z "$rsip" ] && ! [ "$rsip" = "$CONNECTING_IP" ]; then
      str_res=${str_res}" ${rsip}/32"
    fi
    set +e
    echo "$str_res" | grep "$HOMESERVER_HOST_IP"
    if [ $? -ne 0 ] && ! [ -z "$HOMESERVER_HOST_IP" ]; then
      str_res=${str_res}" ${HOMESERVER_HOST_IP}/32"
    fi
    set -e
    echo "$str_res"
  else
    echo ""
  fi
}

function getConnectingIPAddress()
{
  echo $(echo $SSH_CLIENT | xargs | cut -d" " -f1)
}

function getDefaultRouteIPAddress()
{
  ip_addr=$(ip route | grep src | grep $(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1) | grep / | awk -F'src ' '{print $2}' | xargs | cut -d" " -f1)
  if ! [ "$(checkValidIPAddress $ip_addr)" = "true" ]; then
    ip_addr=$(hostname -I | cut -d" " -f1)
  fi
  echo $ip_addr
}

function getIPFromHostname()
{
  echo $(dig $1 +short | grep '^[.0-9]*$')
}

function getAllowedPublicIPs()
{
  set +e
  ips="0.0.0.0/5,8.0.0.0/7,11.0.0.0/8,12.0.0.0/6,16.0.0.0/4,32.0.0.0/3,64.0.0.0/2,128.0.0.0/3,160.0.0.0/5,168.0.0.0/6,172.0.0.0/12,172.32.0.0/11,172.64.0.0/10,172.128.0.0/9,173.0.0.0/8,174.0.0.0/7,176.0.0.0/4,192.0.0.0/9,192.128.0.0/11,192.160.0.0/13,192.169.0.0/16,192.170.0.0/15,192.172.0.0/14,192.176.0.0/12,192.192.0.0/10,193.0.0.0/8,194.0.0.0/7,196.0.0.0/6,200.0.0.0/5,208.0.0.0/4"
  if ! [ -z $1 ]; then
    ips+=","$1
  fi
  set -e
  echo $ips
}

function checkDefaultRouteIPIsPrivateIP()
{
  if [ -z "$HOMESERVER_HOST_IP" ]; then
    echo "Host IP is empty, exiting..."
    exit 5
  fi
  checkIsIPPrivate "$HOMESERVER_HOST_IP"
}

function checkIsIPPrivate()
{
  check_ip="$1"
  set +e
  priv_arr=(10.0.0.0/8 172.16.0.0/12 192.168.0.0/16)
  for subnet in "${priv_arr[@]}"
  do
    is_in_subnet=$(isIPInSubnet $check_ip $subnet)
    if [ "$is_in_subnet" = "true" ]; then
      echo "true"
      return
    fi
  done
  echo "false"
}

function setStaticIPToCurrent()
{
  if ! [ "$HOMESERVER_HOST_ISPRIVATE" = "true" ]; then
    return
  fi
  cur_ip=$(getDefaultRouteIPAddress)
  def_route=$(ip route | grep -e "^default")
  cidr_part=$(ip route | grep src | grep $(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1) | grep / | xargs | cut -d" " -f1 | cut -d"/" -f2)
  ip_cidr=$cur_ip"/"$cidr_part
  cur_gate=$(echo $def_route | awk '{print $3}')
  setStaticIP $ip_cidr $cur_gate
  if [ $? -ne 0 ]; then
    echo "ERROR: There was an error setting the static IP Address, exiting..."
    exit 1
  fi
  # Put a sleep here to help mitigate the race condition
  sleep 5
  HOMESERVER_HOST_IP=$cur_ip
  updateConfigVar HOMESERVER_HOST_IP $HOMESERVER_HOST_IP
  setHomeServerPrivateRange
}

function setStaticIP()
{
  ip_cidr=$1
  cur_gate=$2
  adapter_name=$(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1)
  cat <<EOFSI > $HOME/00-installer-config.yaml
network:
  version: 2
  ethernets:
    $adapter_name:
      addresses:
        - $ip_cidr
      nameservers:
        addresses: [9.9.9.9]
      routes:
        - to: default
          via: $cur_gate

EOFSI
  
  chmod 0600 $HOME/00-installer-config.yaml
  sudo chown root:root $HOME/00-installer-config.yaml
  sudo mv -f $HOME/00-installer-config.yaml /etc/netplan/00-installer-config.yaml
  sudo netplan apply
}

function changeHostStaticIP()
{
  set +e
  if ! [ "$HOMESERVER_HOST_ISPRIVATE" = "true" ]; then
    showMessageBox "Error" "The current static IP is a public IP, you likely do not have the ability to change this."
    return
  fi
  sudo -v
  checkChange=$(promptUserInputMenu "" "Confirm Change IP" "You MUST be physically logged directly into the host machine to change the IP. Enter 'change' to continue.")
  if ! [ "$checkChange" = "change" ]; then
    showMessageBox "Error" "Text does not match, returning..."
    return
  fi
  curHostIP=$HOMESERVER_HOST_IP
  curHostRange=$HOMESERVER_HOST_RANGE
  newHostIPCIDR=$(promptUserInputMenu "${HOMESERVER_HOST_IP}/24" "New Static IP" "Enter the static IP address with the CIDR of the network:")
  gwGuess=$(sipcalc $newHostIPCIDR | grep "^Usable range" | xargs | cut -d"-" -f2 | xargs)
  newHostGateway=$(promptUserInputMenu "$gwGuess" "New Gateway" "Enter the gateway IP address. This is typically the IP address of your router, the first IP in the range:")
  newHSHostIP=$(echo $newHostIPCIDR | cut -d"/" -f1)
  default_iface=$(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1)
  set +e
  echo "Setting new static IP on host..."
  setStaticIP $newHostIPCIDR $newHostGateway
  if [ $? -ne 0 ]; then
    showMessageBox "Networking Error" "There was an error changing the IP Address, please try again..."
    return
  fi
  HOMESERVER_HOST_IP=$newHSHostIP
  updateConfigVar HOMESERVER_HOST_IP $HOMESERVER_HOST_IP
  # Put a sleep here to help mitigate the race condition
  sleep 5
  setHomeServerPrivateRange
  echo "Restarting Portainer..."
  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml down > /dev/null 2>&1
  outputConfigPortainer
  generateCert portainer portainer $HOMESERVER_HOST_IP
  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d > /dev/null 2>&1
  generateCert script-server "script-server,host.docker.internal" $HOMESERVER_HOST_IP
  sudo systemctl restart runScriptServer
  echo "Restarting Heimdall..."
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set url='https://$HOMESERVER_HOST_IP:$PORTAINER_LOCAL_HTTPS_PORT' where url like '%$curHostIP:$PORTAINER_LOCAL_HTTPS_PORT%';"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set url='https://$HOMESERVER_HOST_IP:$SCRIPTSERVER_LOCALHOST_PORT' where url like '%$curHostIP:$SCRIPTSERVER_LOCALHOST_PORT%';"
  docker container restart heimdall > /dev/null 2>&1
  echo "Updating Adguard..."
  addDomainAndWildcardAdguardHS $HOMESERVER_DOMAIN $HOMESERVER_HOST_IP
  echo "Restarting Caddy stacks..."
  caddy_arr=($(docker ps -a --filter name=caddy- --format "{{.Names}}"))
  for curcaddy in "${caddy_arr[@]}"
  do
    startStopStack $curcaddy stop
    sleep 2
    startStopStack $curcaddy start
  done
  echo "Restarting Jitsi..."
  startStopStack jitsi stop
  sleep 2
  startStopStack jitsi start
  sudo sed -i "s|$curHostRange --dport $SCRIPTSERVER_LOCALHOST_PORT|$HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT|g" $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
  sudo sed -i "s|$curHostRange --dport $SCRIPTSERVER_LOCALHOST_PORT|$HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT|g" $HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh
  sudo iptables -D INPUT -p tcp -m tcp -i $default_iface -s $curHostRange --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1
  sudo iptables -A INPUT -p tcp -m tcp -i $default_iface -s $HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1
  echo "Change Static IP Complete!"
  sendEmail -s "Static IP Succesfully Changed" -b "Static IP Succesfully Changed\n\nThe static IP address for the host machine has been updated from $curHostIP to ${HOMESERVER_HOST_IP}.\nYou will need to update your Vaultwarden password IP URLs for both Portainer and ScriptServer to the new IP address."
}

function initWireGuardDB()
{
  rm -f $HSHQ_DB
  sqlite3 $HSHQ_DB "create table connections(ID integer not null primary key autoincrement,Name text,EmailAddress text,ConnectionType text,NetworkType text,PublicKey text,PresharedKey text,IPAddress text,IsInternet boolean,InterfaceName text,EndpointHostname text,EndpointIP text default null,LastUpdated datetime);"
  sqlite3 $HSHQ_DB "create table mailhosts(ID integer not null primary key autoincrement,MailHost text not null);"
  sqlite3 $HSHQ_DB "create table hsvpn_connections(ID integer not null primary key references connections(ID) on delete cascade,HomeServerName text,IsPrimary boolean,DomainName text default null,ExternalPrefix text default null,InternalPrefix text default null,MailHostID integer references mailhosts(ID) on delete cascade,CA_Abbrev text default null,CA_IP text default null,CA_Subdomain text default null,CA_URL text default null,VPN_Subnet text default null,RS_VPN_IP text default null);"
  sqlite3 $HSHQ_DB "create table hsvpn_dns(ID integer not null primary key autoincrement,HostDomain text not null,PeerDomain text not null,PeerDomainExtPrefix text not null,IPAddress text not null,DateAdded datetime,IsActive boolean);"
  sqlite3 $HSHQ_DB "create unique index hpdns on hsvpn_dns(HostDomain,PeerDomain);"
  sqlite3 $HSHQ_DB "create table mailhostmap(MailHostID integer not null references mailhosts(ID) on delete cascade,Domain text not null,IsFirstDomain boolean,primary key (MailHostID,Domain));"
  sqlite3 $HSHQ_DB "create table lecertdomains(Domain text primary key,BaseDomain text not null);"
  sqlite3 $HSHQ_DB "create table exposedomains(Domain text primary key,BaseDomain text not null);"
  chmod 600 $HSHQ_DB
}

function getWGNameFromIP()
{
  check_ip=$1
  echo $(sqlite3 $HSHQ_DB "select Name from connections where IPAddress='$check_ip';")
}

function getWGNameFromPubkey()
{
  check_key=$1
  echo $(sqlite3 $HSHQ_DB "select Name from connections where PublicKey='$check_key';")
}

function checkInterfaceNameExists()
{
  check_iface="$1"
  ifaceName=$(sqlite3 $HSHQ_DB "select InterfaceName from connections where InterfaceName='$check_iface';")
  if [ -z "$ifaceName" ]; then
    echo "false"
  else
    echo "true"
  fi
}

function checkValidWireGuardKey()
{
  # Thank you gjoranv: https://stackoverflow.com/questions/74438436/how-to-validate-a-wireguard-public-key
  check_key=$1
  keyregex="^[A-Za-z0-9+/]{42}[AEIMQUYcgkosw480]=$"
  if [[ $check_key =~ $keyregex ]]; then
    echo "true"
  else
    echo "false"
  fi
}

function isIPInSubnet()
{
  iiis_curE=${-//[^e]/}
  check_ipaddr=$1
  check_subnet=$2
  set +e
  grepcidr ${check_subnet} <(echo ${check_ipaddr}) > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "true"
  else
    echo "false"
  fi
  set +e
  if ! [ -z $iiis_curE ]; then
    set -e
  fi
}

function getRandomVPNIP()
{
  # This function is specific to a /24 sized subnet.
  # It should be improved to a more general case based on the size of the network.
  vpnbase=$(echo $RELAYSERVER_WG_VPN_SUBNET | rev | cut -d "." -f2- | rev)
  numvpnipTries=1
  maxvpnipTries=88
  while [ $numvpnipTries -lt $maxvpnipTries ]
  do
    randIP=${vpnbase}.$(($(($RANDOM%250))+1))
    if [ -z "$(getWGNameFromIP $randIP)" ]; then
      echo $randIP
      return
    fi
    ((numvpnipTries++))
  done
  # Just start at the beginning...
  ip_host_part=1
  while [ $ip_host_part -le 250 ]
  do
    randIP=${vpnbase}.$ip_host_part
    if [ -z "$(getWGNameFromIP $randIP)" ]; then
      echo $randIP
      return
    fi
    ((ip_host_part++))
  done
  # The network is full. Caller needs to handle this.
  echo ""
}

function getRandomWireGuardIP()
{
  numRIPTries=1
  maxRIPTries=1000
  while [ $numRIPTries -lt $maxRIPTries ]
  do
    randIP=10.$(( $RANDOM % 256 )).$(( $RANDOM % 256 )).$(($(($RANDOM%250))+1))
    if [ "$(isIPInSubnet $randIP $RELAYSERVER_WG_VPN_SUBNET)" = "false" ] && [ -z "$(getWGNameFromIP $randIP)" ]; then
      echo $randIP
      return
    fi
    ((numRIPTries++))
  done
  echo ""
}

function checkNetworkIntersect()
{
  net1=$1
  net2=$2
  if [ -z $net1 ] || [ -z $net2 ]; then
    echo "true"
    return
  fi
  net1_beginip=$(sipcalc $net1 | grep "^Network range" | rev | cut -d " " -f3 | rev)
  net1_endip=$(sipcalc $net1 | grep "^Network range" | rev | cut -d " " -f1 | rev)
  is_in_subnet=$(isIPInSubnet $net1_beginip $net2)
  if [ "$is_in_subnet" = "true" ]; then
    echo "true"
    return
  fi
  is_in_subnet=$(isIPInSubnet $net1_endip $net2)
  if [ "$is_in_subnet" = "true" ]; then
    echo "true"
    return
  fi
  net2_beginip=$(sipcalc $net2 | grep "^Network range" | rev | cut -d " " -f3 | rev)
  net2_endip=$(sipcalc $net2 | grep "^Network range" | rev | cut -d " " -f1 | rev)
  is_in_subnet=$(isIPInSubnet $net2_beginip $net1)
  if [ "$is_in_subnet" = "true" ]; then
    echo "true"
    return
  fi
  is_in_subnet=$(isIPInSubnet $net2_endip $net1)
  if [ "$is_in_subnet" = "true" ]; then
    echo "true"
    return
  fi
  echo "false"
}

function isNetworkIntersectOurNetworks()
{
  checkNetwork=$1
  checkAll=$2
  checknet_ip=$(echo $checkNetwork | cut -d"/" -f1)
  if [ "$(checkValidIPAddress $checknet_ip)" = "false" ]; then
    echo "ERROR: Invalid IP address/subnet."
    return
  fi
  OIFS=$IFS
  IFS=$(echo -en "\n\b")
  vpn_arr=($(sqlite3 $HSHQ_DB "select VPN_Subnet,HomeServerName from hsvpn_connections where VPN_Subnet is not null;"))
  for curvpncheck in "${vpn_arr[@]}"
  do
    curvpn=$(echo "$curvpncheck" | cut -d "|" -f1)
    curhsname=$(echo "$curvpncheck" | cut -d "|" -f2)
    if [ "$(checkNetworkIntersect $curvpn $checkNetwork)" = "true" ]; then
      echo "The requested subnet ($checkNetwork) collides with ${curhsname} VPN subnet ($curvpn)"
      IFS=$OIFS
      return
    fi
  done
  if [ "$checkAll" = "true" ]; then
    # Check all possible connections
    ip_arr=($(sqlite3 $HSHQ_DB "select IPAddress,Name from connections;"))
  else
    # Check only connections on this HomeServer.
    ip_arr=($(sqlite3 $HSHQ_DB "select IPAddress,Name from connections where ConnectionType='homeserver_internet' and NetworkType in ('primary','other');"))
  fi
  for curipcheck in "${ip_arr[@]}"
  do
    curip=$(echo "$curipcheck" | cut -d "|" -f1)
    curconname=$(echo "$curipcheck" | cut -d "|" -f2)
    if [ "$(checkNetworkIntersect ${curip}/32 $checkNetwork)" = "true" ]; then
      echo "The requested subnet ($checkNetwork) collides with connection ${curconname} ($curip)"
      IFS=$OIFS
      return
    fi
  done
  IFS=$OIFS
  echo ""
}

function getNextWGRoutingTableID()
{
  rtid=100
  flist=$(sudo ls $HSHQ_WIREGUARD_DIR/internet)
  if [ -z $flist ]; then
    echo $rtid
    exit 0
  fi
  arr=()
  for conf in $HSHQ_WIREGUARD_DIR/internet/*; do
	arr+=($(sudo grep ^\#ROUTING_TABLE_ID= $conf | sed 's/^[^=]*=//'))
  done
  while true;
  do
    echo ${arr[@]} | grep $rtid > /dev/null
	if [[ $? -ne 0 ]]; then
	  break
	else
	  rtid=$(($rtid+1))
	fi
  done
  echo $rtid
}

function getNextAvailableWGDockerNetwork()
{
  docker_network_name=$1
  conn_mtu=$2
  docker network create --driver=bridge $docker_network_name > /dev/null 2>&1
  docker_subnet=$(getDockerSubnet $docker_network_name)
  docker network rm $docker_network_name > /dev/null 2>&1
  docker network create $docker_network_name --driver=bridge --subnet $docker_subnet -o com.docker.network.driver.mtu=$conn_mtu -o com.docker.network.bridge.name=$docker_network_name > /dev/null 2>&1
  echo $docker_subnet
}

function getWGPortalAuth()
{
  echo "$(echo $(echo -n ${RELAYSERVER_WGPORTAL_ADMIN_EMAIL}:${RELAYSERVER_WGPORTAL_ADMIN_PASSWORD} | base64) | sed 's| ||g')"
}

function getCACertificateNameFromDomain()
{
  dom_name="$1"
  echo ${dom_name}-ca.crt
}

function sortCSVList()
{
  inCSVList="$1"
  if [ -z "$inCSVList" ]; then
    echo ""
    return
  fi
  inCSVArr=($(echo $inCSVList | tr "," "\n"))
  OIFS=$IFS
  IFS=$'\n'
  sortedCSVArr=($(sort <<< "${inCSVArr[*]}"))
  IFS=$OIFS
  sortedCSVList=""
  for curItem in "${sortedCSVArr[@]}"
  do
    if [ -z "$curItem" ]; then continue; fi
    sortedCSVList="${sortedCSVList}${curItem},"
  done
  if ! [ -z "$sortedCSVList" ]; then
    sortedCSVList=${sortedCSVList%?}
  fi
  echo "$sortedCSVList"
}

function getPortainerToken()
{
  local OPTIND opt u p
  while getopts ':u:p:' opt; do
    case "$opt" in
      u)
        port_username="$OPTARG" ;;
      p)
        port_password="$OPTARG" ;;
      ?|h)
        return 1;;
    esac
  done
  shift "$(($OPTIND -1))"
  set +e
  # Portainer sometimes exhibits issues with API, so we'll add some error handling and restart capabilities.
  cur_timeout=5
  ptok_retVal=1
  ptok_numTries=1
  while [ $cur_timeout -le 30 ]
  do
    ptok_full=$(http --check-status --ignore-stdin --timeout=$cur_timeout --verify=no https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/auth username=$port_username password=$port_password)
    ptok_retVal=$?
    if [ $ptok_retVal -eq 0 ] && ! [ -z "$ptok_full" ]; then
      # Do a sample query
      ptok=$(echo $ptok_full | jq -r .jwt)
      qry=$(http --check-status --ignore-stdin --verify=no --timeout=$cur_timeout --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer $ptok" endpointId==1)
      if [ $? -eq 0 ]; then
        break
      fi
      ptok_retVal=1
    fi
    echo "Could not obtain Portainer token, restarting stack ($ptok_numTries of 6)..." 1>&2
    restartPortainer 1>&2
    cur_timeout=$((cur_timeout+5))
    ((ptok_numTries++))
  done
  # Probably going to need to implement full error handling for this type of issue.
  if [ $ptok_retVal -ne 0 ]; then
    return 1
  fi
  echo $ptok
}

function getStackID()
{
  stackID="NA"
  stackName=$1
  stackName="${stackName//.}"
  portainerToken=$2
  if [ -z "$portainerToken" ]; then
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  gsid_numTries=1
  gsid_totalTries=5
  gsid_retVal=1
  qry=""
  while [ $gsid_numTries -le $gsid_totalTries ]
  do
    qry=$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer $portainerToken" endpointId==1)
    gsid_retVal=$?
    if [ $gsid_retVal -eq 0 ]; then
      break
    fi
    ((gsid_numTries++))
  done
  if [ $gsid_retVal -ne 0 ]; then
    echo "ERROR: Could not obtain stack ID from Portainer..." 1>&2
    return
  fi
  for row in $(echo "${qry}" | jq -r '.[] | @base64'); do
    _jq()
    {
      echo ${row} | base64 --decode | jq -r ${1}
    }
    if [ $(_jq '.Name') = $stackName ]; then
      stackID=$(_jq '.Id')
	  break
    fi
  done
  if ! [ $stackID = "NA" ]; then
    echo $stackID
  fi
}

function updateStackByID()
{
  update_stack_name=$1
  update_stack_id=$2
  update_compose_file=$3
  update_env_file=$4
  portainerToken=$5

  echo "{$( jq -Rscjr '{StackFileContent: . }' $update_compose_file | tail -c +2 | head -c -1 ),\"Env\":$(envToJson $update_env_file)}" > $HOME/${update_stack_name}-json.tmp
  usid_numTries=1
  usid_totalTries=5
  usid_retVal=1
  while [ $usid_numTries -le $usid_totalTries ]
  do
    http --check-status --ignore-stdin --verify=no --timeout=300 PUT https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/$update_stack_id "Authorization: Bearer $portainerToken" endpointId==1 @$HOME/${update_stack_name}-json.tmp > /dev/null 2>&1
    usid_retVal=$?
    if [ $usid_retVal -eq 0 ]; then
      break
    fi
    ((usid_numTries++))
  done
  if [ $usid_retVal -ne 0 ]; then
    echo "ERROR: Could not get update stack in Portainer..." 1>&2
    return
  fi
  rm -f $update_compose_file $update_env_file $HOME/${update_stack_name}-json.tmp
}

function restartAllStacksDialog()
{
  set +e
  showYesNoMessageBox "Confirm Restart Stacks" "This action will shut down all running stacks, restart the docker daemon, then restart the stacks that were stopped. Depending on the number of stacks, it could take up to 10-15 minutes to complete. Continue?"
  if [ $? -ne 0 ]; then
    return 0
  fi
  sudo -k
  sudo -v
  restartAllStacks
}

function restartAllStacks()
{
  portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  startStopStack uptimekuma stop "$portainerToken"

  rsi_numTries=1
  rsi_totalTries=5
  rsi_retVal=1
  rstackIDsQry=""
  while [ $rsi_numTries -le $rsi_totalTries ]
  do
    rstackIDsQry=$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer $portainerToken" endpointId==1)
    rsi_retVal=$?
    if [ $rsi_retVal -eq 0 ]; then
      break
    fi
    ((rsi_numTries++))
  done
  if [ $rsi_retVal -ne 0 ]; then
    echo "ERROR: Could not get list of stack IDs in Portainer..." 1>&2
    return
  fi
  rstackIDs=($(echo $rstackIDsQry | jq -r '.[] | select(.Status == 1) | .Id'))

  rsn_numTries=1
  rsn_totalTries=5
  rsn_retVal=1
  rstackNamesQry=""
  while [ $rsn_numTries -le $rsn_totalTries ]
  do
    rstackNamesQry=$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer $portainerToken" endpointId==1)
    rsn_retVal=$?
    if [ $rsn_retVal -eq 0 ]; then
      break
    fi
    ((rsn_numTries++))
  done
  if [ $rsn_retVal -ne 0 ]; then
    echo "ERROR: Could not get list of stack names in Portainer..." 1>&2
    return
  fi
  rstackNames=($(echo $rstackNamesQry | jq -r '.[] | select(.Status == 1) | .Name'))

  numItems=$((${#rstackIDs[@]} - 1))
  for curID in $(seq 0 $numItems);
  do
    echo "Stopping ${rstackNames[$curID]} (${rstackIDs[$curID]})..."
    startStopStackByID ${rstackIDs[$curID]} stop $portainerToken
    sleep 1
  done
  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml down
  removeDockerNetworks
  echo "Restarting Docker..."
  sudo systemctl restart docker
  createDockerNetworks
  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d
  total_tries=10
  num_tries=1
  sleep 5
  portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  retVal=$?
  while [ $retVal -ne 0 ] && [ $num_tries -lt $total_tries ]
  do
    echo "Error getting portainer token, retrying ($(($num_tries + 1)) of $total_tries)..."
    sleep 5
    ((num_tries++))
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
    retVal=$?
  done
  if [ $retVal -ne 0 ]; then
    echo "Error getting portainer token, exiting..."
    exit 1
  fi
  for curID in $(seq 0 $numItems);
  do
    echo "Starting ${rstackNames[$curID]} (${rstackIDs[$curID]})..."
    startStopStackByID ${rstackIDs[$curID]} start $portainerToken
    sleep 3
  done
  startStopStack uptimekuma start "$portainerToken"
}

function updateGlobalVarsEnvFile()
{
  curEnv=$1
  sed -i '/^HSHQ_BASE_DIR=/d' $curEnv
  sed -i '/^HSHQ_DATA_DIR=/d' $curEnv
  sed -i '/^HSHQ_BACKUP_DIR=/d' $curEnv
  sed -i '/^HSHQ_NONBACKUP_DIR=/d' $curEnv
  sed -i '/^HSHQ_ASSETS_DIR=/d' $curEnv
  sed -i '/^HSHQ_BUILD_DIR=/d' $curEnv
  sed -i '/^HSHQ_CONFIG_DIR=/d' $curEnv
  sed -i '/^HSHQ_LIB_DIR=/d' $curEnv
  sed -i '/^HSHQ_RELAYSERVER_DIR=/d' $curEnv
  sed -i '/^HSHQ_SCRIPTS_DIR=/d' $curEnv
  sed -i '/^HSHQ_SECRETS_DIR=/d' $curEnv
  sed -i '/^HSHQ_SSL_DIR=/d' $curEnv
  sed -i '/^HSHQ_STACKS_DIR=/d' $curEnv
  sed -i '/^HSHQ_WIREGUARD_DIR=/d' $curEnv
  sed -i "s|^TZ=.*|TZ=\${TZ}|g" $curEnv
}

function envToJson()
{
  # A kludgy function, but spaces and multiple equal signs in the values are just a pain...
  if [ -z "$1" ]; then
    echo "[]"
	return
  fi
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  lines=$(cat $1)
  jsonstring="["
  for line in $lines
  do
    key="$(sed 's/=.*//' <<< "$line")"
    value="$(sed 's/^[^=]*=//' <<< "$line")"
    jsonstring="$jsonstring{\"name\":\"$key\",\"value\":\"$value\"},"
  done
  jsonstring="${jsonstring%?}]"
  IFS=$OLDIFS
  echo $jsonstring
}

function extractStackToHome()
{
  extract_stack_name=$1
  extract_stack_id=$2

  sudo cp $HSHQ_STACKS_DIR/portainer/compose/$extract_stack_id/stack.env $HOME/${extract_stack_name}.env
  sudo cp $HSHQ_STACKS_DIR/portainer/compose/$extract_stack_id/docker-compose.yml $HOME/${extract_stack_name}-compose.yml
  sudo chown $USERNAME:$USERNAME $HOME/${extract_stack_name}.env
  sudo chown $USERNAME:$USERNAME $HOME/${extract_stack_name}-compose.yml
}

function updateStackEnv()
{
  updateStackName=$1
  updateModFunction=$2
  portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  updateStackID=$(getStackID $updateStackName "$portainerToken")
  if [ -z "$updateStackID" ]; then
    echo "ERROR: Could not find stack ID for $updateStackName"
    return 2
  fi
  extractStackToHome $updateStackName $updateStackID
  $updateModFunction
  if [ $? -ne 0 ]; then
    rm -f $HOME/${updateStackName}-compose.yml $HOME/${updateStackName}.env
    return 3
  fi
  updateStackByID $updateStackName $updateStackID $HOME/${updateStackName}-compose.yml $HOME/${updateStackName}.env "$portainerToken"
  rm -f $HOME/${updateStackName}-compose.yml $HOME/${updateStackName}.env
}

function updateMailuStackRelayHost()
{
  echo "Updating mailu stack with new RelayServer settings..."
  updateStackEnv mailu modFunUpdateMailuRelaySettings
  # Wait for stack to come all the way up.
  search="Listening at: http://0.0.0.0:8080"
  isFound="F"
  i=0
  max_interval=300
  sleep_interval=5
  set +e
  while [ $i -le $max_interval ]
  do
    findtext=$(docker logs mailu-admin 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping $sleep_interval second(s), total wait=$i seconds..."
    sleep $sleep_interval
    ((i=$i+$sleep_interval))
  done
  sleep 5
}

function modFunUpdateMailuRelaySettings()
{
  sed -i "s|RELAYHOST=.*|RELAYHOST=$SMTP_RELAY_HOST|" $HOME/${updateStackName}.env
  sed -i "s|RELAYUSER=.*|RELAYUSER=$SMTP_RELAY_USERNAME|" $HOME/${updateStackName}.env
  sed -i "s|RELAYPASSWORD=.*|RELAYPASSWORD=$SMTP_RELAY_PASSWORD|" $HOME/${updateStackName}.env
}

function getPasswordWithSymbol()
{
  # Generates a password with one random character replaced with "_"
  # This appeases any symbol requirements that certain password policies enforce.
  pw_length=$1
  if [ -z "$pw_length" ] || [ $pw_length -lt 2 ]; then
    pw_length=32
  fi
  rand_pw=$(pwgen -c -n $pw_length 1)
  rand_pos=$(( ( RANDOM % $pw_length )  + 1 ))
  echo ${rand_pw:0:rand_pos-1}"_"${rand_pw:rand_pos}
}

function performExitFunctions()
{
  is_show_msgbox="$1"
  closeHSHQScript
  #unloadSSHKey
  # This is more aggressive, but cleans up any pre-existing sessions (in case the script terminated abnormally)
  set +e
  killall ssh-agent > /dev/null 2>&1
  set -e
  if [ -z "$IS_CONFIG_INIT" ] || ! [ "$IS_INSTALLED" = "true" ]; then
    return
  fi
  encryptConfigFile
  if [ "$is_show_msgbox" = "true" ]; then
    showMessageBox "Config File Encrypted" "The configuration file has been encrypted."
  else
    echo "=========================================="
    echo "The configuration file has been encrypted."
    echo "=========================================="
  fi
  
}

function encryptConfigFile()
{
  if ! [ -f $HSHQ_CONFIG_DIR/$CONFIG_FILE_DEFAULT_FILENAME ]; then
    echo "ERROR: Plain text config file does not exist"
  elif ! [ -z "$CONFIG_ENCRYPTION_PASSPHRASE" ]; then
    rm -f $HSHQ_CONFIG_DIR/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME
    openssl enc -e -aes256 -pbkdf2 -pass pass:$CONFIG_ENCRYPTION_PASSPHRASE -in $HSHQ_CONFIG_DIR/$CONFIG_FILE_DEFAULT_FILENAME -out $HSHQ_CONFIG_DIR/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME
    chmod 0400 $HSHQ_CONFIG_DIR/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME
    rm -f $HSHQ_CONFIG_DIR/$CONFIG_FILE_DEFAULT_FILENAME
  fi
}

function decryptConfigFile()
{
  encConfig=$1
  if [ -f $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME ]; then
    set +e
    showYesNoMessageBox "Replace Existing File?" "Do you wish to use replace the existing configuration file?"
    mbres=$?
    if [ $mbres -ne 0 ]; then
      return
    fi
  fi
  rm -f $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME
  set +e
  decrypt_res=1
  while [ $decrypt_res -ne 0 ]
  do
    openssl enc -d -aes256 -pbkdf2 -in $encConfig > $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME 2>/dev/null
    decrypt_res=$?
    if [ $decrypt_res -ne 0 ]; then
      echo "Decryption error, bad password"
      rm -f $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME
      showYesNoMessageBox "Password Error" "You did not enter the correct password, try again?"
      if [ $? -ne 0 ]; then
        closeHSHQScript
        exit 1
      fi
    fi
  done
  set -e
  rm -f $encConfig
  CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME
}

function decryptConfigFileAndLoadEnvNoPrompts()
{
  openHSHQScript
  set -e
  decrypt_pass="$1"
  ENC_CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME
  if ! [ -f $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME ]; then
    openssl enc -d -aes256 -pbkdf2 -pass pass:$decrypt_pass -in $ENC_CONFIG_FILE > $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME
    rm -f $ENC_CONFIG_FILE
  fi
  CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME
  loadConfigVars
}

function checkDecryptConfigFile()
{
  set +e
  if ! [ -f $CONFIG_FILE_DEFAULT_LOCATION/$CONFIG_FILE_DEFAULT_FILENAME ]; then
    if [ -f $CONFIG_FILE_DEFAULT_LOCATION/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME ]; then
      DEF_ENC_CONFIG_FILE=$CONFIG_FILE_DEFAULT_LOCATION/$ENCRYPTED_CONFIG_FILE_DEFAULT_FILENAME
    else
      echo "ERROR: Could not find encrypted configuration file."
      exit 2
    fi
    if ! [ -z "$DEF_ENC_CONFIG_FILE" ]; then
      openssl enc -d -aes256 -pbkdf2 -pass pass:$1 -in "$DEF_ENC_CONFIG_FILE" > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "ERROR: Incorrect password for encrypted configuration file."
        exit 3
      fi
    else
      echo "ERROR: Unknown error decrypting configuration file."
      exit 4
    fi
  fi
}

function checkFileShellExpansion()
{
  cfse_curE=${-//[^e]/}
  check_file=$1
  set +e
  retVal=""
  grep '\$' $check_file > /dev/null 2>&1
  retDS=$?
  grep '\~' $check_file > /dev/null 2>&1
  retTD=$?
  grep '\*' $check_file > /dev/null 2>&1
  retAS=$?
  if [ $retDS -eq 0 ] || [ $retTD -eq 0 ] || [ $retAS -eq 0 ]; then
    retVal=$retVal"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
    retVal=$retVal"@               Shell expansion attempt detected!              @\n"
    retVal=$retVal"@            Check the sender of this configuration.           @\n"
    retVal=$retVal"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
  else
    echo ""
  fi
  if ! [ -z $cfse_curE ]; then
    set -e
  fi
  echo "$retVal"
}

function createStackJson()
{
  echo "{\"Name\":\"$1\",""$( jq -Rscjr '{StackFileContent: . }' $2 | tail -c +2 | head -c -1 )"",\"Env\":"$(envToJson $3)"}"
}

function installStack()
{
  set +e
  stack_name=$1
  container_name=$2
  stack_search_string=$3
  envfile=$4
  sleep_interval=$5
  max_interval=$6

  if [ -z $sleep_interval ]; then
    sleep_interval=1
  fi
  if [ -z $max_interval ]; then
    max_interval=300
  fi
  installLogNotify "Installing Stack ($stack_name)"
  # Refresh the sudo timestamp
  sudo -v
  if [ -z "$PORTAINER_TOKEN" ]; then
    PORTAINER_TOKEN="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  echo "Creating stack: $stack_name"
  echo "$(createStackJson $stack_name $HOME/$stack_name-compose.yml "$envfile")" > $HOME/$stack_name-json.tmp
  sleep 1
  ins_numTries=1
  ins_totalTries=5
  ins_retVal=1
  while [ $ins_numTries -le $ins_totalTries ]
  do
    if [ "$IS_STACK_DEBUG" = "true" ]; then
      http --check-status --ignore-stdin --verify=no --timeout=300 https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/create/standalone/string "Authorization: Bearer $PORTAINER_TOKEN" endpointId==1 @$HOME/$stack_name-json.tmp
    else
      http --check-status --ignore-stdin --verify=no --timeout=300 https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/create/standalone/string "Authorization: Bearer $PORTAINER_TOKEN" endpointId==1 @$HOME/$stack_name-json.tmp >/dev/null
    fi
    ins_retVal=$?
    if [ $ins_retVal -eq 0 ]; then
      break
    fi
    ((ins_numTries++))
  done
  if [ $ins_retVal -ne 0 ]; then
    installLogNotify "Error installing stack ($stack_name)"
    echo "ERROR: Could not install stack ($stack_name) in Portainer..." 1>&2
    return $ins_retVal
  fi
  sleep 1
  search=$stack_search_string
  isFound="F"
  i=0
  while [ $i -le $max_interval ]
  do
    findtext=$(docker logs $container_name 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping $sleep_interval second(s), total wait=$i seconds..."
    sleep $sleep_interval
    ((i=$i+$sleep_interval))
  done
  if [ $isFound == "F" ]; then
    echo "$stack_name did not start up correctly..."
    return 1
  fi
  set -e
  sleep 1

  rm -f $HOME/$stack_name-json.tmp
  rm -f $HOME/$stack_name-compose.yml
  rm -f $envfile
}

function startStopStack()
{
  stackname=$1
  startStop=$2
  portainerToken=$3
  if [ -z "$portainerToken" ]; then
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  stackID=$(getStackID $stackname "$portainerToken")
  if [ -z $stackID ]; then
    return
  fi
  startStopStackByID $stackID $startStop $portainerToken
}

function startStopStackByID()
{
  stackID=$1
  startStop=$2
  portainerToken=$3
  if [ -z "$portainerToken" ]; then
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  sss_numTries=1
  sss_totalTries=5
  sss_retVal=1
  while [ $sss_numTries -le $sss_totalTries ]
  do
    http --check-status --ignore-stdin --verify=no --timeout=300 POST https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/$stackID/$startStop "Authorization: Bearer $portainerToken" endpointId==1 > /dev/null
    sss_retVal=$?
    if [ $sss_retVal -eq 0 ]; then
      break
    fi
    ((sss_numTries++))
  done
  if [ $sss_retVal -ne 0 ]; then
    echo "ERROR: Could not get $startStop stack in Portainer..." 1>&2
    return
  fi
}

function restartStackIfRunning()
{
  stackName=$1
  waitTime=$2
  portainerToken=$3
  if [ "$stackName" = "portainer" ]; then
    # Special case for portainer
    restartPortainer
    return
  fi
  if [ -z "$portainerToken" ]; then
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  stackID=$(getStackID $stackName "$portainerToken")
  if [ -z $stackID ]; then
    return
  fi
  stackStatus=$(getStackStatusByID $stackID "$portainerToken")
  if [ "$stackStatus" = "1" ]; then
    startStopStackByID $stackID stop $portainerToken
    sleep $waitTime
    startStopStackByID $stackID start $portainerToken
  fi
}

function getStackStatusByID()
{
  stackID=$1
  portainerToken=$2
  if [ -z "$portainerToken" ]; then
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  gss_numTries=1
  gss_totalTries=5
  gss_retVal=1
  stackStatus=""
  while [ $gss_numTries -le $gss_totalTries ]
  do
    stackStatus=$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/$stackID "Authorization: Bearer $portainerToken" endpointId==1)
    gss_retVal=$?
    if [ $gss_retVal -eq 0 ]; then
      break
    fi
    ((gss_numTries++))
  done
  if [ $gss_retVal -ne 0 ]; then
    echo "ERROR: Could not get stack status from Portainer..." 1>&2
    return
  fi
  echo $stackStatus | jq -r '.Status'
}

function getStackStatusByName()
{
  stackName=$1
  portainerToken=$2
  if [ -z "$portainerToken" ]; then
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  stackID=$(getStackID $stackName "$portainerToken")
  if [ -z $stackID ]; then
    return
  fi
  stackStatus=$(getStackStatusByID $stackID "$portainerToken")
  echo $stackStatus
}

function deleteStack()
{
  stackname=$1
  portainerToken=$2
  if [ -z "$portainerToken" ]; then
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  fi
  stackID=$(getStackID $stackname "$portainerToken")
  if [ -z $stackID ]; then
    return
  fi
  ds_numTries=1
  ds_totalTries=5
  ds_retVal=1
  while [ $ds_numTries -le $ds_totalTries ]
  do
    http --check-status --ignore-stdin --verify=no --timeout=300 DELETE https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/$stackID "Authorization: Bearer $portainerToken" endpointId==1 > /dev/null
    ds_retVal=$?
    if [ $ds_retVal -eq 0 ]; then
      break
    fi
    ((ds_numTries++))
  done
  if [ $ds_retVal -ne 0 ]; then
    echo "ERROR: Could not delete stack from Portainer..." 1>&2
    return
  fi
}

function showMessageBox()
{
  msgmenu=$(cat << EOF

$hshqlogo

$2
EOF
  )
  whiptail --title "$1" --msgbox "$msgmenu" $MENU_HEIGHT $MENU_WIDTH
}

function showYesNoMessageBox()
{
  msgmenu=$(cat << EOF

$hshqlogo

$2
EOF
  )
  whiptail --title "$1" --yesno "$msgmenu" $MENU_HEIGHT $MENU_WIDTH
}

function promptUserInputMenu()
{
  usermenu=$(cat << EOF

$hshqlogo

$3
EOF
  )
  menures=$(whiptail --title "$2" --inputbox "$usermenu" $MENU_HEIGHT $MENU_WIDTH "$1" 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ]; then
    exit 1
  fi
  echo "$menures"
}

function promptPasswordMenu()
{
  usermenu=$(cat << EOF

$hshqlogo

$2
EOF
  )
  menures=$(whiptail --title "$1" --passwordbox "$usermenu" $MENU_HEIGHT $MENU_WIDTH 3>&1 1>&2 2>&3)
  retVal=$?
  echo "$menures"
  return $retVal
}

function getDockerSubnet()
{
  subnet=$(docker network inspect $1 | grep Subnet | awk '{print $2}' | sed 's/[",]//g')
  echo $subnet
}

function removeSpecialChars()
{
  # This was an interesting one...https://askubuntu.com/questions/357248/how-to-remove-special-m-bm-character-with-sed
  sed -i 's/\xc2\xa0/ /g' "$1"
  sed -i 's/\r$//g' "$1"
}

function extractValueFromApplication()
{
  app_var_starts_with=$1
  app_file_name=$2
  grep "^${app_var_starts_with}:" $app_file_name | cut -d ":" -f2- | sed 's/^ *//' | sed 's/ *$//' | sed 's/  */ /'
}

function replaceTextBlockInFile()
{
  block_match_begin="$1"
  block_match_end="$2"
  replace_text="$3"
  r_filename=$4
  is_keep_block_headers=$5
  space_delim=$6
  set +e
  match=$(grep "$block_match_begin" $r_filename)
  if ! [ -z "$match" ]; then
    all_text=$(cat $r_filename)
    if ! [ -z $space_delim ]; then
      replace_text=$(echo $replace_text | sed "s|$space_delim| |g")
    fi
    if [ "$is_keep_block_headers" = "true" ]; then
      echo -e "${all_text%%$block_match_begin*}${block_match_begin}\n${replace_text}\n${block_match_end}${all_text##*$block_match_end}" > $r_filename
    else
      echo -e "${all_text%%$block_match_begin*}\n${replace_text}\n${all_text##*$block_match_end}" > $r_filename
    fi
  fi
  set -e
}

function replaceOrAppendTextBlockInFile()
{
  block_match_begin="$1"
  block_match_end="$2"
  replace_text="$3"
  r_filename=$4
  space_delim=$5
  set +e
  match=$(grep "$block_match_begin" $r_filename)
  if [ -z "$match" ]; then
    #Append
    if ! [ -z $space_delim ]; then
      replace_text=$(echo $replace_text | sed "s|$space_delim| |g")
    fi
    echo -e "${block_match_begin}\n${replace_text}\n${block_match_end}\n" >> $r_filename
  else
    #Replace
    replaceTextBlockInFile "$block_match_begin" "$block_match_end" "$replace_text" $r_filename true "$space_delim"
  fi
  set -e
}

function removeTextBlockInFile()
{
  rtbif_curE=${-//[^e]/}
  block_match_begin="$1"
  block_match_end="$2"
  r_filename=$3
  set +e
  match=$(grep "$block_match_begin" $r_filename)
  if ! [ -z "$match" ]; then
    sed -i "/$block_match_begin/,/$block_match_end/d" $r_filename
    cat -s $r_filename > $HOME/tmpremfile
    mv $HOME/tmpremfile $r_filename
  fi
  set +e
  if ! [ -z $rtbif_curE ]; then
    set -e
  fi
}

function insertSubAuthelia()
{
  insSub="$1"
  selBlock="$2"
  set +e
  grep "$insSub" $HSHQ_STACKS_DIR/authelia/config/configuration.yml > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    return
  fi
  grep "# Authelia $selBlock END" $HSHQ_STACKS_DIR/authelia/config/configuration.yml > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    return
  fi
  sed -i "/# Authelia $selBlock END/i\        - $insSub" $HSHQ_STACKS_DIR/authelia/config/configuration.yml
  docker container restart authelia > /dev/null 2>&1
  docker ps | grep codeserver > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    docker container restart codeserver > /dev/null 2>&1
  fi
}

function urlEncode()
{
  strLength="${#1}"
  for (( i = 0; i < strLength; i++ )); do
    c="${1:i:1}"
    case $c in
      [a-zA-Z0-9.~_-]) printf "$c" ;;
      *) printf '%%%02X' "'$c" ;;
    esac
  done
}

function urlDecode()
{
  url_encoded="${1//+/ }"
  printf '%b' "${url_encoded//%/\\x}"
}

function getTextBetweenStrings()
{
  # This function could probably be done better
  filename=$1
  stringbegin=$2
  stringend=$3
  stringlinebegin=$(grep "$stringbegin" $filename)
  stringlineend=$(grep "$stringend" $filename)
  allfiledata=$(cat $filename)
  textafter=$(echo "${allfiledata##*$stringlinebegin}")
  result=$(echo "${textafter%%$stringlineend*}")
  echo -e "$result"
}

function checkValidString()
{
  check_string=$1
  addchars=$2
  if [[ "$check_string" =~ ^[0-9a-z$addchars]+$ ]]; then
    echo "true"
  else
    echo "false"
  fi
}

function checkValidBaseDomain()
{
  check_domain=$1
  if [ $(checkValidString "$check_domain" ".-") = "false" ]; then
    echo "false"
    return
  fi
  if ! [ -z "$(getSubDomain $check_domain)" ]; then
    echo "false"
    return
  fi
  if [ -z "$(getDomainTLD $check_domain)" ]; then
    echo "false"
    return
  fi
  if [ -z "$(getDomainNoTLD $check_domain)" ]; then
    echo "false"
    return
  fi
  echo "true"
}

function checkValidEmail()
{
  check_string=$1
  if [ -z "$check_string" ]; then echo "false"; fi
  regex="^([A-Za-z]+[A-Za-z0-9]*((\.|\-|\_)?[A-Za-z]+[A-Za-z0-9]*){1,})@(([A-Za-z]+[A-Za-z0-9]*)+((\.|\-|\_)?([A-Za-z]+[A-Za-z0-9]*)+){1,})+\.([A-Za-z]{2,})+"
  if [[ "$check_string" =~ $regex ]]; then
    echo "true"
  else
    echo "false"
  fi
}

function checkValidStringUpperLowerNumbers()
{
  check_string=$1
  addchars=$2
  if [[ $check_string =~ ^[0-9a-zA-Z$addchars]+$ ]]; then
    echo "true"
  else
    echo "false"
  fi
}

function checkValidNumber()
{
  check_string=$1
  if [[ $check_string =~ ^[0-9]+$ ]]; then 
    echo "true"
  else
    echo "false"
  fi
}

function checkValidIPAddress()
{
  set +e
  # Need to make checkValidIPAddress better, i.e. with full CIDR
  ip=$(echo $1 | cut -d "/" -f1)
  stat=1
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='./'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
  fi
  set -e
  if [ $stat -eq 0 ]; then
    echo "true"
  else
    echo "false"
  fi
}

function checkPasswordStrength()
{
  pw_in="$1"
  pw_length=${#pw_in}
  if ! [[ "$pw_in" =~ [[:upper:]] ]]; then
    # Does not contain upper case.
    echo "false"
  elif ! [[ "$pw_in" =~ [[:lower:]] ]]; then
    # Does not contain lower case.
    echo "false"
  elif ! [[ "$pw_in" =~ [0-9] ]]; then
    # Does not contain number.
    echo "false"
  elif [[ "$pw_in" =~ [[:space:]] ]]; then
    # Contains a space.
    echo "false"
  elif [ $pw_length -lt 16 ]; then
    # Less than 16 characters
    echo "false"
  else
    echo "true"
  fi
}

function isEmailMatchBaseDomain()
{
  check_email_addr="$1"
  check_base_domain="$2"
  email_addr_domain=$(echo "$check_email_addr" | cut -d"@" -f2-)
  if [ "$email_addr_domain" = "$check_base_domain" ]; then
    echo "true"
  else
    echo "false"
  fi
}

function addAdvertiseIP()
{
  add_ip=$1
  set +e
  echo $JITSI_ADVERTISE_IPS | grep $add_ip >/dev/null
  if [ $? -ne 0 ]; then
    if [ -z $JITSI_ADVERTISE_IPS ]; then
      JITSI_ADVERTISE_IPS=$add_ip
    else
      JITSI_ADVERTISE_IPS=$JITSI_ADVERTISE_IPS","$add_ip
    fi
    updateConfigVar JITSI_ADVERTISE_IPS $JITSI_ADVERTISE_IPS
  fi
}

function removeAdvertiseIP()
{
  remove_ip=$1
  set +e
  echo $JITSI_ADVERTISE_IPS | grep $remove_ip >/dev/null
  if [ $? -eq 0 ]; then
    echo $JITSI_ADVERTISE_IPS | sed "s|$remove_ip","||g" >/dev/null
    echo $JITSI_ADVERTISE_IPS | sed "s|","$remove_ip||g" >/dev/null
    updateConfigVar JITSI_ADVERTISE_IPS $JITSI_ADVERTISE_IPS
  fi
}

function addHomeNetIP()
{
  add_ip=$1
  is_update_iptables=$2
  set +e
  echo $HOMENET_ADDITIONAL_IPS | grep $add_ip >/dev/null
  if [ $? -ne 0 ]; then
    if [ -z $HOMENET_ADDITIONAL_IPS ]; then
      HOMENET_ADDITIONAL_IPS=$add_ip
    else
      HOMENET_ADDITIONAL_IPS=$HOMENET_ADDITIONAL_IPS","$add_ip
    fi
    updateConfigVar HOMENET_ADDITIONAL_IPS $HOMENET_ADDITIONAL_IPS
    if [ "$is_update_iptables" = "true" ] && [ "$HOMESERVER_HOST_ISPRIVATE" = "false" ]; then
      outputIPTablesScripts false
    fi
  fi
}

function removeHomeNetIP()
{
  remove_ip=$1
  is_update_iptables=$2
  set +e
  echo $HOMENET_ADDITIONAL_IPS | grep $remove_ip >/dev/null
  if [ $? -eq 0 ]; then
    echo $HOMENET_ADDITIONAL_IPS | sed "s|$remove_ip","||g" >/dev/null
    echo $HOMENET_ADDITIONAL_IPS | sed "s|","$remove_ip||g" >/dev/null
    updateConfigVar HOMENET_ADDITIONAL_IPS $HOMENET_ADDITIONAL_IPS
    if [ "$is_update_iptables" = "true" ] && [ "$HOMESERVER_HOST_ISPRIVATE" = "false" ]; then
      outputIPTablesScripts false
    fi
  fi
}

function isServiceDisabled()
{
  check_svc_disabled="$1"
  set +e
  if grep -q "$check_svc_disabled" <<< "$HSHQ_REQUIRED_STACKS"; then
    echo "false"
    set -e
    return
  fi
  if [ "$DISABLED_SERVICES" = "minimal" ]; then
    echo "true"
    set -e
    return
  fi
  set -e
  echo "$(isItemInCSVList $check_svc_disabled $DISABLED_SERVICES)"
}

function isItemInCSVList()
{
  check_item="$1"
  check_list="$2"
  checkListArr=($(echo $check_list | tr "," "\n"))
  for curItem in "${checkListArr[@]}"
  do
    if [ "$check_item" = "$curItem" ]; then
      echo "true"
      return
    fi
  done
  echo "false"
}

function checkDisableStack()
{
  if [ "$(isServiceDisabled $1)" = "true" ]; then
    echo "Disabling $1"
    startStopStack $1 stop
  fi
}

function getSvcCredentialsVW()
{
  svc_name=$1
  login_uri=$2
  abbrev=$3
  username=$4
  password=$5
  echo "$abbrev,,login,$svc_name,,,0,$login_uri,$username,$password,"
}

function sendRootCAEmail()
{
  is_sudo=$1
  mail_msg=""
  mail_msg=${mail_msg}"Below is the public root certificate for your network. "
  mail_msg=${mail_msg}"If you are connected to the internal network, then it can also be downloaded via: \n"
  mail_msg=${mail_msg}"PEM: http://$SUB_FILES.$HOMESERVER_DOMAIN/ca.crt \n"
  mail_msg=${mail_msg}"DER: http://$SUB_FILES.$HOMESERVER_DOMAIN/ca.der \n"
  mail_msg=${mail_msg}"Add this to any device that you wish to use to access web-based resources on your network. "
  mail_msg=${mail_msg}"It only needs to be installed once, and is good for at least 40 years. "
  mail_msg=${mail_msg}"It is also included as an attachment in both formats (Some mobile devices may require the DER format). "
  mail_msg=${mail_msg}"You can freely share this with anyone, it will not compromise any security measures. \n"
  mail_msg=${mail_msg}"\n######################### Root CA Begin #########################\n\n"
  mail_msg=${mail_msg}"""$(cat $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt)"""
  mail_msg=${mail_msg}"\n\n########################## Root CA End ##########################\n"
  if [ "$is_sudo" = "true" ]; then
    # This special case is only need during the initial installation due
    # to issues with adding members to groups (mailsenders) within a script.
    echo -e "$mail_msg" | sudo mailx -s "Public Root Certificate" -a "From: $HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>" -a "Message-Id: <$(uuidgen)@$HOMESERVER_DOMAIN>" -A $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -A $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der "$EMAIL_ADMIN_EMAIL_ADDRESS"
  else
    sendEmail -s "Public Root Certificate" -b "$mail_msg" -a $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -a $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der
  fi
}

function getDNSRecordsInfo()
{
  cur_domain=$1
  str_res="DNS Info for ${cur_domain}:\n"
  str_res="${str_res}========================General========================\n"
  str_res="${str_res}1. Type: A | Name: @ | Value: $RELAYSERVER_SERVER_IP |\n"
  str_res="${str_res}2. Type: A | Name: * | Value: $RELAYSERVER_SERVER_IP |\n"
  str_res="${str_res}=======================================================\n"
  str_res="${str_res}=========================Email=========================\n"
  str_res="${str_res}1. Type: MX | Name: @ | Priority: 0 | Value: $RELAYSERVER_EXT_EMAIL_HOSTNAME |\n"
  str_res="${str_res}2. Type: TXT | Name: @ | Value: v=spf1 mx -all |\n"
  str_res="${str_res}3. Type: TXT | Name: * | Value: v=spf1 -all |\n"
  str_res="${str_res}4. Type: TXT | Name: ${cur_domain}._report._dmarc | Value: v=DMARC1 |\n"
  str_res="${str_res}5. Type: TXT | Name: _dmarc | Value: v=DMARC1;p=reject;rua=mailto:$EMAIL_ADMIN_EMAIL_ADDRESS;ruf=mailto:$EMAIL_ADMIN_EMAIL_ADDRESS;adkim=s;aspf=s |\n"
  str_res="${str_res}6*. Type: TXT | Name: dkim._domainkey | Value: v=DKIM1;k=rsa;p=YourDomainKey |\n"
  str_res="${str_res}\n* - Ensure you replace YourDomainKey correctly\n"
  str_res="${str_res}======================================================="
  echo "$str_res"
}

function sendEmail()
{
  email_attachments=""
  email_body=""
  email_from=""
  email_subj=""
  email_to=""
  local OPTIND opt a b f s t
  while getopts ':a:b:f:s:t:' opt; do
    case "$opt" in
      a)
        email_attachments="${email_attachments}-A "$OPTARG" " ;;
      b)
        email_body="$OPTARG" ;;
      f)
        email_from="$OPTARG" ;;
      s)
        email_subj="$OPTARG" ;;
      t)
        email_to="$OPTARG" ;;
      ?|h)
        echo "Usage: sendEmail [-a arg] [-b arg] [-f arg] [-s arg] [-t arg]"
        return ;;
    esac
  done
  shift "$(($OPTIND -1))"
  if [ -z "$email_body" ]; then
    echo "sendEmail Error: Empty Body"
    return
  fi
  if [ -z "$email_subj" ]; then
    echo "sendEmail Error: Empty Subject"
    return
  fi
  if [ -z "$email_from" ]; then
    email_from="$HSHQ_ADMIN_NAME <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  fi
  if [ -z "$email_to" ]; then
    email_to=$EMAIL_ADMIN_EMAIL_ADDRESS
  fi
  set +e
  num_email_tries=1
  max_email_tries=5
  while [ $num_email_tries -lt $max_email_tries ]
  do
    echo -e "$email_body" | mailx -s "$email_subj" -a "From: $email_from" -a "Message-Id: <$(uuidgen)@$HOMESERVER_DOMAIN>" $email_attachments "$email_to"
    if [ $? -eq 0 ]; then
      break
    fi
    echo "ERROR: Could not send email, retrying ($num_email_tries of $max_email_tries)..."
    rm -f dead.letter
    sleep 3
    ((num_email_tries++))
  done
}

function sendEmailToList()
{
  send_email_list="$1"
  send_email_subj="$2"
  send_email_body="$3"
  for curEmail in "${send_email_list[@]}"
  do
    echo "Sending email to $curEmail"
    sendEmail -s "$send_email_subj" -b "$send_email_body" -t "$curEmail" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  done
}

function loadSvcVars()
{
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  SVCS_ARR=($(grep "SVCD_" $CONFIG_FILE))
  subdom_list=()
  for curSVC in "${SVCS_ARR[@]}"
  do
    var_base=$(echo $curSVC | cut -d"=" -f1 | cut -d"_" -f 2-)
    stack_name=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f1)
    service_name=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f2)
    net_default=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f3)
    user_type=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f4)
    formal_name=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f5)
    subdom=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f6)
    subdom="${subdom//\"}"
    manage_tls=$(echo $curSVC | cut -d"=" -f2 | cut -d"," -f7)
    for curSub in "${subdom_list[@]}"
    do
      if [ "$curSub" = "$subdom" ]; then
        echo "FATAL: A duplicate subdomain ($curSub) was found in the configuration file. Please fix this issue and restart the script."
        exit 1
      fi
    done
    subdom_list+=($subdom)
    printf -v "STACKNAME_${var_base}" '%s' "${stack_name//\"}"
    printf -v "SERVICENAME_${var_base}" '%s' "${service_name//\"}"
    printf -v "NETDEFAULT_${var_base}" '%s' "${net_default//\"}"
    printf -v "USERTYPE_${var_base}" '%s' "${user_type//\"}"
    printf -v "FMLNAME_${var_base}" '%s' "${formal_name//\"}"
    printf -v "SUB_${var_base}" '%s' "${subdom//\"}"
    printf -v "MANAGETLS_${var_base}" '%s' "${manage_tls//\"}"
  done
  IFS=$OLDIFS
}

function loadConfigVars()
{
  initServiceVars
  source $CONFIG_FILE
  loadSvcVars
  checkUpdateVersion
}

function checkAddSvc()
{
  svcVar=$(echo $1 | cut -d"=" -f1)
  svcVal=$(echo $1 | cut -d"=" -f2)
  grep -q "^${svcVar}=" $CONFIG_FILE
  if [ $? -ne 0 ]; then
    sed -i "s|^# Services Info END|${svcVar}=\"${svcVal}\"\n# Services Info END|g" $CONFIG_FILE
  fi 
}

function loadDirectoryStructure()
{
  if [ -z "$HSHQ_BASE_DIR" ]; then
    HSHQ_BASE_DIR=$HOME/hshq
  fi
  HSHQ_DATA_DIR=$HSHQ_BASE_DIR/data
  HSHQ_BACKUP_DIR=$HSHQ_BASE_DIR/backup
  HSHQ_NONBACKUP_DIR=$HSHQ_BASE_DIR/nonbackup
  HSHQ_ASSETS_DIR=$HSHQ_DATA_DIR/assets
  HSHQ_BUILD_DIR=$HSHQ_NONBACKUP_DIR/build
  HSHQ_CONFIG_DIR=$HSHQ_DATA_DIR/config
  HSHQ_LIB_DIR=$HSHQ_DATA_DIR/lib
  HSHQ_RELAYSERVER_DIR=$HSHQ_DATA_DIR/relayserver
  HSHQ_SCRIPTS_DIR=$HSHQ_DATA_DIR/scripts
  HSHQ_SECRETS_DIR=$HSHQ_DATA_DIR/secrets
  HSHQ_SSL_DIR=$HSHQ_DATA_DIR/ssl
  HSHQ_STACKS_DIR=$HSHQ_DATA_DIR/stacks
  HSHQ_WIREGUARD_DIR=$HSHQ_DATA_DIR/wireguard

  HSHQ_WRAP_SCRIPT=$HOME/$HSHQ_WRAP_FILENAME
  HSHQ_LIB_SCRIPT=$HSHQ_LIB_DIR/$HSHQ_LIB_FILENAME
}

function getLatestVersionWrapper()
{
  echo $(curl --silent $HSHQ_WRAP_VER_URL)
}

function getThisVersionWrapper()
{
  if ! [ -f $HSHQ_WRAP_SCRIPT ]; then
    echo 0
  fi
  echo $(sed -n 2p $HSHQ_WRAP_SCRIPT | cut -d"=" -f2)
}

function getLatestVersionLib()
{
  echo $(curl --silent $HSHQ_LIB_VER_URL)
}

function getThisVersionLib()
{
  if ! [ -f $HSHQ_LIB_SCRIPT ]; then
    echo 0
  fi
  echo $(sed -n 2p $HSHQ_LIB_SCRIPT | cut -d"=" -f2)
}

function verifyFile()
{
  # Perform 3 checks:
  # 1 - Verify the file
  # 2 - Ensure the verification process used the correct key
  # 3 - Ensure the output contains "Good signature" (This step is likely redundant, but whatever...)
  src_file=$1
  sig_file=$2
  gpg --verify $sig_file $src_file >/dev/null 2>/tmp/verify
  ver_res=$?
  if [ $ver_res -ne 0 ]; then
    rm -f /tmp/verify
    return $ver_res
  fi
  grep $HSHQ_GPG_FINGERPRINT /tmp/verify > /dev/null 2>&1
  ver_res=$?
  if [ $ver_res -ne 0 ]; then
    rm -f /tmp/verify
    return $ver_res
  fi
  grep "Good signature" /tmp/verify > /dev/null 2>&1
  ver_res=$ver_res
  if [ $? -ne 0 ]; then
    rm -f /tmp/verify
    return $ver_res
  fi
  rm -f /tmp/verify
}

function getRandomRequestID()
{
  # Use the date, plus throw some randomness at the end.
  # Could use a GUID/UUID, but date is more informative.
  echo "$(date '+%Y%m%d%H%M%S')$((1000 + RANDOM % 9999))$((1000 + RANDOM % 9999))$((10 + RANDOM % 99))"
}

# RelayServer Utils
function resetCaddyDataRelayServer()
{
  is_prompt=$1
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    if [ "$is_prompt" = "true" ]; then
      showMessageBox "No RelayServer" "You do not have a RelayServer set up, exiting..."
    else
      echo "ERROR: You do not have a RelayServer set up."
    fi
    return
  fi
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh"
  unloadSSHKey
}

function getVPNIPFromHostname()
{
  lookup_hostname=$1
  base_domain=$(getBaseDomain $lookup_hostname)
  if [ "$base_domain" = "$HOMESERVER_DOMAIN" ]; then
    echo $(getPrimaryVPN_IP)
    return
  fi
  ip_addr=$(sqlite3 $HSHQ_DB "select IPAddress from connections join hsvpn_connections on connections.ID = hsvpn_connections.ID where ConnectionType='homeserver_vpn' and NetworkType='mynetwork' and DomainName='$lookup_hostname';")
  echo "$ip_addr"
}

function addDomainsToRelayServer()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    showMessageBox "No RelayServer" "You do not have a RelayServer setup, exiting..."
    return
  fi
  set +e
  domains_to_add=""
  while [ -z "$domains_to_add" ]
  do
    domains_to_add=$(promptUserInputMenu "" "Enter New Domains" "Enter the new domain names that you wish to add, separated by comma (no spaces):")
    mbres=$?
    if [ $mbres -ne 0 ]; then
      return 1
    fi
    if [ -z "$domains_to_add" ]; then
      showMessageBox "Domains List Empty" "The domains list cannot be empty"
    elif [ $(checkValidString "$domains_to_add" ",.-") = "false" ]; then
      showMessageBox "Invalid Character(s)" "The domain list contain invalid character(s). The value must consist of a-z (lowercase), 0-9, -, and/or ."
      domains_to_add=""
    fi
    domains_to_add_Arr=($(echo $domains_to_add | tr "," "\n"))
    for curDomain in "${domains_to_add_Arr[@]}"
    do
      if [ -z "$curDomain" ] || [ $(checkValidString "$curDomain" ".-") = "false" ]; then
        showMessageBox "Invalid Character(s)" "A domain contains invalid character(s). The value must consist of a-z (lowercase), 0-9, -, and/or ."
        domains_to_add=""
      fi
    done
  done

  deliveryhostmenu=$(cat << EOF

$hshqlogo

Select the mail delivery host for this domain:
EOF
  )
  dh_arr=($(sqlite3 $HSHQ_DB "select ID,MailHost from mailhosts;"))
  menu_items=""
  for curdh in "${dh_arr[@]}"
  do
    menu_items=${menu_items}"$(echo "("$(echo $curdh | sed 's/|/)/1')) | OFF "
  done
  sel_host=$(whiptail --title "Select Delivery Host" --radiolist "$deliveryhostmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ] || [ -z $sel_host ]; then
    showMessageBox "Selection Empty" "Delivery host selection is empty, returning..."
    return 1
  fi

  mail_host_id=$(echo $sel_host | cut -d ")" -f1 | sed 's/(//' | sed 's/"//g')
  deliver_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections join hsvpn_connections on connections.ID = hsvpn_connections.ID where MailHostID=$mail_host_id;")
  if [ -z $deliver_ip ]; then
    showMessageBox "IP Not Found" "There is no domain in your network based on this delivery host, returning..."
    return 1
  fi
  deliver_to_host=$(sqlite3 $HSHQ_DB "select MailHost from mailhosts where ID=$mail_host_id;")
  loadSSHKey
  mbres=$?
  if [ $mbres -ne 0 ]; then
    showMessageBox "Error" "There was a problem loading the SSH key"
    return 1
  fi
  ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addRelayedDomains.sh $domains_to_add $deliver_to_host $deliver_ip"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    showMessageBox "Error" "There was a problem adding the domain(s)"
    return 1
  fi
  domains_to_add_Arr=($(echo $domains_to_add | tr "," "\n"))
  for curDomain in "${domains_to_add_Arr[@]}"
  do
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;insert into mailhostmap(MailHostID,Domain,IsFirstDomain) values($mail_host_id,'$curDomain',false);"
    sendEmail -s "DNS Info for $curDomain" -b "$(getDNSRecordsInfo $curDomain)"
  done
  set -e
}

function removeDomainsFromRelayServer()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    showMessageBox "No RelayServer" "You do not have a RelayServer setup, exiting..."
    return
  fi
  set +e
  rem_menu=$(cat << EOF

$hshqlogo

Select the domains that you wish to remove:
EOF
  )
  domains_to_rem_qry=($(sqlite3 $HSHQ_DB "select Domain,MailHost from mailhostmap join mailhosts on mailhostmap.MailHostID = mailhosts.ID where IsFirstDomain=false;"))
  if [ -z $domains_to_rem_qry ]; then
    showMessageBox "Empty" "There are no eligible connections for this selection, returning..."
    return
  fi
  menu_items=""
  for curdom in "${domains_to_rem_qry[@]}"
  do
    menu_items=${menu_items}"$(echo $(echo $curdom | sed 's/|/(/1')")") | OFF "
  done
  sel_doms=($(whiptail --title "Select Domains" --checklist "$rem_menu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3))
  is_remove=$(promptUserInputMenu "" "Confirm Removal" "This will remove these domains ($domains_to_remove) from the RelayServer. To confirm, enter the word 'remove' below:")
  if [ $? -ne 0 ] || [ -z $is_remove ] || ! [ "$is_remove" = "remove" ]; then
    showMessageBox "Incorrect Confirmation" "The text did not match, returning..."
    return
  fi
  domains_to_remove=""
  for dom in "${sel_doms[@]}"
  do
    curdom=$(echo $dom | cut -d "(" -f1 | sed 's/"//g')
    domains_to_remove="${domains_to_remove}${curdom},"
  done
  if -z [ "$domains_to_remove" ]; then
    showMessageBox "No Selection" "Nothing was selected, returning..."
    return
  fi
  domains_to_remove=${domains_to_remove%?}
  loadSSHKey
  mbres=$?
  if [ $mbres -ne 0 ]; then
    showMessageBox "Error" "There was a problem loading the SSH key"
    return 1
  fi
  ssh -p $RELAYSERVER_SSH_PORT -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeRelayedDomains.sh $domains_to_remove"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    showMessageBox "Error" "There was a problem removing the domain(s)"
    return 1
  fi
  for dom in "${sel_doms[@]}"
  do
    curdom=$(echo $dom | cut -d "(" -f1 | sed 's/"//g')
    sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhostmap where Domain='$curdom';"
  done
}

function addSecondaryDomainToRelayServer()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  add_domain="$1"
  mail_host_id="$2"
  # Need to check domain name string for validity
  if [ -z "$add_domain" ] || [ $(checkValidString "$add_domain" ".-") = "false" ]; then
    echo "ERROR: Invalid domain name."
    return 5
  fi
  deliver_ip=$(sqlite3 $HSHQ_DB "select IPAddress from connections join hsvpn_connections on connections.ID = hsvpn_connections.ID where MailHostID=$mail_host_id;")
  if [ -z $deliver_ip ]; then
    echo "ERROR: There is no domain in your network based on this delivery host."
    return 5
  fi
  deliver_to_host=$(sqlite3 $HSHQ_DB "select MailHost from mailhosts where ID=$mail_host_id;")
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addRelayedDomains.sh $add_domain $deliver_to_host $deliver_ip"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    echo "ERROR: There was a problem adding the domain to the RelayServer."
    return 5
  fi
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;insert into mailhostmap(MailHostID,Domain,IsFirstDomain) values($mail_host_id,'$add_domain',false);"
  sendEmail -s "DNS Info for $add_domain" -b "$(getDNSRecordsInfo $add_domain)"
}

function removeSecondaryDomainFromRelayServer()
{
  dom_to_remove="$1"

  le_arr=($(sqlite3 $HSHQ_DB "select Domain from lecertdomains where BaseDomain='$dom_to_remove';"))
  subdomlist=""
  for cursub in "${le_arr[@]}"
  do
    subdomlist=${subdomlist}"${cursub},"
  done
  if ! [ -z "$subdomlist" ]; then
    subdomlist=${subdomlist%?}
    echo "Removing LE cert paths from RelayServer for $dom_to_remove..."
    removeLECertPathsFromRelayServer "$subdomlist"
    mbres=$?
    if [ $mbres -ne 0 ]; then
      return $mbres
    fi
  fi

  exp_arr=($(sqlite3 $HSHQ_DB "select Domain from exposedomains where BaseDomain='$dom_to_remove';"))
  subdomlist=""
  for cursub in "${exp_arr[@]}"
  do
    subdomlist=${subdomlist}"${cursub},"
  done
  if ! [ -z "$subdomlist" ]; then
    subdomlist=${subdomlist%?}
    echo "Removing expose paths from RelayServer for $dom_to_remove..."
    removeExposeDomainPathsFromRelayServer "$subdomlist"
    mbres=$?
    if [ $mbres -ne 0 ]; then
      return $mbres
    fi
  fi

  loadSSHKey
  echo "Removing $dom_to_remove from RelayServer..."
  ssh -p $RELAYSERVER_SSH_PORT -o ConnectTimeout=10 $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeRelayedDomains.sh $dom_to_remove"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    echo "ERROR: There was a problem connecting to the RelayServer."
    return 1
  fi
  sqlite3 $HSHQ_DB "PRAGMA foreign_keys=ON;delete from mailhostmap where Domain='$dom_to_remove';"
}

function addLECertPathsToRelayServerMsgbox()
{
  set +e
  add_subdomains=$(promptUserInputMenu "" "Enter Subdomain" "Enter the subdomains for which you want LetsEncrypt to manage the certificates(separated by comma):")
  if [ $? -ne 0 ]; then
    return
  fi
  seldomainmenu=$(cat << EOF

$hshqlogo

Select the base domain to associate with these subdomains:
EOF
  )
  dom_arr=($(sqlite3 $HSHQ_DB "select Domain from mailhostmap order by MailHostID asc;"))
  menu_items=""
  for curdom in "${dom_arr[@]}"
  do
    menu_items=${menu_items}"$curdom | OFF "
  done
  sel_domain=$(whiptail --title "Select Base Domain" --radiolist "$seldomainmenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT $menu_items 3>&1 1>&2 2>&3)
  if [ $? -ne 0 ] || [ -z $sel_domain ]; then
    showMessageBox "Selection Empty" "Base domain selection is empty, returning..."
    return 1
  fi
  sel_domain=$(echo $sel_domain | cut -d "|" -f1 | sed 's/"//g')
  showYesNoMessageBox "Confirm Selection" "Adding $add_subdomains - associated with $sel_domain. Continue?"
  if [ $? -eq 0 ]; then
    addLECertPathsToRelayServer "$add_subdomains" "$sel_domain"
  fi
}

function addLECertPathsToRelayServer()
{
  subdoms_le="$1"
  base_domain="$2"
  if [ $(checkValidString "$subdoms_le" ",.-") = "false" ]; then
    echo "ERROR: A subdomain contains invalid character(s). The value must consist of a-z (lowercase), 0-9, -, and/or ."
    return 1
  fi
  newList=""
  add_subdomains_Arr=($(echo $subdoms_le | tr "," "\n"))
  for add_sub in "${add_subdomains_Arr[@]}"
  do
    if [ $(checkValidString "$add_sub" ".-") = "false" ]; then
      echo "ERROR: The subdomain contains invalid character(s). The value must consist of a-z (lowercase), 0-9, -, and/or ."
      return 2
    fi
    checkSub=$(sqlite3 $HSHQ_DB "select Domain from lecertdomains where Domain='$add_sub';")
    if ! [ -z $checkSub ]; then
      echo "$checkSub LE path has already been added to RelayServer."
    else
      newList=$newList"${add_sub},"
    fi
  done
  if [ -z "$newList" ]; then
    return
  fi
  newList=${newList%?}
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    sendEmail -s "Add LetsEncrypt Domain" -b "If you have not done so already, you need to contact your RelayServer administrator and ask them to add these subdomains to be managed by LetsEncrypt.\nSubdomains: $subdoms_le" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    return
  fi
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    sendEmail -s "Add LetsEncrypt Domain" -b "If and when you setup a RelayServer, you will need to add these subdomains to be managed by LetsEncrypt.\nSubdomains: $subdoms_le" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    return
  fi

  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addLECertDomains.sh $subdoms_le"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    echo "ERROR: There was a problem connecting to the RelayServer."
    return 6
  fi
  add_subdomains_Arr=($(echo $subdoms_le | tr "," "\n"))
  for add_sub in "${add_subdomains_Arr[@]}"
  do
    sqlite3 $HSHQ_DB "insert or ignore into lecertdomains(Domain,BaseDomain) values('$add_sub','$base_domain');"
  done
}

function removeLECertPathsFromRelayServer()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  subdoms_le="$1"
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeLECertDomains.sh $subdoms_le"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    echo "ERROR: There was a problem connecting to the RelayServer."
    return 1
  fi
  rem_subdomains_Arr=($(echo $subdoms_le | tr "," "\n"))
  for rem_sub in "${rem_subdomains_Arr[@]}"
  do
    sqlite3 $HSHQ_DB "delete from lecertdomains where Domain='$rem_sub';"
  done
}

function addExposeDomainPathsToRelayServer()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  subdoms_exp="$1"
  base_domain="$2"

  if [ $(checkValidString "$subdoms_exp" ",.-") = "false" ]; then
    echo "ERROR: A subdomain contains invalid character(s). The value must consist of a-z (lowercase), 0-9, -, and/or ."
    return 2
  fi
  add_subdomains_Arr=($(echo $subdoms_exp | tr "," "\n"))
  newList=""
  for add_sub in "${add_subdomains_Arr[@]}"
  do
    if [ $(checkValidString "$add_sub" ".-") = "false" ]; then
      echo "ERROR: The subdomain contains invalid character(s). The value must consist of a-z (lowercase), 0-9, -, and/or ."
      return 3
    fi
    checkSub=$(sqlite3 $HSHQ_DB "select Domain from exposedomains where Domain='$add_sub';")
    if ! [ -z $checkSub ]; then
      echo "$checkSub is already exposed on the RelayServer."
    else
      newList=$newList"${add_sub},"
    fi
  done
  if [ -z "$newList" ]; then
    return
  fi
  newList=${newList%?}
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addExposeDomains.sh $subdoms_exp"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    echo "ERROR: There was a problem connecting to the RelayServer."
    return 5
  fi
  add_subdomains_Arr=($(echo $subdoms_exp | tr "," "\n"))
  for add_sub in "${add_subdomains_Arr[@]}"
  do
    sqlite3 $HSHQ_DB "insert or ignore into exposedomains(Domain,BaseDomain) values('$add_sub','$base_domain');"
  done
}

function removeExposeDomainPathsFromRelayServer()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  subdoms_exp="$1"
  loadSSHKey
  ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeExposeDomains.sh $subdoms_exp"
  mbres=$?
  unloadSSHKey
  if [ $mbres -ne 0 ]; then
    echo "ERROR: There was a problem connecting to the RelayServer."
    return 1
  fi
  rem_subdomains_Arr=($(echo $subdoms_exp | tr "," "\n"))
  for rem_sub in "${rem_subdomains_Arr[@]}"
  do
    sqlite3 $HSHQ_DB "delete from exposedomains where Domain='$rem_sub';"
  done
}

function showEmailMyNetworkHomeServerDNSListMenu()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    showMessageBox "No RelayServer" "You are not hosting a RelayServer, returning..."
    return
  fi
  sendEmailMyNetworkHomeServerDNSList
}

function showEmailMyNetworkHomeServerDNSListNoMenu()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  sendEmailMyNetworkHomeServerDNSList
}

function sendEmailMyNetworkHomeServerDNSList()
{
  hs_email_subj="(MGR COPY)HomeServer DNS Update from $HOMESERVER_NAME"
  hs_email_body="$(getMyNetworkHomeServersDNSUpdateEmailBody)"
  echo "Sending HomeServer Update email to self"
  sendEmail -s "$hs_email_subj" -b "$hs_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function showEmailMyNetworkHomeServerDNSListClientDNSMenu()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    showMessageBox "No RelayServer" "You are not hosting a RelayServer, returning..."
    return
  fi
  sendEmailMyNetworkHomeServerDNSListClient
}

function showEmailMyNetworkHomeServerDNSListClientDNSNoMenu()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  sendEmailMyNetworkHomeServerDNSListClient
}

function sendEmailMyNetworkHomeServerDNSListClient()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  users_email_subj="(MGR COPY)HomeServer ClientDNS Update from $HOMESERVER_NAME"
  users_email_body="$(getMyNetworkHomeServerDNSListClientDNSBody)"
  echo "Sending ClientDNS email to self"
  sendEmail -s "$users_email_subj" -b "$users_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function sendEmailMyNetworkFullUserDetails()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  full_network_email_subj="Full User Details for Hosted VPN"
  full_network_email_body=""
  full_network_email_body=$full_network_email_body"Full User Details for Hosted VPN\n\n"
  full_network_email_body=$full_network_email_body"------------------------------------------------------------------------\n"
  full_network_email_body=$full_network_email_body"Name,Email,PublicKey,PresharedKey,IP Address,Is Internet?\n"
  full_network_email_body=$full_network_email_body"------------------------------------------------------------------------\n"
  user_arr=($(sqlite3 $HSHQ_DB "select ID from connections where NetworkType='mynetwork' and ConnectionType='user';"))
  for cur_user_id in "${user_arr[@]}"
  do
    cur_name=$(sqlite3 $HSHQ_DB "select Name from connections where ID='$cur_user_id';")
    cur_email=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID='$cur_user_id';")
    pub_key=$(sqlite3 $HSHQ_DB "select PublicKey from connections where ID='$cur_user_id';")
    pre_key=$(sqlite3 $HSHQ_DB "select PresharedKey from connections where ID='$cur_user_id';")
    ip_addr=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID='$cur_user_id';")
    is_int=$(sqlite3 $HSHQ_DB "select IsInternet from connections where ID='$cur_user_id';")
    is_internet="No"
    if [ $is_int = 1 ]; then
      is_internet="Yes"
    fi
    full_network_email_body=$full_network_email_body"$cur_name,$cur_email,$pub_key,$pre_key,$ip_addr,$is_internet\n"
  done
  full_network_email_body=$full_network_email_body"\n\n"
  sendEmail -s "$full_network_email_subj" -b "$full_network_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function sendEmailMyNetworkBroadcast()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo "ERROR: You are not hosting a RelayServer."
    return 1
  fi
  strMessage="$1"
  full_network_email_subj="Broadcase Message from $HOMESERVER_NAME"
  full_network_email_body=""
  full_network_email_body=$full_network_email_body"Broadcase Message from $HOMESERVER_NAME\n"
  full_network_email_body=$full_network_email_body"------------------------------------------------------------------------\n"
  full_network_email_body=$full_network_email_body"$strMessage\n\n"
  email_list=($(sqlite3 $HSHQ_DB "select EmailAddress from connections where NetworkType='mynetwork';"))
  for cur_email in "${email_list[@]}"
  do
    echo "Sending broadcast message to ${cur_email}..."
    sendEmail -s "$full_network_email_subj" -b "$full_network_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>" -t "$cur_email"
  done
  # Send to self
  echo "Sending broadcast message to self..."
  sendEmail -s "$full_network_email_subj" -b "$full_network_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function notifyMyNetworkHomeServersDNSUpdate()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    return
  fi
  addOrRemove="$1"
  addRemoveHSName="$2"
  addRemoveDomainName="$3"
  hs_email_subj="HomeServer DNS Update from $HOMESERVER_NAME"
  hs_email_body=$(getMyNetworkHomeServersDNSUpdateEmailBody "$addOrRemove" "$addRemoveHSName" "$addRemoveDomainName")
  hs_list=($(sqlite3 $HSHQ_DB "select EmailAddress from connections where ConnectionType='homeserver_vpn' and NetworkType='mynetwork' group by EmailAddress;"))
  for curEmail in "${hs_list[@]}"
  do
    # Skip the domain being added/removed. This will skip anyone with an email address on that domain, but this is less impactful and likely better than the alternative.
    if ! [ "$(getDomainFromEmailAddress $curEmail)" = "$addRemoveDomainName" ]; then 
      echo "Sending HomeServer Update email to $curEmail"
      sendEmail -s "$hs_email_subj" -b "$hs_email_body" -t "$curEmail" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
    fi
  done
  echo "Sending HomeServer Update email to self"
  hs_email_subj="(MGR COPY)HomeServer DNS Update from $HOMESERVER_NAME"
  sendEmail -s "$hs_email_subj" -b "$hs_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function getDomainFromEmailAddress()
{
  email_addr="$1"
  echo echo "$email_addr" | cut -d "@" -f2
}

function notifyMyNetworkUsersDNSUpdate()
{
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    return
  fi
  addOrRemove="$1"
  addRemoveHSName="$2"
  addRemoveDomainName="$3"
  addRemoveDomainNameExtPrefix="$4"
  addRemoveDomainNameIPAddress="$5"
  users_email_subj="HomeServer ClientDNS Update from $HOMESERVER_NAME"
  users_email_body=$(getMyNetworkHomeServerDNSListClientDNSBody "$addOrRemove" "$addRemoveHSName" "$addRemoveDomainName" "$addRemoveDomainNameExtPrefix" "$addRemoveDomainNameIPAddress")
  users_list=($(sqlite3 $HSHQ_DB "select EmailAddress from connections where ConnectionType='user' and NetworkType='mynetwork' group by EmailAddress;"))
  for curEmail in "${users_list[@]}"
  do
    echo "Sending ClientDNS email to $curEmail"
    sendEmail -s "$users_email_subj" -b "$users_email_body" -t "$curEmail" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  done
  echo "Sending ClientDNS email to self"
  users_email_subj="(MGR COPY)HomeServer ClientDNS Update from $HOMESERVER_NAME"
  sendEmail -s "$users_email_subj" -b "$users_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function getMyNetworkHomeServersDNSUpdateEmailBody()
{
  addOrRemove="$1"
  addRemoveHSName="$2"
  addRemoveDomainName="$3"
  email_body=""
  email_body=${email_body}"HomeServer DNS Update from $HOMESERVER_NAME\n"
  email_body=${email_body}"=======================================================================\n\n"
  if ! [ -z $addOrRemove ]; then
    case "$addOrRemove" in
      add)
        email_body=${email_body}"ADDED the following HomeServer: \n\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n"
        email_body=${email_body}"HomeServer Name: ${addRemoveHSName}\n"
        email_body=${email_body}"HomeServer Domain: ${addRemoveDomainName}\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n\n"
        ;;
      remove)
        email_body=${email_body}"REMOVED the following HomeServer: \n\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n"
        email_body=${email_body}"HomeServer Name: ${addRemoveHSName}\n"
        email_body=${email_body}"HomeServer Domain: ${addRemoveDomainName}\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n\n"
        ;;
    esac
  fi
  email_body=${email_body}"1. Ensure this is the most recent version of this email with matching subject\n"
  email_body=${email_body}"line (HomeServer DNS Update from $HOMESERVER_NAME).\n\n"
  email_body=${email_body}"2. Go to the Script-server app, and navigate to 07 Other Networks > 07 Update HomeServer DNS\n"
  email_body=${email_body}"and paste the ENTIRE list BELOW the following line where appropriate.\n\n"
  email_body=${email_body}"3. After applying the update, you may delete any prior emails with the matching\n"
  email_body=${email_body}"subject line (HomeServer DNS Update from $HOMESERVER_NAME).\n\n\n"
  email_body=${email_body}"HomeServer Name|Host Domain|Peer Domain|External Prefix|IP Address\n"
  email_body=${email_body}"_______________________________________________________________________\n\n"
  email_body=${email_body}"$(getMyNetworkHomeServerDNSList)\n\n"
  echo "${email_body}"
}

function getMyNetworkHomeServerDNSListClientDNSBody()
{
  addOrRemove="$1"
  addRemoveHSName="$2"
  addRemoveDomainName="$3"
  addRemoveDomainNameExtPrefix="$4"
  addRemoveDomainNameIPAddress="$5"
  email_body=""
  email_body=${email_body}"HomeServer ClientDNS Update from $HOMESERVER_NAME\n"
  email_body=${email_body}"=======================================================================\n\n"
  email_body=${email_body}"If your client device uses a DNS server in this network\n"
  email_body=${email_body}"($RELAYSERVER_WG_VPN_SUBNET), then you can likely disregard this message.\n"
  email_body=${email_body}"Otherwise, see changes and full DNS list below and update accordingly.\n"
  email_body=${email_body}"These entries are formatted for DNSMasq and can be dropped directly\n"
  email_body=${email_body}"into your ClientDNS server.\n\n"

  if ! [ -z $addOrRemove ]; then
    case "$addOrRemove" in
      add)
        email_body=${email_body}"ADDED the following HomeServer: \n\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n"
        email_body=${email_body}"# ${addRemoveHSName} \n"
        email_body=${email_body}"server=/.${addRemoveDomainNameExtPrefix}.${addRemoveDomainName}/127.0.0.11\n"
        email_body=${email_body}"address=/.${addRemoveDomainName}/${addRemoveDomainNameIPAddress}\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n\n\n"
        ;;
      remove)
        email_body=${email_body}"REMOVED the following HomeServer: \n\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n"
        email_body=${email_body}"# ${addRemoveHSName} \n"
        email_body=${email_body}"server=/.${addRemoveDomainNameExtPrefix}.${addRemoveDomainName}/127.0.0.11\n"
        email_body=${email_body}"address=/.${addRemoveDomainName}/${addRemoveDomainNameIPAddress}\n"
        email_body=${email_body}"-----------------------------------------------------------------------\n\n\n"
        ;;
    esac
  fi
  email_body=${email_body}"Full Domain List for ${HOMESERVER_NAME}: \n"
  email_body=${email_body}"_______________________________________________________________________\n\n"
  email_body=${email_body}"$(getMyNetworkHomeServerDNSListForClientDNS)"
  email_body=${email_body}"_______________________________________________________________________\n"
  echo "${email_body}"
}

function notifyMyNetworkFullRemoval()
{
  hs_email_join_addendum=""
  hs_email_subj="HomeServer Network Reset Notice from $HOMESERVER_NAME"
  hs_email_body=""
  hs_email_body=${hs_email_body}"HomeServer Network Reset Notice from $HOMESERVER_NAME\n"
  hs_email_body=${hs_email_body}"================================================================\n\n"
  hs_email_body=${hs_email_body}"$HOMESERVER_NAME has initiated a full network reset. \n"
  hs_email_body=${hs_email_body}"Your HomeServer along with all other connections have been \n"
  hs_email_body=${hs_email_body}"removed from the network. Please disconnect accordingly.\n\n"
  hs_email_body=${hs_email_body}"Host Domain: $HOMESERVER_DOMAIN\n"
  hs_email_body=${hs_email_body}"Reason Provided: $disconnect_reason\n\n"
  full_hs_list=($(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType='mynetwork';"))

  for curID in "${full_hs_list[@]}"
  do
    curEmail=$(sqlite3 $HSHQ_DB "select EmailAddress from connections where ID=$curID;")
    is_primary=$(sqlite3 $HSHQ_DB "select IsPrimary from hsvpn_connections where ID=$curID;")
    hs_email_join_addendum=""
    if [ $is_primary = 1 ]; then
      hs_email_join_addendum=${hs_email_join_addendum}"\nThis is your HomeServer's primary VPN connection. Thus, you will\n"
      hs_email_join_addendum=${hs_email_join_addendum}"lose the ability to receive external emails, etc. In the $HSHQ_WRAP_FILENAME script,\n"
      hs_email_join_addendum=${hs_email_join_addendum}"go to Network -> RelayServer Utils -> Create or Join a VPN RelayServer\n"
      hs_email_join_addendum=${hs_email_join_addendum}"and set up a new primary VPN connection.\n\n"
    fi
    cur_email_body="${hs_email_body}\n${hs_email_join_addendum}"
    echo "Sending email to $curEmail"
    sendEmail -s "$hs_email_subj" -b "$cur_email_body" -t "$curEmail" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  done

  user_email_subj="HomeServer Network Reset Notice from $HOMESERVER_NAME"
  user_email_body=""
  user_email_body=${user_email_body}"HomeServer Network Reset Notice from $HOMESERVER_NAME\n"
  user_email_body=${user_email_body}"================================================================\n\n"
  user_email_body=${user_email_body}"$HOMESERVER_NAME has initiated a full network reset. \n"
  user_email_body=${user_email_body}"Your client connection along with all other connections have been \n"
  user_email_body=${user_email_body}"removed from the network. Please remove this connection accordingly.\n\n"
  user_email_body=${user_email_body}"Host Domain: $HOMESERVER_DOMAIN\n"
  user_email_body=${user_email_body}"Reason Provided: $disconnect_reason\n\n"
  full_user_list=($(sqlite3 $HSHQ_DB "select EmailAddress from connections where ConnectionType='user' and NetworkType='mynetwork' group by EmailAddress;"))

  for curEmail in "${full_user_list[@]}"
  do
    echo "Sending email to $curEmail"
    sendEmail -s "$user_email_subj" -b "$user_email_body" -t "$curEmail" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  done
}

function notifyMyNetworkTransferRelayServer()
{
  new_rs_ip="$1"
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    return
  fi
  users_email_subj="RelayServer Transfer Notice from $HOMESERVER_NAME"
  users_email_body="RelayServer Transfer Notice from ${HOMESERVER_NAME}\n"
  users_email_body=${users_email_body}"=======================================================================\n\n"
  users_email_body=${users_email_body}"$HOMESERVER_NAME has performed a RelayServer transfer. You will\n"
  users_email_body=${users_email_body}"need to disable, then re-enable your WireGuard client(s) in order\n"
  users_email_body=${users_email_body}"to restore connection to this network. There may also be some\n"
  users_email_body=${users_email_body}"short-term connectivity issues with servers on this network\n"
  users_email_body=${users_email_body}"while the network is auto-adjusting to this change.\n\n"
  users_list=($(sqlite3 $HSHQ_DB "select EmailAddress from connections where ConnectionType='user' and NetworkType='mynetwork' group by EmailAddress;"))
  for curEmail in "${users_list[@]}"
  do
    echo "Sending Transfer Notice email to $curEmail"
    sendEmail -s "$users_email_subj" -b "$users_email_body" -t "$curEmail" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  done
  echo "Sending Transfer Notice email to self"
  users_email_subj="(MGR COPY)RelayServer Transfer Notice from $HOMESERVER_NAME"
  other_doms=($(sqlite3 $HSHQ_DB "select Domain from mailhostmap where Domain not in ('$HOMESERVER_DOMAIN');"))
  doms_list=""
  for curDom in "${other_doms[@]}"
  do
    doms_list=${doms_list}${curDom}"\n"
  done
  mgr_email_body="$users_email_body"
  if ! [ -z "doms_list" ]; then
    mgr_email_body=${mgr_email_body}"The following domains also need the DNS records to be updated\n"
    mgr_email_body=${mgr_email_body}"with the new RelayServer IP Address ($new_rs_ip): \n${doms_list}"
  fi
  sendEmail -s "$users_email_subj" -b "$mgr_email_body" -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function getMyNetworkHomeServerDNSList()
{
  strOutput=""
  hs_arr=($(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType in ('primary','mynetwork');"))
  for curID in "${hs_arr[@]}"
  do
    strOutput=${strOutput}"$(sqlite3 $HSHQ_DB "select HomeServerName from hsvpn_connections where ID=$curID;")|"
    strOutput=${strOutput}"$HOMESERVER_DOMAIN|"
    strOutput=${strOutput}"$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$curID;")|"
    strOutput=${strOutput}"$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$curID;")|"
    strOutput=${strOutput}"$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$curID;")\n"
  done
  echo "$strOutput"
  strOutput=""
}

function getMyNetworkHomeServerDNSListForClientDNS()
{
  strOutput=""
  # First, output our primary network info
  prim_id=$(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType='primary';")
  curExtPrefix=$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$prim_id;")
  curIntPrefix=$(sqlite3 $HSHQ_DB "select InternalPrefix from hsvpn_connections where ID=$prim_id;")
  curDomName=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$prim_id;")
  curHSName=$(sqlite3 $HSHQ_DB "select HomeServerName from hsvpn_connections where ID=$prim_id;")
  curIPAddr=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$prim_id;")
  strOutput=${strOutput}"# ${curHSName}\n"
  strOutput=${strOutput}"server=/.${curExtPrefix}.${curDomName}/127.0.0.11\n"
  strOutput=${strOutput}"address=/.${curDomName}/${curIPAddr}\n"
  curIPAddr=$(sqlite3 $HSHQ_DB "select RS_VPN_IP from hsvpn_connections where ID=$prim_id;")
  strOutput=${strOutput}"address=/.${curIntPrefix}.${curDomName}/${curIPAddr}\n\n"

  # Then, output the rest of the network. Slightly repetitive of above, but ensures primary network gets output first, for organizational purposes.
  hs_arr=($(sqlite3 $HSHQ_DB "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType='mynetwork';"))
  for curID in "${hs_arr[@]}"
  do
    curExtPrefix=$(sqlite3 $HSHQ_DB "select ExternalPrefix from hsvpn_connections where ID=$curID;")
    curDomName=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections where ID=$curID;")
    curHSName=$(sqlite3 $HSHQ_DB "select HomeServerName from hsvpn_connections where ID=$curID;")
    curIPAddr=$(sqlite3 $HSHQ_DB "select IPAddress from connections where ID=$curID;")
    strOutput=${strOutput}"# ${curHSName}\n"
    strOutput=${strOutput}"server=/.${curExtPrefix}.${curDomName}/127.0.0.11\n"
    strOutput=${strOutput}"address=/.${curDomName}/${curIPAddr}\n\n"
  done
  echo "$strOutput"
  strOutput=""
}

function showUpdateHomeServerDNSMenu()
{
  dns_file=$HOME/dns.tmp
  showMessageBox "Paste DNS Entries" "In this next step, you will need to paste the entire list of DNS entries. After pasting, press CTRL-o to save, then Enter to confirm, then CTRL-x to exit. Please remember these key combinations. Press OK to proceed."
  nano $dns_file
  if ! [ -f $dns_file ]; then
    showMessageBox "Empty File" "The file is empty, returning..."
    return
  fi
  updateHomeServerDNS $dns_file
  rm -f $dns_file
}

function removeRevertDNS()
{
  curDomain=$1
  curExtPrefix=$2
  # First, try to downgrade to direct connection, i.e. we are hosting on their network.
  new_dns=$(sqlite3 $HSHQ_DB "select ID,PeerDomainExtPrefix,IPAddress from hsvpn_dns where PeerDomain='$curDomain' and HostDomain='$curDomain';")
  if [ -z $new_dns ]; then
    # No direct connection, try to find any other possible connections.
    new_dns=$(sqlite3 $HSHQ_DB "select ID,PeerDomainExtPrefix,IPAddress from hsvpn_dns where PeerDomain='$curDomain' order by DateAdded asc limit 1;")
  fi
  if [ -z $new_dns ]; then
    # No entries, delete current DNS entry
    deleteDomainAndWildcardAdguardHS "$curDomain"
    deleteDomainAdguardHS "*.$curExtPrefix.$curDomain"
    removeDomainAndWildcardIgnoreQuerylogAndStatsHS "$curDomain"
    deleteSvcUptimeKuma "https://home.${curDomain}" true
  else
    # Found an alternate, replace it
    curID=$(echo "$new_dns" | cut -d "|" -f1)
    ext_prefix=$(echo "$new_dns" | cut -d "|" -f2)
    ip_addr=$(echo "$new_dns" | cut -d "|" -f3)
    addDomainAndWildcardAdguardHS "$curDomain" "$ip_addr"
    addDomainAdguardHS "*.$curExtPrefix.$curDomain" "A"
    sqlite3 $HSHQ_DB "update hsvpn_dns set IsActive=1 where ID=$curID;"
  fi
}

function updateHomeServerDNS()
{
  dns_file=$1
  removeSpecialChars "$dns_file"
  OIFS=$IFS
  IFS=$(echo -en "\n\b")
  lines=$(cat $dns_file)
  curdt=$(getCurrentDate)
  sqlite3 $HSHQ_DB "drop table if exists dns_tmp;"
  sqlite3 $HSHQ_DB "create table dns_tmp(HostDomain text not null,PeerDomain text not null,PRIMARY KEY (HostDomain, PeerDomain));"
  primaryDomain=$(sqlite3 $HSHQ_DB "select DomainName from hsvpn_connections join connections on hsvpn_connections.ID = connections.ID where ConnectionType='homeserver_vpn' and NetworkType='primary';")
  is_error=false
  error_text=""
  for curLine in $lines
  do
    if [ -z "$curLine" ]; then
      continue
    fi
    curHSName=$(echo "$curLine" | cut -d "|" -f1)
    curHostDomain=$(echo "$curLine" | cut -d "|" -f2)
    curPeerDomain=$(echo "$curLine" | cut -d "|" -f3)
    curExtPrefix=$(echo "$curLine" | cut -d "|" -f4)
    curIP=$(echo "$curLine" | cut -d "|" -f5)
    if [ "$curPeerDomain" = "$HOMESERVER_DOMAIN" ]; then
      continue
    fi
    check_ip=$(checkHomeServerDNSIPAddressInVPN $curHostDomain $curPeerDomain $curIP)
    if ! [ "$check_ip" = "true" ]; then
      is_error=true
      error_text="$check_ip"
      break
    fi
    if [ "$(checkUpdateHomeServerDNSVars)" = "true" ]; then
      is_dns_added=$(sqlite3 $HSHQ_DB "select IsActive from hsvpn_dns where HostDomain='$curHostDomain' and PeerDomain='$curPeerDomain';")
      sqlite3 $HSHQ_DB "insert into dns_tmp(HostDomain,PeerDomain) values('$curHostDomain','$curPeerDomain');"
      if [ "$curHostDomain" = "$HOMESERVER_DOMAIN" ]; then
        continue
      fi
      if ! [ -z $is_dns_added ]; then
        # Check if IP has changed and update accordingly.
        db_ip=$(sqlite3 $HSHQ_DB "select IPAddress from hsvpn_dns where HostDomain='$curHostDomain' and PeerDomain='$curPeerDomain';")
        if ! [ "$db_ip" = "$curIP" ]; then
          echo "IP has changed, Old: $db_ip, New: $curIP"
          sqlite3 $HSHQ_DB "update hsvpn_dns set IPAddress='$curIP' where HostDomain='$curHostDomain' and PeerDomain='$curPeerDomain';"
          if [ $is_dns_added = 1 ]; then
            addDomainAndWildcardAdguardHS "$curPeerDomain" "$curIP"
          fi
        fi
        continue
      fi
      is_active=0
      is_dns_exist=$(sqlite3 $HSHQ_DB "select PeerDomain from hsvpn_dns where PeerDomain='$curPeerDomain';")
      is_host_my_network=$(sqlite3 $HSHQ_DB "select PeerDomain from hsvpn_dns where HostDomain='$HOMESERVER_DOMAIN' and PeerDomain='$curPeerDomain';")
      if [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ] && [ "$primaryDomain" = "$curHostDomain" ]; then
        is_active=1
        if ! [ -z $is_dns_exist ]; then
          # DNS entry exists, but need to upgrade it since it is on our primary network.
          sqlite3 $HSHQ_DB "update hsvpn_dns set IsActive=0 where PeerDomain='$curPeerDomain';"
        fi
        addDomainAndWildcardAdguardHS "$curPeerDomain" "$curIP"
        addDomainAdguardHS "*.$curExtPrefix.$curPeerDomain" "A"
        insertEnableSvcHeimdall heimdall "$curHSName" homeservers "https://home.$curPeerDomain" "hs2.png" true
      else
        if [ -z $is_dns_exist ]; then
          # No entry exists, add a new one
          is_active=1
          addDomainAndWildcardAdguardHS "$curPeerDomain" "$curIP"
          addDomainAdguardHS "*.$curExtPrefix.$curPeerDomain" "A"
        elif [ -z $is_host_my_network ] && [ "$curHostDomain" = "$curPeerDomain" ]; then
          # DNS entry exists, but need to upgrade it since it is a direct connection.
          is_active=1
          addDomainAndWildcardAdguardHS "$curPeerDomain" "$curIP"
          addDomainAdguardHS "*.$curExtPrefix.$curPeerDomain" "A"
          sqlite3 $HSHQ_DB "update hsvpn_dns set IsActive=0 where PeerDomain='$curPeerDomain';"
        fi
      fi
      sqlite3 $HSHQ_DB "insert into hsvpn_dns(HostDomain,PeerDomain,PeerDomainExtPrefix,IPAddress,DateAdded,IsActive) values('$curHostDomain','$curPeerDomain','$curExtPrefix','$curIP','$curdt',$is_active);"
    fi
  done
  IFS=$OIFS
  if [ "$is_error" = "true" ]; then
    email_subj="ERROR - HomeServer DNS Update"
    email_body="There was an error detected with the most recent HomeServer DNS Update: \n\n"
    email_body=$email_body"$error_text"
    sendEmail -s "$email_subj" -b "$email_body"
    echo "Error detected, see admin email ($EMAIL_ADMIN_EMAIL_ADDRESS) for details, returning..."
    sqlite3 $HSHQ_DB "drop table dns_tmp;"
    return
  fi
  host_list=($(sqlite3 $HSHQ_DB "select HostDomain from dns_tmp group by HostDomain;"))
  for cur_host in "${host_list[@]}"
  do
    if  [ "$curHostDomain" = "$HOMESERVER_DOMAIN" ]; then
      # Don't process our own records (protect user error)
      continue
    fi
    # Check if any DNS entries need to be deleted/reverted
    del_list=($(sqlite3 $HSHQ_DB "select hsvpn_dns.PeerDomain,hsvpn_dns.PeerDomainExtPrefix from hsvpn_dns left join dns_tmp on hsvpn_dns.HostDomain = dns_tmp.HostDomain and hsvpn_dns.PeerDomain = dns_tmp.PeerDomain where hsvpn_dns.HostDomain = '$cur_host' and dns_tmp.HostDomain is NULL;"))
    for curdns in "${del_list[@]}"
    do
      curPeerDomain=$(echo "$curdns" | cut -d "|" -f1)
      curExtPrefix=$(echo "$curdns" | cut -d "|" -f2)
      is_dns_active=$(sqlite3 $HSHQ_DB "select IsActive from hsvpn_dns where HostDomain='$cur_host' and PeerDomain='$curPeerDomain';")
      sqlite3 $HSHQ_DB "delete from hsvpn_dns where HostDomain='$cur_host' and PeerDomain='$curPeerDomain';"
      if [ $is_dns_active = 1 ]; then
        removeRevertDNS $curPeerDomain $curExtPrefix
      fi
      if [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ] && [ "$primaryDomain" = "$cur_host" ]; then
        disableSvcHeimdall homeservers "https://home.$curPeerDomain" false
      fi
    done
  done
  sqlite3 $HSHQ_DB "drop table dns_tmp;"
}

function checkHomeServerDNSIPAddressInVPN()
{
  host_domain=$1
  peer_domain=$2
  ip_addr=$3
  host_net=$(sqlite3 $HSHQ_DB "select VPN_Subnet from hsvpn_connections where DomainName='$host_domain';")
  is_in_subnet=$(isIPInSubnet $ip_addr $host_net)
  if [ "$is_in_subnet" = "true" ]; then
    echo "true"
  else
    echo "Host Domain: $host_domain, Peer domain: $peer_domain, IP address ($ip_addr) is not in correct subnet ($host_net)."
  fi
}

function syncAdguardDNSFromDB()
{
  dns_list=($(sqlite3 $HSHQ_DB "select PeerDomain,PeerDomainExtPrefix,IPAddress from hsvpn_dns where IsActive=1;"))
  for curdns in "${dns_list[@]}"
  do
    curPeerDomain=$(echo "$curdns" | cut -d "|" -f1)
    curExtPrefix=$(echo "$curdns" | cut -d "|" -f2)
    curIPAddress=$(echo "$curdns" | cut -d "|" -f3)
    if ! [ "$curPeerDomain" = "$HOMESERVER_DOMAIN" ]; then
      addDomainAndWildcardAdguardHS "$curPeerDomain" "$curIPAddress"
      addDomainAdguardHS "*.$curExtPrefix.$curPeerDomain" "A"
    fi
  done
}

function checkUpdateHomeServerDNSVars()
{
  # TODO
  echo "true"
}

# Adguard Utils
function getAdguardCredentialsHS()
{
  echo -n $ADGUARD_ADMIN_USERNAME:$ADGUARD_ADMIN_PASSWORD | base64
}

function getAdguardCredentialsRS()
{
  echo -n $RELAYSERVER_ADGUARD_ADMIN_USERNAME:$RELAYSERVER_ADGUARD_ADMIN_PASSWORD | base64
}

function addDomainAndWildcardAdguardHS()
{
  deleteDomainAndWildcardAdguardHS "$1"
  addDomainAdguardHS "$1" "$2"
  addDomainAdguardHS "*.$1" "$2"
}

function addDomainAdguardHS()
{
  set +e
  add_domain="$1"
  add_ip_addr="$2"
  basic_auth="$(getAdguardCredentialsHS)"
  deleteDomainAdguardHS $add_domain "$basic_auth"
  dom_json=$(jq -n --arg add_domain $add_domain --arg add_ip_addr $add_ip_addr '{domain: $add_domain, answer: $add_ip_addr}')
  curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/rewrite/add
}

function addDomainAndWildcardAdguardNoReplaceHS()
{
  addDomainAdguardNoReplaceHS "$1" "$2"
  addDomainAdguardNoReplaceHS "*.$1" "$2"
}

function addDomainAdguardNoReplaceHS()
{
  set +e
  add_domain="$1"
  add_ip_addr="$2"
  basic_auth="$(getAdguardCredentialsHS)"
  curl -s -H "Authorization: Basic $basic_auth" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/rewrite/list | jq -r --arg add_domain $add_domain '.[] | select(.domain==$add_domain) | .domain' | grep $add_domain > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    dom_json=$(jq -n --arg add_domain $add_domain --arg add_ip_addr $add_ip_addr '{domain: $add_domain, answer: $add_ip_addr}')
    curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/rewrite/add
  fi
}

function deleteDomainAndWildcardAdguardHS()
{
  deleteDomainAdguardHS "$1"
  deleteDomainAdguardHS "*.$1"
}

function deleteDomainAdguardHS()
{
  set +e
  del_domain="$1"
  basic_auth="$(getAdguardCredentialsHS)"
  curl -s -H "Authorization: Basic $basic_auth" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/rewrite/list | jq -r --arg del_domain $del_domain '.[] | select(.domain==$del_domain) | .domain' | grep "$del_domain" >/dev/null
  if [ $? -eq 0 ]; then
    # Exists, need to determine IP address to delete
    del_ip_addr=$(curl -s -H "Authorization: Basic $basic_auth" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/rewrite/list | jq -r --arg del_domain $del_domain '.[] | select(.domain==$del_domain) | .answer')
    dom_json=$(jq -n --arg del_domain $del_domain --arg del_ip_addr $del_ip_addr '{domain: $del_domain, answer: $del_ip_addr}')
    curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/rewrite/delete
  fi
}

function deleteDomainByIPAndWildcardAdguardHS()
{
  deleteDomainByIPAdguardHS "$1" "$2"
  deleteDomainByIPAdguardHS "*.$1" "$2"
}

function deleteDomainByIPAdguardHS()
{
  set +e
  del_domain="$1"
  del_ip_addr="$2"
  basic_auth="$(getAdguardCredentialsHS)"
  dom_json=$(jq -n --arg del_domain $del_domain --arg del_ip_addr $del_ip_addr '{domain: $del_domain, answer: $del_ip_addr}')
  curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/rewrite/delete
}

function clearQueryLogAndStatsAdguardHS()
{
  basic_auth="$(getAdguardCredentialsHS)"
  http --verify=no POST https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/querylog_clear "Authorization: Basic $basic_auth" >/dev/null
  http --verify=no POST https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/stats_reset "Authorization: Basic $basic_auth" >/dev/null
}

function addDomainAndWildcardIgnoreQuerylogAndStatsHS()
{
  adawiqs_curE=${-//[^e]/}
  set +e
  add_domain="$1"
  basic_auth="$(getAdguardCredentialsHS)"

  # Query log
  check_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/querylog/config "Authorization: Basic $basic_auth" | jq '.ignored')
  echo "$check_conf" | grep "$add_domain" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    new_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/querylog/config "Authorization: Basic $basic_auth" | jq --arg add_domain "$add_domain" '.ignored += [$add_domain]' | jq --arg add_domain "*.$add_domain" '.ignored += [$add_domain]')
    curl -s -X PUT -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$new_conf" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/querylog/config/update
  fi

  # Stats
  check_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/stats/config "Authorization: Basic $basic_auth" | jq '.ignored')
  echo "$check_conf" | grep "$add_domain" > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    new_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/stats/config "Authorization: Basic $basic_auth" | jq --arg add_domain "$add_domain" '.ignored += [$add_domain]' | jq --arg add_domain "*.$add_domain" '.ignored += [$add_domain]')
    curl -s -X PUT -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$new_conf" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/stats/config/update
  fi

  if ! [ -z $adawiqs_curE ]; then
    set -e
  fi
}

function removeDomainAndWildcardIgnoreQuerylogAndStatsHS()
{
  rdawiqs_curE=${-//[^e]/}
  set +e
  rem_domain="$1"
  basic_auth="$(getAdguardCredentialsHS)"

  # Query log
  check_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/querylog/config "Authorization: Basic $basic_auth" | jq '.ignored')
  echo "$check_conf" | grep "$rem_domain" > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    new_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/querylog/config "Authorization: Basic $basic_auth" | jq --arg rem_domain "$rem_domain" '.ignored -= [$rem_domain]' | jq --arg rem_domain "*.$rem_domain" '.ignored -= [$rem_domain]')
    curl -s -X PUT -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$new_conf" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/querylog/config/update
  fi

  # Stats
  check_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/stats/config "Authorization: Basic $basic_auth" | jq '.ignored')
  echo "$check_conf" | grep "$rem_domain" > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    new_conf=$(http --verify=no GET https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/stats/config "Authorization: Basic $basic_auth" | jq --arg rem_domain "$rem_domain" '.ignored -= [$rem_domain]' | jq --arg rem_domain "*.$rem_domain" '.ignored -= [$rem_domain]')
    curl -s -X PUT -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$new_conf" -k https://127.0.0.1:$ADGUARD_LOCALHOST_PORT/control/stats/config/update
  fi

  if ! [ -z $rdawiqs_curE ]; then
    set -e
  fi
}

function addDomainAndWildcardAdguardRS()
{
  deleteDomainAndWildcardAdguardRS "$1"
  addDomainAdguardRS "$1" "$2"
  addDomainAdguardRS "*.$1" "$2"
}

function addDomainAdguardRS()
{
  set +e
  add_domain=$1
  add_ip_addr=$2
  basic_auth="$(getAdguardCredentialsRS)"
  deleteDomainAdguardRS "$add_domain" "$basic_auth"
  dom_json=$(jq -n --arg add_domain $add_domain --arg add_ip_addr $add_ip_addr '{domain: $add_domain, answer: $add_ip_addr}')
  curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/add
}

function addDomainAndWildcardAdguardNoReplaceRS()
{
  addDomainAdguardNoReplaceRS "$1" "$2"
  addDomainAdguardNoReplaceRS "*.$1" "$2"
}

function addDomainAdguardNoReplaceRS()
{
  set +e
  add_domain="$1"
  add_ip_addr="$2"
  basic_auth="$(getAdguardCredentialsRS)"
  curl -s -H "Authorization: Basic $basic_auth" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/list | jq -r --arg add_domain $add_domain '.[] | select(.domain==$add_domain) | .domain' | grep $add_domain > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    dom_json=$(jq -n --arg add_domain $add_domain --arg add_ip_addr $add_ip_addr '{domain: $add_domain, answer: $add_ip_addr}')
    curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/add
  fi
}

function deleteDomainAndWildcardAdguardRS()
{
  deleteDomainAdguardRS "$1"
  deleteDomainAdguardRS "*.$1"
}

function deleteDomainAdguardRS()
{
  set +e
  del_domain="$1"
  basic_auth="$(getAdguardCredentialsRS)"
  curl -s -H "Authorization: Basic $basic_auth" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/list | jq -r --arg del_domain $del_domain '.[] | select(.domain==$del_domain) | .domain' | grep "$del_domain" >/dev/null
  if [ $? -eq 0 ]; then
    # Exists, need to determine IP address to delete
    del_ip_addr=$(curl -s -H "Authorization: Basic $basic_auth" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/list | jq -r --arg del_domain $del_domain '.[] | select(.domain==$del_domain) | .answer')
    dom_json=$(jq -n --arg del_domain $del_domain --arg del_ip_addr $del_ip_addr '{domain: $del_domain, answer: $del_ip_addr}')
    curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/delete
  fi
}

function deleteDomainByIPAndWildcardAdguardRS()
{
  deleteDomainByIPAdguardRS "$1" "$2"
  deleteDomainByIPAdguardRS "*.$1" "$2"
}

function deleteDomainByIPAdguardRS()
{
  set +e
  del_domain="$1"
  del_ip_addr="$2"
  basic_auth="$(getAdguardCredentialsRS)"
  dom_json=$(jq -n --arg del_domain $del_domain --arg del_ip_addr $del_ip_addr '{domain: $del_domain, answer: $del_ip_addr}')
  curl -s -H "Authorization: Basic $basic_auth" -H 'Content-Type: application/json' -d "$dom_json" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/rewrite/delete
}

function clearQueryLogAndStatsAdguardRS()
{
  basic_auth="$(getAdguardCredentialsRS)"
  http --verify=no POST https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/querylog_clear "Authorization: Basic $basic_auth" >/dev/null
  http --verify=no POST https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/control/stats_reset "Authorization: Basic $basic_auth" >/dev/null
}

# Initialization
function createInitialEnv()
{
  mkdir -p $HSHQ_BASE_DIR
  mkdir -p $HSHQ_DATA_DIR
  mkdir -p $HSHQ_BACKUP_DIR
  mkdir -p $HSHQ_NONBACKUP_DIR
  mkdir -p $HSHQ_BUILD_DIR
  mkdir -p $HSHQ_CONFIG_DIR
  mkdir -p $HSHQ_RELAYSERVER_DIR
  mkdir -p $HSHQ_SCRIPTS_DIR
  mkdir -p $HSHQ_SECRETS_DIR
  mkdir -p $HSHQ_SSL_DIR
  mkdir -p $HSHQ_STACKS_DIR
  mkdir -p $HSHQ_WIREGUARD_DIR

  mkdir -p $HSHQ_WIREGUARD_DIR/internet
  mkdir -p $HSHQ_WIREGUARD_DIR/vpn
  mkdir -p $HSHQ_WIREGUARD_DIR/scripts
  mkdir -p $HSHQ_WIREGUARD_DIR/users
  mkdir -p $HSHQ_WIREGUARD_DIR/requestkeys
  mkdir -p $HSHQ_RELAYSERVER_DIR/backup
  mkdir -p $HSHQ_RELAYSERVER_DIR/scripts
  mkdir -p $HSHQ_SCRIPTS_DIR/user
  sudo mkdir -p $HSHQ_SCRIPTS_DIR/root
  sudo chmod 700 $HSHQ_SCRIPTS_DIR/root
  sudo mkdir -p $HSHQ_SCRIPTS_DIR/userasroot
  sudo chmod 700 $HSHQ_SCRIPTS_DIR/userasroot
  sudo mkdir -p $HSHQ_SCRIPTS_DIR/boot
  sudo mkdir -p $HSHQ_SCRIPTS_DIR/boot/bootscripts
  sudo sed -i '/\/userasroot/d' /etc/sudoers >/dev/null
  echo "$USERNAME ALL=(ALL) NOPASSWD: $HSHQ_SCRIPTS_DIR/userasroot/*.sh" | sudo tee -a /etc/sudoers >/dev/null
  sudo sed -i '/timestamp_timeout/d' /etc/sudoers >/dev/null
  echo "Defaults timestamp_timeout=$SUDO_NORMAL_TIMEOUT" | sudo tee -a /etc/sudoers >/dev/null
  sudo sed -i '/passwd_tries/d' /etc/sudoers >/dev/null
  echo "Defaults passwd_tries=$SUDO_MAX_RETRIES" | sudo tee -a /etc/sudoers >/dev/null
  sudo sed -i '/includedir/d' /etc/sudoers >/dev/null
  echo "@includedir /etc/sudoers.d" | sudo tee -a /etc/sudoers >/dev/null
  mkdir -p $HOME/.ssh
  set +e
  tmp_pw1=""
  tmp_pw2=""
  while [ -z "$tmp_pw1" ] || ! [ "$tmp_pw1" = "$tmp_pw2" ]
  do
    tmp_pw1=$(promptPasswordMenu "Enter Password" "Enter a password to encrypt/decrypt the configuration file. ENSURE you remember this or you will be IRREVERSIBLY locked out of your configuration file (unless you have a super-computer) and you will not be able to apply updates, add new services, do networking functions, etc.: ")
    if [ $? -ne 0 ]; then exit; fi
    if [ -z "$tmp_pw1" ]; then
      showMessageBox "Password Empty" "The password cannot be empty, please try again."
      continue
    fi
    tmp_pw2=$(promptPasswordMenu "Confirm Password" "Enter the password again to confirm: ")
    if [ $? -ne 0 ]; then exit; fi
    if [ -z "$tmp_pw1" ] || ! [ "$tmp_pw1" = "$tmp_pw2" ]; then
      showMessageBox "Password Mismatch" "The passwords do not match, please try again."
    fi
  done
  CONFIG_ENCRYPTION_PASSPHRASE=$tmp_pw1
  tmp_pw1=""
  tmp_pw2=""
  CONFIG_FILE=$HSHQ_CONFIG_DIR/$CONFIG_FILE_DEFAULT_FILENAME
  cat <<EOFCF > $CONFIG_FILE
# Configuration File
$hshqlogo

# General Info BEGIN
HSHQ_VERSION=$HSHQ_SCRIPT_VERSION
HOMESERVER_DOMAIN=
HOMESERVER_NAME=
HOMESERVER_ABBREV=
HOMESERVER_HOST_IP=
HOMESERVER_HOST_ISPRIVATE=
HOMESERVER_HOST_RANGE=
HOMENET_ADDITIONAL_IPS=
EXT_DOMAIN_PREFIX=
INT_DOMAIN_PREFIX=
TZ=
SSH_PORT=
CURRENT_SSH_PORT=
ADMIN_USERNAME_BASE=
PRIMARY_VPN_SETUP_TYPE=none
IS_CONFIG_INIT=true
IS_INSTALLED=false
IS_INSTALLING=false
DESKTOP_ENV=
HSHQ_BASE_DIR=$HSHQ_BASE_DIR
DISABLED_SERVICES=
ADMIN_COLOR_CODE=#400
USERS_COLOR_CODE=#024
HOMESERVERS_COLOR_CODE=#8CB
RELAYSERVER_COLOR_CODE=#58A
WIREGUARD_DNS_REFRESH_RATE=5
LECERTS_REFRESH_RATE=15
# General Info END

# Services Info BEGIN
# Services Info END

# Certs BEGIN
CERTS_IS_CA_INIT=false
CERTS_ROOT_CA_NAME=
CERTS_EMAIL_ADDRESS=
CERTS_INTERNAL_DHPARAMS_KEYLENGTH=2048
CERTS_INTERNAL_COUNTRY=
CERTS_INTERNAL_STATE=
CERTS_INTERNAL_LOCALITY=
CERTS_INTERNAL_ORG_NAME=
CERTS_INTERNAL_OU_NAME=HomeServerHQ
CERTS_INTERNAL_ROOT_CN=
CERTS_INTERNAL_INTERMEDIATE_CN=
CERTS_INTERNAL_CA_DAYS=15330
# Certs END

# RelayServer Settings BEGIN
RELAYSERVER_NAME=
RELAYSERVER_SERVER_IP=A
RELAYSERVER_EXT_EMAIL_HOSTNAME=
RELAYSERVER_SUB_WG=wg
RELAYSERVER_SUB_RELAYSERVER=rs
RELAYSERVER_LE_CERT_DOMAINS=unset
RELAYSERVER_CURRENT_SSH_PORT=
RELAYSERVER_REMOTE_USERNAME=
RELAYSERVER_HSHQ_BASE_DIR=
RELAYSERVER_HSHQ_DATA_DIR=
RELAYSERVER_HSHQ_NONBACKUP_DIR=
RELAYSERVER_HSHQ_SCRIPTS_DIR=
RELAYSERVER_HSHQ_SECRETS_DIR=
RELAYSERVER_HSHQ_STACKS_DIR=
RELAYSERVER_HSHQ_SSL_DIR=
RELAYSERVER_SSH_PORT=
RELAYSERVER_SSH_PRIVATE_KEY_FILENAME=
RELAYSERVER_SSH_PRIVATE_KEY_PHRASE=
RELAYSERVER_CLIENT_DEFAULT_MTU=1372
RELAYSERVER_SERVER_DEFAULT_MTU=1372
RELAYSERVER_PERSISTENT_KEEPALIVE=20
RELAYSERVER_IS_INIT=
RELAYSERVER_WG_PORTAL_PORT=8323
RELAYSERVER_WG_INTERFACE_NAME=wg0
RELAYSERVER_WG_PORT=51821
RELAYSERVER_WG_VPN_NETNAME=
RELAYSERVER_WG_VPN_SUBNET=
RELAYSERVER_WG_INTERNET_NETNAME=
RELAYSERVER_WG_SV_PRIVATEKEY=
RELAYSERVER_WG_SV_PUBLICKEY=
RELAYSERVER_WG_SV_IP=
RELAYSERVER_WG_SV_PRESHAREDKEY=
RELAYSERVER_WG_SV_CLIENTDNS_PRIVATEKEY=
RELAYSERVER_WG_SV_CLIENTDNS_PRESHAREDKEY=
RELAYSERVER_WG_SV_CLIENTDNS_IP=
RELAYSERVER_WG_HS_PRIVATEKEY=
RELAYSERVER_WG_HS_IP=
RELAYSERVER_WG_HS_PRESHAREDKEY=
RELAYSERVER_WG_HS_CLIENTDNS_PRIVATEKEY=
RELAYSERVER_WG_HS_CLIENTDNS_PRESHAREDKEY=
RELAYSERVER_WG_HS_CLIENTDNS_IP=
RELAYSERVER_WG_INTERNET_HS_PRIVATEKEY=
RELAYSERVER_WG_INTERNET_HS_PRESHAREDKEY=
# RelayServer Settings END

# RelayServer Services BEGIN
RELAYSERVER_PORTAINER_ADMIN_USERNAME=
RELAYSERVER_PORTAINER_ADMIN_PASSWORD=
RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT=
RELAYSERVER_ADGUARD_ADMIN_USERNAME=
RELAYSERVER_ADGUARD_ADMIN_PASSWORD=
RELAYSERVER_CADDYDNS_ADMIN_USERNAME=
RELAYSERVER_CADDYDNS_ADMIN_PASSWORD=
RELAYSERVER_FILEBROWSER_ADMIN_USERNAME=
RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD=
RELAYSERVER_WGPORTAL_ADMIN_USERNAME=
RELAYSERVER_WGPORTAL_ADMIN_EMAIL=
RELAYSERVER_WGPORTAL_ADMIN_PASSWORD=
RELAYSERVER_CLIENTDNS_ADMIN_USERNAME=
RELAYSERVER_CLIENTDNS_ADMIN_PASSWORD=
RELAYSERVER_RSPAMD_ADMIN_USERNAME=
RELAYSERVER_RSPAMD_ADMIN_PASSWORD=
RELAYSERVER_SYNCTHING_ADMIN_USERNAME=
RELAYSERVER_SYNCTHING_ADMIN_PASSWORD=
RELAYSERVER_SYNCTHING_API_KEY=
RELAYSERVER_SYNCTHING_DEVICE_ID=
RELAYSERVER_SYNCTHING_FOLDER_ID=
# RelayServer Services END

# Config File Encryption Passphrase BEGIN
CONFIG_ENCRYPTION_PASSPHRASE=$CONFIG_ENCRYPTION_PASSPHRASE
# Config File Encryption Passphrase END

# Docker Installation Info BEGIN
USERID=
GROUPID=
XDG_RUNTIME_DIR=
IS_ROOTLESS_DOCKER=false
DEFAULT_NETWORK_POOL=172.16.0.0/12
DEFAULT_NETWORK_SIZE=24
DOCKER_METRICS_PORT=8323
TRUSTED_PROXIES="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
# Docker Installation Info END

# Service Details BEGIN
# Portainer (Service Details) BEGIN
PORTAINER_ADMIN_USERNAME=
PORTAINER_ADMIN_PASSWORD=
PORTAINER_ADMIN_USERID=
PORTAINER_LOCAL_HTTPS_PORT=
PORTAINER_DB_KEY=
# Portainer (Service Details) END

# Adguard (Service Details) BEGIN
ADGUARD_LOCALHOST_PORT=5443
ADGUARD_ADMIN_USERNAME=
ADGUARD_ADMIN_PASSWORD=
# Adguard (Service Details) END

# Script-server (Service Details) BEGIN
SCRIPTSERVER_INIT_ENV=true
SCRIPTSERVER_LOCALHOST_PORT=8008
SCRIPTSERVER_ADMIN_USERNAME=
SCRIPTSERVER_ADMIN_PASSWORD=
# Script-server (Service Details) END

# Authelia (Service Details) BEGIN
AUTHELIA_REDIRECTION_URL=
# Authelia (Service Details) END

# SysUtils (Service Details) BEGIN
GRAFANA_ADMIN_USERNAME=
GRAFANA_ADMIN_PASSWORD=
INFLUXDB_ADMIN_USERNAME=
INFLUXDB_ADMIN_PASSWORD=
INFLUXDB_ORG=
INFLUXDB_TOKEN=
INFLUXDB_HA_BUCKET=
# SysUtils (Service Details) END

# OpenLDAP (Service Details) BEGIN
LDAP_ADMIN_USER_USERNAME=
LDAP_ADMIN_USER_PASSWORD=
LDAP_PRIMARY_USER_USERNAME=
LDAP_PRIMARY_USER_PASSWORD_HASH=
LDAP_PRIMARY_USER_EMAIL_ADDRESS=
LDAP_ADMIN_BIND_DN=
LDAP_ADMIN_BIND_PASSWORD=
LDAP_READONLY_USER_USERNAME=
LDAP_READONLY_USER_BIND_DN=
LDAP_READONLY_USER_PASSWORD=
LDAP_CONFIG_PASSWORD=
LDAP_URI=
LDAPS_URI=
LDAP_BASE_DN=
LDAP_ADMIN_USER_GROUP_NAME=admins
LDAP_PRIMARY_USER_GROUP_NAME=primaryusers
LDAP_BASIC_USER_GROUP_NAME=basicusers
LDAP_EMAIL_FROM_NAME="LDAP $HSHQ_ADMIN_NAME"
LDAP_ACCOUNT_REQUESTS_ENABLED=true
LDAP_ACCOUNT_REQUESTS_EMAIL=
# OpenLDAP (Service Details) END

# Mailu (Service Details) BEGIN
EMAIL_ADMIN_USERNAME=
EMAIL_ADMIN_PASSWORD=
EMAIL_ADMIN_EMAIL_ADDRESS=
EMAIL_SMTP_USERNAME=
EMAIL_SMTP_PASSWORD=
EMAIL_SMTP_EMAIL_ADDRESS=
SMTP_HOSTNAME=mailu-front
SMTP_HOSTPORT=25
SMTP_RELAY_HOST=
SMTP_RELAY_USERNAME=
SMTP_RELAY_PASSWORD=
# Mailu (Service Details) END

# Wazuh (Service Details) BEGIN
WAZUH_USERS_DASHBOARD_USERNAME=kibanaserver
WAZUH_USERS_DASHBOARD_PASSWORD=
WAZUH_API_USERNAME=
WAZUH_API_PASSWORD=
WAZUH_USERS_ADMIN_USERNAME=
WAZUH_USERS_ADMIN_PASSWORD=
WAZUH_USERS_KIBANARO_PASSWORD=
WAZUH_USERS_LOGSTASH_PASSWORD=
WAZUH_USERS_READALL_PASSWORD=
WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD=
# Wazuh (Service Details) END

# Collabora (Service Details) BEGIN
COLLABORA_ADMIN_USERNAME=
COLLABORA_ADMIN_PASSWORD=
# Collabora (Service Details) END

# Nextcloud (Service Details) BEGIN
NEXTCLOUD_ADMIN_USERNAME=
NEXTCLOUD_ADMIN_PASSWORD=
NEXTCLOUD_ADMIN_EMAIL_ADDRESS=
NEXTCLOUD_DATABASE_NAME=
NEXTCLOUD_DATABASE_USER=
NEXTCLOUD_DATABASE_USER_PASSWORD=
NEXTCLOUD_REDIS_PASSWORD=
NEXTCLOUD_EMAIL_FROM_ADDRESS=
DEFAULT_PHONE_REGION=US
NEXTCLOUD_IMAGINARY_PORT=7557
NEXTCLOUD_PUSH_PORT=7867
# Nextcloud (Service Details) END

# Jitsi (Service Details) BEGIN
JITSI_ADVERTISE_IPS=
# Jitsi (Service Details) END

# Matrix (Service Details) BEGIN
MATRIX_DATABASE_NAME=
MATRIX_DATABASE_USER=
MATRIX_DATABASE_USER_PASSWORD=
MATRIX_REDIS_PASSWORD=
MATRIX_SYNAPSE_REGISTRATION_SECRET=
MATRIX_SYNAPSE_MACAROON_SECRET=
MATRIX_SYNAPSE_FORM_SECRET=
# Matrix (Service Details) END

# Wiki.js (Service Details) BEGIN
WIKIJS_DATABASE_NAME=
WIKIJS_DATABASE_USER=
WIKIJS_DATABASE_USER_PASSWORD=
# Wiki.js (Service Details) END

# Duplicati (Service Details) BEGIN
DUPLICATI_ADMIN_PASSWORD=
# Duplicati (Service Details) END

# Mastodon (Service Details) BEGIN
MASTODON_ADMIN_EMAIL_ADDRESS=
MASTODON_ADMIN_PASSWORD=
MASTODON_ADMIN_USERNAME=
MASTODON_DATABASE_NAME=
MASTODON_DATABASE_USER=
MASTODON_DATABASE_USER_PASSWORD=
MASTODON_REDIS_PASSWORD=
MASTODON_ELASTICSEARCH_PASSWORD=
# Mastodon (Service Details) END

# Dozzle (Service Details) BEGIN
DOZZLE_USERNAME=
DOZZLE_PASSWORD=
# Dozzle (Service Details) END

# SearxNG (Service Details) BEGIN
SEARXNG_REDIS_PASSWORD=
SEARXNG_SECRET_KEY=
# SearxNG (Service Details) END

# Jellyfin (Service Details) BEGIN
JELLYFIN_ADMIN_USERNAME=
JELLYFIN_ADMIN_PASSWORD=
# Jellyfin (Service Details) END

# FileBrowser (Service Details) BEGIN
FILEBROWSER_USERNAME=
FILEBROWSER_PASSWORD=
# FileBrowser (Service Details) END

# PhotoPrism (Service Details) BEGIN
PHOTOPRISM_DATABASE_ROOT_PASSWORD=
PHOTOPRISM_DATABASE_NAME=
PHOTOPRISM_DATABASE_USER=
PHOTOPRISM_DATABASE_USER_PASSWORD=
# PhotoPrism (Service Details) END

# Guacamole (Service Details) BEGIN
GUACAMOLE_DEFAULT_ADMIN_USERNAME=guacadmin
GUACAMOLE_DEFAULT_ADMIN_PASSWORD=guacadmin
GUACAMOLE_DATABASE_ROOT_PASSWORD=
GUACAMOLE_DATABASE_NAME=
GUACAMOLE_DATABASE_USER=
GUACAMOLE_DATABASE_USER_PASSWORD=
# Guacamole (Service Details) END

# UptimeKuma (Service Details) BEGIN
UPTIMEKUMA_USERNAME=
UPTIMEKUMA_PASSWORD=
UPTIMEKUMA_HEARTBEAT_INTERVAL=60
UPTIMEKUMA_HEARTBEAT_RETRIES=3
UPTIMEKUMA_RETRY_INTERVAL=20
UPTIMEKUMA_RESEND_NOTIFY=360
# UptimeKuma (Service Details) END

# Wordpress (Service Details) BEGIN
WORDPRESS_DATABASE_ROOT_PASSWORD=
WORDPRESS_DATABASE_NAME=
WORDPRESS_DATABASE_USER=
WORDPRESS_DATABASE_USER_PASSWORD=
# Wordpress (Service Details) END

# Ghost (Service Details) BEGIN
GHOST_DATABASE_ROOT_PASSWORD=
GHOST_DATABASE_NAME=
GHOST_DATABASE_USER=
GHOST_DATABASE_USER_PASSWORD=
# Ghost (Service Details) END

# PeerTube (Service Details) BEGIN
PEERTUBE_ADMIN_USERNAME=
PEERTUBE_ADMIN_PASSWORD=
PEERTUBE_ADMIN_EMAIL_ADDRESS=
PEERTUBE_DATABASE_NAME=
PEERTUBE_DATABASE_USER=
PEERTUBE_DATABASE_USER_PASSWORD=
# PeerTube (Service Details) END

# HomeAssistant (Service Details) BEGIN
HOMEASSISTANT_LOCALHOST_PORT=8123
HOMEASSISTANT_DB_LOCALHOST_PORT=8432
HOMEASSISTANT_DATABASE_NAME=
HOMEASSISTANT_DATABASE_USER=
HOMEASSISTANT_DATABASE_USER_PASSWORD=
HOMEASSISTANT_TASMOADMIN_USER=
HOMEASSISTANT_TASMOADMIN_USER_PASSWORD=
HOMEASSISTANT_CONFIGURATOR_USER=
HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD=
# HomeAssistant (Service Details) END

# Gitlab (Service Details) BEGIN
GITLAB_ROOT_PASSWORD=
GITLAB_DATABASE_NAME=
GITLAB_DATABASE_USER=
GITLAB_DATABASE_USER_PASSWORD=
GITLAB_REDIS_PASSWORD=
# Gitlab (Service Details) END

# Vaultwarden (Service Details) BEGIN
VAULTWARDEN_ADMIN_TOKEN=
VAULTWARDEN_DATABASE_NAME=
VAULTWARDEN_DATABASE_USER=
VAULTWARDEN_DATABASE_USER_PASSWORD=
# Vaultwarden (Service Details) END

# Discourse (Service Details) BEGIN
DISCOURSE_ADMIN_USERNAME=
DISCOURSE_ADMIN_PASSWORD=
DISCOURSE_ADMIN_EMAIL_ADDRESS=
DISCOURSE_DATABASE_NAME=
DISCOURSE_DATABASE_USER=
DISCOURSE_DATABASE_USER_PASSWORD=
DISCOURSE_REDIS_PASSWORD=
# Discourse (Service Details) END

# Syncthing (Service Details) BEGIN
SYNCTHING_ADMIN_USERNAME=
SYNCTHING_ADMIN_PASSWORD=
SYNCTHING_API_KEY=
SYNCTHING_DEVICE_ID=
# Syncthing (Service Details) END

# CodeServer (Service Details) BEGIN
CODESERVER_ADMIN_USERNAME=
CODESERVER_ADMIN_PASSWORD=
# CodeServer (Service Details) END

# Shlink (Service Details) BEGIN
SHLINK_DATABASE_NAME=
SHLINK_DATABASE_USER=
SHLINK_DATABASE_USER_PASSWORD=
SHLINK_REDIS_PASSWORD=
SHLINK_INITIAL_API_KEY=
# Shlink (Service Details) END

# FireflyIII (Service Details) BEGIN
FIREFLY_DATABASE_NAME=
FIREFLY_DATABASE_USER=
FIREFLY_DATABASE_USER_PASSWORD=
FIREFLY_REDIS_PASSWORD=
FIREFLY_INITIAL_API_KEY=
# FireflyIII (Service Details) END

# Excalidraw (Service Details) BEGIN
EXCALIDRAW_REDIS_PASSWORD=
# Excalidraw (Service Details) END

# Gitea (Service Details) BEGIN
GITEA_ADMIN_USERNAME=
GITEA_ADMIN_EMAIL_ADDRESS=
GITEA_ADMIN_PASSWORD=
GITEA_DATABASE_NAME=
GITEA_DATABASE_USER=
GITEA_DATABASE_USER_PASSWORD=
# Gitea (Service Details) END

# Invidious (Service Details) BEGIN
INVIDIOUS_DATABASE_NAME=
INVIDIOUS_DATABASE_USER=
INVIDIOUS_DATABASE_USER_PASSWORD=
# Invidious (Service Details) END

# Mealie (Service Details) BEGIN
MEALIE_ADMIN_USERNAME=
MEALIE_ADMIN_EMAIL_ADDRESS=
MEALIE_ADMIN_PASSWORD=
MEALIE_DATABASE_NAME=
MEALIE_DATABASE_USER=
MEALIE_DATABASE_USER_PASSWORD=
# Mealie (Service Details) END

# Remotely (Service Details) BEGIN
REMOTELY_INIT_ENV=true
REMOTELY_ADMIN_USERNAME=
REMOTELY_ADMIN_EMAIL_ADDRESS=
REMOTELY_ADMIN_PASSWORD=
# Remotely (Service Details) END

# SQLPad (Service Details) BEGIN
SQLPAD_ADMIN_USERNAME=
SQLPAD_ADMIN_PASSWORD=
# SQLPad (Service Details) END

# Heimdall (Service Details) BEGIN
HEIMDALL_ADMIN_USERNAME=
HEIMDALL_ADMIN_PASSWORD=
HEIMDALL_USER_USERNAME=
HEIMDALL_USER_PASSWORD=
HEIMDALL_HOMESERVERS_USERNAME=
HEIMDALL_HOMESERVERS_PASSWORD=
HEIMDALL_RELAYSERVER_USERNAME=
HEIMDALL_RELAYSERVER_PASSWORD=
HEIMDALL_WINDOW_TITLE=
# Heimdall (Service Details) END

# Caddy (Service Details) BEGIN
CADDY_CERT_RENEW_INTERVAL=1h
CADDY_CERT_INTERMEDIATE_LIFETIME=90d
CADDY_CERT_LEAF_LIFETIME=7d
CADDY_RESET_CONFIG_HOUROFDAY=4
CADDY_SNIPPET_TLS_HSHQ=tls-hshq
CADDY_SNIPPET_RIP=rip
CADDY_SNIPPET_FWDAUTH=fwd-auth
CADDY_SNIPPET_TRUSTEDPROXIES=trusted-proxy-list
CADDY_SNIPPET_SAFEHEADER=safe-header
CADDY_SNIPPET_SAFEHEADERALLOWFRAME=safe-header-allow-frame
CADDY_SNIPPET_SAFEHEADERALLOWCORS=safe-header-allow-cors
CADDY_SNIPPET_SAFEHEADERCORS=safe-header-cors
CADDY_SNIPPET_NOTHOMESUBNET=not-home-subnet
# Caddy (Service Details) END

# Calibre (Service Details) BEGIN
CALIBRE_WEB_INIT_ENV=true
CALIBRE_WEB_ADMIN_USERNAME=
CALIBRE_WEB_ADMIN_EMAIL_ADDRESS=
CALIBRE_WEB_ADMIN_PASSWORD=
# Calibre (Service Details) END

# Linkwarden (Service Details) BEGIN
LINKWARDEN_DATABASE_NAME=
LINKWARDEN_DATABASE_USER=
LINKWARDEN_DATABASE_USER_PASSWORD=
LINKWARDEN_NEXTAUTH_SECRET=
# Linkwarden (Service Details) END

# Bar Assistant (Service Details) BEGIN
BARASSISTANT_REDIS_PASSWORD=
BARASSISTANT_MEILISEARCH_KEY=
# Bar Assistant (Service Details) END

# FreshRSS (Service Details) BEGIN
FRESHRSS_INIT_ENV=true
FRESHRSS_ADMIN_USERNAME=
FRESHRSS_ADMIN_PASSWORD=
FRESHRSS_ADMIN_EMAIL_ADDRESS=
FRESHRSS_DATABASE_NAME=
FRESHRSS_DATABASE_USER=
FRESHRSS_DATABASE_USER_PASSWORD=
# FreshRSS (Service Details) END

# Keila (Service Details) BEGIN
KEILA_INIT_ENV=true
KEILA_ADMIN_USERNAME=
KEILA_ADMIN_EMAIL_ADDRESS=
KEILA_ADMIN_PASSWORD=
KEILA_DATABASE_NAME=
KEILA_DATABASE_USER=
KEILA_DATABASE_USER_PASSWORD=
# Keila (Service Details) END

# Wallabag (Service Details) BEGIN
WALLABAG_INIT_ENV=true
WALLABAG_ADMIN_USERNAME=
WALLABAG_ADMIN_EMAIL_ADDRESS=
WALLABAG_ADMIN_PASSWORD=
WALLABAG_DATABASE_NAME=
WALLABAG_DATABASE_USER=
WALLABAG_DATABASE_USER_PASSWORD=
WALLABAG_ENV_SECRET=
WALLABAG_REDIS_PASSWORD=
# Wallabag (Service Details) END

# Jupyter (Service Details) BEGIN
JUPYTER_INIT_ENV=true
JUPYTER_ADMIN_PASSWORD=
# Jupyter (Service Details) END

# Paperless (Service Details) BEGIN
PAPERLESS_INIT_ENV=true
PAPERLESS_SECRET_KEY=
PAPERLESS_REDIS_PASSWORD=
PAPERLESS_ADMIN_USERNAME=
PAPERLESS_ADMIN_EMAIL_ADDRESS=
PAPERLESS_ADMIN_PASSWORD=
PAPERLESS_DATABASE_NAME=
PAPERLESS_DATABASE_USER=
PAPERLESS_DATABASE_USER_PASSWORD=
# Paperless (Service Details) END

# SpeedtestTrackerLocal (Service Details) BEGIN
SPEEDTEST_TRACKER_LOCAL_INIT_ENV=true
SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME=
SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS=
SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD=
SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME=
SPEEDTEST_TRACKER_LOCAL_DATABASE_USER=
SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD=
# SpeedtestTrackerLocal (Service Details) END

# SpeedtestTrackerVPN (Service Details) BEGIN
SPEEDTEST_TRACKER_VPN_INIT_ENV=true
SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME=
SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS=
SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD=
SPEEDTEST_TRACKER_VPN_DATABASE_NAME=
SPEEDTEST_TRACKER_VPN_DATABASE_USER=
SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD=
# SpeedtestTrackerVPN (Service Details) END

# Change Detection (Service Details) BEGIN
CHANGEDETECTION_INIT_ENV=true
CHANGEDETECTION_ADMIN_PASSWORD=
# Change Detection (Service Details) END

# Huginn (Service Details) BEGIN
HUGINN_INIT_ENV=true
HUGINN_APP_SECRET_TOKEN=
HUGINN_ADMIN_USERNAME=
HUGINN_ADMIN_EMAIL_ADDRESS=
HUGINN_ADMIN_PASSWORD=
HUGINN_DATABASE_NAME=
HUGINN_DATABASE_USER=
HUGINN_DATABASE_USER_PASSWORD=
# Huginn (Service Details) END

# Coturn (Service Details) BEGIN
COTURN_STATIC_SECRET=
# Coturn (Service Details) END

# Piped (Service Details) BEGIN
PIPED_DATABASE_NAME=
PIPED_DATABASE_USER=
PIPED_DATABASE_USER_PASSWORD=
# Piped (Service Details) END

# Service Details END
EOFCF
  set -e
}

function checkUpdateVersion()
{
  is_update_performed=false
  if [ $HSHQ_VERSION -lt $HSHQ_SCRIPT_VERSION ]; then
    is_update_performed=true
  fi
  if [ $HSHQ_VERSION -lt 11 ]; then
    echo "Updating to Version 11..."
    setStaticIPToCurrent
    HSHQ_VERSION=11
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 14 ]; then
    echo "Updating to Version 14..."
    version14Update
    HSHQ_VERSION=14
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 22 ]; then
    echo "Updating to Version 22..."
    version22Update
    HSHQ_VERSION=22
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 23 ]; then
    echo "Updating to Version 23..."
    version23Update
    HSHQ_VERSION=23
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 24 ]; then
    echo "Updating to Version 24..."
    version24Update
    HSHQ_VERSION=24
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 25 ]; then
    echo "Updating to Version 25..."
    version25Update
    HSHQ_VERSION=25
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 26 ]; then
    echo "Updating to Version 26..."
    version26Update
    HSHQ_VERSION=26
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 27 ]; then
    echo "Updating to Version 27..."
    version27Update
    HSHQ_VERSION=27
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 29 ]; then
    echo "Updating to Version 29..."
    version29Update
    HSHQ_VERSION=29
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 30 ]; then
    echo "Updating to Version 30..."
    version30Update
    HSHQ_VERSION=30
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 31 ]; then
    echo "Updating to Version 31..."
    version31Update
    HSHQ_VERSION=31
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 32 ]; then
    echo "Updating to Version 32..."
    version32Update
    HSHQ_VERSION=32
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 34 ]; then
    echo "Updating to Version 34..."
    version34Update
    HSHQ_VERSION=34
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 35 ]; then
    echo "Updating to Version 35..."
    version35Update
    HSHQ_VERSION=35
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 37 ]; then
    echo "Updating to Version 37..."
    version37Update
    HSHQ_VERSION=37
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 38 ]; then
    echo "Updating to Version 38..."
    version38Update
    HSHQ_VERSION=38
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 39 ]; then
    echo "Updating to Version 39..."
    version39Update
    HSHQ_VERSION=39
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 40 ]; then
    echo "Updating to Version 40..."
    version40Update
    HSHQ_VERSION=40
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 41 ]; then
    echo "Updating to Version 41..."
    version41Update
    HSHQ_VERSION=41
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 43 ]; then
    echo "Updating to Version 43..."
    version43Update
    HSHQ_VERSION=43
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 44 ]; then
    echo "Updating to Version 44..."
    version44Update
    HSHQ_VERSION=44
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 46 ]; then
    echo "Updating to Version 46..."
    version46Update
    if [ $HSHQ_VERSION -lt 46 ]; then
      return
    fi
  fi
  if [ $HSHQ_VERSION -lt 47 ]; then
    echo "Updating to Version 47..."
    version47Update
    HSHQ_VERSION=47
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 48 ]; then
    echo "Updating to Version 48..."
    version48Update
    HSHQ_VERSION=48
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 50 ]; then
    echo "Updating to Version 50..."
    version50Update
    HSHQ_VERSION=50
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 51 ]; then
    echo "Updating to Version 51..."
    version51Update
    HSHQ_VERSION=51
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 52 ]; then
    echo "Updating to Version 52..."
    version52Update
    HSHQ_VERSION=52
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 53 ]; then
    echo "Updating to Version 53..."
    version53Update
    HSHQ_VERSION=53
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 54 ]; then
    echo "Updating to Version 54..."
    version54Update
    HSHQ_VERSION=54
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 55 ]; then
    echo "Updating to Version 55..."
    version55Update
    HSHQ_VERSION=55
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 56 ]; then
    echo "Updating to Version 56..."
    version56Update
    HSHQ_VERSION=56
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 59 ]; then
    echo "Updating to Version 59..."
    version59Update
    HSHQ_VERSION=59
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt 61 ]; then
    echo "Updating to Version 61..."
    version61Update
    HSHQ_VERSION=61
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ $HSHQ_VERSION -lt $HSHQ_SCRIPT_VERSION ]; then
    echo "Updating to Version $HSHQ_SCRIPT_VERSION..."
    HSHQ_VERSION=$HSHQ_SCRIPT_VERSION
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  fi
  if [ "$is_update_performed" = "true" ]; then
    outputStackListsScriptServer
  fi
}

function version14Update()
{
  v14_curE=${-//[^e]/}
  set +e
  OLDIFS=$IFS
  IFS=$(echo -en "\n\b")
  fixlist=($(cat $CONFIG_FILE | grep "^#" | grep -v "# Configuration File" | grep -v "END" | grep -v "BEGIN"))
  for curitem in "${fixlist[@]}"
  do
    sed -i "s|$curitem|$curitem BEGIN|g" $CONFIG_FILE
    sed -i "s|$curitem BEGIN END|$curitem END|g" $CONFIG_FILE
  done
  IFS=$OLDIFS
  set +e
  if ! [ -z $v14_curE ]; then
    set -e
  fi
  addToDisabledServices netdata
}

function version22Update()
{
  updateMOTD
  set -e
  showMessageBox "Version 22 Update" "A large update needs to be applied to your system. Please be patient as it will take around 10 minutes to complete. All running stacks will be stopped and then restarted. Press okay to continue."
  sudo -v
  set +e
  cdns_stack_name="user1"
  portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  uptimekumaStackID=$(getStackID uptimekuma "$portainerToken")
  startStopStack uptimekuma stop $portainerToken > /dev/null 2>&1
  grep "HOMESERVER_HOST_ISPRIVATE" $CONFIG_FILE > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    HOMESERVER_HOST_ISPRIVATE=$(checkDefaultRouteIPIsPrivateIP)
    sed -i "s|^HOMESERVER_HOST_IP=.*|HOMESERVER_HOST_IP=$HOMESERVER_HOST_IP\nHOMESERVER_HOST_ISPRIVATE=$HOMESERVER_HOST_ISPRIVATE|g" $CONFIG_FILE
  fi
  grep "HOMESERVER_HOST_RANGE" $CONFIG_FILE > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    HOMESERVER_HOST_RANGE=$(getHomeServerPrivateRange)
    sed -i "s|^HOMESERVER_HOST_ISPRIVATE=.*|HOMESERVER_HOST_ISPRIVATE=$HOMESERVER_HOST_ISPRIVATE\nHOMESERVER_HOST_RANGE=$HOMESERVER_HOST_RANGE|g" $CONFIG_FILE
  fi
  set -e

  mailuStackID=$(getStackID mailu "$portainerToken")
  cdnsStackID=$(getStackID clientdns-${cdns_stack_name} "$portainerToken")

  rstackIDs=($(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer $portainerToken" endpointId==1 | jq -r '.[] | select(.Status == 1) | .Id'))
  rstackNames=($(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer $portainerToken" endpointId==1 | jq -r '.[] | select(.Status == 1) | .Name'))
  numItems=$((${#rstackIDs[@]}-1))

  for curID in $(seq 0 $numItems);
  do
    echo "Stopping ${rstackNames[$curID]} (${rstackIDs[$curID]})..."
    startStopStackByID ${rstackIDs[$curID]} stop $portainerToken
    sleep 1
  done

  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml down > /dev/null 2>&1
  set +e
  removeDockerNetworks
  docker network rm cdns-${cdns_stack_name} > /dev/null 2>&1

  set +e
  grep DOCKER_METRICS_PORT $CONFIG_FILE >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    DOCKER_METRICS_PORT=8323
    replace_block="DOCKER_METRICS_PORT=8323\n# Docker Installation Info END"
    sed -i "s|# Docker Installation Info END|$replace_block|g" $CONFIG_FILE
    outputDockerSettings
  fi
  set -e

  echo "Restarting Docker..."
  sudo systemctl restart docker
  sleep 3
  createDockerNetworks
  outputConfigPortainer
  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d > /dev/null 2>&1
  set +e
  total_tries=10
  num_tries=1
  sleep 5
  portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  retVal=$?
  while [ $retVal -ne 0 ] && [ $num_tries -lt $total_tries ]
  do
    echo "Error getting portainer token, retrying ($(($num_tries + 1)) of $total_tries)..."
    sleep 5
    ((num_tries++))
    portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
    retVal=$?
  done
  if [ $retVal -ne 0 ]; then
    echo "Error getting portainer token, exiting..."
    exit 1
  fi

  if ! [ -z $cdnsStackID ]; then
    docker network create --driver=bridge tmpnet > /dev/null 2>&1
    clientdns_subnet=$(getDockerSubnet tmpnet)
    clientdns_subnet_prefix=$(echo $clientdns_subnet | rev | cut -d "." -f2- | rev)
    docker network rm tmpnet >/dev/null
    docker network create -o com.docker.network.bridge.name=brcd-${cdns_stack_name} --driver=bridge --subnet $clientdns_subnet cdns-${cdns_stack_name} > /dev/null 2>&1
  fi

  # Replace Mailu stack
  is_antivirus_commented_out=""
  if [ "$(isServiceDisabled clamav)" = "true" ]; then
    is_antivirus_commented_out="#"
  fi
  cat <<EOFMC > $HOME/mailu-compose.yml
version: '3.5'

services:
  front:
    image: $IMG_MAILU_FRONT
    container_name: $SMTP_HOSTNAME
    hostname: $SMTP_HOSTNAME
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: $SMTP_HOSTNAME
    networks:
      - dock-mailu-ext-net
      - dock-internalmail-net
      - dock-proxy-net
    ports:
      - "25:25"
      - "465:465"
      - "587:587"
      - "110:110"
      - "995:995"
      - "143:143"
      - "993:993"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/mailu/certs:/certs
      - \${HSHQ_SSL_DIR}/mail.crt:/certs/mail.crt:ro
      - \${HSHQ_SSL_DIR}/mail.key:/certs/mail.key:ro
      - \${HSHQ_STACKS_DIR}/mailu/overrides/nginx:/overrides:ro

  resolver:
    image: $IMG_MAILU_UNBOUND
    container_name: mailu-unbound
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      dock-mailu-ext-net:
        ipv4_address: \${SUBNET_PREFIX}.253
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  redis:
    image: $IMG_REDIS
    container_name: mailu-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-mailu-redis:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  admin:
    image: $IMG_MAILU_ADMIN
    container_name: mailu-admin
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-admin
    networks:
      - dock-mailu-ext-net
    depends_on:
      - redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/data:/data
      - \${HSHQ_STACKS_DIR}/mailu/dkim:/dkim

  imap:
    image: $IMG_MAILU_IMAP
    container_name: mailu-imap
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-imap
    networks:
      - dock-mailu-ext-net
    depends_on:
      - front
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/mail:/mail
      - \${HSHQ_STACKS_DIR}/mailu/overrides/dovecot:/overrides:ro

  smtp:
    image: $IMG_MAILU_SMTP
    container_name: mailu-smtp
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-smtp
    networks:
      - dock-mailu-ext-net
    depends_on:
      - front
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/mailqueue:/queue
      - \${HSHQ_STACKS_DIR}/mailu/certs:/certs
      - \${HSHQ_SSL_DIR}/mail.crt:/certs/mail.crt:ro
      - \${HSHQ_SSL_DIR}/mail.key:/certs/mail.key:ro
      - \${HSHQ_STACKS_DIR}/mailu/overrides/postfix:/overrides:ro

  oletools:
    image: $IMG_MAILU_OLETOOLS
    container_name: mailu-oletools
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-int-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  antispam:
    image: $IMG_MAILU_ANTISPAM
    container_name: mailu-antispam
    hostname: antispam
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-antispam
    networks:
      - dock-mailu-ext-net
      - dock-mailu-int-net
      - dock-proxy-net
    dns:
      - \${SUBNET_PREFIX}.253
    depends_on:
      - front
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/filter:/var/lib/rspamd
      - \${HSHQ_STACKS_DIR}/mailu/overrides/rspamd:/etc/rspamd/override.d

$is_antivirus_commented_out  antivirus:
$is_antivirus_commented_out    image: $IMG_MAILU_ANTIVIRUS
$is_antivirus_commented_out    container_name: mailu-antivirus
$is_antivirus_commented_out    restart: unless-stopped
$is_antivirus_commented_out    env_file: stack.env
$is_antivirus_commented_out    security_opt:
$is_antivirus_commented_out      - no-new-privileges:true
$is_antivirus_commented_out    networks:
$is_antivirus_commented_out      - dock-mailu-ext-net
$is_antivirus_commented_out      - dock-proxy-net
$is_antivirus_commented_out    volumes:
$is_antivirus_commented_out      - /etc/localtime:/etc/localtime:ro
$is_antivirus_commented_out      - /etc/timezone:/etc/timezone:ro
$is_antivirus_commented_out      - \${HSHQ_STACKS_DIR}/mailu/filter:/data

  webdav:
    image: $IMG_MAILU_WEBDAV
    container_name: mailu-webdav
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/dav:/data

  fetchmail:
    image: $IMG_MAILU_FETCHMAIL
    container_name: mailu-fetchmail
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/data/fetchmail:/data

  webmail:
    image: $IMG_MAILU_WEBMAIL
    container_name: mailu-webmail
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    depends_on:
      - imap
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/webmail:/data
      - \${HSHQ_STACKS_DIR}/mailu/overrides/roundcube:/overrides:ro

volumes:
  v-mailu-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/mailu/redis

networks:
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-mailu-int-net:
    name: dock-mailu-int
    external: true
  dock-mailu-ext-net:
    name: dock-mailu-ext
    external: true
EOFMC
  sudo cp $HSHQ_STACKS_DIR/portainer/compose/$mailuStackID/stack.env $HOME/mailu.env
  sudo chown $USERNAME:$USERNAME $HOME/mailu.env
  updateGlobalVarsEnvFile $HOME/mailu.env
  sed -i "s|^SUBNET=.*|SUBNET=${NET_MAILU_EXT_SUBNET}|g" $HOME/mailu.env
  sed -i "s|^SUBNET_PREFIX=.*|SUBNET_PREFIX=${NET_MAILU_EXT_SUBNET_PREFIX}|g" $HOME/mailu.env
  echo "{$( jq -Rscjr '{StackFileContent: . }' $HOME/mailu-compose.yml | tail -c +2 | head -c -1 ),\"Env\":$(envToJson $HOME/mailu.env)}" > $HOME/mailu-json.tmp
  http --check-status --ignore-stdin --verify=no --timeout=300 PUT https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/$mailuStackID "Authorization: Bearer $portainerToken" endpointId==1 @$HOME/mailu-json.tmp > /dev/null 2>&1
  rm $HOME/mailu-compose.yml $HOME/mailu.env $HOME/mailu-json.tmp

  if ! [ -z $cdnsStackID ]; then
    # Replace ClientDNS stack
    cat <<EOFGL > $HOME/clientdns-${cdns_stack_name}-compose.yml
version: '3.5'

services:
  clientdns-${cdns_stack_name}-dnsmasq:
    image: $IMG_DNSMASQ
    container_name: clientdns-${cdns_stack_name}-dnsmasq
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      dock-ext-net:
      dock-proxy-net:
      cdns-${cdns_stack_name}-net:
        ipv4_address: \${CLIENTDNS_SUBNET_PREFIX}.253
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/clientdns-${cdns_stack_name}/dnsmasq.conf:/etc/dnsmasq.conf
    environment:
      - HTTP_USER=$CLIENTDNS_USER1_ADMIN_USERNAME
      - HTTP_PASS=$CLIENTDNS_USER1_ADMIN_PASSWORD

  clientdns-${cdns_stack_name}-wireguard:
    image: $IMG_WIREGUARD
    container_name: clientdns-${cdns_stack_name}-wireguard
    hostname: clientdns-${cdns_stack_name}-wireguard
    restart: unless-stopped
    env_file: stack.env
    cap_add:
      - NET_ADMIN
    networks:
      - dock-ext-net
      - cdns-${cdns_stack_name}-net
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/clientdns-${cdns_stack_name}/Corefile:/config/coredns/Corefile:ro
      - \${HSHQ_STACKS_DIR}/clientdns-${cdns_stack_name}/clientdns-${cdns_stack_name}.conf:/config/wg0.conf

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  cdns-${cdns_stack_name}-net:
    name: cdns-${cdns_stack_name}
    external: true

EOFGL

    rm -f $HSHQ_STACKS_DIR/clientdns-${cdns_stack_name}/Corefile
    cat <<EOFCF > $HSHQ_STACKS_DIR/clientdns-${cdns_stack_name}/Corefile
. {
    loop
    reload 15s
    forward . ${clientdns_subnet_prefix}.253
}
EOFCF

    sudo cp $HSHQ_STACKS_DIR/portainer/compose/$cdnsStackID/stack.env $HOME/clientdns-${cdns_stack_name}.env
    sudo chown $USERNAME:$USERNAME $HOME/clientdns-${cdns_stack_name}.env
    updateGlobalVarsEnvFile $HOME/clientdns-${cdns_stack_name}.env
    sed -i "s|^CLIENTDNS_SUBNET_PREFIX=.*|CLIENTDNS_SUBNET_PREFIX=${clientdns_subnet_prefix}|g" $HOME/clientdns-${cdns_stack_name}.env
    echo "{$( jq -Rscjr '{StackFileContent: . }' $HOME/clientdns-${cdns_stack_name}-compose.yml | tail -c +2 | head -c -1 ),\"Env\":$(envToJson $HOME/clientdns-${cdns_stack_name}.env)}" > $HOME/clientdns-${cdns_stack_name}-json.tmp
    http --check-status --ignore-stdin --verify=no --timeout=300 PUT https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/$cdnsStackID "Authorization: Bearer $portainerToken" endpointId==1 @$HOME/clientdns-${cdns_stack_name}-json.tmp > /dev/null 2>&1
    rm $HOME/clientdns-${cdns_stack_name}-compose.yml $HOME/clientdns-${cdns_stack_name}.env $HOME/clientdns-${cdns_stack_name}-json.tmp
  fi

  rstackIDs[$(($numItems+1))]=$uptimekumaStackID
  rstackNames[$(($numItems+1))]=uptimekuma
  numItems=$((${#rstackIDs[@]}-1))
  
  for curID in $(seq 0 $numItems);
  do
    case ${rstackNames[$curID]} in
      mailu|clientdns-${cdns_stack_name})
        continue
      ;;
      *)
        echo "Starting ${rstackNames[$curID]} (${rstackIDs[$curID]})..."
        if sudo test -f $HSHQ_STACKS_DIR/portainer/compose/${rstackIDs[$curID]}/stack.env; then
          sudo cp $HSHQ_STACKS_DIR/portainer/compose/${rstackIDs[$curID]}/stack.env $HOME/${rstackIDs[$curID]}.env
          sudo chown $USERNAME:$USERNAME $HOME/${rstackIDs[$curID]}.env
          updateGlobalVarsEnvFile $HOME/${rstackIDs[$curID]}.env
        fi
        sudo cp $HSHQ_STACKS_DIR/portainer/compose/${rstackIDs[$curID]}/docker-compose.yml $HOME/${rstackIDs[$curID]}.yml
        sudo chown $USERNAME:$USERNAME $HOME/${rstackIDs[$curID]}.yml
      ;;
    esac

    case ${rstackNames[$curID]} in
      caddy-home)
        sed -i "s|$HOMESERVER_HOST_IP|\${HOMESERVER_HOST_IP}|g" $HOME/${rstackIDs[$curID]}.yml
        sed -i "s|^CADDY_HSHQ_PRIVATE_IPS=.*|CADDY_HSHQ_PRIVATE_IPS=\${HOMESERVER_HOST_RANGE} $(getPrivateIPRangesCaddy)|g" $HOME/${rstackIDs[$curID]}.env
      ;;
      jitsi)
        sed -i "s|^DOCKER_HOST_ADDRESS=.*|DOCKER_HOST_ADDRESS=\${HOMESERVER_HOST_IP}|g" $HOME/${rstackIDs[$curID]}.env
        JITSI_ADVERTISE_IPS=$(echo $JITSI_ADVERTISE_IPS | sed "s|$HOMESERVER_HOST_IP||g")
        updateConfigVar JITSI_ADVERTISE_IPS $JITSI_ADVERTISE_IPS
        sed -i "s|^JVB_ADVERTISE_IPS=.*|JVB_ADVERTISE_IPS=\${HOMESERVER_HOST_IP}$JITSI_ADVERTISE_IPS|g" $HOME/${rstackIDs[$curID]}.env
        sed -i '/^CONFIG=/d' $HOME/${rstackIDs[$curID]}.env
      ;;
    esac

    if ! [ -f $HOME/${rstackIDs[$curID]}.env ] || ! [ -s $HOME/${rstackIDs[$curID]}.env ]; then
      echo "TZ=\${TZ}" > $HOME/${rstackIDs[$curID]}.env
    fi
    echo "{$( jq -Rscjr '{StackFileContent: . }' $HOME/${rstackIDs[$curID]}.yml | tail -c +2 | head -c -1 ),\"Env\":$(envToJson $HOME/${rstackIDs[$curID]}.env)}" > $HOME/${rstackIDs[$curID]}-json.tmp
    num_tries=1
    while [ $num_tries -lt $total_tries ]
    do
      http --check-status --ignore-stdin --verify=no --timeout=300 PUT https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/${rstackIDs[$curID]} "Authorization: Bearer $portainerToken" endpointId==1 @$HOME/${rstackIDs[$curID]}-json.tmp > /dev/null
      if [ $? -eq 0 ]; then
        break
      else
        echo "Failed update, retrying ($(($num_tries + 1)) of $total_tries)..."
        sleep 5
        portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
      fi
      ((num_tries++))
    done
    rm -f $HOME/${rstackIDs[$curID]}.yml $HOME/${rstackIDs[$curID]}.env $HOME/${rstackIDs[$curID]}-json.tmp
    sleep 5
  done
  docker container restart ofelia
  set -e
}

function version23Update()
{
  outputBootScripts
  deleteFromRootCron "restartHomeAssistantStack.sh"
  appendToRoonCron "@reboot bash $HSHQ_SCRIPTS_DIR/root/restartHomeAssistantStack.sh >/dev/null 2>&1"
  updateSysctl true
}

function version24Update()
{
  checkAddServiceToConfig "Collabora" "COLLABORA_ADMIN_USERNAME=,COLLABORA_ADMIN_PASSWORD="
  checkAddServiceToConfig "Invidious" "INVIDIOUS_DATABASE_NAME=,INVIDIOUS_DATABASE_USER=,INVIDIOUS_DATABASE_USER_PASSWORD="
  checkAddServiceToConfig "Mealie" "MEALIE_ADMIN_USERNAME=,MEALIE_ADMIN_EMAIL_ADDRESS=,MEALIE_ADMIN_PASSWORD=,MEALIE_DATABASE_NAME=,MEALIE_DATABASE_USER=,MEALIE_DATABASE_USER_PASSWORD="
  checkAddServiceToConfig "Remotely" "REMOTELY_INIT_ENV=false,REMOTELY_ADMIN_USERNAME=,REMOTELY_ADMIN_EMAIL_ADDRESS=,REMOTELY_ADMIN_PASSWORD="
  checkAddServiceToConfig "Calibre" "CALIBRE_WEB_INIT_ENV=false,CALIBRE_WEB_ADMIN_USERNAME=,CALIBRE_WEB_ADMIN_EMAIL_ADDRESS=,CALIBRE_WEB_ADMIN_PASSWORD="
  checkAddServiceToConfig "Linkwarden" "LINKWARDEN_DATABASE_NAME=,LINKWARDEN_DATABASE_USER=,LINKWARDEN_DATABASE_USER_PASSWORD=,LINKWARDEN_NEXTAUTH_SECRET="
  checkAddServiceToConfig "FreshRSS" "FRESHRSS_INIT_ENV=false,FRESHRSS_ADMIN_USERNAME=,FRESHRSS_ADMIN_PASSWORD=,FRESHRSS_ADMIN_EMAIL_ADDRESS=,FRESHRSS_DATABASE_NAME=,FRESHRSS_DATABASE_USER=,FRESHRSS_DATABASE_USER_PASSWORD="
  checkAddServiceToConfig "Bar Assistant" "BARASSISTANT_REDIS_PASSWORD=,BARASSISTANT_MEILISEARCH_KEY="
  checkAddServiceToConfig "Keila" "KEILA_INIT_ENV=false,KEILA_ADMIN_USERNAME=,KEILA_ADMIN_EMAIL_ADDRESS=,KEILA_ADMIN_PASSWORD=,KEILA_DATABASE_NAME=,KEILA_DATABASE_USER=,KEILA_DATABASE_USER_PASSWORD="
  checkAddServiceToConfig "Wallabag" "WALLABAG_INIT_ENV=false,WALLABAG_ADMIN_USERNAME=,WALLABAG_ADMIN_EMAIL_ADDRESS=,WALLABAG_ADMIN_PASSWORD=,WALLABAG_DATABASE_NAME=,WALLABAG_DATABASE_USER=,WALLABAG_DATABASE_USER_PASSWORD=,WALLABAG_ENV_SECRET=,WALLABAG_REDIS_PASSWORD="
  checkAddVarsToServiceConfig "Mealie" "MEALIE_DATABASE_NAME=,MEALIE_DATABASE_USER=,MEALIE_DATABASE_USER_PASSWORD="
  checkAddVarsToServiceConfig "Remotely" "REMOTELY_INIT_ENV=false"
  checkAddVarsToServiceConfig "Calibre" "CALIBRE_WEB_INIT_ENV=false"
  checkAddVarsToServiceConfig "FreshRSS" "FRESHRSS_INIT_ENV=false"
  checkAddVarsToServiceConfig "Keila" "KEILA_INIT_ENV=false"
  initServicesCredentials
}

function version25Update()
{
  sudo systemctl stop systemd-resolved > /dev/null 2>&1
  sudo systemctl disable systemd-resolved > /dev/null 2>&1
  sudo rm -f /etc/resolv.conf > /dev/null 2>&1
  sudo tee /etc/resolv.conf >/dev/null <<EOFR
nameserver 127.0.0.1
EOFR
  sudo tee /etc/systemd/resolved.conf >/dev/null <<EOFR
[Resolve]
#DNS=127.0.0.1
#FallbackDNS=
#Domains=
#LLMNR=no
#MulticastDNS=no
#DNSSEC=no
#DNSOverTLS=no
#Cache=no-negative
#DNSStubListener=no
#ReadEtcHosts=yes
EOFR

}

function version26Update()
{
  outputHABandaidScript
  deleteFromRootCron "restartHomeAssistantStack.sh"
  appendToRoonCron "@reboot bash $HSHQ_SCRIPTS_DIR/root/restartHomeAssistantStack.sh"
}

function version27Update()
{
  cat <<EOFRO > $HOME/custom.inc.php
<?php
\$config['show_images'] = 3;
\$config['timezone'] = '$TZ';
?>
EOFRO
  sudo chown root:root $HOME/custom.inc.php
  sudo mv $HOME/custom.inc.php $HSHQ_STACKS_DIR/mailu/overrides/roundcube/custom.inc.php
  docker container restart mailu-webmail
}

function version29Update()
{
  # This should have been addressed in the version 23 update,
  # but the metrics port was not correctly added to the config.
  # Add Docker metrics port to config
  set +e
  grep DOCKER_METRICS_PORT $CONFIG_FILE >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    DOCKER_METRICS_PORT=8323
    replace_block="DOCKER_METRICS_PORT=8323\n# Docker Installation Info END"
    sed -i "s|# Docker Installation Info END|$replace_block|g" $CONFIG_FILE
    outputDockerSettings
  fi
  set -e
  
  outputBootScripts
  setVersionOnStacks

  echo -e "\n\n========================================"
  echo -e "        Stack Versioning Results"
  echo -e "========================================"
  if [ -z "$strSetVersionReport" ]; then
    echo -e "All stacks were correctly versioned."
  else
    echo -e "$strSetVersionReport"
    echo -e "\n========================================"
    echo -e "\nCheck your email($EMAIL_ADMIN_EMAIL_ADDRESS) for a copy of these results."
    sendEmail -s "Stack Versioning Report" -b "$strSetVersionReport" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>" -t $EMAIL_ADMIN_EMAIL_ADDRESS
  fi
}

function version30Update()
{
  # Sidekiq should be mounted on same volume. Bitnami configured it incorrectly. (https://github.com/bitnami/containers/blob/main/bitnami/discourse/docker-compose.yml)
  discourseStackID=$(getStackID discourse)
  if ! [ -z "$discourseStackID" ]; then
    sudo sed -i "s|v-sidekiq-data:\/bitnami\/discourse|v-discourse-data:\/bitnami\/discourse|" $HSHQ_STACKS_DIR/portainer/compose/$discourseStackID/docker-compose.yml
  fi
}

function version31Update()
{
  checkAddServiceToConfig "Jupyter" "JUPYTER_INIT_ENV=false,JUPYTER_ADMIN_PASSWORD="
  addToDisabledServices jupyter
}

function version32Update()
{
  checkAddServiceToConfig "Paperless" "PAPERLESS_INIT_ENV=false,PAPERLESS_SECRET_KEY=,PAPERLESS_REDIS_PASSWORD=,PAPERLESS_ADMIN_USERNAME=,PAPERLESS_ADMIN_EMAIL_ADDRESS=,PAPERLESS_ADMIN_PASSWORD=,PAPERLESS_DATABASE_NAME=,PAPERLESS_DATABASE_USER=,PAPERLESS_DATABASE_USER_PASSWORD="
  addToDisabledServices paperless
}

function version34Update()
{
  sudo sed -i "/timestamp_timeout/a Defaults passwd_tries=$SUDO_MAX_RETRIES" /etc/sudoers
  checkAddServiceToConfig "SpeedtestTrackerLocal" "SPEEDTEST_TRACKER_LOCAL_INIT_ENV=false,SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME=,SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS=,SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD=,SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME=,SPEEDTEST_TRACKER_LOCAL_DATABASE_USER=,SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD="
  addToDisabledServices speedtest-tracker-local
  checkAddServiceToConfig "SpeedtestTrackerVPN" "SPEEDTEST_TRACKER_VPN_INIT_ENV=false,SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME=,SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS=,SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD=,SPEEDTEST_TRACKER_VPN_DATABASE_NAME=,SPEEDTEST_TRACKER_VPN_DATABASE_USER=,SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD="
  addToDisabledServices speedtest-tracker-vpn
}

function version35Update()
{
  updateMOTD
}

function version37Update()
{
  sed -i "s|Relay Server|RelayServer|g" $CONFIG_FILE
  checkAddServiceToConfig "Change Detection" "CHANGEDETECTION_INIT_ENV=false,CHANGEDETECTION_ADMIN_PASSWORD="
  CHANGEDETECTION_INIT_ENV=false
  checkAddServiceToConfig "Script-server" "SCRIPTSERVER_INIT_ENV=false,SCRIPTSERVER_LOCALHOST_PORT=8008,SCRIPTSERVER_ADMIN_USERNAME=,SCRIPTSERVER_ADMIN_PASSWORD="
  SCRIPTSERVER_INIT_ENV=false
  SCRIPTSERVER_LOCALHOST_PORT=8008
  sudo DEBIAN_FRONTEND=noninteractive apt update > /dev/null 2>&1
  echo "Installing python, please wait..."
  sudo DEBIAN_FRONTEND=noninteractive apt install -y python3 > /dev/null 2>&1
  echo "Installing python-pip, please wait..."
  sudo DEBIAN_FRONTEND=noninteractive apt install -y python3-pip > /dev/null 2>&1
  echo "Installing unzip, please wait..."
  sudo DEBIAN_FRONTEND=noninteractive apt install -y unzip > /dev/null 2>&1
  getUpdateAssets
  set +e
  outputBootScripts
  grep $SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN $HSHQ_STACKS_DIR/authelia/config/configuration.yml > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    sed -i "/$SUB_ADGUARD.$HOMESERVER_DOMAIN/a\        - $SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN" $HSHQ_STACKS_DIR/authelia/config/configuration.yml
    docker container restart authelia > /dev/null 2>&1
  fi
  if ! [ -d $HSHQ_STACKS_DIR/script-server ]; then
    installStackByName script-server
  fi
  mkdir -p $HSHQ_WIREGUARD_DIR/requestkeys
  checkFixPortainerEnv
}

function version38Update()
{
  sudo -v
  sqlite3 $HSHQ_DB "create table if not exists exposedomains(Domain text primary key,BaseDomain text not null);"
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    sendRSExposeScripts
  fi
  outputAllScriptServerScripts

  # Fixes internal mailing issue
  startStopStack mailu stop
  cat <<EOFRS > $HOME/mailu-groups.conf
symbols {
  "R_DKIM_ALLOW" {
    weight = -22.0;
  }
}
EOFRS
  chmod 664 $HOME/mailu-groups.conf
  sudo chown 101:101 $HOME/mailu-groups.conf
  sudo mv $HOME/mailu-groups.conf $HSHQ_STACKS_DIR/mailu/overrides/rspamd/groups.conf
  # Also need to add host IP to Postfix and RSpamd (this should have been done in v27)
  set +e
  sudo grep "$HOMESERVER_HOST_IP" $HSHQ_STACKS_DIR/mailu/overrides/postfix/postfix.cf > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    sudo sed -i "/^mynetworks/ s/$/ ${HOMESERVER_HOST_IP}\/32/" $HSHQ_STACKS_DIR/mailu/overrides/postfix/postfix.cf
  fi
  sudo grep "$HOMESERVER_HOST_IP" $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_whitelist.map > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "${HOMESERVER_HOST_IP}/32" | sudo tee -a $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_whitelist.map > /dev/null 2>&1
  fi
  sleep 3
  startStopStack mailu start
  sleep 5
  set -e
  checkAddServiceToConfig "Huginn" "HUGINN_INIT_ENV=false,HUGINN_APP_SECRET_TOKEN=,HUGINN_ADMIN_USERNAME=,HUGINN_ADMIN_EMAIL_ADDRESS=,HUGINN_ADMIN_PASSWORD=,HUGINN_DATABASE_NAME=,HUGINN_DATABASE_USER=,HUGINN_DATABASE_USER_PASSWORD="
  HUGINN_INIT_ENV=false
}

function version39Update()
{
  set +e
  clearAllScriptServerScripts
  outputAllScriptServerScripts
  set -e
  sqlite3 $HSHQ_DB "create table newconnections(ID integer not null primary key autoincrement,Name text,EmailAddress text,ConnectionType text,NetworkType text,PublicKey text,PresharedKey text,IPAddress text,IsInternet boolean,InterfaceName text,EndpointHostname text,EndpointIP text default null,LastUpdated datetime);"
  sqlite3 $HSHQ_DB "insert into newconnections(ID,Name,EmailAddress,ConnectionType,NetworkType,PublicKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,EndpointIP,LastUpdated) select ID,Name,EmailAddress,ConnectionType,NetworkType,PublicKey,IPAddress,IsInternet,InterfaceName,EndpointHostname,EndpointIP,LastUpdated from connections;"
  sqlite3 $HSHQ_DB "drop table connections;"
  sqlite3 $HSHQ_DB "ALTER TABLE newconnections RENAME TO connections;"
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    sendRSExposeScripts
    loadSSHKey
    keylist=($(ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sqlite3 $RELAYSERVER_HSHQ_STACKS_DIR/wireguard/wgportal/wg_portal.db \"select public_key,preshared_key from peers;\""
    unloadSSHKey))
    for curKeys in "${keylist[@]}"
    do
      pub_key=$(echo "$curKeys" | cut -d "|" -f1)
      pre_key=$(echo "$curKeys" | cut -d "|" -f2)
      sqlite3 $HSHQ_DB "update connections set PresharedKey='$pre_key' where PublicKey='$pub_key';"
    done
    sqlite3 $HSHQ_DB "update connections set PresharedKey='$RELAYSERVER_WG_SV_PRESHAREDKEY' where Name='WireGuardServer';"
  fi
  hs_vpn=($(sqlite3 $HSHQ_DB "select ID,InterfaceName from connections where NetworkType='other' and ConnectionType='homeserver_vpn';"))
  for curVPN in "${hs_vpn[@]}"
  do
    cur_id=$(echo "$curVPN" | cut -d "|" -f1)
    cur_iface=$(echo "$curVPN" | cut -d "|" -f2)
    pre_key=$(sudo grep "^PresharedKey" $HSHQ_WIREGUARD_DIR/vpn/${cur_iface}.conf | cut -d " " -f3)
    sqlite3 $HSHQ_DB "update connections set PresharedKey='$pre_key' where ID='$cur_id';"
  done
  hs_int=($(sqlite3 $HSHQ_DB "select ID,InterfaceName from connections where NetworkType='other' and ConnectionType='homeserver_internet';"))
  for curInt in "${hs_int[@]}"
  do
    cur_id=$(echo "$curInt" | cut -d "|" -f1)
    cur_iface=$(echo "$curInt" | cut -d "|" -f2)
    pre_key=$(sudo grep "^PresharedKey" $HSHQ_WIREGUARD_DIR/internet/${cur_iface}.conf | cut -d " " -f3)
    sqlite3 $HSHQ_DB "update connections set PresharedKey='$pre_key' where ID='$cur_id';"
  done
  sqlite3 $HSHQ_DB "update connections set IsInternet=true where IsInternet='true';"
  sqlite3 $HSHQ_DB "update connections set IsInternet=false where IsInternet='false';"
  chmod 600 $HSHQ_DB
}

function version40Update()
{
  set +e
  clearAllScriptServerScripts
  outputAllScriptServerScripts
  set -e
}

function version41Update()
{
  set +e
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo -e "\n\n\nThe RelayServer requires an update which requires root privileges.\nThis update will also reboot the RelayServer.\nYou will be prompted for you sudo password on the RelayServer.\n"
    read -p "Press enter to continue."
    loadSSHKey
    set +e
    rs_default_iface=$(ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "ip route | grep -e \"^default\"" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1)

    tee $HOME/wgupdown.sh >/dev/null <<EOFPU
#!/bin/bash
COMMAND=\$1
RELAYSERVER_HSHQ_STACKS_DIR=$RELAYSERVER_HSHQ_STACKS_DIR
set +e

default_iface=$rs_default_iface

function main()
{
  shift
  shift
  case "\$COMMAND" in
    up) up ;;
    down) down ;;
  esac
}

function up()
{
  ipset create inetusers hash:net
  iplist=\$(cat \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset)
  for curip in \$iplist
  do
    if [ -z \$curip ]; then continue; fi
    ipset add inetusers \$curip
  done
  ipset create alldevices hash:net
  alliplist=(\$(sqlite3 \$RELAYSERVER_HSHQ_STACKS_DIR/wireguard/wgportal/wg_portal.db "select ips_str from peers;"))
  for cur_ip in "\${alliplist[@]}"
  do
    if [ -z \$cur_ip ]; then continue; fi
    ipset add alldevices \$cur_ip
  done
  iptables -A FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j ACCEPT
  iptables -A FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -A POSTROUTING -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j MASQUERADE
  iptables -A FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o \$default_iface -m set --match-set inetusers src -j ACCEPT
  iptables -A FORWARD -i \$default_iface -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -A POSTROUTING -o \$default_iface -m set --match-set inetusers src -j MASQUERADE
}

function down()
{
  iptables -D FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j ACCEPT
  iptables -D FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -D POSTROUTING -o $RELAYSERVER_WG_INTERFACE_NAME -d $RELAYSERVER_WG_VPN_SUBNET -m set --match-set alldevices src -j MASQUERADE
  iptables -D FORWARD -i $RELAYSERVER_WG_INTERFACE_NAME -o \$default_iface -m set --match-set inetusers src -j ACCEPT
  iptables -D FORWARD -i \$default_iface -o $RELAYSERVER_WG_INTERFACE_NAME -m state --state RELATED,ESTABLISHED -j ACCEPT
  iptables -t nat -D POSTROUTING -o \$default_iface -m set --match-set inetusers -j MASQUERADE
  ipset destroy inetusers
  ipset destroy alldevices
}

main "\$@"
EOFPU

    tee $HOME/addPeer.sh >/dev/null <<EOFWA
#!/bin/bash

name=\$1
email=\$2
publicKey=\$3
presharedKey=\$4
ipAddress=\$5
isInet=\$6
isInVPNSubnet=\$7
auth=\$8

uuid=\$(uuidgen | sed 's|-||g')
jsonbody="{\"UID\": \"\$uuid\", \"DeviceName\": \"$RELAYSERVER_WG_INTERFACE_NAME\", \"DeviceType\": \"client\", \"Identifier\": \"\$name\", \"Email\": \"\$email\", \"IgnoreGlobalSettings\": true, \"PublicKey\": \"\$publicKey\", \"PresharedKey\": \"\$presharedKey\", \"Endpoint\": \"$RELAYSERVER_SUB_WG.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_WG_PORT\", \"PersistentKeepalive\": 0, \"IPsStr\": \"\${ipAddress}/32\", \"Mtu\": $RELAYSERVER_CLIENT_DEFAULT_MTU}"
curl -s -X 'POST' 'http://127.0.0.1:$RELAYSERVER_WG_PORTAL_PORT/api/v1/backend/peers?DeviceName=$RELAYSERVER_WG_INTERFACE_NAME' -H 'accept: application/json' -H "Authorization: Basic \$auth" -H 'Content-Type: application/json' -d "\$jsonbody" >/dev/null
if [ \$? -ne 0 ]; then
  echo "There was a problem adding this client..."
  exit 1
fi

ipset add alldevices \${ipAddress}/32

if ! [ "\$isInVPNSubnet" = "true" ]; then
  route add \${ipAddress}/32 $RELAYSERVER_WG_INTERFACE_NAME
fi

if [ "\$isInet" = "true" ]; then
  ipset add inetusers \${ipAddress}/32
  echo \${ipAddress}/32 | tee -a $RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset >/dev/null
fi


EOFWA

    tee $HOME/removePeer.sh >/dev/null <<EOFWA
#!/bin/bash
set +e
publicKey=\$1
ipAddress=\$2
isInet=\$3
isInVPNSubnet=\$4
auth=\$5

function main()
{
  curl -s -X 'DELETE' "http://127.0.0.1:$RELAYSERVER_WG_PORTAL_PORT/api/v1/backend/peer?PublicKey=\$(urlEncode \$publicKey)" -H 'accept: application/json' -H "Authorization: Basic \$auth" -H 'Content-Type: application/json' >/dev/null
  if [ \$? -ne 0 ]; then
    echo "There was a problem removing this client..."
  fi
  ipset del alldevices \${ipAddress}/32
  if ! [ "\$isInVPNSubnet" = "true" ]; then
    route del \${ipAddress}/32 $RELAYSERVER_WG_INTERFACE_NAME
  fi
  if [ "\$isInet" = "true" ]; then
    ipset del inetusers \${ipAddress}/32
    sed -i '/\${ipAddress}/d' $RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/inetusers.ipset
  fi
}

function urlEncode()
{
  strLength="\${#1}"
  for (( i = 0; i < strLength; i++ )); do
    c="\${1:i:1}"
    case \$c in
      [a-zA-Z0-9.~_-]) printf "\$c" ;;
      *) printf '%%%02X' "'\$c" ;;
    esac
  done
}

function urlDecode()
{
  url_encoded="\${1//+/ }"
  printf '%b' "\${url_encoded//%/\\x}"
}

main "\$@"
EOFWA

    tee $HOME/v41.sh >/dev/null <<EOFWA
#!/bin/bash

chmod 500 $RELAYSERVER_HSHQ_SCRIPTS_DIR/wgupdown.sh
chmod 500 $RELAYSERVER_HSHQ_SCRIPTS_DIR/addPeer.sh
chmod 500 $RELAYSERVER_HSHQ_SCRIPTS_DIR/removePeer.sh
chown root:root $RELAYSERVER_HSHQ_SCRIPTS_DIR/wgupdown.sh
chown root:root $RELAYSERVER_HSHQ_SCRIPTS_DIR/addPeer.sh
chown root:root $RELAYSERVER_HSHQ_SCRIPTS_DIR/removePeer.sh
mv $RELAYSERVER_HSHQ_SCRIPTS_DIR/wgupdown.sh $RELAYSERVER_HSHQ_STACKS_DIR/wireguard/server/wgupdown.sh
mv $RELAYSERVER_HSHQ_SCRIPTS_DIR/addPeer.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/addPeer.sh
mv $RELAYSERVER_HSHQ_SCRIPTS_DIR/removePeer.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/userasroot/removePeer.sh
rm -f \$0
reboot
EOFWA

    scp -P $RELAYSERVER_SSH_PORT $HOME/wgupdown.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/ > /dev/null 2>&1
    scp -P $RELAYSERVER_SSH_PORT $HOME/addPeer.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/ > /dev/null 2>&1
    scp -P $RELAYSERVER_SSH_PORT $HOME/removePeer.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/ > /dev/null 2>&1
    scp -P $RELAYSERVER_SSH_PORT $HOME/v41.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/ > /dev/null 2>&1
    ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo bash $RELAYSERVER_HSHQ_SCRIPTS_DIR/v41.sh"
    unloadSSHKey
    rm -f $HOME/wgupdown.sh
    rm -f $HOME/addPeer.sh
    rm -f $HOME/removePeer.sh
    rm -f $HOME/v41.sh
  fi
  set -e
  checkAddServiceToConfig "Coturn" "COTURN_STATIC_SECRET="
  outputBootScripts
  fixAutheliaConfig
}

function version43Update()
{
  installHostNTPServer
  outputIPTablesScripts true
}

function version44Update()
{
  if ! [ -z "$JITSI_ADVERTISE_IPS" ] && [ "${JITSI_ADVERTISE_IPS:0:1}" = "," ]; then
    JITSI_ADVERTISE_IPS="${JITSI_ADVERTISE_IPS:1}"
    updateConfigVar JITSI_ADVERTISE_IPS $JITSI_ADVERTISE_IPS
  fi
  set +e
  clearAllScriptServerScripts
  outputAllScriptServerScripts
  set -e
}

function version46Update()
{
  if [ -d $HSHQ_STACKS_DIR/script-server ]; then
    if [ -d $HSHQ_STACKS_DIR/hshqmanager ]; then
      set +e
      sudo rm -f /etc/systemd/system/runHSHQManager.service
      sudo rm -f $HSHQ_SCRIPTS_DIR/root/runHSHQManager.service
      rm -f $HSHQ_SSL_DIR/hshqmanager*
      sudo rm -fr $HSHQ_STACKS_DIR/hshqmanager
    fi
    HSHQ_VERSION=46
    updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  else
    echo -e "\n\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
    echo -e "This is a 2-part update, as it is renaming HSHQ Manager to Script-server."
    echo -e "If you are using HSHQ Manager to perform this update, then you will lose connection"
    echo -e "as a result. Monitor your $EMAIL_ADMIN_EMAIL_ADDRESS account for the new credentials."
    echo -e "As soon as you recieve this email, then log into https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN"
    echo -e "with the new creditials and re-run the Perform Update HSHQ function."
    echo -e "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
    is_continue=""
    while ! [ "$is_continue" = "ok" ]
    do
      read -p "Enter 'ok' to continue: " is_continue
    done
    set -e
    getUpdateAssets
    set +e
    sed -i "/SVCD_HSHQMANAGER/d" $CONFIG_FILE
    sed -i "s/HSHQMANAGER/SCRIPTSERVER/g" $CONFIG_FILE
    sed -i "s/HSHQ Manager/Script-server/g" $CONFIG_FILE
    source $CONFIG_FILE
    SCRIPTSERVER_INIT_ENV=false
    SCRIPTSERVER_ADMIN_USERNAME=""
    updateConfigVar SCRIPTSERVER_ADMIN_USERNAME $SCRIPTSERVER_ADMIN_USERNAME
    sed -i "s/hshqmanager/script-server/g" $HSHQ_STACKS_DIR/authelia/config/configuration.yml
    sed -i "s/hshqmanager/script-server/g" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Home
    sed -i "s/hshqmanager/script-server/g" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Primary
    sed -i "s/hshqmanager/script-server/g" $HSHQ_STACKS_DIR/caddy-common/snippets/svcs.snip
    cp $HSHQ_ASSETS_DIR/images/script-server.png $HSHQ_STACKS_DIR/heimdall/config/www/icons/
    sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set title='Script-server', icon='icons/script-server.png', url='https://script-server.$HOMESERVER_DOMAIN' where title='HSHQ Manager';"
    sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "Update monitor set name='Script-server', url='https://script-server.$HOMESERVER_DOMAIN' where name='HSHQ Manager';"
    docker container restart authelia > /dev/null 2>&1
    installStackByName script-server
    closeHSHQScript
    sudo systemctl disable runHSHQManager
    sudo systemctl stop runHSHQManager
    echo -e "\n\nPlease restart the hshq.sh script to complete the update.\n"
    exit
  fi
}

function version47Update()
{
  set +e
  outputAllScriptServerScripts
  set -e
}

function version48Update()
{
  set +e
  grep HOMEASSISTANT_CONFIGURATOR_USER $CONFIG_FILE >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    checkAddVarsToServiceConfig "HomeAssistant" "HOMEASSISTANT_CONFIGURATOR_USER=,HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD="
    initServicesCredentials
    # Email to user
    sendEmail -s "HomeAssistant Configurator Login Info" -b "HomeAssistant Configurator Username: $HOMEASSISTANT_CONFIGURATOR_USER\nHomeAssistant Configurator Password: $HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
  fi
  if [ -f $HSHQ_STACKS_DIR/homeassistant/configurator/settings.conf ]; then
    grep "USERNAME" $HSHQ_STACKS_DIR/homeassistant/configurator/settings.conf >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      hc_pw_hash=$(echo -n $HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD | openssl dgst -sha256 | cut -d"=" -f2 | xargs)
      sed -i "/BASEPATH.*/a\    \"HASS_API\": \"\",\n    \"USERNAME\": \"$HOMEASSISTANT_CONFIGURATOR_USER\",\n    \"PASSWORD\": \"{sha256}$hc_pw_hash\"," $HSHQ_STACKS_DIR/homeassistant/configurator/settings.conf
      disableSvcUptimeKuma "https://$SUB_HOMEASSISTANT_CONFIGURATOR.$HOMESERVER_DOMAIN" true
    fi
    echo "Restarting HomeAssistant stack (if running)..."
    restartStackIfRunning homeassistant 10
  fi
}

function version50Update()
{
  set +e
  outputAllScriptServerScripts
  set -e
}

function version51Update()
{
  set +e
  checkAddServiceToConfig "Piped" "PIPED_DATABASE_NAME=,PIPED_DATABASE_USER=,PIPED_DATABASE_USER_PASSWORD="
  set -e
}

function version52Update()
{
  set +e
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo -e "\n\n\nThe RelayServer requires an update which requires root privileges.\nYou will be prompted for you sudo password on the RelayServer.\n"
    is_continue=""
    while ! [ "$is_continue" = "ok" ]
    do
      read -p "Enter 'ok' to continue: " is_continue
    done
    loadSSHKey
    set +e
    rs_default_iface=$(ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "ip route | grep -e \"^default\"" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1)
    tee $HOME/88-hshq.conf >/dev/null <<EOFSC
# Some minor tuning
kernel.panic = 10
fs.file-max = 10000000
fs.nr_open = 10000000
fs.inotify.max_user_instances = 8192
fs.inotify.max_user_watches = 524288
net.core.rmem_max = 4194304
net.core.wmem_max = 4194304
net.core.somaxconn = 65536
net.netfilter.nf_conntrack_max = 10485760
net.netfilter.nf_conntrack_tcp_loose = 0
net.netfilter.nf_conntrack_tcp_timeout_established = 1800
net.netfilter.nf_conntrack_tcp_timeout_close = 10
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 10
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 20
net.netfilter.nf_conntrack_tcp_timeout_last_ack = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_recv = 20
net.netfilter.nf_conntrack_tcp_timeout_syn_sent = 20
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 10
net.ipv4.route.flush = 1
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_rfc1337 = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_max_syn_backlog = 4096
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 5
net.ipv4.tcp_timestamps = 1
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv4.ip_forward = 1
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv4.conf.all.rp_filter = 2
net.ipv4.conf.default.rp_filter = 2
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
EOFSC
    chmod 644 $HOME/88-hshq.conf

    tee $HOME/10-setupDockerUserIPTables.sh >/dev/null <<EOFSC
#!/bin/bash
  set +e

  default_iface=\$(ip route | grep -e "^default" | awk -F'dev ' '{print \$2}' | xargs | cut -d" " -f1)
  SSH_PORT=$RELAYSERVER_SSH_PORT
  WG_CON_PORT=$RELAYSERVER_WG_PORT
  WG_PORTAL_PORT=$RELAYSERVER_WG_PORTAL_PORT
  DOCK_EXT_NET=$NET_EXTERNAL_SUBNET
  ports_list=53,587,$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT,22000,21027

  portsArr=(\$(echo \$ports_list | tr "," "\n"))
  for cur_port in "\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
    iptables -D DOCKER-USER -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j DROP 2> /dev/null
    iptables -I DOCKER-USER -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j DROP
    iptables -I DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT
  done

  # See https://gist.github.com/mattia-beta/bd5b1c68e3d51db933181d8a3dc0ba64?permalink_comment_id=3728715#gistcomment-3728715
  iptables -t raw -F PREROUTING
  iptables -t raw -F chain-icmp > /dev/null 2>&1
  iptables -t raw -F chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -X chain-icmp > /dev/null 2>&1
  iptables -t raw -X chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -N chain-icmp > /dev/null 2>&1
  iptables -t raw -N chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -A PREROUTING -s 192.0.0.0/24,192.0.2.0/24,198.51.100.0/24,203.0.113.0/24 -j DROP
  iptables -t raw -A PREROUTING -d 192.0.0.0/24,192.0.2.0/24,198.51.100.0/24,203.0.113.0/24 -j DROP
  iptables -t raw -A PREROUTING -d 0.0.0.0/8 -j DROP
  iptables -t raw -A PREROUTING -s 0.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,169.254.0.0/16,224.0.0.0/4,198.18.0.0/15,100.64.0.0/10,192.88.99.0/24 -i \$default_iface -j DROP
  iptables -t raw -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
  iptables -t raw -A PREROUTING -p udp -m udp -m multiport --ports 0 -j DROP
  iptables -t raw -A PREROUTING -p icmp -j chain-icmp
  iptables -t raw -A PREROUTING -p tcp -m tcp -j chain-bad_tcp
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-reply -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type network-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type host-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type protocol-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type port-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type fragmentation-needed -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-request -i \$default_iface -j DROP
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-request -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type time-exceeded -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type parameter-problem -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type any -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,ACK FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,URG URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,FIN FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,PSH PSH -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL ALL -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL NONE -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp -m tcp -m multiport --ports 0 -j DROP
  iptables -t raw -P PREROUTING ACCEPT

  # Limit connections per source IP
  iptables -C INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset > /dev/null 2>&1 || iptables -A INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset

  # Allow established connections
  iptables -C INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

  # Drop invalid packets
  iptables -C INPUT -m conntrack --ctstate INVALID -j DROP > /dev/null 2>&1 || iptables -A INPUT -m conntrack --ctstate INVALID -j DROP

  # Drop fragments
  iptables -C INPUT -f -j DROP > /dev/null 2>&1 || iptables -A INPUT -f -j DROP

  # Drop SYN packets with suspicious MSS value
  iptables -C INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP > /dev/null 2>&1 || iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

  # Configure loopback
  iptables -C INPUT -i lo -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -i lo -j ACCEPT
  iptables -C INPUT ! -i lo -s 127.0.0.0/8 -j DROP > /dev/null 2>&1 || iptables -A INPUT ! -i lo -s 127.0.0.0/8 -j DROP

  # Allow ICMP
  iptables -C INPUT -p icmp -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p icmp -j ACCEPT

  # Allow SSH
  iptables -C INPUT -p tcp -m tcp --dport \$SSH_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp --dport \$SSH_PORT -j ACCEPT

  # Allow WireGuard
  iptables -C INPUT -p udp --dport \$WG_CON_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p udp --dport \$WG_CON_PORT -j ACCEPT

  # Special case for WG Portal from reverse proxy
  iptables -C INPUT -p tcp -m tcp -i brdockext -s \$DOCK_EXT_NET --dport \$WG_PORTAL_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp -i brdockext -s \$DOCK_EXT_NET --dport \$WG_PORTAL_PORT -j ACCEPT

  # Policy drop for input and forward
  iptables -P INPUT DROP
  iptables -P FORWARD DROP

  # Policy drop all ipv6 traffic
  ip6tables -P INPUT DROP
  ip6tables -P FORWARD DROP
  ip6tables -P OUTPUT DROP

  sysctl --system > /dev/null 2>&1

EOFSC
    chmod 744 $HOME/10-setupDockerUserIPTables.sh

    tee $HOME/clearDockerUserIPTables.sh >/dev/null <<EOFSC
#!/bin/bash
  set +e

  SSH_PORT=$RELAYSERVER_SSH_PORT
  WG_CON_PORT=$RELAYSERVER_WG_PORT
  WG_PORTAL_PORT=$RELAYSERVER_WG_PORTAL_PORT
  DOCK_EXT_NET=$NET_EXTERNAL_SUBNET
  ports_list=53,587,$RELAYSERVER_PORTAINER_LOCAL_HTTPS_PORT,22000,21027

  portsArr=(\$(echo \$ports_list | tr "," "\n"))
  for cur_port in "\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
    iptables -D DOCKER-USER -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j DROP 2> /dev/null
  done

  iptables -D INPUT -f -j DROP > /dev/null 2>&1
  iptables -D INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP > /dev/null 2>&1
  iptables -D INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset > /dev/null 2>&1
  iptables -D INPUT -m conntrack --ctstate INVALID -j DROP > /dev/null 2>&1
  iptables -D INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -i lo -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT ! -i lo -s 127.0.0.0/8 -j DROP > /dev/null 2>&1
  iptables -D INPUT -p icmp -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -p tcp -m tcp --dport \$SSH_PORT -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -p udp --dport \$WG_CON_PORT -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -p tcp -m tcp -i brdockext -s \$DOCK_EXT_NET --dport \$WG_PORTAL_PORT -j ACCEPT > /dev/null 2>&1

  iptables -t raw -F PREROUTING
  iptables -t raw -F chain-icmp > /dev/null 2>&1
  iptables -t raw -F chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -X chain-icmp > /dev/null 2>&1
  iptables -t raw -X chain-bad_tcp > /dev/null 2>&1

  iptables -P INPUT ACCEPT
  ip6tables -P INPUT ACCEPT
  ip6tables -P FORWARD ACCEPT
  ip6tables -P OUTPUT ACCEPT

EOFSC
    chmod 744 $HOME/clearDockerUserIPTables.sh

    scp -P $RELAYSERVER_SSH_PORT $HOME/88-hshq.conf $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:~/ > /dev/null 2>&1
    scp -P $RELAYSERVER_SSH_PORT $HOME/10-setupDockerUserIPTables.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:~/ > /dev/null 2>&1
    scp -P $RELAYSERVER_SSH_PORT $HOME/clearDockerUserIPTables.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:~/ > /dev/null 2>&1
    ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo chown root:root ~/88-hshq.conf; sudo chown root:root ~/10-setupDockerUserIPTables.sh; sudo chown root:root ~/clearDockerUserIPTables.sh; sudo mv ~/88-hshq.conf /etc/sysctl.d/88-hshq.conf; sudo mv ~/10-setupDockerUserIPTables.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh; sudo rm -f $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/setupDockerUserIPTables.sh; sudo mv ~/clearDockerUserIPTables.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh; sudo apt-mark hold docker-ce; sudo apt-mark hold docker-ce-cli; sudo reboot"
    unloadSSHKey
    rm -f $HOME/88-hshq.conf
    rm -f $HOME/10-setupDockerUserIPTables.sh
    rm -f $HOME/clearDockerUserIPTables.sh
  fi
  set -e

  updateSysctl false
  outputIPTablesScripts false
  # See https://www.portainer.io/blog/portainer-and-docker-26
  sudo apt-mark hold docker-ce
  sudo apt-mark hold docker-ce-cli
}

function version53Update()
{
  set +e
  outputAllScriptServerScripts
  outputMaintenanceScripts
  outputDockerWireGuardCaddyScript
  deleteFromRootCron "restartHomeAssistantStack.sh"
  sudo rm -f $HSHQ_SCRIPTS_DIR/root/restartHomeAssistantStack.sh
  sudo rm -f $HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh
  sudo tee $HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh >/dev/null <<EOFBS
#!/bin/bash
set +e

chmod 500 $HSHQ_SCRIPTS_DIR/boot/bootscripts/*.sh
run-parts --regex '.*sh\$' $HSHQ_SCRIPTS_DIR/boot/bootscripts
EOFBS
  sudo chmod 744 $HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh
  if [ -f $HSHQ_SCRIPTS_DIR/boot/bootscripts/setupDockerUserIPTables.sh ]; then
    sudo mv $HSHQ_SCRIPTS_DIR/boot/bootscripts/setupDockerUserIPTables.sh $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
  fi
  if [ -f $HSHQ_SCRIPTS_DIR/boot/bootscripts/restartWG.sh ]; then
    sudo mv $HSHQ_SCRIPTS_DIR/boot/bootscripts/restartWG.sh $HSHQ_SCRIPTS_DIR/boot/bootscripts/20-restartWG.sh
  fi
  if [ -f $HSHQ_SCRIPTS_DIR/boot/bootscripts/dockerWireGuardCaddyFix.sh ]; then
    sudo mv $HSHQ_SCRIPTS_DIR/boot/bootscripts/dockerWireGuardCaddyFix.sh $HSHQ_SCRIPTS_DIR/boot/bootscripts/50-dockerWireGuardCaddyFix.sh
  fi
  sudo rm -f $HSHQ_SCRIPTS_DIR/boot/bootscripts/restartHomeAssistantStack.sh
  outputHABandaidScript
  outputStackListsScriptServer
  updateSysctl false
  if [ -f $HSHQ_STACKS_DIR/coturn/turnserver.conf ]; then
    grep 14100 $HSHQ_STACKS_DIR/coturn/turnserver.conf > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      # Reinstall coturn with new ports
      echo -e "\n\n\nCoturn must be reinstalled due to a change in the port range.\nThis will result in the reverse proxy (Caddy) being restarted,\nand this web page will desync as a result. Ensure to refresh \nthe web page when this occurs, in order to continue the update."
      is_continue=""
      while ! [ "$is_continue" = "ok" ]
      do
        read -p "Enter 'ok' to continue: " is_continue
      done
      deleteListOfStacks true coturn
      installListOfServices coturn
    fi
  fi
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo -e "\n\n\nThe RelayServer requires an update which requires root privileges.\nThis update will also reboot the RelayServer.\nYou will be prompted for you sudo password on the RelayServer.\n"
    is_continue=""
    while ! [ "$is_continue" = "ok" ]
    do
      read -p "Enter 'ok' to continue: " is_continue
    done
    loadSSHKey
    set +e
    tee $HOME/onBootRoot.sh >/dev/null <<EOFBS
#!/bin/bash
set +e

chmod 744 $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/*.sh
run-parts --regex '.*sh\$' $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts
EOFBS
    chmod 744 $HOME/onBootRoot.sh
    scp -P $RELAYSERVER_SSH_PORT $HOME/onBootRoot.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:~/ > /dev/null 2>&1
    ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo chown root:root ~/onBootRoot.sh; sudo mv ~/onBootRoot.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh; if [ -f $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/setupDockerUserIPTables.sh ]; then sudo mv $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/setupDockerUserIPTables.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh; fi; sleep 5; sudo reboot"
    unloadSSHKey
    rm -f $HOME/onBootRoot.sh
    sed -i "s/setupDockerUserIPTables.sh/10-setupDockerUserIPTables.sh/g" $HSHQ_RELAYSERVER_DIR/scripts/transfer.sh
  fi

  HSHQ_VERSION=53
  updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  echo -e "\n\n\nThis update requires a reboot of the HomeServer.\n"
  is_continue=""
  while ! [ "$is_continue" = "ok" ]
  do
    read -p "Enter 'ok' to continue: " is_continue
  done
  performExitFunctions false
  sudo reboot
}

function version54Update()
{
  set +e
  echo -e "\n\n\nThis update requires restarting Script-server, which will exit the\nscript and halt any subsequent updates. Please ensure to re-run the\nupdate process after it has completed.\n"
  is_continue=""
  while ! [ "$is_continue" = "ok" ]
  do
    read -p "Enter 'ok' to continue: " is_continue
  done
  outputAllScriptServerScripts
  outputIPTablesScripts false
  default_iface=$(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1)
  sudo iptables -C INPUT -p tcp -m tcp -i $default_iface -s $HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1 || sudo iptables -A INPUT -p tcp -m tcp -i $default_iface -s $HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT
  generateCert script-server "script-server,host.docker.internal" $HOMESERVER_HOST_IP
  insertEnableSvcHeimdall script-server "$FMLNAME_SCRIPTSERVER (IP)" $USERTYPE_SCRIPTSERVER "https://$HOMESERVER_HOST_IP:$SCRIPTSERVER_LOCALHOST_PORT" "script-server.png" true
  HSHQ_VERSION=54
  updateConfigVar HSHQ_VERSION $HSHQ_VERSION
  performExitFunctions
  sudo systemctl restart runScriptServer
  exit
}

function version55Update()
{
  set +e
  outputWireGuardScripts
  grep "HOMENET_ADDITIONAL_IPS" $CONFIG_FILE > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    sed -i "s|^HOMESERVER_HOST_RANGE=.*|HOMESERVER_HOST_RANGE=$HOMESERVER_HOST_RANGE\nHOMENET_ADDITIONAL_IPS=|g" $CONFIG_FILE
  fi
  if [ "$HOMESERVER_HOST_ISPRIVATE" = "false" ] && ! [ -z $CONNECTING_IP ]; then
    addHomeNetIP ${CONNECTING_IP}/32 false
  fi
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    addHomeNetIP ${RELAYSERVER_SERVER_IP}/32 false
  fi
  if [ "$HOMESERVER_HOST_ISPRIVATE" = "false" ]; then
    # Add special rules when HomeServer is on non-private network, i.e. cloud-server, etc.
    outputIPTablesScripts false
    if ! [ -z $HOMENET_ADDITIONAL_IPS ]; then
      default_iface=$(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1)
      sudo iptables -C INPUT -p tcp -m tcp -i $default_iface -s $HOMENET_ADDITIONAL_IPS --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1 || sudo iptables -A INPUT -p tcp -m tcp -i $default_iface -s $HOMENET_ADDITIONAL_IPS --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT
    fi
  fi
  outputAllScriptServerScripts
  set -e
}

function version56Update()
{
  performSuggestedSecUpdates
  sudo systemctl restart sshd
}

function version59Update()
{
  # This helps with sending internal emails within a primary network.
  cat <<EOFRS > $HOME/mailu-groups.conf
group "dkim" {
  symbols = {
    "R_DKIM_ALLOW" = {
      weight = -6.0;
    }
  }
}

EOFRS
  chmod 664 $HOME/mailu-groups.conf
  sudo chown 101:101 $HOME/mailu-groups.conf
  sudo mv $HOME/mailu-groups.conf $HSHQ_STACKS_DIR/mailu/overrides/rspamd/groups.conf
  docker container restart mailu-antispam > /dev/null 2>&1
  outputAllScriptServerScripts
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    echo -e "\n\n\nThe RelayServer requires an update which requires root privileges.\nYou will be prompted for you sudo password on the RelayServer.\n"
    is_continue=""
    while ! [ "$is_continue" = "ok" ]
    do
      read -p "Enter 'ok' to continue: " is_continue
    done
    loadSSHKey
    set +e
    cat <<EOFHC > $HOME/groups.conf
group "policies" {
  symbols = {
    "DMARC_POLICY_REJECT" = {
      weight = 100.0;
    }
  }
}

EOFHC
    chmod 644 $HOME/groups.conf
    scp -P $RELAYSERVER_SSH_PORT $HOME/groups.conf $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:~/ > /dev/null 2>&1
    ssh -p $RELAYSERVER_SSH_PORT -t $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "sudo chown root:root ~/groups.conf; sudo mv ~/groups.conf $RELAYSERVER_HSHQ_STACKS_DIR/mail-relay/rspamd/conf/groups.conf; docker container restart mail-relay-rspamd > /dev/null 2>&1"
    unloadSSHKey
    rm -f $HOME/groups.conf
  fi
  set +e
  cp $HSHQ_ASSETS_DIR/images/hslogo.png $HSHQ_ASSETS_DIR/images/${HOMESERVER_DOMAIN}.png
}

function version61Update()
{
  set +e
  outputAllScriptServerScripts
  set -e
}

function sendRSExposeScripts()
{
  cat <<EOFCD > $HOME/addLECertDomains.sh
#!/bin/bash

subdomlist=\$1
RELAYSERVER_HSHQ_STACKS_DIR=$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  set +e
  leCertsArr=(\$(echo "\$subdomlist" | tr "," "\n"))
  for subdom in "\${leCertsArr[@]}"
  do
    if [ -z "\$subdom" ]; then continue; fi
    grep "# LE certs path \$subdom BEGIN" \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile >/dev/null
    if [ \$? -ne 0 ]; then
      strBlock=""
      strBlock=\$strBlock"# LE certs path \$subdom BEGIN\n"
      strBlock=\$strBlock"http://\$subdom {\n"
      strBlock=\$strBlock"  handle /.well-known/acme-challenge/* {\n"
      strBlock=\$strBlock"    reverse_proxy \$subdom {\n"
      strBlock=\$strBlock"      import sn-resolver\n"
      strBlock=\$strBlock"    }\n"
      strBlock=\$strBlock"  }\n"
      strBlock=\$strBlock"}\n"
      strBlock=\$strBlock"# LE certs path \$subdom END\n"
      echo -e "\$strBlock" >> \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
    fi
  done
  docker container restart caddy
}

main "\$@"
EOFCD
  chmod 0500 $HOME/addLECertDomains.sh
  cat <<EOFEX > $HOME/removeLECertDomains.sh
#!/bin/bash
set +e

RELAYSERVER_HSHQ_STACKS_DIR=$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  subdomlist="\$1"
  leCertsArr=(\$(echo "\$subdomlist" | tr "," "\n"))
  for subdom in "\${leCertsArr[@]}"
  do
    if [ -z "\$subdom" ]; then continue; fi
    sed -i "/# LE certs path \$subdom BEGIN/,/# LE certs path \$subdom END/d" \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  done
  cat -s \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile > \$HOME/tmpcadfile
  mv \$HOME/tmpcadfile \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  docker container restart caddy
}

main "\$@"
EOFEX
  chmod 500 $HOME/removeLECertDomains.sh
  cat <<EOFEX > $HOME/addExposeDomains.sh
#!/bin/bash

RELAYSERVER_HSHQ_STACKS_DIR=$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{
  subdomlist="\$1"
  exposeArr=(\$(echo "\$subdomlist" | tr "," "\n"))
  for subdom in "\${exposeArr[@]}"
  do
    if [ -z "\$subdom" ]; then continue; fi
    grep "# Expose domain \$subdom BEGIN" \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile >/dev/null
    if [ \$? -ne 0 ]; then
      strBlock=""
      strBlock=\$strBlock"# Expose domain \$subdom BEGIN\n"
      strBlock=\$strBlock"https://\$subdom {\n"
      strBlock=\$strBlock"  import safe-header\n"
      strBlock=\$strBlock"  reverse_proxy https://\$subdom {\n"
      strBlock=\$strBlock"    import sn-resolver\n"
      strBlock=\$strBlock"  }\n"
      strBlock=\$strBlock"}\n"
      strBlock=\$strBlock"# Expose domain \$subdom END\n"
      echo -e "\$strBlock" >> \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
    fi
  done
  docker container restart caddy
}
main "\$@"
EOFEX
  chmod 500 $HOME/addExposeDomains.sh
  cat <<EOFEX > $HOME/removeExposeDomains.sh
#!/bin/bash
set +e

RELAYSERVER_HSHQ_STACKS_DIR=$RELAYSERVER_HSHQ_STACKS_DIR

function main()
{

  subdomlist="\$1"
  exposeArr=(\$(echo "\$subdomlist" | tr "," "\n"))
  for subdom in "\${exposeArr[@]}"
  do
    if [ -z "\$subdom" ]; then continue; fi
    sed -i "/# Expose domain \$subdom BEGIN/,/# Expose domain \$subdom END/d" \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  done
  cat -s \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile > \$HOME/tmpcadfile
  mv \$HOME/tmpcadfile \$RELAYSERVER_HSHQ_STACKS_DIR/caddy/Caddyfile
  docker container restart caddy
}

main "\$@"
EOFEX
  chmod 500 $HOME/removeExposeDomains.sh

  loadSSHKey
  set -e
  ssh -p $RELAYSERVER_SSH_PORT $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN "rm -f $RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addLECertDomains.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeLECertDomains.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/user/addExposeDomains.sh $RELAYSERVER_HSHQ_SCRIPTS_DIR/user/removeExposeDomains.sh"
  scp -P $RELAYSERVER_SSH_PORT $HOME/addLECertDomains.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/ > /dev/null 2>&1
  scp -P $RELAYSERVER_SSH_PORT $HOME/removeLECertDomains.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/ > /dev/null 2>&1
  scp -P $RELAYSERVER_SSH_PORT $HOME/addExposeDomains.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/ > /dev/null 2>&1
  scp -P $RELAYSERVER_SSH_PORT $HOME/removeExposeDomains.sh $RELAYSERVER_REMOTE_USERNAME@$RELAYSERVER_SUB_RELAYSERVER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN:$RELAYSERVER_HSHQ_SCRIPTS_DIR/user/ > /dev/null 2>&1
  unloadSSHKey
  rm -f $HOME/addLECertDomains.sh
  rm -f $HOME/removeLECertDomains.sh
  rm -f $HOME/addExposeDomains.sh
  rm -f $HOME/removeExposeDomains.sh
}

function checkFixPortainerEnv()
{
  # A bug was introduced in the version 22 update.
  set +e
  grep "HSHQ_RELAYSERVER_DIR" $HSHQ_STACKS_DIR/portainer/portainer.env > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml down > /dev/null 2>&1
    outputConfigPortainer
    docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d > /dev/null 2>&1
    startStopStack duplicati stop
    startStopStack syncthing stop
    sleep 5
    startStopStack duplicati start
    startStopStack syncthing start
  fi
}

function fixAutheliaConfig()
{
  inputfile=$HSHQ_STACKS_DIR/authelia/config/configuration.yml
  set +e
  grep "# Authelia bypass BEGIN" $inputfile > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    return
  fi
  outres=""
  OIFS=$IFS
  IFS=$(echo -en "\n\r")
  readarray -t inputArr < $inputfile
  curnum=0
  while [ $curnum -lt ${#inputArr[@]} ]
  do
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      outres="${outres}${inputArr[$curnum]}\n"
      if [[ "${inputArr[$curnum]}" =~ access_control ]]; then break; fi
      curnum=$((curnum+1))
    done
    curnum=$((curnum+1))
  
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      outres="${outres}${inputArr[$curnum]}\n"
      if [[ "${inputArr[$curnum]}" =~ domain: ]]; then break; fi
      curnum=$((curnum+1))
    done
    curnum=$((curnum+1))
    outres="${outres}# Authelia bypass BEGIN\n"
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      if [[ "${inputArr[$curnum]}" =~ policy: ]]; then break; fi
      outres="${outres}${inputArr[$curnum]}\n"
      curnum=$((curnum+1))
    done
    outres="${outres}# Authelia bypass END\n"
    outres="${outres}${inputArr[$curnum]}\n"
    curnum=$((curnum+1))
  
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      outres="${outres}${inputArr[$curnum]}\n"
      if [[ "${inputArr[$curnum]}" =~ domain: ]]; then break; fi
      curnum=$((curnum+1))
    done
    curnum=$((curnum+1))
    outres="${outres}# Authelia basicusers BEGIN\n"
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      if [[ "${inputArr[$curnum]}" =~ policy: ]]; then break; fi
      outres="${outres}${inputArr[$curnum]}\n"
      curnum=$((curnum+1))
    done
    outres="${outres}# Authelia basicusers END\n"
    outres="${outres}${inputArr[$curnum]}\n"
    curnum=$((curnum+1))
  
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      outres="${outres}${inputArr[$curnum]}\n"
      if [[ "${inputArr[$curnum]}" =~ domain: ]]; then break; fi
      curnum=$((curnum+1))
    done
    curnum=$((curnum+1))
    outres="${outres}# Authelia primaryusers BEGIN\n"
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      if [[ "${inputArr[$curnum]}" =~ policy: ]]; then break; fi
      outres="${outres}${inputArr[$curnum]}\n"
      curnum=$((curnum+1))
    done
    outres="${outres}# Authelia primaryusers END\n"
    outres="${outres}${inputArr[$curnum]}\n"
    curnum=$((curnum+1))
  
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      outres="${outres}${inputArr[$curnum]}\n"
      if [[ "${inputArr[$curnum]}" =~ domain: ]]; then break; fi
      curnum=$((curnum+1))
    done
    curnum=$((curnum+1))
    outres="${outres}# Authelia admins BEGIN\n"
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      if [[ "${inputArr[$curnum]}" =~ policy: ]]; then break; fi
      outres="${outres}${inputArr[$curnum]}\n"
      curnum=$((curnum+1))
    done
    outres="${outres}# Authelia admins END\n"
    outres="${outres}${inputArr[$curnum]}\n"
    curnum=$((curnum+1))
  
    while [ $curnum -lt ${#inputArr[@]} ]
    do
      outres="${outres}${inputArr[$curnum]}\n"
      curnum=$((curnum+1))
    done
  
  done
  IFS=$OIFS
  
  echo -e "$outres" > $inputfile
  docker container restart authelia > /dev/null 2>&1
  docker ps | grep codeserver > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    docker container restart codeserver > /dev/null 2>&1
  fi
}

function checkImageList()
{
  imageList=$1
  composeFile="$2"
  imageListArr=($(echo $imageList | tr "," "\n"))
  for curImg in "${imageListArr[@]}"
  do
    if ! [ -z "$curImg" ]; then
      sudo grep "$curImg$" "$composeFile" > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "false"
        return
      fi
    fi
  done
  echo "true"
}

function insertVersionNumber()
{
  stackName=$1
  versionNum="$2"
  imageList=$3
  composeFile="$4"
  check_images="$(checkImageList $imageList $composeFile)"
  if [ "$check_images" = "false" ]; then
    echo "false"
    return
  fi
  if ! [ "$(checkStackHSHQManaged $(sudo sed -n 1p $composeFile))" = "true" ]; then
    sudo sed -i "1 i$STACK_VERSION_PREFIX $stackName $versionNum" $composeFile
  else
    sudo sed -i "1s|.*|$STACK_VERSION_PREFIX $stackName $versionNum|" $composeFile
  fi
  echo "true"
}

function setVersionOnStacks()
{
  # This function modifies the variable strSetVersionReport to report the results to the caller
  # The caller is responsible for doing something with it.
  set +e
  sudo -v
  strSetVersionReport=""
  stackListArr=($(echo ${HSHQ_REQUIRED_STACKS}","${HSHQ_OPTIONAL_STACKS} | tr "," "\n"))
  portainerToken="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  for curStack in "${stackListArr[@]}"
  do
    echo "Versioning ${curStack} stack..."
    stackID=$(getStackID $curStack "$portainerToken")
    if ! [ "$curStack" = "portainer" ] && [ -z $stackID ]; then
      continue
    fi
    curCompose=$HSHQ_STACKS_DIR/portainer/compose/$stackID/docker-compose.yml
    case "$curStack" in
      portainer)
        curVersion=v1
        curImageList=portainer/portainer-ce:2.19.3-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $HSHQ_STACKS_DIR/portainer/docker-compose.yml)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=portainer/portainer-ce:2.19.4-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $HSHQ_STACKS_DIR/portainer/docker-compose.yml)" = "true" ]; then continue;fi
        strSetVersionReport="${strSetVersionReport}\n $curStack stack version not found. All images from this stack:\n$(sudo grep image: $HSHQ_STACKS_DIR/portainer/docker-compose.yml)"
        continue
      ;;
      adguard)
        curVersion=v1
        curImageList=adguard/adguardhome:v0.107.41
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=adguard/adguardhome:v0.107.43
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      sysutils)
        curVersion=v1
        curImageList=grafana/grafana-oss:9.5.8,prom/prometheus:v2.46.0,prom/node-exporter:v1.6.1,influxdb:2.7.1-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=grafana/grafana-oss:9.5.15,prom/prometheus:v2.48.1,prom/node-exporter:v1.7.0,influxdb:2.7.4-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=grafana/grafana-oss:10.3.1,prom/prometheus:v2.49.1,prom/node-exporter:v1.7.0,influxdb:2.7.5-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      openldap)
        curVersion=v1
        curImageList=osixia/openldap:1.5.0,osixia/phpldapadmin:stable,wheelybird/ldap-user-manager:v1.11
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      mailu)
        curVersion=v1
        curImageList=bitnami/redis:7.0.5,ghcr.io/mailu/admin:2.0,ghcr.io/mailu/rspamd:2.0,ghcr.io/mailu/clamav:2.0,ghcr.io/mailu/fetchmail:2.0,ghcr.io/mailu/nginx:2.0,ghcr.io/mailu/dovecot:2.0,ghcr.io/mailu/oletools:2.0,ghcr.io/mailu/postfix:2.0,ghcr.io/mailu/unbound:2.0,ghcr.io/mailu/radicale:2.0,ghcr.io/mailu/webmail:2.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=bitnami/redis:7.0.5,ghcr.io/mailu/admin:2.0.37,ghcr.io/mailu/rspamd:2.0.37,ghcr.io/mailu/clamav:2.0.37,ghcr.io/mailu/fetchmail:2.0.37,ghcr.io/mailu/nginx:2.0.37,ghcr.io/mailu/dovecot:2.0.37,ghcr.io/mailu/oletools:2.0.37,ghcr.io/mailu/postfix:2.0.37,ghcr.io/mailu/unbound:2.0.37,ghcr.io/mailu/radicale:2.0.37,ghcr.io/mailu/webmail:2.0.37
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      wazuh)
        curVersion=v1
        curImageList=wazuh/wazuh-manager:4.6.0,wazuh/wazuh-indexer:4.6.0,wazuh/wazuh-dashboard:4.6.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=wazuh/wazuh-manager:4.7.1,wazuh/wazuh-indexer:4.7.1,wazuh/wazuh-dashboard:4.7.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=wazuh/wazuh-manager:4.7.2,wazuh/wazuh-indexer:4.7.2,wazuh/wazuh-dashboard:4.7.2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      collabora)
        curVersion=v1
        curImageList=collabora/code:23.05.5.3.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=collabora/code:23.05.6.4.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=collabora/code:23.05.8.2.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      nextcloud)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,nextcloud:27.1.3-fpm-alpine,nextcloud/aio-imaginary:latest,nginx:1.23.2-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,nextcloud:27.1.5-fpm-alpine,nextcloud/aio-imaginary:latest,nginx:1.25.3-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,nextcloud:27.1.6-fpm-alpine,nextcloud/aio-imaginary:latest,nginx:1.25.3-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      jitsi)
        curVersion=v1
        curImageList=jitsi/jicofo:stable-8719,jitsi/jvb:stable-8719,jitsi/prosody:stable-8719,jitsi/web:stable-8719
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=jitsi/jicofo:stable-9111,jitsi/jvb:stable-9111,jitsi/prosody:stable-9111,jitsi/web:stable-9111
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=jitsi/jicofo:stable-9220,jitsi/jvb:stable-9220,jitsi/prosody:stable-9220,jitsi/web:stable-9220
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      matrix)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,matrixdotorg/synapse:v1.90.0,bitnami/redis:7.0.5,vectorim/element-web:v1.11.40
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,matrixdotorg/synapse:v1.98.0,bitnami/redis:7.0.5,vectorim/element-web:v1.11.52
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,matrixdotorg/synapse:v1.100.0,bitnami/redis:7.0.5,vectorim/element-web:v1.11.57
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      wikijs)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,requarks/wiki:2.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      duplicati)
        curVersion=v1
        curImageList=linuxserver/duplicati:2.0.7
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      mastodon)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,tootsuite/mastodon:v4.1.6,nginx:1.23.2-alpine,elasticsearch:8.8.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,tootsuite/mastodon:v4.2.3,nginx:1.25.3-alpine,elasticsearch:8.11.3
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,tootsuite/mastodon:v4.2.3,nginx:1.25.3-alpine,elasticsearch:8.12.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      dozzle)
        curVersion=v1
        curImageList=amir20/dozzle:v4.10.26
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=amir20/dozzle:v5.8.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=amir20/dozzle:v6.0.8
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v4
        curImageList=amir20/dozzle:v6.1.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      searxng)
        curVersion=v1
        curImageList=searxng/searxng:2023.8.19-018b0a932
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=searxng/searxng:2023.12.29-27e26b3d6
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      jellyfin)
        curVersion=v1
        curImageList=jellyfin/jellyfin:10.8.10
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=jellyfin/jellyfin:10.8.13
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      filebrowser)
        curVersion=v1
        curImageList=filebrowser/filebrowser:v2.24.2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=filebrowser/filebrowser:v2.26.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=filebrowser/filebrowser:v2.27.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      photoprism)
        curVersion=v1
        curImageList=mariadb:10.7.3,photoprism/photoprism:220901-bullseye
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      guacamole)
        curVersion=v1
        curImageList=guacamole/guacd:1.5.3,guacamole/guacamole:1.5.3
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=guacamole/guacd:1.5.4,guacamole/guacamole:1.5.4
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      authelia)
        curVersion=v1
        curImageList=authelia/authelia:4.37.5,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      wordpress)
        curVersion=v1
        curImageList=mariadb:10.7.3,wordpress:php8.2-apache
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=mariadb:10.7.3,wordpress:php8.3-apache
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      ghost)
        curVersion=v1
        curImageList=mariadb:10.7.3,ghost:5.59.1-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=mariadb:10.7.3,ghost:5.75.2-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=mariadb:10.7.3,ghost:5.78.0-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      peertube)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,chocobozzz/peertube:v5.2.0-bullseye,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,chocobozzz/peertube:v6.0.2-bookworm,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      homeassistant)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2023.8,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2024.1.3,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2024.1.5,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v4
        curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2024.1.6,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      gitlab)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,gitlab/gitlab-ce:16.2.4-ce.0,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,gitlab/gitlab-ce:16.7.0-ce.0,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,gitlab/gitlab-ce:16.8.1-ce.0,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      vaultwarden)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,vaultwarden/server:1.29.1-alpine,thegeeklab/vaultwarden-ldap:0.6.2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,vaultwarden/server:1.30.1-alpine,thegeeklab/vaultwarden-ldap:0.6.2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,vaultwarden/server:1.30.2-alpine,thegeeklab/vaultwarden-ldap:0.6.2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      discourse)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,bitnami/discourse:3.0.6,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,bitnami/discourse:3.1.3,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,bitnami/discourse:3.1.4,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      syncthing)
        curVersion=v1
        curImageList=syncthing/syncthing:1.23.7
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=syncthing/syncthing:1.27.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=syncthing/syncthing:1.27.2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      codeserver)
        curVersion=v1
        curImageList=codercom/code-server:4.16.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=codercom/code-server:4.20.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=codercom/code-server:4.20.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      shlink)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,shlinkio/shlink:3.6.3,shlinkio/shlink-web-client:3.10.2,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,shlinkio/shlink:3.7.2,shlinkio/shlink-web-client:3.10.2,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,shlinkio/shlink:3.7.3,shlinkio/shlink-web-client:4.0.0,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      firefly)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,fireflyiii/core:version-6.0.20,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,fireflyiii/core:version-6.1.1,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,fireflyiii/core:version-6.1.7,bitnami/redis:7.0.5
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      excalidraw)
        curVersion=v1
        curImageList=excalidraw/excalidraw-room,kiliandeca/excalidraw-storage-backend,kiliandeca/excalidraw
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      drawio)
        curVersion=v1
        curImageList=jgraph/drawio:21.0.2,jgraph/plantuml-server,jgraph/export-server
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=jgraph/drawio:23.1.0,jgraph/plantuml-server,jgraph/export-server
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      invidious)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,quay.io/invidious/invidious
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      ittools)
        curVersion=v1
        curImageList=ghcr.io/corentinth/it-tools:latest
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      gitea)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,gitea/gitea:1.20.3
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,gitea/gitea:1.21.3
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,gitea/gitea:1.21.4
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      mealie)
        curVersion=v1
        curImageList=hkotel/mealie:v0.5.6
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,ghcr.io/mealie-recipes/mealie:v1.0.0-RC2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=postgres:15.0-bullseye,ghcr.io/mealie-recipes/mealie:v1.1.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      kasm)
        curVersion=v1
        curImageList=lscr.io/linuxserver/kasm:1.13.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=lscr.io/linuxserver/kasm:1.14.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      ntfy)
        curVersion=v1
        curImageList=binwiederhier/ntfy:v2.7.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=binwiederhier/ntfy:v2.8.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      remotely)
        curVersion=v1
        curImageList=immybot/remotely:69
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      calibre)
        curVersion=v1
        curImageList=linuxserver/calibre:7.3.0,linuxserver/calibre-web:0.6.21
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=linuxserver/calibre:7.4.0,linuxserver/calibre-web:0.6.21
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      netdata)
        curVersion=v1
        curImageList=netdata/netdata:v1.44.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      linkwarden)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,ghcr.io/linkwarden/linkwarden:v2.4.8
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      stirlingpdf)
        curVersion=v1
        curImageList=frooodle/s-pdf:0.19.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=frooodle/s-pdf:0.20.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      bar-assistant)
        curVersion=v1
        curImageList=barassistant/server:v3,getmeili/meilisearch:v1.4,bitnami/redis:7.0.5,barassistant/salt-rim:v2,nginx:1.25.3-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=barassistant/server:v3,getmeili/meilisearch:v1.6,bitnami/redis:7.0.5,barassistant/salt-rim:v2,nginx:1.25.3-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      freshrss)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,freshrss/freshrss:1.23.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      keila)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,pentacent/keila:0.13.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=postgres:15.0-bullseye,pentacent/keila:0.14.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      wallabag)
        curVersion=v1
        curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,wallabag/wallabag:2.6.8
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      heimdall)
        curVersion=v1
        curImageList=linuxserver/heimdall:2.4.13
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      ofelia)
        curVersion=v1
        curImageList=mcuadros/ofelia:v0.3.7
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=mcuadros/ofelia:v0.3.9
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      sqlpad)
        curVersion=v1
        curImageList=sqlpad/sqlpad:7.1.2
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=sqlpad/sqlpad:7.2.0
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v3
        curImageList=sqlpad/sqlpad:7.3.1
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
      uptimekuma)
        curVersion=v1
        curImageList=louislam/uptime-kuma:1.23.0-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
        curVersion=v2
        curImageList=louislam/uptime-kuma:1.23.11-alpine
        if [ "$(insertVersionNumber $curStack $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
      ;;
    esac
    strSetVersionReport="${strSetVersionReport}\n $curStack stack version not found. All images from this stack:\n$(sudo grep image: $curCompose)"
  done
  # Special case for Caddy
  qry=$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer $portainerToken" endpointId==1)
  caddy_stack_ids=($(echo $qry | jq '.[] | select (.Name | startswith("caddy-")) | .Id'))
  caddy_stack_names=($(echo $qry | jq -r '.[] | select (.Name | startswith("caddy-")) | .Name'))
  i=-1
  for curStackID in "${caddy_stack_ids[@]}"
  do
    i=$((i+1))
    echo "Versioning ${caddy_stack_names[i]} stack..."
    curCompose=$HSHQ_STACKS_DIR/portainer/compose/$curStackID/docker-compose.yml
    curVersion=v1
    curImageList=caddy:2.7.4
    if [ "$(insertVersionNumber ${caddy_stack_names[i]} $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
    curVersion=v2
    curImageList=caddy:2.7.6
    if [ "$(insertVersionNumber ${caddy_stack_names[i]} $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
    strSetVersionReport="${strSetVersionReport}\n caddy stack version not found. All images from this stack:\n$(sudo grep image: $curCompose)"
  done
  # Special case for ClientDNS
  clientdns_stack_ids=($(echo $qry | jq '.[] | select (.Name | startswith("clientdns-")) | .Id'))
  clientdns_stack_names=($(echo $qry | jq -r '.[] | select (.Name | startswith("clientdns-")) | .Name'))
  i=-1
  for curStackID in "${clientdns_stack_ids[@]}"
  do
    i=$((i+1))
    echo "Versioning ${clientdns_stack_names[i]} stack..."
    curCompose=$HSHQ_STACKS_DIR/portainer/compose/$curStackID/docker-compose.yml
    curVersion=v1
    curImageList=jpillora/dnsmasq:1.1,linuxserver/wireguard:1.0.20210914
    if [ "$(insertVersionNumber ${clientdns_stack_names[i]} $curVersion $curImageList $curCompose)" = "true" ]; then continue;fi
    strSetVersionReport="${strSetVersionReport}\n clientdns stack version not found. All images from this stack:\n$(sudo grep image: $curCompose)"
  done
}

function installHostNTPServer()
{
  if [[ "$(isProgramInstalled ntpq)" = "false" ]]; then
    echo "Installing ntp server, please wait..."
    sudo apt update > /dev/null 2>&1
    sudo DEBIAN_FRONTEND=noninteractive apt install ntp -y > /dev/null 2>&1
  fi
  set +e
  grep "127.127.1.0" /etc/ntp.conf > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "server  127.127.1.0" | sudo tee -a /etc/ntp.conf >/dev/null
    echo "fudge   127.127.1.0 stratum 10" | sudo tee -a /etc/ntp.conf >/dev/null
  fi
  sudo systemctl enable ntp > /dev/null 2>&1
  sudo systemctl restart ntp > /dev/null 2>&1
}

function checkAddServiceToConfig()
{
  service_name="$1"
  variable_list=$2
  set +e
  grep "# $service_name (Service Details)" $CONFIG_FILE > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    replace_block="# $service_name (Service Details) BEGIN\n"
    varListArr=($(echo $variable_list | tr "," "\n"))
    for curVar in "${varListArr[@]}"
    do
      replace_block=$replace_block"${curVar}\n"
    done
    replace_block=$replace_block"# $service_name (Service Details) END\n\n# Service Details END"
    sed -i "s|# Service Details END|$replace_block|g" $CONFIG_FILE
  fi
  set -e
}

function checkAddVarsToServiceConfig()
{
  service_name="$1"
  variable_list=$2
  set +e
  varListArr=($(echo $variable_list | tr "," "\n"))
  for curVar in "${varListArr[@]}"
  do
    curVarCheck=$(echo $curVar | cut -d"=" -f1)"="
    grep "$curVarCheck" $CONFIG_FILE > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      replace_block="$curVar\n# $service_name (Service Details) END"
      sed -i "s|# $service_name (Service Details) END|$replace_block|g" $CONFIG_FILE
    fi
  done
  set -e
}

function removeServiceFromConfig()
{
  rsfc_curE=${-//[^e]/}
  service_name=$1
  set +e
  grep "# $service_name (Service Details)" $CONFIG_FILE > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    removeTextBlockInFile "# $service_name (Service Details) BEGIN" "# $service_name (Service Details) END" $CONFIG_FILE
  fi
  set +e
  if ! [ -z $rsfc_curE ]; then
    set -e
  fi
}

function outputScripts()
{
  outputBootScripts
  outputDBExportScripts
  outputWireGuardScripts
  outputMaintenanceScripts
}

function nukeHSHQ()
{
  set +e
  if [ -z $HSHQ_BASE_DIR ]; then HSHQ_BASE_DIR=$HOME/hshq; fi
  if [ -z $HSHQ_WIREGUARD_DIR ]; then HSHQ_WIREGUARD_DIR=$HOME/hshq/data/wireguard; fi
  if [ -z $HSHQ_SCRIPTS_DIR ]; then HSHQ_SCRIPTS_DIR=$HOME/hshq/data/scripts; fi
  clear
  echo
  echo
  echo
  echo
  echo "============================================================"
  echo "This script will entirely remove HSHQ and all artifacts."
  echo "It will permanently delete ALL data except for the backup"
  echo "directory and reboot upon completion."
  echo "It will not delete any previously downloaded docker images."
  echo "In order to remove them as well, type 'docker image prune -f'"
  echo "Please type 'nuclear' in order to continue."
  echo "============================================================"
  echo
  echo
  sudo -k
  read -p "Type 'nuclear' (no quotes): " isnuke
  if ! [ "$isnuke" = "nuclear" ]; then
    echo "String does not match, exiting..."
    exit 1
  fi
  sudo crontab -r
  killall ssh-agent > /dev/null 2>&1
  sudo docker ps -q | xargs sudo docker stop
  sleep 5
  sudo $HSHQ_WIREGUARD_DIR/scripts/wgDockInternetDownAll.sh
  sudo $HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh
  sudo systemctl stop createWGDockerNetworks
  sudo systemctl disable createWGDockerNetworks
  sudo rm -f /etc/systemd/system/createWGDockerNetworks.service
  sudo rm -f /etc/networkd-dispatcher/routable.d/wgDockInternetUpAll.sh
  sudo systemctl stop runOnBootRoot
  sudo systemctl disable runOnBootRoot
  sudo rm -f /etc/systemd/system/runOnBootRoot.service
  sudo systemctl stop runScriptServer
  sudo systemctl disable runScriptServer
  sudo rm -f /etc/systemd/system/runScriptServer.service
  sudo $HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh
  sudo rm -f /etc/sysctl.d/88-hshq.conf
  sudo sysctl --system > /dev/null 2>&1
  sudo docker container prune -f
  sudo docker volume rm $(sudo docker volume ls -q)
  sudo docker network prune -f
  sudo ls /etc/wireguard | while read fname
  do
    bname=$(basename $fname .conf)
    removeWGInterfaceQuick $bname
  done
  sudo rm -f /etc/resolv.conf > /dev/null 2>&1
  sudo systemctl enable systemd-resolved > /dev/null 2>&1
  sudo systemctl start systemd-resolved > /dev/null 2>&1
  sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf
  sudo systemctl restart docker
  sudo docker container prune -f
  sudo docker volume rm $(sudo docker volume ls -q)
  sudo docker network prune -f
  sudo systemctl stop wazuh-agent
  sudo systemctl disable wazuh-agent
  sudo DEBIAN_FRONTEND=noninteractive apt remove --purge wazuh-agent -y
  sudo systemctl daemon-reload
  sudo rm -f /usr/local/share/ca-certificates/*
  sudo update-ca-certificates
  sudo systemctl stop docker
  sudo systemctl start docker
  sudo rm -fr $HSHQ_BASE_DIR/data
  sudo rm -fr $HSHQ_BASE_DIR/nonbackup
  sudo rm -fr $HSHQ_BASE_DIR/*.log
  sudo rm -fr $HSHQ_INSTALL_CFG
  sudo rm -fr $HOME/.ssh/*
  sudo rm /etc/update-motd.d/88-hshq
  if [ -f /etc/motd.old ]; then
    sudo mv /etc/motd.old /etc/motd
  else
    sudo chmod +x /etc/update-motd.d/*
  fi
  sudo rm -f $HSHQ_SCRIPT_OPEN
  #sudo reboot
  exit 2
}

function getExposedPortsList()
{
  echo "53,1400,1900,1935,7359,10000,4443,8020,143,587,993,110,25,465,995,514,55000,1514,1515,9200,22000,21027,3478,5349,$PORTAINER_LOCAL_HTTPS_PORT"
}

function outputBootScripts()
{
  sudo mkdir -p $HSHQ_SCRIPTS_DIR/boot/bootscripts
  outputIPTablesScripts true
  sudo rm -f $HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh
  sudo tee $HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh >/dev/null <<EOFBS
#!/bin/bash
set +e

chmod 500 $HSHQ_SCRIPTS_DIR/boot/bootscripts/*.sh
run-parts --regex '.*sh\$' $HSHQ_SCRIPTS_DIR/boot/bootscripts
EOFBS
  sudo chmod 500 $HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh
  sudo rm -f $HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service
  sudo tee $HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service >/dev/null <<EOFBS
[Unit]
Description=HSHQ Startup Script(s) with root privileges
After=default.target

[Service]
Type=oneshot
ExecStart=$HSHQ_SCRIPTS_DIR/boot/onBootRoot.sh

[Install]
WantedBy=default.target
EOFBS
  sudo chmod 644 $HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service
  sudo chown root:root $HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service
  sudo rm -f /etc/systemd/system/runOnBootRoot.service
  sudo ln -s $HSHQ_SCRIPTS_DIR/boot/runOnBootRoot.service /etc/systemd/system/runOnBootRoot.service
  sudo systemctl daemon-reload
  sudo systemctl enable runOnBootRoot
  outputHABandaidScript
  outputDockerWireGuardCaddyScript
}

function outputIPTablesScripts()
{
  isRunUpdate=$1
  default_iface=$(ip route | grep -e "^default" | awk -F'dev ' '{print $2}' | xargs | cut -d" " -f1)
  sudo rm -f $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
  sudo tee $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh >/dev/null <<EOFBS
#!/bin/bash
  set +e
  ports_list=$(getExposedPortsList)
  portsArr=(\$(echo \$ports_list | tr "," "\n"))
  for cur_port in "\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
    iptables -D DOCKER-USER -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j DROP 2> /dev/null
    iptables -I DOCKER-USER -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j DROP
    iptables -I DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT
  done

  # Special case for HomeAssistant DB localhost
  iptables -D DOCKER-USER -s 127.0.0.0/8,$NET_DBS_SUBNET -m conntrack --ctorigdstport $HOMEASSISTANT_DB_LOCALHOST_PORT --ctdir ORIGINAL -j ACCEPT 2> /dev/null
  iptables -D DOCKER-USER -m conntrack --ctorigdstport $HOMEASSISTANT_DB_LOCALHOST_PORT --ctdir ORIGINAL -j DROP 2> /dev/null
  iptables -I DOCKER-USER -m conntrack --ctorigdstport $HOMEASSISTANT_DB_LOCALHOST_PORT --ctdir ORIGINAL -j DROP
  iptables -I DOCKER-USER -s 127.0.0.0/8,$NET_DBS_SUBNET -m conntrack --ctorigdstport $HOMEASSISTANT_DB_LOCALHOST_PORT --ctdir ORIGINAL -j ACCEPT

  # See https://gist.github.com/mattia-beta/bd5b1c68e3d51db933181d8a3dc0ba64?permalink_comment_id=3728715#gistcomment-3728715
  iptables -t raw -F PREROUTING
  iptables -t raw -F chain-icmp > /dev/null 2>&1
  iptables -t raw -F chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -X chain-icmp > /dev/null 2>&1
  iptables -t raw -X chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -N chain-icmp > /dev/null 2>&1
  iptables -t raw -N chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -A PREROUTING -s 192.0.0.0/24,192.0.2.0/24,198.51.100.0/24,203.0.113.0/24 -j DROP
  iptables -t raw -A PREROUTING -d 192.0.0.0/24,192.0.2.0/24,198.51.100.0/24,203.0.113.0/24 -j DROP
  iptables -t raw -A PREROUTING -d 0.0.0.0/8 -j DROP
  iptables -t raw -A PREROUTING -s 0.0.0.0/8,198.18.0.0/15,100.64.0.0/10,192.88.99.0/24 -i $default_iface -j DROP
  iptables -t raw -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
  iptables -t raw -A PREROUTING -p udp -m udp -m multiport --ports 0 -j DROP
  iptables -t raw -A PREROUTING -p icmp -j chain-icmp
  iptables -t raw -A PREROUTING -p tcp -m tcp -j chain-bad_tcp
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-reply -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type network-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type host-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type protocol-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type port-unreachable -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type fragmentation-needed -j ACCEPT
  # Block echo-request with non-private IP
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-request -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type time-exceeded -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type parameter-problem -j ACCEPT
  iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type any -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags FIN,ACK FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,URG URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,FIN FIN -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ACK,PSH PSH -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL ALL -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL NONE -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP
  iptables -t raw -A chain-bad_tcp -p tcp -m tcp -m multiport --ports 0 -j DROP
  iptables -t raw -P PREROUTING ACCEPT

  # Limit connections per source IP
  iptables -C INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset > /dev/null 2>&1 || iptables -A INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset

  # Allow established connections
  iptables -C INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

  # Drop invalid packets
  iptables -C INPUT -m conntrack --ctstate INVALID -j DROP > /dev/null 2>&1 || iptables -A INPUT -m conntrack --ctstate INVALID -j DROP

  # Drop fragments
  iptables -C INPUT -f -j DROP > /dev/null 2>&1 || iptables -A INPUT -f -j DROP

  # Drop SYN packets with suspicious MSS value
  iptables -C INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP > /dev/null 2>&1 || iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

  # Configure loopback
  iptables -C INPUT -i lo -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -i lo -j ACCEPT
  iptables -C INPUT ! -i lo -s 127.0.0.0/8 -j DROP > /dev/null 2>&1 || iptables -A INPUT ! -i lo -s 127.0.0.0/8 -j DROP

  # Allow ICMP
  iptables -C INPUT -p icmp -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p icmp -j ACCEPT

  # Allow SSH
  iptables -C INPUT -p tcp -m tcp --dport $SSH_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp --dport $SSH_PORT -j ACCEPT

  # Allow HTTPS
  iptables -C INPUT -p tcp -m tcp --dport 443 -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT

  # Special case for HomeAssistant since it is using host networking
  iptables -C INPUT -p tcp -m tcp -i $NET_EXTERNAL_BRIDGE_NAME -s $NET_EXTERNAL_SUBNET --dport $HOMEASSISTANT_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp -i $NET_EXTERNAL_BRIDGE_NAME -s $NET_EXTERNAL_SUBNET --dport $HOMEASSISTANT_LOCALHOST_PORT -j ACCEPT

  # Special case for Script-server since it is using host networking
  iptables -C INPUT -p tcp -m tcp -i $NET_EXTERNAL_BRIDGE_NAME -s $NET_EXTERNAL_SUBNET --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp -i $NET_EXTERNAL_BRIDGE_NAME -s $NET_EXTERNAL_SUBNET --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT
  iptables -C INPUT -p tcp -m tcp -i $default_iface -s $HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp -i $default_iface -s $HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT

  # Special case for Docker metrics
  iptables -C INPUT -p tcp -m tcp -i $NET_PRIVATEIP_BRIDGE_NAME -s $NET_PRIVATEIP_SUBNET --dport $DOCKER_METRICS_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp -i $NET_PRIVATEIP_BRIDGE_NAME -s $NET_PRIVATEIP_SUBNET --dport $DOCKER_METRICS_PORT -j ACCEPT

  # Add UPNP
  iptables -C INPUT -s 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -p udp --dport 1900 -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -s 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -p udp --dport 1900 -j ACCEPT

  # Allow NTP for docker networks
  iptables -C INPUT -s 172.16.0.0/12 -p udp --dport 123 -j ACCEPT > /dev/null 2>&1 || sudo iptables -A INPUT -s 172.16.0.0/12 -p udp --dport 123 -j ACCEPT

  # Policy drop for input and forward
  iptables -P INPUT DROP
  iptables -P FORWARD DROP

  # Policy drop all ipv6 traffic
  ip6tables -P INPUT DROP
  ip6tables -P FORWARD DROP
  ip6tables -P OUTPUT DROP

  sysctl --system > /dev/null 2>&1

EOFBS
  sudo rm -f $HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh
  sudo tee $HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh >/dev/null <<EOFBS
#!/bin/bash
  set +e
  ports_list=$(getExposedPortsList)
  portsArr=(\$(echo \$ports_list | tr "," "\n"))
  for cur_port in "\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
    iptables -D DOCKER-USER -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j DROP 2> /dev/null
  done

  iptables -D DOCKER-USER -s 127.0.0.0/8,$NET_DBS_SUBNET -m conntrack --ctorigdstport $HOMEASSISTANT_DB_LOCALHOST_PORT --ctdir ORIGINAL -j ACCEPT 2> /dev/null
  iptables -D DOCKER-USER -m conntrack --ctorigdstport $HOMEASSISTANT_DB_LOCALHOST_PORT --ctdir ORIGINAL -j DROP 2> /dev/null

  iptables -t raw -F PREROUTING
  iptables -t raw -F chain-icmp > /dev/null 2>&1
  iptables -t raw -F chain-bad_tcp > /dev/null 2>&1
  iptables -t raw -X chain-icmp > /dev/null 2>&1
  iptables -t raw -X chain-bad_tcp > /dev/null 2>&1

  iptables -D INPUT -f -j DROP > /dev/null 2>&1
  iptables -D INPUT -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP > /dev/null 2>&1
  iptables -D INPUT -p tcp -m connlimit --connlimit-above 50 -j REJECT --reject-with tcp-reset > /dev/null 2>&1
  iptables -D INPUT -m conntrack --ctstate INVALID -j DROP > /dev/null 2>&1
  iptables -D INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -i lo -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT ! -i lo -s 127.0.0.0/8 -j DROP > /dev/null 2>&1
  iptables -D INPUT -p icmp -j ACCEPT > /dev/null 2>&1
  iptables -D INPUT -p tcp -m tcp --dport $SSH_PORT -j ACCEPT 2> /dev/null
  iptables -D INPUT -p tcp -m tcp --dport 443 -j ACCEPT 2> /dev/null
  iptables -D INPUT -p tcp -m tcp -i $NET_EXTERNAL_BRIDGE_NAME -s $NET_EXTERNAL_SUBNET --dport $HOMEASSISTANT_LOCALHOST_PORT -j ACCEPT 2> /dev/null
  iptables -D INPUT -p tcp -m tcp -i $NET_EXTERNAL_BRIDGE_NAME -s $NET_EXTERNAL_SUBNET --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT 2> /dev/null
  iptables -D INPUT -p tcp -m tcp -i $default_iface -s $HOMESERVER_HOST_RANGE --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT 2> /dev/null
  iptables -D INPUT -p tcp -m tcp -i $NET_PRIVATEIP_BRIDGE_NAME -s $NET_PRIVATEIP_SUBNET --dport $DOCKER_METRICS_PORT -j ACCEPT 2> /dev/null
  iptables -D INPUT -s 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 -p udp --dport 1900 -j ACCEPT
  iptables -D INPUT -s 172.16.0.0/12 -p udp --dport 123 -j ACCEPT

  iptables -P INPUT ACCEPT

  ip6tables -P INPUT ACCEPT
  ip6tables -P FORWARD ACCEPT
  ip6tables -P OUTPUT ACCEPT

EOFBS
  if [ "$HOMESERVER_HOST_ISPRIVATE" = "false" ]; then
    # Add special rules when HomeServer is on non-private network, i.e. cloud-server, etc.
    if [ -z $HOMENET_ADDITIONAL_IPS ]; then
      sudo tee -a $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh >/dev/null <<EOFPO
  # Special case when HomeServer is on non-private network
  iptables -t raw -I PREROUTING -s 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,169.254.0.0/16,224.0.0.0/4 -i $default_iface -j DROP
EOFPO
    else
      sudo tee -a $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh >/dev/null <<EOFPO
  # Special case when HomeServer is on non-private network
  for cur_port in "\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s $HOMENET_ADDITIONAL_IPS -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
    iptables -I DOCKER-USER -s $HOMENET_ADDITIONAL_IPS -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT
  done
  iptables -t raw -I PREROUTING -s 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,169.254.0.0/16,224.0.0.0/4 -i $default_iface -j DROP
  iptables -C INPUT -p tcp -m tcp -i $default_iface -s $HOMENET_ADDITIONAL_IPS --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1 || iptables -A INPUT -p tcp -m tcp -i $default_iface -s $HOMENET_ADDITIONAL_IPS --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT
EOFPO
      sudo tee -a $HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh >/dev/null <<EOFPT
  # Special case when HomeServer is on non-private network
  for cur_port in "\${portsArr[@]}"
  do
    iptables -D DOCKER-USER -s $HOMENET_ADDITIONAL_IPS -m conntrack --ctorigdstport \$cur_port --ctdir ORIGINAL -j ACCEPT 2> /dev/null
  done
  iptables -D INPUT -p tcp -m tcp -i $default_iface -s $HOMENET_ADDITIONAL_IPS --dport $SCRIPTSERVER_LOCALHOST_PORT -j ACCEPT > /dev/null 2>&1
EOFPT
    fi
    add_rule="iptables -t raw -A chain-icmp -p icmp -m icmp --icmp-type echo-request -i $default_iface -j DROP"
    search_txt="# Block echo-request with non-private IP"
    sudo sed -i "/$search_txt/a\  $add_rule" $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
  fi
  sudo chmod 500 $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
  sudo chmod 500 $HSHQ_SCRIPTS_DIR/root/clearDockerUserIPTables.sh
  util="docker|docker"
  if ! [ "$isRunUpdate" = "false" ] && ! [ "$(isProgramInstalled $util)" = "false" ]; then
    sudo $HSHQ_SCRIPTS_DIR/boot/bootscripts/10-setupDockerUserIPTables.sh
    # Just in case
    cur_ssh_port=$(grep "^Port" /etc/ssh/sshd_config)
    if [ $? -ne 0 ]; then
      cur_ssh_port=22
    else
      cur_ssh_port=$(sudo grep ^Port /etc/ssh/sshd_config | xargs | cut -d" " -f2)
    fi
    sudo iptables -C INPUT -p tcp -m tcp --dport $cur_ssh_port -j ACCEPT > /dev/null 2>&1 || sudo iptables -A INPUT -p tcp -m tcp --dport $cur_ssh_port -j ACCEPT
  fi
}

function outputHABandaidScript()
{
  sudo tee $HSHQ_SCRIPTS_DIR/boot/bootscripts/90-restartHomeAssistantStack.sh >/dev/null <<EOFBS
#!/bin/bash

# This script is a bandaid solution to fix the startup
# issues with HomeAssistant after a reboot. At some
# point, need to find the real problem and fix it.
function main()
{
  PORTAINER_ADMIN_USERNAME=$PORTAINER_ADMIN_USERNAME
  PORTAINER_ADMIN_PASSWORD=$PORTAINER_ADMIN_PASSWORD
  PORTAINER_LOCAL_HTTPS_PORT=$PORTAINER_LOCAL_HTTPS_PORT
  echo "Starting restartHomeAssistantStack.sh..."
  sleep 10
  docker ps > /dev/null 2>&1
  sleep 10
  source $HSHQ_LIB_SCRIPT lib
  set +e
  num_tries=1
  total_tries=20
  echo "Getting Portainer token..."
  portainerToken="\$(getPortainerToken -u \$PORTAINER_ADMIN_USERNAME -p \$PORTAINER_ADMIN_PASSWORD)"
  retVal=\$?
  while [ \$retVal -ne 0 ] && [ \$num_tries -lt \$total_tries ]
  do
    sleep 10
    ((num_tries++))
    portainerToken="\$(getPortainerToken -u \$PORTAINER_ADMIN_USERNAME -p \$PORTAINER_ADMIN_PASSWORD)"
    retVal=\$?
  done
  echo "Restarting stack..."
  if [ \$retVal -ne 0 ]; then
    echo "Error restarting HomeAssistant stack, exiting..."
    exit 1
  fi
  restartStackIfRunning homeassistant 15 \$portainerToken > /dev/null
  echo "End restartHomeAssistantStack.sh"
}
main
EOFBS

  sudo chmod 500 $HSHQ_SCRIPTS_DIR/boot/bootscripts/90-restartHomeAssistantStack.sh
}

function outputDockerWireGuardCaddyScript()
{
  sudo tee $HSHQ_SCRIPTS_DIR/boot/bootscripts/50-dockerWireGuardCaddyFix.sh >/dev/null <<EOFWC
#!/bin/bash
set +e

# This script handles the chicken/egg paradox between Docker and WireGuard during boot.
# Each Caddy instance is bound to a specific interface - in most cases, a WireGuard interface.
# Each WireGuard VPN interface uses a domain name as opposed to an IP address for the endpoint.
# The domain name requires a DNS lookup, which is handled by AdguardHome - in a Docker container.
# Thus, given this setup, the WireGuard interfaces will not come up until the AdGuard container is up.
# Unfortunately, this causes a race condition with the Caddy containers that are bound to 
# specific WireGuard interfaces - they will fail to start if the interface doesn't exist.
# Attempts were made within the systemd service files to start one after the other, but it still results
# in a circular reference problem. Even manually starting the VPN interfaces before docker.service with 
# wg rather than wg-quick fails due to wg setconf errors on an unknown endpoint. So this script, which runs
# at boot, will wait until the interfaces are up, then start/restart the Caddy containers.

hshq_db=$HSHQ_DB

function main()
{
  ips_arr=(\$(sqlite3 \$hshq_db "select IPAddress from connections where ConnectionType='homeserver_vpn' and NetworkType in ('primary','other');"))

  ns_sleep=5
  ping_timeout=5
  max_tries=100
  is_error=false

  for cur_ip in "\${ips_arr[@]}"
  do
    is_up=false
    cur_tries=1
    while [ \$cur_tries -le \$max_tries ] && [ "\$is_up" = "false" ]
    do
      timeout \$ping_timeout ping -c 1 \$cur_ip > /dev/null 2>&1
      if [ \$? -eq 0 ]; then
        is_up=true
      else
        ((cur_tries++))
        sleep \$ns_sleep
      fi
    done
  done

  caddy_arr=(\$(docker ps -a --filter name=caddy- --format "{{.Names}}"))
  for curcaddy in "\${caddy_arr[@]}"
  do
    docker container restart \$curcaddy
  done

  docker ps -a --filter name=coturn --format "{{.Names}}" > /dev/null 2>&1
  if [ \$? -eq 0 ]; then
    docker container restart coturn
  fi
}
main "\$@"

EOFWC

  sudo chmod 500 $HSHQ_SCRIPTS_DIR/boot/bootscripts/50-dockerWireGuardCaddyFix.sh
}

function outputDBExportScripts()
{
  rm -f $HSHQ_SCRIPTS_DIR/user/exportPostgres.sh
  cat <<EOFDB > $HSHQ_SCRIPTS_DIR/user/exportPostgres.sh
#!/bin/bash

set -e
PGPASSWORD=\$POSTGRES_PASSWORD
if [ -z "\$PGPASSWORD" ]; then
  echo "ERROR: Password not set"
  exit 1
fi
pg_dump --username \$POSTGRES_USER \$POSTGRES_DB > /dbexport/dbexport.tmp
outputfilesize=\$(du -sh /dbexport/dbexport.tmp | xargs | cut -d ' ' -f1)
mv /dbexport/dbexport.tmp /dbexport/\$POSTGRES_DB.sql
chmod 0400 /dbexport/\$POSTGRES_DB.sql
echo "Success - Filesize is \$outputfilesize"
EOFDB
  chmod 0555 $HSHQ_SCRIPTS_DIR/user/exportPostgres.sh

  rm -f $HSHQ_SCRIPTS_DIR/user/exportMySQL.sh
  cat <<EOFDB > $HSHQ_SCRIPTS_DIR/user/exportMySQL.sh
#!/bin/bash

set -e
mysqldump --user \$MYSQL_USER --password=\$MYSQL_PASSWORD \$MYSQL_DATABASE > /dbexport/dbexport.tmp
outputfilesize=\$(du -sh /dbexport/dbexport.tmp | xargs | cut -d ' ' -f1)
mv /dbexport/dbexport.tmp /dbexport/\$MYSQL_DATABASE.sql
chmod 0400 /dbexport/\$MYSQL_DATABASE.sql
echo "Success - Filesize is \$outputfilesize"
EOFDB
  chmod 0555 $HSHQ_SCRIPTS_DIR/user/exportMySQL.sh
}

function outputMaintenanceScripts()
{
  sudo rm -f $HSHQ_SCRIPTS_DIR/userasroot/updateLECerts.sh
  sudo tee $HSHQ_SCRIPTS_DIR/userasroot/updateLECerts.sh >/dev/null <<EOFCS
#!/bin/bash
set +e

search_dir=$HSHQ_STACKS_DIR/caddy-common/primary-certs
le_dir=$HSHQ_STACKS_DIR/caddy-common/lecerts

function main()
{
  acme_dir=\$(find \$search_dir -name "acme-*" | xargs | cut -d" " -f1)
  is_new_certs=false
  if ! [ -z "\$acme_dir" ]; then
    certList=(\$(find \$acme_dir -name "*.crt"))
    for curCert in "\${certList[@]}"
    do
      bname=\$(basename \$curCert)
      if ! [ -f \$le_dir/\$bname ]; then
        cp -f \${curCert%.*}.* \$le_dir/
        is_new_certs=true
        continue
      fi
      diff \$curCert \$le_dir/\$bname >/dev/null
      if [ \$? -ne 0 ]; then
        startD_curCert=\$(date --date="\$(openssl x509 -noout -startdate -in \$curCert | cut -d"=" -f2)" "+%Y%m%d%H%M%S")
        startD_leCert=\$(date --date="\$(openssl x509 -noout -startdate -in \$le_dir/\$bname | cut -d"=" -f2)" "+%Y%m%d%H%M%S")
        if [ \$startD_curCert -gt \$startD_leCert ]; then
          cp -f \${curCert%.*}.* \$le_dir/
          is_new_certs=true
        fi
      fi
    done
    if [ "\$is_new_certs" = "true" ]; then
      docker ps --filter name=caddy- -aq | xargs docker restart
    fi
  fi
}

main "\$@"
EOFCS
  sudo chmod 0500 $HSHQ_SCRIPTS_DIR/userasroot/updateLECerts.sh
  sudo chown root:root $HSHQ_SCRIPTS_DIR/userasroot/updateLECerts.sh

  sudo rm -f $HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh
  sudo tee $HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh >/dev/null <<EOFMS
#!/bin/bash

stacks_dir=$HSHQ_STACKS_DIR
PORTAINER_ADMIN_USERNAME=$PORTAINER_ADMIN_USERNAME
PORTAINER_ADMIN_PASSWORD=$PORTAINER_ADMIN_PASSWORD
PORTAINER_LOCAL_HTTPS_PORT=$PORTAINER_LOCAL_HTTPS_PORT

caddy_stack=\$1
portainerToken=""
function main()
{
  startStopStack \$caddy_stack stop
  rm -fr \$stacks_dir/\$caddy_stack/config/*
  rm -fr \$stacks_dir/\$caddy_stack/data/*
  startStopStack \$caddy_stack start
}

function startStopStack()
{
  stackname=\$1
  startStop=\$2
  if [ -z "\$portainerToken" ]; then
    portainerToken="\$(getPortainerToken)"
  fi
  stackID=\$(getStackID \$stackname "\$portainerToken")
  http --check-status --ignore-stdin --verify=no --timeout=300 POST https://127.0.0.1:\$PORTAINER_LOCAL_HTTPS_PORT/api/stacks/\$stackID/\$startStop "Authorization: Bearer \$portainerToken" endpointId==1 > /dev/null
}

function getPortainerToken()
{
  echo \$(http --check-status --ignore-stdin --verify=no https://127.0.0.1:\$PORTAINER_LOCAL_HTTPS_PORT/api/auth username=\$PORTAINER_ADMIN_USERNAME password=\$PORTAINER_ADMIN_PASSWORD | jq -r .jwt)
}

function getStackID()
{
  stackID="NA"
  stackName=\$1
  stackName="\${stackName//.}"
  portainerToken=\$2
  qry=\$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:\$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer \$portainerToken" endpointId==1)
  for row in \$(echo "\${qry}" | jq -r '.[] | @base64'); do
    _jq()
    {
      echo \${row} | base64 --decode | jq -r \${1}
    }
    if [ \$(_jq '.Name') = \$stackName ]; then
      stackID=\$(_jq '.Id')
	  break
    fi
  done
  if ! [ \$stackID = "NA" ]; then
    echo \$stackID
  fi
}

main "\$@"

EOFMS
  sudo chmod 0500 $HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh
  sudo chown root:root $HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh

  sudo rm -f $HSHQ_SCRIPTS_DIR/userasroot/checkCaddyContainers.sh
  sudo tee $HSHQ_SCRIPTS_DIR/userasroot/checkCaddyContainers.sh >/dev/null <<EOFMS
#!/bin/bash

stacks_dir=$HSHQ_STACKS_DIR
err_search="The request message was malformed"
caddy_arr=(\$(docker ps -a --filter name=caddy- --format "{{.Names}}"))
for curcaddy in "\${caddy_arr[@]}"
do
  find_err=\$(docker logs \$curcaddy 2>&1 | grep "\$err_search")
  if ! [ -z "\$find_err" ]; then
    echo "Error found with \$curcaddy stack. Clearing data and restarting..."
    echo "If this problem persists, then contact the VPN owner and ask them to reset their Caddy instance which serves the certificates."
    $HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh \$curcaddy
  fi
done
EOFMS
  sudo chmod 0500 $HSHQ_SCRIPTS_DIR/userasroot/checkCaddyContainers.sh
  sudo chown root:root $HSHQ_SCRIPTS_DIR/userasroot/checkCaddyContainers.sh

  sudo rm -f $HSHQ_SCRIPTS_DIR/root/dockPrivateIP.sh
  sudo tee $HSHQ_SCRIPTS_DIR/root/dockPrivateIP.sh >/dev/null <<EOFWG
#!/bin/bash

set +e
scriptsdir=$HSHQ_SCRIPTS_DIR
function main()
{
  addDefaultRules

  CMD="ip rule add from $NET_PRIVATEIP_SUBNET table 42 priority 20"
  CHECK=\$(ip rule show | grep -w "from $NET_PRIVATEIP_SUBNET lookup 42")
  while_check "\$CMD" "\$CHECK"

  CMD="ip route add blackhole default metric 3 table 42"
  CHECK=\$(ip route show table 42 2>/dev/null | grep -w "blackhole")
  while_check "\$CMD" "\$CHECK"
}

function addDefaultRules()
{
  CMD="ip rule add suppress_prefixlength 0 table main priority 10"
  CHECK=\$(ip rule show | grep -w "suppress_prefixlength")
  while_check "\$CMD" "\$CHECK"

  CMD="ip rule add from all to 127.0.0.0/8 table main priority 15"
  CHECK=\$(ip rule show | grep -w "from all to 127.0.0.0/8")
  while_check "\$CMD" "\$CHECK"

  CMD="ip rule add from all to 10.0.0.0/8 table main priority 15"
  CHECK=\$(ip rule show | grep -w "from all to 10.0.0.0/8")
  while_check "\$CMD" "\$CHECK"

  CMD="ip rule add from all to 172.16.0.0/12 table main priority 15"
  CHECK=\$(ip rule show | grep -w "from all to 172.16.0.0/12")
  while_check "\$CMD" "\$CHECK"

  CMD="ip rule add from all to 192.168.0.0/16 table main priority 15"
  CHECK=\$(ip rule show | grep -w "from all to 192.168.0.0/16")
  while_check "\$CMD" "\$CHECK"
}

function while_check()
{
  RETVAL=\$?
  numIter=1
  while [ \$RETVAL -ne 0 ] && [ \$numIter -lt 100 ]; do
    CMD=\$(\$1)
    RETVAL=\$?
    numIter=\$((\$numIter+1))
    sleep 1
  done
}

main "\$@"
EOFWG
  sudo chmod 0500 $HSHQ_SCRIPTS_DIR/root/dockPrivateIP.sh
  sudo chown root:root $HSHQ_SCRIPTS_DIR/root/dockPrivateIP.sh

  sudo rm -f $HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh
  sudo tee $HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh >/dev/null <<EOFWG
#!/bin/bash
set +e
ip rule delete priority 10

ip rule delete priority 15
while [ \$? -eq 0 ]
do
  ip rule delete priority 15
done

ip rule delete priority 20
while [ \$? -eq 0 ]
do
  ip rule delete priority 20
done

ip route flush table 42
sudo ls $HSHQ_WIREGUARD_DIR/internet/*.conf | while read conf
do
  ip route flush table \$(grep ^\#ROUTING_TABLE_ID= \$conf | sed 's/^[^=]*=//')
done

EOFWG
  sudo chmod 0500 $HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh
  sudo chown root:root $HSHQ_SCRIPTS_DIR/root/clearRoutingTable.sh
}

function initCronJobs()
{
  echo "MAILTO=$EMAIL_ADMIN_EMAIL_ADDRESS" | sudo tee $HOME/rootcron >/dev/null
  echo "*/$LECERTS_REFRESH_RATE * * * * bash $HSHQ_SCRIPTS_DIR/userasroot/updateLECerts.sh >/dev/null 2>&1" | sudo tee -a $HOME/rootcron >/dev/null
  echo "*/$WIREGUARD_DNS_REFRESH_RATE * * * * bash $HSHQ_WIREGUARD_DIR/scripts/updateEndpointIPs.sh >/dev/null 2>&1" | sudo tee -a $HOME/rootcron >/dev/null
  echo "0 */6 * * * bash $HSHQ_SCRIPTS_DIR/userasroot/checkCaddyContainers.sh" | sudo tee -a $HOME/rootcron >/dev/null
  sudo crontab $HOME/rootcron
  sudo rm $HOME/rootcron
}

function appendToRoonCron()
{
  cr_string="$1"
  sudo crontab -l > $HOME/rootcron
  set +e
  grep "$cr_string" $HOME/rootcron > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "$cr_string" | sudo tee -a $HOME/rootcron >/dev/null
    sudo crontab $HOME/rootcron
    sudo rm $HOME/rootcron
  fi
  set -e
}

function deleteFromRootCron()
{
  cr_string="$1"
  sudo crontab -l > $HOME/rootcron
  set +e
  grep "$cr_string" $HOME/rootcron > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    sudo sed -i "/$cr_string/d" $HOME/rootcron
    sudo crontab $HOME/rootcron
  fi
  sudo rm $HOME/rootcron
  set -e
}

function updateHomeServerLogoImages()
{
  set +e
  hsid=$(getHeimdallUserIDFromType homeservers)
  hs_list=($(sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "select url from items where user_id=$hsid;"))
  isAnyNew=false
  for curHS in "${hs_list[@]}"
  do
    curDomain=$(getBaseDomain $(echo "$curHS" | cut -d "/" -f3))
    curURL="https://images.${curDomain}/${curDomain}.png"
    echo -e "\nGetting image for ${curDomain}..."
    wget -q -O /tmp/tmpimage.png $curURL > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      echo "ERROR: Could not obtain image for $curDomain"
      rm -f /tmp/tmpimage.png
      continue
    fi
    curImgSize=$(du -s /tmp/tmpimage.png | xargs | cut -d" " -f1)
    if [ $curImgSize -lt 1 ] || [ $curImgSize -gt 1024 ]; then
      echo "ERROR: There was a problem with the image size for $curDomain"
      rm -f /tmp/tmpimage.png
      continue
    fi
    isNewImage=false
    if ! [ -f $HSHQ_ASSETS_DIR/images/${curDomain}.png ]; then
      echo "No existing image found for ${curDomain}, adding..."
      isNewImage=true
    else
      diff $HSHQ_ASSETS_DIR/images/${curDomain}.png /tmp/tmpimage.png > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo "New image detected for ${curDomain}, updating..."
        isNewImage=true
      else
        echo "Same image for ${curDomain}, skipping..."
      fi
    fi
    if [ "$isNewImage" = "true" ]; then
      isAnyNew=true
      mv /tmp/tmpimage.png $HSHQ_ASSETS_DIR/images/${curDomain}.png
      # Add some random string to the filename, to overcome any browser cache issues.
      rand_string=$(pwgen -c -n 8 1)
      cp $HSHQ_ASSETS_DIR/images/${curDomain}.png $HSHQ_STACKS_DIR/heimdall/config/www/icons/${curDomain}-${rand_string}.png
      sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set icon='icons/${curDomain}-${rand_string}.png' where url='$curHS';"
    else
      rm -f /tmp/tmpimage.png
    fi
  done
  echo ""
  if [ "$isAnyNew" = "true" ]; then
    echo "Restarting Heimdall..."
    docker container restart heimdall > /dev/null 2>&1
  else
    echo "No new images were detected"
  fi
  echo "Update HomeServer logo images complete!"
}

function uploadHomeServerLogo()
{
  img_file="$1"
  if ! [ "$(file -b --mime-type $img_file)" = "image/png" ]; then
    echo "ERROR: Image must be a png file"
    rm -f "$img_file"
    return
  fi
  curImgSize=$(du -s $img_file | xargs | cut -d" " -f1)
  if [ $curImgSize -lt 1 ]; then
    echo "ERROR: There was a problem with the image size"
    rm -f "$img_file"
    return
  fi
  if [ $curImgSize -gt 1024 ]; then
    echo "ERROR: Image is too large, must be less than 1MB (1024 KB)"
    rm -f "$img_file"
    return
  fi
  echo "Image is good, updating..."
  mv "$img_file" $HSHQ_ASSETS_DIR/images/${HOMESERVER_DOMAIN}.png
  # Add some random string to the filename, to overcome any browser cache issues.
  rand_string=$(pwgen -c -n 8 1)
  cp $HSHQ_ASSETS_DIR/images/${HOMESERVER_DOMAIN}.png $HSHQ_STACKS_DIR/heimdall/config/www/icons/${HOMESERVER_DOMAIN}-${rand_string}.png
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set icon='icons/${HOMESERVER_DOMAIN}-${rand_string}.png' where url='https://home.$HOMESERVER_DOMAIN';"
  echo "Restarting Heimdall..."
  docker container restart heimdall > /dev/null 2>&1
  echo "HomeServer logo updated succesfully!"
}

function outputWireGuardScripts()
{
  if [[ "$(isProgramInstalled networkd-dispatcher)" = "false" ]]; then
    echo "Installing networkd-dispatcher, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y networkd-dispatcher > /dev/null 2>&1
  fi
  sudo tee $HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh >/dev/null <<EOFWG
#!/bin/bash

#This script was adopted from this GitHub project. Special thanks to BrodyBuster!!!
#https://github.com/BrodyBuster/docker-wireguard-vpn

CONFIG_FILE=\$1
COMMAND=\$2
set +e
function main()
{
  if [ -z "\$CONFIG_FILE" ] || ! [ -f \$CONFIG_FILE ]; then
    echo "Missing configuration file"
    return
  fi
  CONFIG_FILE=\$(realpath \$CONFIG_FILE)
  NETWORK_NAME=\$(getConfigVar \#NETNAME)
  ROUTING_TABLE_ID=\$(getConfigVar \#ROUTING_TABLE_ID)
  DOCKER_NETWORK_NAME=\$(getConfigVar \#DOCKER_NETWORK_NAME)
  DOCKER_NETWORK_SUBNET=\$(getConfigVar \#DOCKER_NETWORK_SUBNET)
  CLIENT_ADDRESS=\$(getConfigVar \#CLIENT_ADDRESS)
  CLIENT_ADDR_NO_CIDR=\$(echo \$CLIENT_ADDRESS | cut -d"/" -f1)
  MTU=\$(getConfigVar \#MTU)
  IS_ENABLED=\$(getConfigVar \#IS_ENABLED)
  EXT_DOMAIN=\$(getConfigVar \#EXT_DOMAIN)

  if [ \${#NETWORK_NAME} -gt 10 ]; then
    echo "Network name is too long, exiting..."
    return
  fi

  shift
  shift
  case "\$COMMAND" in
    up) up "\$@" ;;
    down) down "\$@" ;;
    restart) restart "\$@" ;;
    status) status "\$@" ;;
    *) echo "Usage: \$0 config_file up|down|restart|status" >&2; exit 1 ;;
  esac
}

function while_check()
{
  RETVAL=\$?
  numIter=1
  while [ \$RETVAL -ne 0 ] && [ \$numIter -lt 100 ]; do
    CMD=\$(\$1)
    RETVAL=\$?
    numIter=\$((\$numIter+1))
    sleep 1
  done
}

function up()
{
  if [ -z \$DOCKER_NETWORK_SUBNET ]; then
    echo "Docker network subnet has not been set"
    return
  fi

  CMD="ip rule add from \$DOCKER_NETWORK_SUBNET table \$ROUTING_TABLE_ID priority 20"
  CHECK=\$(ip rule show | grep -w "from \$DOCKER_NETWORK_SUBNET lookup \$ROUTING_TABLE_ID")
  while_check "\$CMD" "\$CHECK"

  CMD="ip route add blackhole default metric 3 table \$ROUTING_TABLE_ID"
  CHECK=\$(ip route show table \$ROUTING_TABLE_ID 2>/dev/null | grep -w "blackhole")
  while_check "\$CMD" "\$CHECK"

  if ! [[ "\$IS_ENABLED" = "yes" ]] && ! [[ "\$IS_ENABLED" = "true" ]]; then
    echo "Config for \$NETWORK_NAME not enabled"
    return
  fi
  ip link | grep " \${NETWORK_NAME}:" > /dev/null
  if [ \$? -ne 0 ]; then
    ip link add \$NETWORK_NAME type wireguard
    wg setconf \$NETWORK_NAME \$CONFIG_FILE
    ip addr add \$CLIENT_ADDRESS dev \$NETWORK_NAME
    ip link set mtu \$MTU up dev \$NETWORK_NAME
    ip link set up dev \$NETWORK_NAME
  fi

  CMD="ip route add default via \$CLIENT_ADDR_NO_CIDR metric 2 table \$ROUTING_TABLE_ID"
  CHECK=\$(ip route show table \$ROUTING_TABLE_ID 2>/dev/null | grep -w "\$CLIENT_ADDR_NO_CIDR")
  while_check "\$CMD" "\$CHECK"

  echo "Connection: \$NETWORK_NAME is up"
}

function down()
{
  ip link del \$NETWORK_NAME
  echo "Connection: \$NETWORK_NAME is down"
  if ! [ -z \$DOCKER_NETWORK_SUBNET ]; then
    CMD="ip rule add from \$DOCKER_NETWORK_SUBNET table \$ROUTING_TABLE_ID priority 20"
    CHECK=\$(ip rule show | grep -w "from \$DOCKER_NETWORK_SUBNET lookup \$ROUTING_TABLE_ID")
    while_check "\$CMD" "\$CHECK"
  fi
  CMD="ip route add blackhole default metric 3 table \$ROUTING_TABLE_ID"
  CHECK=\$(ip route show table \$ROUTING_TABLE_ID 2>/dev/null | grep -w "blackhole")
  while_check "\$CMD" "\$CHECK"
}

function restart()
{
  down
  up
}

function status()
{
  CMD="ip route add blackhole default metric 3 table \$ROUTING_TABLE_ID"
  CHECK=\$(ip route show table \$ROUTING_TABLE_ID 2>/dev/null | grep -w "blackhole")
  while_check "\$CMD" "\$CHECK"
  VPNIP=\$(docker run -ti --rm --net=\$DOCKER_NETWORK_NAME curlimages/curl:7.84.0 -fsSL --max-time 5 https://api.ipify.org)
  IP=\$(curl --silent https://api.ipify.org)
  if [ "\$(checkValidIPAddress \$EXT_DOMAIN)" = "true" ]; then
    rsip=\$EXT_DOMAIN
  else
    rsip=\$(getIPFromHostname \$EXT_DOMAIN)
  fi
  if [ -z "\$rsip" ]; then
    echo "ERROR: Could not determine IP from \$EXT_DOMAIN"
  elif [[ "\$VPNIP" = "\$rsip" ]]; then
    echo "Connected to \$rsip: Blackhole active"
  elif [[ "\$VPNIP" = "\$IP" ]]; then
    echo "Not connected to Endpoint: Blackhole NOT active!"
  else
    echo "Connected to \$VPNIP: Blackhole active"
  fi
}

function checkValidIPAddress()
{
  ip=\$(echo \$1 | cut -d "/" -f1)
  stat=1
  if [[ \$ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\$ ]]; then
    OIFS=\$IFS
    IFS='./'
    ip=(\$ip)
    IFS=\$OIFS
    [[ \${ip[0]} -le 255 && \${ip[1]} -le 255 && \${ip[2]} -le 255 && \${ip[3]} -le 255 ]]
    stat=\$?
  fi
  if [ \$stat -eq 0 ]; then
    echo "true"
  else
    echo "false"
  fi
}

function getIPFromHostname()
{
  echo \$(dig \$1 +short | grep '^[.0-9]*\$')
}

function getConfigVar()
{
  echo \$(grep ^\$1= \$CONFIG_FILE | sed 's/^[^=]*=//' | sed 's/ *\$//g')
}

main "\$@"
EOFWG
  sudo chmod 755 $HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh
  sudo tee $HSHQ_WIREGUARD_DIR/scripts/wgDockInternetUpAll.sh >/dev/null <<EOFWG
#!/bin/bash
set +e

if [ -f /tmp/wgDockInternetUpAll-Updating ]; then
  exit
fi
touch /tmp/wgDockInternetUpAll-Updating

wgdir=$HSHQ_WIREGUARD_DIR
scripts_dir=$HSHQ_SCRIPTS_DIR

\$scripts_dir/root/dockPrivateIP.sh

ls \$wgdir/internet/*.conf > /dev/null 2>&1
if [ \$? -eq 0 ]; then
  ls \$wgdir/internet/*.conf | while read conf
  do
    \$wgdir/scripts/wgDockInternet.sh \$conf up
  done
fi

rm -f /tmp/wgDockInternetUpAll-Updating
EOFWG
  sudo chmod 755 $HSHQ_WIREGUARD_DIR/scripts/wgDockInternetUpAll.sh
  sudo tee $HSHQ_WIREGUARD_DIR/scripts/wgDockInternetDownAll.sh >/dev/null <<EOFWG
#!/bin/bash

wgdir=$HSHQ_WIREGUARD_DIR
sudo ls \$wgdir/internet/*.conf | while read conf
do
  \$wgdir/scripts/wgDockInternet.sh \$conf down
done
EOFWG
  sudo chmod 744 $HSHQ_WIREGUARD_DIR/scripts/wgDockInternetDownAll.sh
  sudo tee $HSHQ_WIREGUARD_DIR/scripts/updateEndpointIPs.sh >/dev/null <<EOFWG
#!/bin/bash

HSHQ_WIREGUARD_DIR=$HSHQ_WIREGUARD_DIR
db=$HSHQ_DB

function main()
{
  # Three special cases for our network (HomeServer VPN, HomeServer Internet, and ClientDNS).
  # After that, any HomeServer connection from other networks needs to be checked/updated.

  id=\$(sqlite3 \$db "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType='primary';")
  if ! [ -z \$id ] && [ "\$(checkByID \$id)" = "true" ]; then
    iname=\$(sqlite3 \$db "select InterfaceName from connections where ID=\$id;")
    cname=\$(sqlite3 \$db "select Name from connections where ID=\$id;")
    echo "IP changed, restarting \$cname..."
    resetVPN \$iname
  fi

  id=\$(sqlite3 \$db "select ID from connections where ConnectionType='homeserver_internet' and NetworkType='primary';")
  if ! [ -z \$id ] && [ "\$(checkByID \$id)" = "true" ]; then
    iname=\$(sqlite3 \$db "select InterfaceName from connections where ID=\$id;")
    cname=\$(sqlite3 \$db "select Name from connections where ID=\$id;")
    echo "IP changed, restarting \$cname..."
    resetInternet \$iname
  fi

  cdns_id=(\$(sqlite3 \$db "select ID from connections where ConnectionType='clientdns' and NetworkType in ('primary','mynetwork');"))
  for cur_cdns in "\${cdns_id[@]}"
  do
    if ! [ -z \$cur_cdns ] && [ "\$(checkByID \$cur_cdns)" = "true" ]; then
      cname=\$(sqlite3 \$db "select Name from connections where ID=\$cur_cdns;")
      echo "IP changed, restarting \$cname..."
      docker container restart \${cname}-wireguard
    fi
  done

  conn_list=(\$(sqlite3 \$db "select ID from connections where ConnectionType='homeserver_vpn' and NetworkType='other';"))

  for cur_id in "\${conn_list[@]}"
  do
    if [ "\$(checkByID \$cur_id)" = "true" ]; then
      is_int=\$(sqlite3 \$db "select IsInternet from connections where ID='\$cur_id';")
      iname=\$(sqlite3 \$db "select InterfaceName from connections where ID='\$cur_id';")
      cname=\$(sqlite3 \$db "select Name from connections where ID=\$cur_id;")
      echo "IP changed, restarting $cname..."
      if [ \$is_int = 0 ]; then
        resetVPN \$iname
      else
        resetInternet \$iname
      fi
    fi
  done
}

function checkByID()
{
  dbID=\$1
  ehost=\$(sqlite3 \$db "select EndpointHostname from connections where ID='\$dbID';")
  eip=\$(sqlite3 \$db "select EndpointIP from connections where ID='\$dbID';")
  if ! [ -z \$ehost ]; then
    check_ip=\$(getIPFromHostname \$ehost)
  fi
  if ! [ -z \$check_ip ] && ! [ "\$check_ip" = "\$eip" ]; then
    curdt=\$(date '+%Y-%m-%d %H:%M:%S')
    sqlite3 \$db "update connections set EndpointIP='\$check_ip',LastUpdated='\$curdt' where ID='\$dbID';"
    echo "true"
  else
    echo "false"
  fi
}

function resetVPN()
{
  iname=\$1
  systemctl restart wg-quick@\$iname
}

function resetInternet()
{
  iname=\$1
  \$HSHQ_WIREGUARD_DIR/scripts/wgDockInternet.sh \$HSHQ_WIREGUARD_DIR/internet/\${iname}.conf restart
}

function getIPFromHostname()
{
  echo \$(dig \$1 +short | grep '^[.0-9]*\$')
}

main "\$@"
EOFWG
  sudo chmod 744 $HSHQ_WIREGUARD_DIR/scripts/updateEndpointIPs.sh
  sudo rm -f /etc/networkd-dispatcher/routable.d/wgDockInternetUpAll.sh
  sudo ln -s $HSHQ_WIREGUARD_DIR/scripts/wgDockInternetUpAll.sh /etc/networkd-dispatcher/routable.d/wgDockInternetUpAll.sh
  sudo tee $HSHQ_SCRIPTS_DIR/root/createWGDockerNetworks.sh >/dev/null <<EOFWG
#!/bin/bash
set +e

wgdir=$HSHQ_WIREGUARD_DIR
scriptsdir=$HSHQ_SCRIPTS_DIR

function main()
{
  sudo ls \$wgdir/internet/*.conf | while read conf
  do
    DOCKER_NETWORK_NAME=\$(getConfigVar \#DOCKER_NETWORK_NAME)
    DOCKER_NETWORK_SUBNET=\$(getConfigVar \#DOCKER_NETWORK_SUBNET)
    CONN=\$(getConfigVar \#MTU)
    docker network inspect \$DOCKER_NETWORK_NAME > /dev/null 2>&1
    if [ \$? -ne 0 ]; then
      docker network create \$DOCKER_NETWORK_NAME --subnet \$DOCKER_NETWORK_SUBNET -o com.docker.network.driver.mtu=\$MTU -o com.docker.network.bridge.name=\$DOCKER_NETWORK_NAME
    fi
  done
}
function getConfigVar()
{
  echo \$(grep ^\$1= \$conf | sed 's/^[^=]*=//' | sed 's/ *\$//g')
}

main "\$@"
EOFWG
  sudo chmod 755 $HSHQ_SCRIPTS_DIR/root/createWGDockerNetworks.sh
  sudo tee $HSHQ_SCRIPTS_DIR/root/createWGDockerNetworks.service >/dev/null <<EOFWG
[Unit]
Description=Check or create Docker networks for WireGuard interfaces and private IP ranges
After=default.target

[Service]
Type=oneshot
ExecStart=$HSHQ_SCRIPTS_DIR/root/createWGDockerNetworks.sh

[Install]
WantedBy=default.target
EOFWG
  sudo chmod 644 $HSHQ_SCRIPTS_DIR/root/createWGDockerNetworks.service
  sudo chown root:root $HSHQ_SCRIPTS_DIR/root/createWGDockerNetworks.service
  sudo rm -f /etc/systemd/system/createWGDockerNetworks.service
  sudo ln -s $HSHQ_SCRIPTS_DIR/root/createWGDockerNetworks.service /etc/systemd/system/createWGDockerNetworks.service
  sudo systemctl daemon-reload
  sudo systemctl enable createWGDockerNetworks
  if [[ "$(isProgramInstalled sqlite3)" = "false" ]]; then
    echo "Installing sqlite3, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y sqlite3 > /dev/null 2>&1
  fi
}

function enableWGInterfaceQuick()
{
  config_filename=$1
  sudo systemctl enable wg-quick@${config_filename}.service
  sudo systemctl daemon-reload
  sudo systemctl start wg-quick@${config_filename}
}

function removeWGInterfaceQuick()
{
  config_filename=$1
  sudo wg-quick down /etc/wireguard/${config_filename}.conf
  sudo systemctl stop wg-quick@${config_filename}.service
  sudo systemctl disable wg-quick@${config_filename}.service
  sudo systemctl daemon-reload
  sudo rm -f /etc/wireguard/${config_filename}.conf
}

function isProgramInstalled()
{
  bin_name=$(echo $1 | cut -d"|" -f1)
  lib_name=$(echo $1 | cut -d"|" -f2)
  if [[ -z $(which ${bin_name}) ]]; then
    echo "false"
  else
    echo "true"
  fi
}

function installDocker()
{
  set +e

  IS_ROOTLESS_DOCKER=false
#  if [[ "$(isProgramInstalled docker)" = "false" ]]; then
#    dockermenu=$(cat << EOF
#$hshqlogo
#
#Select your install method
#EOF
#    )
#    menures=$(whiptail --title "Install Docker" --menu "$dockermenu" $MENU_HEIGHT $MENU_WIDTH $MENU_INT_HEIGHT \
#  "1" "Rooted" \
#  "2" "Rootless - more secure (only available for Ubuntu on bare metal install)" \
#  "3" "Exit Installation" 3>&1 1>&2 2>&3)
#    case $menures in
#      1)
#        IS_ROOTLESS_DOCKER=false ;;
#      2)
#        IS_ROOTLESS_DOCKER=true ;;
#      3)
#        exit 2 ;;
#    esac
#  fi
  updateConfigVar IS_ROOTLESS_DOCKER $IS_ROOTLESS_DOCKER
  outputDockerSettings
  util="docker|docker"
  if [[ "$(isProgramInstalled $util)" = "true" ]]; then
    sudo systemctl restart docker
    return 0
  fi
  if [ "$IS_ROOTLESS_DOCKER" = "true" ]; then
	installDockerUbuntu2004Rooted
	installDockerUbuntu2004Rootless
  else
    installDockerUbuntu2004Rooted
  fi
}

function removeDocker()
{
  sudo systemctl stop docker
  sudo DEBIAN_FRONTEND=noninteractive apt purge -y docker-engine docker docker.io docker-ce docker-ce-cli docker-compose
  sudo DEBIAN_FRONTEND=noninteractive apt autoremove -y --purge docker-engine docker docker.io docker-ce docker-compose
  sudo rm -rf /var/lib/docker /etc/docker
  sudo rm -rf /etc/apparmor.d/docker
  sudo rm -rf /var/run/docker.sock
  sudo rm -rf /usr/local/bin/docker-compose
  sudo rm -rf /etc/docker
  sudo rm -rf ~/.docker
  sudo rm -rf /usr/share/keyrings/docker-archive-keyring.gpg
  sudo rm -rf /etc/apt/sources.list.d/docker.list
  sudo groupdel docker
}

function outputDockerSettings()
{
  sudo mkdir -p /etc/docker
  if [ -z $DEFAULT_NETWORK_POOL ]; then
    DEFAULT_NETWORK_POOL=172.16.0.0/12
  fi
  if [ -z $DEFAULT_NETWORK_SIZE ]; then
    DEFAULT_NETWORK_SIZE=24
  fi
  if [ -z $DOCKER_METRICS_PORT ]; then
    DOCKER_METRICS_PORT=8323
  fi

  sudo tee /etc/docker/daemon.json >/dev/null <<EOFRL
{
  "default-address-pools":
  [
    {"base":"$DEFAULT_NETWORK_POOL","size":$DEFAULT_NETWORK_SIZE}
  ],
  "log-driver": "syslog",
  "log-opts": {
    "syslog-address": "unixgram:///dev/log",
    "tag": "docker/{{.Name}}"
  },
  "ipv6": false,
  "metrics-addr": "0.0.0.0:$DOCKER_METRICS_PORT"
}
EOFRL

  sudo tee /etc/rsyslog.d/docker-logs.conf >/dev/null <<EOFRL
\$FileCreateMode 0644
\$template DockerDaemonLogFileName,"/var/log/docker/docker.log"
\$template DockerContainerLogFileName,"/var/log/docker/%SYSLOGTAG:R,ERE,1,FIELD:docker/(.*)\[--end:secpath-replace%.log"
if \$programname == 'dockerd' then {
  ?DockerDaemonLogFileName
  stop
}
if \$programname == 'containerd' then {
  ?DockerDaemonLogFileName
  stop
}
if \$programname == 'docker' then {
  if \$syslogtag contains 'docker/' then {
  ?DockerContainerLogFileName
  stop
  }
}
\$FileCreateMode 0600
EOFRL

}

function installDockerUbuntu2004Rooted()
{
  # Install Docker (https://docs.docker.com/engine/install/ubuntu/)
  echo "Installing docker, please wait..."
  sudo DEBIAN_FRONTEND=noninteractive apt install -y ca-certificates curl gnupg lsb-release > /dev/null 2>&1
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo DEBIAN_FRONTEND=noninteractive apt update
  echo "Installing docker, please wait..."
  sudo DEBIAN_FRONTEND=noninteractive apt install -y docker-ce=5:25.0.5-1~ubuntu.22.04~jammy docker-ce-cli=5:25.0.5-1~ubuntu.22.04~jammy containerd.io docker-compose docker-compose-plugin > /dev/null 2>&1
  # See https://www.portainer.io/blog/portainer-and-docker-26
  sudo apt-mark hold docker-ce
  sudo apt-mark hold docker-ce-cli
  sudo systemctl restart rsyslog
  sudo systemctl restart docker
}

function installDockerUbuntu2004Rootless()
{
  sudo DEBIAN_FRONTEND=noninteractive apt update
  # Install dependencies for rootless docker (https://linuxhandbook.com/rootless-docker/)
  sudo DEBIAN_FRONTEND=noninteractive apt install -y uidmap dbus-user-session fuse-overlayfs > /dev/null 2>&1
  sudo systemctl disable --now docker.service docker.socket
  # Install the rootless docker package (https://linuxhandbook.com/rootless-docker/)
  curl -fsSL https://get.docker.com/rootless | sh
  sudo setcap cap_net_bind_service=ep $HOME/bin/rootlesskit
  systemctl --user start docker
  systemctl --user enable docker
  sudo loginctl enable-linger $(whoami)
  echo "" >> ~/.bashrc
  echo "export PATH=$HOME/bin:\$PATH" >> ~/.bashrc
  echo "export DOCKER_HOST=unix:///run/user/$USERID/docker.sock" >> ~/.bashrc
  updateConfigVar IS_ROOTLESS_DOCKER true
}

function initCertificateAuthority()
{
  if [ "$CERTS_IS_CA_INIT" = "true" ]; then
    return 0
  fi
  if [[ "$(isProgramInstalled openssl)" = "false" ]]; then
    echo "Installing openssl, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y openssl > /dev/null 2>&1
  fi
  if [[ "$(isProgramInstalled faketime)" = "false" ]]; then
    echo "Installing faketime, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y faketime > /dev/null 2>&1
  fi
  if [[ "$(isProgramInstalled bc)" = "false" ]]; then
    echo "Installing bc, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y bc > /dev/null 2>&1
  fi
  if [[ "$(isProgramInstalled htpasswd)" = "false" ]]; then
    echo "Installing htpasswd, please wait..."
    sudo DEBIAN_FRONTEND=noninteractive apt install -y apache2-utils > /dev/null 2>&1
  fi

  if [ -z "$CERTS_ROOT_CA_NAME" ]; then
    CERTS_ROOT_CA_NAME=${HOMESERVER_DOMAIN}-ca
    updateConfigVar CERTS_ROOT_CA_NAME $CERTS_ROOT_CA_NAME
  fi
  while [ -z "$CERTS_INTERNAL_COUNTRY" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      CERTS_INTERNAL_COUNTRY="US"
    else
      CERTS_INTERNAL_COUNTRY=$(promptUserInputMenu "US" "Enter Certificate Country" "Enter the country abbreviation you would like to appear on your certificates: ")
    fi
    updateConfigVar CERTS_INTERNAL_COUNTRY "$CERTS_INTERNAL_COUNTRY"
  done
  while [ -z "$CERTS_INTERNAL_STATE" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      CERTS_INTERNAL_STATE="Missouri"
    else
      CERTS_INTERNAL_STATE=$(promptUserInputMenu "Missouri" "Enter Certificate State" "Enter the state name you would like to appear on your certificates: ")
    fi
    updateConfigVar CERTS_INTERNAL_STATE "$CERTS_INTERNAL_STATE"
  done
  while [ -z "$CERTS_INTERNAL_LOCALITY" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      CERTS_INTERNAL_LOCALITY="St. Louis"
    else
      CERTS_INTERNAL_LOCALITY=$(promptUserInputMenu "St. Louis" "Enter Certificate Locality" "Enter the locality you would like to appear on your certificates: ")
    fi
    updateConfigVar CERTS_INTERNAL_LOCALITY "$CERTS_INTERNAL_LOCALITY"
  done
  while [ -z "$CERTS_INTERNAL_ROOT_CN" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      CERTS_INTERNAL_ROOT_CN="$HOMESERVER_NAME Root CA"
    else
      CERTS_INTERNAL_ROOT_CN=$(promptUserInputMenu "$HOMESERVER_NAME Root CA" "Enter Certificate Root CN" "Enter the root CN you would like to appear on your certificates: ")
    fi
    updateConfigVar CERTS_INTERNAL_ROOT_CN "$CERTS_INTERNAL_ROOT_CN"
  done
  while [ -z "$CERTS_INTERNAL_INTERMEDIATE_CN" ]
  do
    if [ "$IS_ACCEPT_DEFAULTS" = "yes" ]; then
      CERTS_INTERNAL_INTERMEDIATE_CN="$HOMESERVER_NAME ECC Intermediate"
    else
      CERTS_INTERNAL_INTERMEDIATE_CN=$(promptUserInputMenu "$HOMESERVER_NAME ECC Intermediate" "Enter Certificate Intermediate CN" "Enter the intermediate CN you would like to appear on your certificates: ")
    fi
    updateConfigVar CERTS_INTERNAL_INTERMEDIATE_CN "$CERTS_INTERNAL_INTERMEDIATE_CN"
  done

  if [ -z "$CERTS_INTERNAL_ORG_NAME" ]; then
    CERTS_INTERNAL_ORG_NAME="$HOMESERVER_NAME"
    updateConfigVar CERTS_INTERNAL_ORG_NAME "$CERTS_INTERNAL_ORG_NAME"
  fi

  if [ -f $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt ]; then
    showYesNoMessageBox "Root CA Exists" "Root CA certificate($HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt) exists. Do you wish to bypass this step and continue installing?"
	mbres=$?
	if [ $mbres -eq 0 ]; then
      return
	else
	  exit 1
    fi
  fi
  # Certificate Authority Key
  openssl genrsa -out $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.key 4096

  cat <<EOFCA > $HOME/ca.conf 
[ req ]
distinguished_name = req_distinguished_name
prompt = no
x509_extensions = v3_ca

[ req_distinguished_name ]
C   = $CERTS_INTERNAL_COUNTRY
ST  = $CERTS_INTERNAL_STATE
L   = $CERTS_INTERNAL_LOCALITY
O   = $CERTS_INTERNAL_ORG_NAME
OU  = $CERTS_INTERNAL_OU_NAME
CN  = $CERTS_INTERNAL_ROOT_CN

[ v3_ca ]
basicConstraints = critical,CA:TRUE
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
keyUsage = critical, cRLSign, keyCertSign
EOFCA
  totDays=$(echo "($(if (( $(echo "$(date --date="$CERTS_INTERNAL_CA_DAYS days" +%s.%N) < 2569682280" | bc -l) )); then echo 2569682280; else echo $(date --date="$CERTS_INTERNAL_CA_DAYS days" +%s.%N); fi)-1559365200)/86400" | bc)

  # Certificate Authority Certificate
  # Regarding faketime, see https://support.apple.com/en-us/HT210176
  faketime '2019-06-01 16:38:01 GMT' openssl req -new -x509 -sha256 -nodes -days $totDays -key $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.key -out $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -config $HOME/ca.conf
  # Create a DER format for root cert
  openssl x509 -in $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -out $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der -outform DER
  rm -f $HOME/ca.conf

  chmod 0400 $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.key
  chmod 0444 $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt
  chmod 0444 $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der

  sudo cp $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt /usr/local/share/ca-certificates/
  sudo update-ca-certificates

  CERTS_IS_CA_INIT=true
  updateConfigVar CERTS_IS_CA_INIT $CERTS_IS_CA_INIT
}

function initDHParams()
{
  openssl dhparam -out $HSHQ_SSL_DIR/dhparam.pem $CERTS_INTERNAL_DHPARAMS_KEYLENGTH
#  cat <<EOFDH > $HSHQ_SSL_DIR/dhparam.pem
#-----BEGIN DH PARAMETERS-----
#MIIBCAKCAQEA8NP8HQHwCifBetSY2KEby8sxVVm7jNMa0m9IKMB2hdPOblzTl/SK
#I720AMEhHKNC3utwYp6fhbyVQ7e+QN/VtrtbW2WsQPny2xhoOp4aUuZGVwzF4boF
#/FpCO1onyLQ4UYxPdQhoww/O7oLZceha1H4Ltq41NNzHO8KGyT5iC4Np736q/Xzl
#aRYGH/57ALBD5hxv5ROYiRdEW/8WbEVhvKVxsXU/hHSptlfqvS92OrULaagh3WJf
#M2IbmwGbw5szBtX18JLyS9yuxHWfb7eIjs1NImPOlo9BpOY15Tel8ObQv3ikGofB
#ugU5BJtHTbpmzMzL+BdaL7H+uWK1Rhn8RwIBAg==
#-----END DH PARAMETERS-----
#EOFDH
  chmod 0444 $HSHQ_SSL_DIR/dhparam.pem
}

function generateCert()
{
  CERT_NAME=$1
  DNS="$2"
  IPS="$3"
  FT_START_DATE="$4"
  FT_END_DATE="$5"
  COMMON_NAME=$(echo $DNS | sed 's|,|\n|g' | sed -n '1p')

  if ! [ -f $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.key ]; then
    echo "Certificate Authority key does not exist. Please generate a CA key and certificate first, exiting..."
    return 1
  fi
  num_days=$CERTS_INTERNAL_CA_DAYS
  cur_date_seconds=$(date +%s)
  if ! [ -z "$FT_START_DATE" ]; then
    start_date_seconds=$(date -d "$FT_START_DATE" +%s)
  fi
  if ! [ -z "$FT_END_DATE" ]; then
    end_date_seconds=$(date -d "$FT_END_DATE" +%s)
    if [ $(($end_date_seconds - $cur_date_seconds)) -lt 86400 ]; then
      echo "ERROR: End date must be at least a day after current date."
      return 1
    fi
    num_days=$(($(($end_date_seconds - $(date +%s))) / 86400))
  fi
  if ! [ -z "$FT_START_DATE" ] && ! [ -z "$FT_END_DATE" ]; then
    if [ $(($end_date_seconds - $start_date_seconds)) -lt 86400 ]; then
      echo "ERROR: End date must be at least a day after start date."
      return 1
    fi
    num_days=$(($(($end_date_seconds - $start_date_seconds)) / 86400))
  fi

  rm -f $HSHQ_SSL_DIR/$CERT_NAME.key
  rm -f $HSHQ_SSL_DIR/$CERT_NAME.crt

  # Generate certificate key
  openssl genrsa -out $HSHQ_SSL_DIR/$CERT_NAME.key 4096

  cat <<EOFCN > $HOME/$CERT_NAME-csr.cnf
[ req ]
distinguished_name = req_distinguished_name
prompt = no
req_extensions = req_ext

[ req_distinguished_name ]
C   = $CERTS_INTERNAL_COUNTRY
ST  = $CERTS_INTERNAL_STATE
L   = $CERTS_INTERNAL_LOCALITY
O   = $CERTS_INTERNAL_ORG_NAME
OU  = $CERTS_INTERNAL_OU_NAME
CN  = $COMMON_NAME

[ req_ext ]
subjectAltName = @alt_names

[ alt_names ]
EOFCN

  cat <<EOFCN > $HOME/$CERT_NAME-ext.cnf
basicConstraints = CA:FALSE
nsComment = "OpenSSL Certificate Generated By $HOMESERVER_NAME"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth,clientAuth
subjectAltName = @alt_names

[ alt_names ]
EOFCN

  dnslist=$(sed 's|,|\n|g' <<< $DNS)
  ipnum=1
  for dn in $dnslist
  do
    echo "DNS."$ipnum" = "$dn >> $HOME/$CERT_NAME-csr.cnf
    echo "DNS."$ipnum" = "$dn >> $HOME/$CERT_NAME-ext.cnf
    ((ipnum++))
  done

  iplist=$(sed 's|,|\n|g' <<< $IPS)
  ipnum=1
  for ip in $iplist
  do
    echo "IP."$ipnum" = "$ip >> $HOME/$CERT_NAME-csr.cnf
    echo "IP."$ipnum" = "$ip >> $HOME/$CERT_NAME-ext.cnf
    ((ipnum++))
  done

  # Generate certificate request
  openssl req -config $HOME/$CERT_NAME-csr.cnf -new -sha256 -key $HSHQ_SSL_DIR/$CERT_NAME.key -out $HOME/$CERT_NAME.csr
  # Sign certificate
  if [ -z "$FT_START_DATE" ]; then
    openssl x509 -req -sha256 -days $num_days \
    -in $HOME/$CERT_NAME.csr -CA $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -CAkey $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.key \
    -out $HSHQ_SSL_DIR/$CERT_NAME.crt -extfile $HOME/$CERT_NAME-ext.cnf -CAcreateserial
  else
    faketime "$FT_START_DATE" openssl x509 -req -sha256 -days $num_days \
    -in $HOME/$CERT_NAME.csr -CA $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt -CAkey $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.key \
    -out $HSHQ_SSL_DIR/$CERT_NAME.crt -extfile $HOME/$CERT_NAME-ext.cnf -CAcreateserial
  fi

  rm -f $HOME/$CERT_NAME-csr.cnf
  rm -f $HOME/$CERT_NAME-ext.cnf
  rm -f $HOME/$CERT_NAME.csr

  chmod 0444 $HSHQ_SSL_DIR/$CERT_NAME.key
  chmod 0444 $HSHQ_SSL_DIR/$CERT_NAME.crt
}

function generateCertDialog()
{
  set +e

  cert_name=""
  while [ -z "$cert_name" ]
  do
    cert_name=$(promptUserInputMenu "" "Enter Certificate Filename" "Enter the filename for this certificate:")
    mbres=$?
    if [ $mbres -ne 0 ]; then
      return 1
    fi
    if [ -z "$cert_name" ]; then
      showMessageBox "Filename Empty" "The Filename cannot be empty"
    fi
  done

  cert_dom_string=""
  while [ -z "$cert_dom_string" ]
  do
    cert_dom_string=$(promptUserInputMenu "" "Enter Certificate CN" "Enter the domain names for this certificate. Domain names should be grouped together as a comma separated list:")
    mbres=$?
    if [ $mbres -ne 0 ]; then
      return 1
    fi
    if [ -z "$cert_dom_string" ]; then
      showMessageBox "Domain Name Empty" "The Domain Name cannot be empty"
    fi
  done

  cert_ip_string=$(promptUserInputMenu "" "Enter IP Addresses" "Enter the IP addresses for this certificate. IP addresses should be grouped together as a comma separated list:")

  ft_string=""
  while [ -z "$ft_string" ]
  do
    ft_string=$(promptUserInputMenu "$(date '+%Y-%m-%d %H:%M:%S %Z')" "Enter Start Date" "Enter the Start Date for the Certificate (must be formatted as follows - 2023-01-01 00:00:00 GMT):")
    mbres=$?
    if [ $mbres -ne 0 ]; then
      return 1
    fi
    if [ -z "$ft_string" ]; then
      showMessageBox "Date Empty" "The Date cannot be empty"
    fi
  done

  generateCert "$cert_name" "$cert_dom_string" "$cert_ip_string" "$ft_string"
}

function getUpdateAssets()
{
  if [ -d $HSHQ_DATA_DIR/assets/.git ]; then
    git -C $HSHQ_DATA_DIR/assets pull > /dev/null
  else
    git clone https://github.com/homeserverhq/assets.git $HSHQ_DATA_DIR/assets
  fi
}

function pullImage()
{
  img_and_version=$1
  installLogNotify "Pulling Image: $img_and_version"
  echo "Pulling Image: $img_and_version"
  is_success=1
  num_tries=1
  set +e
  while [ $is_success -ne 0 ] && [ $num_tries -lt $MAX_DOCKER_PULL_TRIES ]
  do
    docker pull $img_and_version
    docker image inspect $img_and_version > /dev/null 2>&1
    is_success=$?
    ((num_tries++))
  done
  if [ $is_success -ne 0 ]; then
    echo "Error pulling docker image: $img_and_version"
    return 5
  fi
}

function createDockerNetworks()
{
  docker network create -o com.docker.network.bridge.name=$NET_EXTERNAL_BRIDGE_NAME --driver=bridge --subnet $NET_EXTERNAL_SUBNET dock-ext > /dev/null
  docker network create -o com.docker.network.bridge.name=$NET_WEBPROXY_BRIDGE_NAME --driver=bridge --subnet $NET_WEBPROXY_SUBNET --internal dock-proxy > /dev/null
  docker network create -o com.docker.network.bridge.name=$NET_PRIVATEIP_BRIDGE_NAME --driver=bridge --subnet $NET_PRIVATEIP_SUBNET dock-privateip > /dev/null
  sudo $HSHQ_SCRIPTS_DIR/root/dockPrivateIP.sh
  docker network create -o com.docker.network.bridge.name=$NET_INTERNALMAIL_BRIDGE_NAME --driver=bridge --subnet $NET_INTERNALMAIL_SUBNET --internal dock-internalmail > /dev/null
  docker network create -o com.docker.network.bridge.name=$NET_DBS_BRIDGE_NAME --driver=bridge --subnet $NET_DBS_SUBNET --internal dock-dbs > /dev/null
  docker network create -o com.docker.network.bridge.name=$NET_LDAP_BRIDGE_NAME --driver=bridge --subnet $NET_LDAP_SUBNET --internal dock-ldap > /dev/null 2>/dev/null
  docker network create -o com.docker.network.bridge.name=$NET_MAILU_EXT_BRIDGE_NAME --driver=bridge --subnet $NET_MAILU_EXT_SUBNET dock-mailu-ext > /dev/null 2>/dev/null
  docker network create -o com.docker.network.bridge.name=$NET_MAILU_INT_BRIDGE_NAME --driver=bridge --subnet $NET_MAILU_INT_SUBNET --internal dock-mailu-int > /dev/null 2>/dev/null
}

function removeDockerNetworks()
{
  docker network rm dock-ext > /dev/null 2>&1
  docker network rm dock-proxy > /dev/null 2>&1
  docker network rm dock-privateip > /dev/null 2>&1
  docker network rm dock-internalmail > /dev/null 2>&1
  docker network rm dock-dbs > /dev/null 2>&1
  docker network rm dock-ldap > /dev/null 2>&1
  docker network rm dock-mailu-ext > /dev/null 2>&1
  docker network rm dock-mailu-int > /dev/null 2>&1
}

function notifyStackInstallFailure()
{
  sf_stack_name=$1
  sendEmail -s "Stack Installation Failure ($sf_stack_name)" -b "$sf_stack_name did not install correctly. Please uninstall this stack and reinstall. If the error persists, then create a topic on the forum (https://forum.homeserverhq.com)." -f "$(getAdminEmailName) <$EMAIL_ADMIN_EMAIL_ADDRESS>"
}

function checkStackHSHQManaged()
{
  check_hshq_managed="$1"
  echo "$check_hshq_managed" | grep "^$STACK_VERSION_PREFIX" > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "true"
  else
    echo "false"
  fi
}

function getStackNameFromComposeLine()
{
  echo "$1" | cut -d" " -f2
}

function getVersionFromComposeLine()
{
  echo "$1" | cut -d" " -f3 | cut -d"v" -f2
}

function getScriptStackVersionNumber()
{
  echo "$1" | cut -d"v" -f2
}

function removeImageCSVList()
{
  img_csv_list=$1
  img_list=($(echo $img_csv_list | tr "," "\n"))
  for rm_img in "${img_list[@]}"
  do
    if ! [ -z "$rm_img" ]; then
      docker image rm $rm_img > /dev/null 2>&1
    fi
  done
}

function prepPerformUpdate()
{
  # This function is a drop-in replacement for all repetetive
  # code at the beginning of each of the performUpdate functions.

  # The underlying performUpdate function modifies the variable
  # perform_update_report with the results of the update process.
  # It is up to the caller to do something with it.
  perform_update_report=""
  portainerToken="$1"
  perform_stack_id=$(getStackID $perform_stack_name "$portainerToken")
  if [ -z $perform_stack_id ]; then
    is_upgrade_error=true
    perform_update_report="ERROR($perform_stack_name): There was a problem with the Portainer API. If this error persists, try restarting Portainer."
    return 1
  fi
  perform_compose=$HSHQ_STACKS_DIR/portainer/compose/$perform_stack_id/docker-compose.yml
  perform_stack_firstline=$(sudo sed -n 1p $perform_compose)
  perform_stack_ver=$(getVersionFromComposeLine "$perform_stack_firstline")
  unset image_update_map
  oldVer=v"$perform_stack_ver"
}

function upgradeStack()
{
  # This function modifies the variable stack_upgrade_report
  # with the results of the upgrade process. It is up to the 
  # caller to do something with it.

  # This function also depends on the array, image_update_map, 
  # to be set by the caller prior to entry, since passing
  # arrays as arguments in bash is a headache.

  comp_stack_name=$1
  comp_stack_id=$2
  old_ver=$3
  new_ver=$4
  cur_img_list=$5
  upgrade_compose_file=$6
  portainerToken="$7"
  stackModFunction=$8
  isReinstallStack=$9
  stackReinstallModFunction=${10}

  rem_image_list=""
  is_upgrade_error=false
  stack_upgrade_report=""

  if [ "$(checkImageList $cur_img_list $upgrade_compose_file)" = "false" ]; then
    is_upgrade_error=true
    stack_upgrade_report="ERROR ($comp_stack_name): Container image mismatch, stack version: $old_ver, image list: $cur_img_list"
    return
  fi
  for cur_repl in "${image_update_map[@]}"
  do
    new_img=$(echo $cur_repl | cut -d"," -f2)
    pullImage $new_img
    if [ $? -ne 0 ]; then
      is_upgrade_error=true
      break
    fi
  done
  set +e
  if [ "$is_upgrade_error" = "true" ]; then
    stack_upgrade_report="ERROR ($comp_stack_name): Error downloading image: $new_img, current stack version: $old_ver"
    return
  fi
  rm_image_list=""
  for cur_repl in "${image_update_map[@]}"
  do
    old_img=$(echo $cur_repl | cut -d"," -f1)
    new_img=$(echo $cur_repl | cut -d"," -f2)
    if ! [ "$old_img" = "$new_img" ]; then
      rm_image_list="${rm_image_list},$old_img"
      sudo sed -i "s|image: $old_img|image: $new_img|g" $upgrade_compose_file
    fi
  done
  sudo sed -i "1s|.*|$STACK_VERSION_PREFIX $comp_stack_name $new_ver|" $upgrade_compose_file
  $stackModFunction
  if [ "$isStartStackFromStopped" = "true" ]; then
    unset isStartStackFromStopped
    startStopStack $comp_stack_name start "$portainerToken"
  else
    if [ "$isReinstallStack" = "true" ]; then
      sudo cp $upgrade_compose_file $HOME/${comp_stack_name}-compose.yml
      sudo cp $HSHQ_STACKS_DIR/portainer/compose/$comp_stack_id/stack.env $HOME/${comp_stack_name}.env
      sudo chown $USERNAME:$USERNAME $HOME/${comp_stack_name}-compose.yml
      sudo chown $USERNAME:$USERNAME $HOME/${comp_stack_name}.env
      $stackReinstallModFunction
      updateStackByID ${comp_stack_name} ${comp_stack_id} $HOME/${comp_stack_name}-compose.yml $HOME/${comp_stack_name}.env "$portainerToken"
      rm -f $HOME/${comp_stack_name}-compose.yml $HOME/${comp_stack_name}.env
    else
      restartStackIfRunning $comp_stack_name 3 "$portainerToken"
    fi
  fi
  removeImageCSVList "$rm_image_list"
  stack_upgrade_report="$comp_stack_name: Upgraded from $old_ver to $new_ver"
}

function doNothing()
{
  return
}

# Services Functions
function loadPinnedDockerImages()
{
  IMG_ADGUARD=adguard/adguardhome:v0.107.45
  IMG_AUTHELIA=authelia/authelia:4.38.2
  IMG_BARASSISTANT_APP=barassistant/server:3.11.0
  IMG_BARASSISTANT_WEB=nginx:1.25.3-alpine
  IMG_CADDY=caddy:2.7.6
  IMG_CALIBRE_SERVER=linuxserver/calibre:7.7.0
  IMG_CALIBRE_WEB=linuxserver/calibre-web:0.6.21-ls257
  IMG_CHANGEDETECTION_APP=ghcr.io/dgtlmoon/changedetection.io:0.45.16
  IMG_CHANGEDETECTION_PLAYWRIGHT_CHROME=dgtlmoon/sockpuppetbrowser:latest
  IMG_CODESERVER=codercom/code-server:4.22.1
  IMG_COLLABORA=collabora/code:23.05.9.4.1
  IMG_COTURN=coturn/coturn:4.6
  IMG_DISCOURSE=bitnami/discourse:3.2.1
  IMG_DNSMASQ=jpillora/dnsmasq:1.1
  IMG_DOZZLE=amir20/dozzle:v6.1.1
  IMG_DRAWIO_PLANTUML=jgraph/plantuml-server
  IMG_DRAWIO_EXPORT=jgraph/export-server
  IMG_DRAWIO_WEB=jgraph/drawio:24.0.7
  IMG_DUPLICATI=linuxserver/duplicati:2.0.7
  IMG_EXCALIDRAW_SERVER=excalidraw/excalidraw-room
  IMG_EXCALIDRAW_STORAGE=kiliandeca/excalidraw-storage-backend
  IMG_EXCALIDRAW_WEB=kiliandeca/excalidraw
  IMG_FILEBROWSER=filebrowser/filebrowser:v2.27.0
  IMG_FILEDROP=filedrop/filedrop:1
  IMG_FIREFLY=fireflyiii/core:version-6.1.10
  IMG_FRESHRSS=freshrss/freshrss:1.23.1
  IMG_GHOST=ghost:5.80.3-alpine
  IMG_GITEA_APP=gitea/gitea:1.21.8
  IMG_GITLAB_APP=gitlab/gitlab-ce:16.8.4-ce.0
  IMG_GRAFANA=grafana/grafana-oss:10.3.4
  IMG_GUACAMOLE_GUACD=guacamole/guacd:1.5.4
  IMG_GUACAMOLE_WEB=guacamole/guacamole:1.5.4
  IMG_HEIMDALL=linuxserver/heimdall:2.4.13
  IMG_HOMEASSISTANT_APP=homeassistant/home-assistant:2024.3.1
  IMG_HOMEASSISTANT_CONFIGURATOR=causticlab/hass-configurator-docker:0.5.2
  IMG_HOMEASSISTANT_NODERED=nodered/node-red:3.1.7
  IMG_HOMEASSISTANT_TASMOADMIN=ghcr.io/tasmoadmin/tasmoadmin:v4.0.1
  IMG_HUGINN_APP=ghcr.io/huginn/huginn:c2839b8a78335a1cb7052d6ee1c4fbdc11ee6bb5
  IMG_INFLUXDB=influxdb:2.7.5-alpine
  IMG_INVIDIOUS=quay.io/invidious/invidious:latest
  IMG_ITTOOLS=ghcr.io/corentinth/it-tools:latest
  IMG_JELLYFIN=jellyfin/jellyfin:10.8.13
  IMG_JITSI_WEB=jitsi/web:stable-9258
  IMG_JITSI_PROSODY=jitsi/prosody:stable-9258
  IMG_JITSI_JICOFO=jitsi/jicofo:stable-9258
  IMG_JITSI_JVB=jitsi/jvb:stable-9258
  IMG_JUPYTER=continuumio/anaconda3:2024.02-1
  IMG_KASM=lscr.io/linuxserver/kasm:1.15.0
  IMG_KEILA=pentacent/keila:0.14.0
  IMG_LINKWARDEN=ghcr.io/linkwarden/linkwarden:v2.5.1
  IMG_MAIL_RELAY_POSTFIX=hshq/mail-relay/postfix:v1
  IMG_MAIL_RELAY_RSPAMD=hshq/mail-relay/rspamd:v1
  IMG_MAIL_RELAY_CLAMAV=clamav/clamav:1.2.1
  IMG_MAIL_RELAY_UNBOUND=mvance/unbound:1.19.0
  IMG_MAILU_ADMIN=ghcr.io/mailu/admin:2.0.39
  IMG_MAILU_ANTISPAM=ghcr.io/mailu/rspamd:2.0.39
  IMG_MAILU_ANTIVIRUS=ghcr.io/mailu/clamav:2.0.39
  IMG_MAILU_FETCHMAIL=ghcr.io/mailu/fetchmail:2.0.39
  IMG_MAILU_FRONT=ghcr.io/mailu/nginx:2.0.39
  IMG_MAILU_IMAP=ghcr.io/mailu/dovecot:2.0.39
  IMG_MAILU_OLETOOLS=ghcr.io/mailu/oletools:2.0.39
  IMG_MAILU_SMTP=ghcr.io/mailu/postfix:2.0.39
  IMG_MAILU_UNBOUND=ghcr.io/mailu/unbound:2.0.39
  IMG_MAILU_WEBDAV=ghcr.io/mailu/radicale:2.0.39
  IMG_MAILU_WEBMAIL=ghcr.io/mailu/webmail:2.0.39
  IMG_MASTODON_APP=tootsuite/mastodon:v4.2.8
  IMG_MASTODON_WEB=nginx:1.25.3-alpine
  IMG_MASTODON_ELASTICSEARCH=elasticsearch:8.12.2
  IMG_MATRIX_ELEMENT=vectorim/element-web:v1.11.61
  IMG_MATRIX_SYNAPSE=matrixdotorg/synapse:v1.102.0
  IMG_MEALIE=ghcr.io/mealie-recipes/mealie:v1.3.2
  IMG_MEILISEARCH=getmeili/meilisearch:v1.6
  IMG_MYSQL=mariadb:10.7.3
  IMG_NETDATA=netdata/netdata:v1.44.3
  IMG_NEXTCLOUD_APP=nextcloud:27.1.7-fpm-alpine
  IMG_NEXTCLOUD_WEB=nginx:1.25.3-alpine
  IMG_NEXTCLOUD_IMAGINARY=nextcloud/aio-imaginary:latest
  IMG_NTFY=binwiederhier/ntfy:v2.9.0
  IMG_NODE_EXPORTER=prom/node-exporter:v1.7.0
  IMG_OFELIA=mcuadros/ofelia:0.3.10
  IMG_OPENLDAP_MANAGER=wheelybird/ldap-user-manager:v1.11
  IMG_OPENLDAP_PHP=osixia/phpldapadmin:stable
  IMG_OPENLDAP_SERVER=osixia/openldap:1.5.0
  IMG_PAPERLESS_APP=ghcr.io/paperless-ngx/paperless-ngx:2.6.2
  IMG_PAPERLESS_GOTENBERG=gotenberg/gotenberg:8.2.2
  IMG_PAPERLESS_TIKA=ghcr.io/paperless-ngx/tika:2.9.1-minimal
  IMG_PEERTUBE_APP=chocobozzz/peertube:v6.0.3-bookworm
  IMG_PHOTOPRISM_APP=photoprism/photoprism:220901-bullseye
  IMG_PIPED_FRONTEND=1337kavin/piped-frontend:latest
  IMG_PIPED_PROXY=1337kavin/piped-proxy:latest
  IMG_PIPED_API=1337kavin/piped:latest
  IMG_PIPED_CRON=barrypiccinni/psql-curl
  IMG_PIPED_WEB=nginx:1.25.3-alpine
  IMG_PORTAINER=portainer/portainer-ce:2.19.4-alpine
  IMG_POSTGRES=postgres:15.0-bullseye
  IMG_PROMETHEUS=prom/prometheus:v2.50.1
  IMG_REDIS=bitnami/redis:7.0.5
  IMG_REMOTELY=immybot/remotely:88
  IMG_SALTRIM=barassistant/salt-rim:2.11.0
  IMG_SEARXNG=searxng/searxng:2024.3.15-e2af3e497
  IMG_SHLINK_APP=shlinkio/shlink:4.0.3
  IMG_SHLINK_WEB=shlinkio/shlink-web-client:4.0.1
  IMG_SPEEDTEST_TRACKER_APP=linuxserver/speedtest-tracker:0.18.3
  IMG_SQLPAD=sqlpad/sqlpad:7.4.1
  IMG_STIRLINGPDF=frooodle/s-pdf:0.22.2
  IMG_SYNCTHING=syncthing/syncthing:1.27.4
  IMG_UPTIMEKUMA=louislam/uptime-kuma:1.23.11-alpine
  IMG_VAULTWARDEN_APP=vaultwarden/server:1.30.5-alpine
  IMG_VAULTWARDEN_LDAP=thegeeklab/vaultwarden-ldap:0.6.2
  IMG_WALLABAG=wallabag/wallabag:2.6.8
  IMG_WAZUH_MANAGER=wazuh/wazuh-manager:4.7.3
  IMG_WAZUH_INDEXER=wazuh/wazuh-indexer:4.7.3
  IMG_WAZUH_DASHBOARD=wazuh/wazuh-dashboard:4.7.3
  IMG_WGPORTAL=wgportal/wg-portal:1.0.19
  IMG_WIKIJS=requarks/wiki:2.5.301
  IMG_WIREGUARD=linuxserver/wireguard:1.0.20210914
  IMG_WORDPRESS=wordpress:php8.3-apache
}

function getScriptStackVersion()
{
  stack_name=$1
  
  case "$stack_name" in
    portainer)
      echo "v2" ;;
    adguard)
      echo "v3" ;;
    sysutils)
      echo "v4" ;;
    openldap)
      echo "v1" ;;
    mailu)
      echo "v3" ;;
    wazuh)
      echo "v5" ;;
    collabora)
      echo "v4" ;;
    nextcloud)
      echo "v4" ;;
    jitsi)
      echo "v4" ;;
    matrix)
      echo "v4" ;;
    wikijs)
      echo "v2" ;;
    duplicati)
      echo "v1" ;;
    mastodon)
      echo "v4" ;;
    dozzle)
      echo "v4" ;;
    searxng)
      echo "v3" ;;
    jellyfin)
      echo "v2" ;;
    filebrowser)
      echo "v3" ;;
    photoprism)
      echo "v1" ;;
    guacamole)
      echo "v2" ;;
    authelia)
      echo "v2" ;;
    wordpress)
      echo "v2" ;;
    ghost)
      echo "v4" ;;
    peertube)
      echo "v3" ;;
    homeassistant)
      echo "v5" ;;
    gitlab)
      echo "v4" ;;
    vaultwarden)
      echo "v4" ;;
    discourse)
      echo "v3" ;;
    syncthing)
      echo "v4" ;;
    codeserver)
      echo "v4" ;;
    shlink)
      echo "v4" ;;
    firefly)
      echo "v4" ;;
    excalidraw)
      echo "v1" ;;
    drawio)
      echo "v3" ;;
    invidious)
      echo "v1" ;;
    ittools)
      echo "v1" ;;
    gitea)
      echo "v4" ;;
    mealie)
      echo "v4" ;;
    kasm)
      echo "v3" ;;
    ntfy)
      echo "v3" ;;
    remotely)
      echo "v2" ;;
    calibre)
      echo "v3" ;;
    netdata)
      echo "v2" ;;
    linkwarden)
      echo "v3" ;;
    stirlingpdf)
      echo "v3" ;;
    bar-assistant)
      echo "v2" ;;
    freshrss)
      echo "v1" ;;
    keila)
      echo "v2" ;;
    wallabag)
      echo "v1" ;;
    jupyter)
      echo "v2" ;;
    paperless)
      echo "v2" ;;
    speedtest-tracker-local)
      echo "v3" ;;
    speedtest-tracker-vpn)
      echo "v3" ;;
    heimdall)
      echo "v1" ;;
    changedetection)
      echo "v2" ;;
    huginn)
      echo "v1" ;;
    coturn)
      echo "v1" ;;
    filedrop)
      echo "v1" ;;
    piped)
      echo "v1" ;;
    ofelia)
      echo "v3" ;;
    sqlpad)
      echo "v4" ;;
    caddy-*)
      echo "v2" ;;
    clientdns-*)
      echo "v1" ;;
    uptimekuma)
      echo "v2" ;;
    mail-relay)
      echo "v2" ;;
    wgportal)
      echo "v2" ;;
  esac
}

function pullDockerImages()
{
  pullImage $IMG_PORTAINER
  pullImage $IMG_REDIS
  pullImage $IMG_POSTGRES
  pullImage $IMG_MYSQL
  pullImage $IMG_ADGUARD
  pullImage $IMG_GRAFANA
  pullImage $IMG_PROMETHEUS
  pullImage $IMG_NODE_EXPORTER
  pullImage $IMG_OPENLDAP_SERVER
  pullImage $IMG_OPENLDAP_PHP
  pullImage $IMG_OPENLDAP_MANAGER
  pullImage $IMG_MAILU_ADMIN
  pullImage $IMG_MAILU_ANTISPAM
  pullImage $IMG_MAILU_ANTIVIRUS
  pullImage $IMG_MAILU_FETCHMAIL
  pullImage $IMG_MAILU_FRONT
  pullImage $IMG_MAILU_IMAP
  pullImage $IMG_MAILU_OLETOOLS
  pullImage $IMG_MAILU_SMTP
  pullImage $IMG_MAILU_UNBOUND
  pullImage $IMG_MAILU_WEBDAV
  pullImage $IMG_MAILU_WEBMAIL
  pullImage $IMG_WAZUH_MANAGER
  pullImage $IMG_WAZUH_INDEXER
  pullImage $IMG_WAZUH_DASHBOARD
  pullImage $IMG_COLLABORA
  pullImage $IMG_NETDATA
  pullImage $IMG_NEXTCLOUD_APP
  pullImage $IMG_NEXTCLOUD_WEB
  pullImage $IMG_NEXTCLOUD_IMAGINARY
  pullImage $IMG_JITSI_WEB
  pullImage $IMG_JITSI_PROSODY
  pullImage $IMG_JITSI_JICOFO
  pullImage $IMG_JITSI_JVB
  pullImage $IMG_MATRIX_SYNAPSE
  pullImage $IMG_MATRIX_ELEMENT
  pullImage $IMG_WIKIJS
  pullImage $IMG_DUPLICATI
  pullImage $IMG_MASTODON_APP
  pullImage $IMG_MASTODON_WEB
  pullImage $IMG_DOZZLE
  pullImage $IMG_SEARXNG
  pullImage $IMG_JELLYFIN
  pullImage $IMG_FILEBROWSER
  pullImage $IMG_PHOTOPRISM_APP
  pullImage $IMG_GUACAMOLE_GUACD
  pullImage $IMG_GUACAMOLE_WEB
  pullImage $IMG_GITLAB_APP
  pullImage $IMG_HOMEASSISTANT_APP
  pullImage $IMG_HOMEASSISTANT_CONFIGURATOR
  pullImage $IMG_HOMEASSISTANT_NODERED
  pullImage $IMG_HOMEASSISTANT_TASMOADMIN
  pullImage $IMG_INFLUXDB
  pullImage $IMG_ITTOOLS
  pullImage $IMG_DISCOURSE
  pullImage $IMG_SQLPAD
  pullImage $IMG_SYNCTHING
  pullImage $IMG_VAULTWARDEN_APP
  pullImage $IMG_VAULTWARDEN_LDAP
  pullImage $IMG_WORDPRESS
  pullImage $IMG_GHOST
  pullImage $IMG_PEERTUBE_APP
  pullImage $IMG_AUTHELIA
  pullImage $IMG_HEIMDALL
  pullImage $IMG_CADDY
  pullImage $IMG_UPTIMEKUMA
  pullImage $IMG_OFELIA
  pullImage $IMG_CODESERVER
  pullImage $IMG_SHLINK_APP
  pullImage $IMG_SHLINK_WEB
  pullImage $IMG_FIREFLY
  pullImage $IMG_EXCALIDRAW_WEB
  pullImage $IMG_EXCALIDRAW_SERVER
  pullImage $IMG_EXCALIDRAW_STORAGE
  pullImage $IMG_INVIDIOUS
  pullImage $IMG_GITEA_APP
  pullImage $IMG_MEALIE
  pullImage $IMG_KASM
  pullImage $IMG_DNSMASQ
  pullImage $IMG_WIREGUARD
  pullImage $IMG_CALIBRE_SERVER
  pullImage $IMG_CALIBRE_WEB
  pullImage $IMG_LINKWARDEN
  pullImage $IMG_STIRLINGPDF
  pullImage $IMG_BARASSISTANT_APP
  pullImage $IMG_BARASSISTANT_WEB
  pullImage $IMG_MEILISEARCH
  pullImage $IMG_SALTRIM
  pullImage $IMG_FRESHRSS
  pullImage $IMG_KEILA
  pullImage $IMG_WALLABAG
  pullImage $IMG_JUPYTER
  pullImage $IMG_PAPERLESS_APP
  pullImage $IMG_PAPERLESS_GOTENBERG
  pullImage $IMG_PAPERLESS_TIKA
  pullImage $IMG_SPEEDTEST_TRACKER_APP
  pullImage $IMG_CHANGEDETECTION_APP
  pullImage $IMG_CHANGEDETECTION_PLAYWRIGHT_CHROME
  pullImage $IMG_HUGINN_APP
  pullImage $IMG_COTURN
  pullImage $IMG_FILEDROP
  pullImage $IMG_PIPED_FRONTEND
  pullImage $IMG_PIPED_PROXY
  pullImage $IMG_PIPED_API
  pullImage $IMG_PIPED_CRON
}

function pullBaseServicesDockerImages()
{
  pullImage $IMG_PORTAINER
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_ADGUARD
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_DNSMASQ
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_WIREGUARD
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_OPENLDAP_SERVER
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_OPENLDAP_PHP
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_OPENLDAP_MANAGER
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_ADMIN
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_ANTISPAM
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_ANTIVIRUS
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_FETCHMAIL
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_FRONT
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_IMAP
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_OLETOOLS
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_SMTP
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_UNBOUND
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_WEBDAV
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MAILU_WEBMAIL
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_DUPLICATI
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_AUTHELIA
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_REDIS
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_SYNCTHING
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_HEIMDALL
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_OFELIA
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_CADDY
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_UPTIMEKUMA
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_POSTGRES
  if [ $? -ne 0 ]; then
    return 4
  fi
  pullImage $IMG_MYSQL
  if [ $? -ne 0 ]; then
    return 4
  fi
  rm -f $HOME/script-server.zip
  wget -q -O $HOME/script-server.zip https://github.com/bugy/script-server/releases/download/1.18.0/script-server.zip
  retVal=$?
  if [ $retVal -ne 0 ] || ! [ -f $HOME/script-server.zip ]; then
    return 4
  fi
}

function initServicesCredentials()
{
  if [ -z "$EMAIL_ADMIN_PASSWORD" ]; then
    EMAIL_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar EMAIL_ADMIN_PASSWORD $EMAIL_ADMIN_PASSWORD
  fi
  if [ -z "$EMAIL_ADMIN_EMAIL_ADDRESS" ]; then
    EMAIL_ADMIN_EMAIL_ADDRESS="$EMAIL_ADMIN_USERNAME@$HOMESERVER_DOMAIN"
    updateConfigVar EMAIL_ADMIN_EMAIL_ADDRESS $EMAIL_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$EMAIL_SMTP_USERNAME" ]; then
    EMAIL_SMTP_USERNAME="mailsender"
    updateConfigVar EMAIL_SMTP_USERNAME $EMAIL_SMTP_USERNAME
  fi
  if [ -z "$EMAIL_SMTP_PASSWORD" ]; then
    EMAIL_SMTP_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar EMAIL_SMTP_PASSWORD $EMAIL_SMTP_PASSWORD
    rm -f $HSHQ_SECRETS_DIR/smtp_password.txt
    echo $EMAIL_SMTP_PASSWORD > $HSHQ_SECRETS_DIR/smtp_password.txt
    chmod 0400 $HSHQ_SECRETS_DIR/smtp_password.txt
  fi
  if [ -z "$EMAIL_SMTP_EMAIL_ADDRESS" ]; then
    EMAIL_SMTP_EMAIL_ADDRESS="$EMAIL_SMTP_USERNAME@$HOMESERVER_DOMAIN"
    updateConfigVar EMAIL_SMTP_EMAIL_ADDRESS $EMAIL_SMTP_EMAIL_ADDRESS
    rm -f $HSHQ_SECRETS_DIR/smtp_username.txt
    echo $EMAIL_SMTP_EMAIL_ADDRESS > $HSHQ_SECRETS_DIR/smtp_username.txt
    chmod 0400 $HSHQ_SECRETS_DIR/smtp_username.txt
  fi
  if [ -z "$CERTS_EMAIL_ADDRESS" ]; then
    CERTS_EMAIL_ADDRESS=$EMAIL_ADMIN_EMAIL_ADDRESS
    updateConfigVar CERTS_EMAIL_ADDRESS $CERTS_EMAIL_ADDRESS
  fi
  if [ -z "$LDAP_ACCOUNT_REQUESTS_EMAIL" ]; then
    LDAP_ACCOUNT_REQUESTS_EMAIL=$EMAIL_ADMIN_EMAIL_ADDRESS
    updateConfigVar LDAP_ACCOUNT_REQUESTS_EMAIL $LDAP_ACCOUNT_REQUESTS_EMAIL
  fi
  if [ -z "$NEXTCLOUD_EMAIL_FROM_ADDRESS" ]; then
    NEXTCLOUD_EMAIL_FROM_ADDRESS=$EMAIL_ADMIN_EMAIL_ADDRESS
    updateConfigVar NEXTCLOUD_EMAIL_FROM_ADDRESS $NEXTCLOUD_EMAIL_FROM_ADDRESS
  fi
  if [ -z "$PORTAINER_ADMIN_USERNAME" ]; then
    PORTAINER_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_portainer"
    updateConfigVar PORTAINER_ADMIN_USERNAME $PORTAINER_ADMIN_USERNAME
  fi
  if [ -z "$PORTAINER_ADMIN_PASSWORD" ]; then
    PORTAINER_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PORTAINER_ADMIN_PASSWORD $PORTAINER_ADMIN_PASSWORD
  fi
  if [ -z "$ADGUARD_ADMIN_USERNAME" ]; then
    ADGUARD_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_adguard"
    updateConfigVar ADGUARD_ADMIN_USERNAME $ADGUARD_ADMIN_USERNAME
  fi
  if [ -z "$ADGUARD_ADMIN_PASSWORD" ]; then
    ADGUARD_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar ADGUARD_ADMIN_PASSWORD $ADGUARD_ADMIN_PASSWORD
  fi
  if [ -z "$SCRIPTSERVER_ADMIN_USERNAME" ]; then
    SCRIPTSERVER_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_scriptserver"
    updateConfigVar SCRIPTSERVER_ADMIN_USERNAME $SCRIPTSERVER_ADMIN_USERNAME
  fi
  if [ -z "$SCRIPTSERVER_ADMIN_PASSWORD" ]; then
    SCRIPTSERVER_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SCRIPTSERVER_ADMIN_PASSWORD $SCRIPTSERVER_ADMIN_PASSWORD
  fi
  if [ -z "$GRAFANA_ADMIN_USERNAME" ]; then
    GRAFANA_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_grafana"
    updateConfigVar GRAFANA_ADMIN_USERNAME $GRAFANA_ADMIN_USERNAME
  fi
  if [ -z "$GRAFANA_ADMIN_PASSWORD" ]; then
    GRAFANA_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GRAFANA_ADMIN_PASSWORD $GRAFANA_ADMIN_PASSWORD
  fi
  if [ -z "$INFLUXDB_ADMIN_USERNAME" ]; then
    INFLUXDB_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_influxdb"
    updateConfigVar INFLUXDB_ADMIN_USERNAME $INFLUXDB_ADMIN_USERNAME
  fi
  if [ -z "$INFLUXDB_ADMIN_PASSWORD" ]; then
    INFLUXDB_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar INFLUXDB_ADMIN_PASSWORD $INFLUXDB_ADMIN_PASSWORD
  fi
  if [ -z "$INFLUXDB_ORG" ]; then
    INFLUXDB_ORG=$HOMESERVER_DOMAIN
    updateConfigVar INFLUXDB_ORG $INFLUXDB_ORG
  fi
  if [ -z "$INFLUXDB_TOKEN" ]; then
    INFLUXDB_TOKEN=$(pwgen -c -n 64 1)
    updateConfigVar INFLUXDB_TOKEN $INFLUXDB_TOKEN
  fi
  if [ -z "$INFLUXDB_HA_BUCKET" ]; then
    INFLUXDB_HA_BUCKET="home_assistant"
    updateConfigVar INFLUXDB_HA_BUCKET $INFLUXDB_HA_BUCKET
  fi
  if [ -z "$LDAP_BASE_DN"  ]; then
    LDAP_BASE_DN=$(echo "dc="$(echo $HOMESERVER_DOMAIN | sed 's/\./,dc=/g'))
    updateConfigVar LDAP_BASE_DN $LDAP_BASE_DN
  fi
  if [ -z "$LDAP_ADMIN_BIND_DN"  ]; then
    LDAP_ADMIN_BIND_DN="cn=admin,$LDAP_BASE_DN"
    updateConfigVar LDAP_ADMIN_BIND_DN $LDAP_ADMIN_BIND_DN
  fi
  if [ -z "$LDAP_ADMIN_BIND_PASSWORD" ]; then
    LDAP_ADMIN_BIND_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar LDAP_ADMIN_BIND_PASSWORD $LDAP_ADMIN_BIND_PASSWORD
  fi
  if [ -z "$LDAP_ADMIN_USER_USERNAME" ]; then
    LDAP_ADMIN_USER_USERNAME=$ADMIN_USERNAME_BASE
    updateConfigVar LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_USERNAME
  fi
  if [ -z "$LDAP_ADMIN_USER_PASSWORD" ]; then
    LDAP_ADMIN_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar LDAP_ADMIN_USER_PASSWORD $LDAP_ADMIN_USER_PASSWORD
  fi
  if [ -z "$WAZUH_USERS_DASHBOARD_PASSWORD" ]; then
    WAZUH_USERS_DASHBOARD_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar WAZUH_USERS_DASHBOARD_PASSWORD $WAZUH_USERS_DASHBOARD_PASSWORD
  fi
  if [ -z "$COLLABORA_ADMIN_USERNAME" ]; then
    COLLABORA_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_collabora"
    updateConfigVar COLLABORA_ADMIN_USERNAME $COLLABORA_ADMIN_USERNAME
  fi
  if [ -z "$COLLABORA_ADMIN_PASSWORD" ]; then
    COLLABORA_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar COLLABORA_ADMIN_PASSWORD $COLLABORA_ADMIN_PASSWORD
  fi
  if [ -z "$NEXTCLOUD_ADMIN_USERNAME" ]; then
    NEXTCLOUD_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_nextcloud"
    updateConfigVar NEXTCLOUD_ADMIN_USERNAME $NEXTCLOUD_ADMIN_USERNAME
  fi
  if [ -z "$NEXTCLOUD_ADMIN_EMAIL_ADDRESS" ]; then
    NEXTCLOUD_ADMIN_EMAIL_ADDRESS=$NEXTCLOUD_ADMIN_USERNAME"@"$HOMESERVER_DOMAIN
    updateConfigVar NEXTCLOUD_ADMIN_EMAIL_ADDRESS $NEXTCLOUD_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$NEXTCLOUD_ADMIN_PASSWORD" ]; then
    NEXTCLOUD_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar NEXTCLOUD_ADMIN_PASSWORD $NEXTCLOUD_ADMIN_PASSWORD
  fi
  if [ -z "$NEXTCLOUD_DATABASE_NAME" ]; then
    NEXTCLOUD_DATABASE_NAME="nextclouddb"
    updateConfigVar NEXTCLOUD_DATABASE_NAME $NEXTCLOUD_DATABASE_NAME
  fi
  if [ -z "$NEXTCLOUD_DATABASE_USER" ]; then
    NEXTCLOUD_DATABASE_USER="nextcloud-user"
    updateConfigVar NEXTCLOUD_DATABASE_USER $NEXTCLOUD_DATABASE_USER
  fi
  if [ -z "$NEXTCLOUD_DATABASE_USER_PASSWORD" ]; then
    NEXTCLOUD_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar NEXTCLOUD_DATABASE_USER_PASSWORD $NEXTCLOUD_DATABASE_USER_PASSWORD
  fi
  if [ -z "$MATRIX_DATABASE_NAME" ]; then
    MATRIX_DATABASE_NAME="matrixdb"
    updateConfigVar MATRIX_DATABASE_NAME $MATRIX_DATABASE_NAME
  fi
  if [ -z "$MATRIX_DATABASE_USER" ]; then
    MATRIX_DATABASE_USER="matrix-user"
    updateConfigVar MATRIX_DATABASE_USER $MATRIX_DATABASE_USER
  fi
  if [ -z "$MATRIX_DATABASE_USER_PASSWORD" ]; then
    MATRIX_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar MATRIX_DATABASE_USER_PASSWORD $MATRIX_DATABASE_USER_PASSWORD
  fi
  if [ -z "$WIKIJS_DATABASE_NAME" ]; then
    WIKIJS_DATABASE_NAME="wikijsdb"
    updateConfigVar WIKIJS_DATABASE_NAME $WIKIJS_DATABASE_NAME
  fi
  if [ -z "$WIKIJS_DATABASE_USER" ]; then
    WIKIJS_DATABASE_USER="wikijs-user"
    updateConfigVar WIKIJS_DATABASE_USER $WIKIJS_DATABASE_USER
  fi
  if [ -z "$WIKIJS_DATABASE_USER_PASSWORD" ]; then
    WIKIJS_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar WIKIJS_DATABASE_USER_PASSWORD $WIKIJS_DATABASE_USER_PASSWORD
  fi
  if [ -z "$DUPLICATI_ADMIN_PASSWORD" ]; then
    DUPLICATI_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar DUPLICATI_ADMIN_PASSWORD $DUPLICATI_ADMIN_PASSWORD
  fi
  if [ -z "$MASTODON_ADMIN_USERNAME" ]; then
    MASTODON_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_mastodon"
    updateConfigVar MASTODON_ADMIN_USERNAME $MASTODON_ADMIN_USERNAME
  fi
  if [ -z "$MASTODON_ADMIN_EMAIL_ADDRESS" ]; then
    MASTODON_ADMIN_EMAIL_ADDRESS=$MASTODON_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar MASTODON_ADMIN_EMAIL_ADDRESS $MASTODON_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$MASTODON_DATABASE_NAME" ]; then
    MASTODON_DATABASE_NAME=mastodondb
    updateConfigVar MASTODON_DATABASE_NAME $MASTODON_DATABASE_NAME
  fi
  if [ -z "$MASTODON_DATABASE_USER" ]; then
    MASTODON_DATABASE_USER=mastodon-user
    updateConfigVar MASTODON_DATABASE_USER $MASTODON_DATABASE_USER
  fi
  if [ -z "$MASTODON_DATABASE_USER_PASSWORD" ]; then
    MASTODON_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar MASTODON_DATABASE_USER_PASSWORD $MASTODON_DATABASE_USER_PASSWORD
  fi
  if [ -z "$DOZZLE_USERNAME" ]; then
    DOZZLE_USERNAME=$ADMIN_USERNAME_BASE"_dozzle"
    updateConfigVar DOZZLE_USERNAME $DOZZLE_USERNAME
  fi
  if [ -z "$DOZZLE_PASSWORD" ]; then
    DOZZLE_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar DOZZLE_PASSWORD $DOZZLE_PASSWORD
  fi
  if [ -z "$JELLYFIN_ADMIN_USERNAME" ]; then
    JELLYFIN_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_jellyfin"
    updateConfigVar JELLYFIN_ADMIN_USERNAME $JELLYFIN_ADMIN_USERNAME
  fi
  if [ -z "$JELLYFIN_ADMIN_PASSWORD" ]; then
    JELLYFIN_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar JELLYFIN_ADMIN_PASSWORD $JELLYFIN_ADMIN_PASSWORD
  fi
  if [ -z "$FILEBROWSER_USERNAME" ]; then
    FILEBROWSER_USERNAME=$ADMIN_USERNAME_BASE"_filebrowser"
    updateConfigVar FILEBROWSER_USERNAME $FILEBROWSER_USERNAME
  fi
  if [ -z "$FILEBROWSER_PASSWORD" ]; then
    FILEBROWSER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar FILEBROWSER_PASSWORD $FILEBROWSER_PASSWORD
  fi
  if [ -z "$PHOTOPRISM_DATABASE_NAME" ]; then
    PHOTOPRISM_DATABASE_NAME="photoprismdb"
    updateConfigVar PHOTOPRISM_DATABASE_NAME $PHOTOPRISM_DATABASE_NAME
  fi
  if [ -z "$PHOTOPRISM_DATABASE_USER" ]; then
    PHOTOPRISM_DATABASE_USER="photoprism-user"
    updateConfigVar PHOTOPRISM_DATABASE_USER $PHOTOPRISM_DATABASE_USER
  fi
  if [ -z "$PHOTOPRISM_DATABASE_USER_PASSWORD" ]; then
    PHOTOPRISM_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PHOTOPRISM_DATABASE_USER_PASSWORD $PHOTOPRISM_DATABASE_USER_PASSWORD
  fi
  if [ -z "$GUACAMOLE_DATABASE_NAME" ]; then
    GUACAMOLE_DATABASE_NAME="guacamoledb"
    updateConfigVar GUACAMOLE_DATABASE_NAME $GUACAMOLE_DATABASE_NAME
  fi
  if [ -z "$GUACAMOLE_DATABASE_USER" ]; then
    GUACAMOLE_DATABASE_USER="guacamole-user"
    updateConfigVar GUACAMOLE_DATABASE_USER $GUACAMOLE_DATABASE_USER
  fi
  if [ -z "$GUACAMOLE_DATABASE_USER_PASSWORD" ]; then
    GUACAMOLE_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GUACAMOLE_DATABASE_USER_PASSWORD $GUACAMOLE_DATABASE_USER_PASSWORD
  fi
  if [ -z "$WORDPRESS_DATABASE_NAME" ]; then
    WORDPRESS_DATABASE_NAME=wordpressdb
    updateConfigVar WORDPRESS_DATABASE_NAME $WORDPRESS_DATABASE_NAME
  fi
  if [ -z "$WORDPRESS_DATABASE_USER" ]; then
    WORDPRESS_DATABASE_USER=wordpress-user
    updateConfigVar WORDPRESS_DATABASE_USER $WORDPRESS_DATABASE_USER
  fi
  if [ -z "$WORDPRESS_DATABASE_USER_PASSWORD" ]; then
    WORDPRESS_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar WORDPRESS_DATABASE_USER_PASSWORD $WORDPRESS_DATABASE_USER_PASSWORD
  fi
  if [ -z "$GHOST_DATABASE_NAME" ]; then
    GHOST_DATABASE_NAME=ghostdb
    updateConfigVar GHOST_DATABASE_NAME $GHOST_DATABASE_NAME
  fi
  if [ -z "$GHOST_DATABASE_USER" ]; then
    GHOST_DATABASE_USER=ghost-user
    updateConfigVar GHOST_DATABASE_USER $GHOST_DATABASE_USER
  fi
  if [ -z "$GHOST_DATABASE_USER_PASSWORD" ]; then
    GHOST_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GHOST_DATABASE_USER_PASSWORD $GHOST_DATABASE_USER_PASSWORD
  fi
  if [ -z "$PEERTUBE_ADMIN_USERNAME" ]; then
    PEERTUBE_ADMIN_USERNAME="root"
    updateConfigVar PEERTUBE_ADMIN_USERNAME $PEERTUBE_ADMIN_USERNAME
  fi
  if [ -z "$PEERTUBE_ADMIN_EMAIL_ADDRESS" ]; then
    PEERTUBE_ADMIN_EMAIL_ADDRESS=$ADMIN_USERNAME_BASE"_peertube@"$HOMESERVER_DOMAIN
    updateConfigVar PEERTUBE_ADMIN_EMAIL_ADDRESS $PEERTUBE_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$PEERTUBE_ADMIN_PASSWORD" ]; then
    PEERTUBE_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PEERTUBE_ADMIN_PASSWORD $PEERTUBE_ADMIN_PASSWORD
  fi
  if [ -z "$PEERTUBE_DATABASE_NAME" ]; then
    PEERTUBE_DATABASE_NAME=peertubedb
    updateConfigVar PEERTUBE_DATABASE_NAME $PEERTUBE_DATABASE_NAME
  fi
  if [ -z "$PEERTUBE_DATABASE_USER" ]; then
    PEERTUBE_DATABASE_USER=peertube-user
    updateConfigVar PEERTUBE_DATABASE_USER $PEERTUBE_DATABASE_USER
  fi
  if [ -z "$PEERTUBE_DATABASE_USER_PASSWORD" ]; then
    PEERTUBE_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PEERTUBE_DATABASE_USER_PASSWORD $PEERTUBE_DATABASE_USER_PASSWORD
  fi
  if [ -z "$HOMEASSISTANT_DATABASE_NAME" ]; then
    HOMEASSISTANT_DATABASE_NAME=homeassistantdb
    updateConfigVar HOMEASSISTANT_DATABASE_NAME $HOMEASSISTANT_DATABASE_NAME
  fi
  if [ -z "$HOMEASSISTANT_DATABASE_USER" ]; then
    HOMEASSISTANT_DATABASE_USER=homeassistant-user
    updateConfigVar HOMEASSISTANT_DATABASE_USER $HOMEASSISTANT_DATABASE_USER
  fi
  if [ -z "$HOMEASSISTANT_DATABASE_USER_PASSWORD" ]; then
    HOMEASSISTANT_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HOMEASSISTANT_DATABASE_USER_PASSWORD $HOMEASSISTANT_DATABASE_USER_PASSWORD
  fi
  if [ -z "$HOMEASSISTANT_TASMOADMIN_USER" ]; then
    HOMEASSISTANT_TASMOADMIN_USER=hass_tasmoadmin_user
    updateConfigVar HOMEASSISTANT_TASMOADMIN_USER $HOMEASSISTANT_TASMOADMIN_USER
  fi
  if [ -z "$HOMEASSISTANT_TASMOADMIN_USER_PASSWORD" ]; then
    HOMEASSISTANT_TASMOADMIN_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HOMEASSISTANT_TASMOADMIN_USER_PASSWORD $HOMEASSISTANT_TASMOADMIN_USER_PASSWORD
  fi
  if [ -z "$HOMEASSISTANT_CONFIGURATOR_USER" ]; then
    HOMEASSISTANT_CONFIGURATOR_USER=hass_configurator_user
    updateConfigVar HOMEASSISTANT_CONFIGURATOR_USER $HOMEASSISTANT_CONFIGURATOR_USER
  fi
  if [ -z "$HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD" ]; then
    HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD $HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD
  fi
  if [ -z "$GITLAB_DATABASE_NAME" ]; then
    GITLAB_DATABASE_NAME=gitlabdb
    updateConfigVar GITLAB_DATABASE_NAME $GITLAB_DATABASE_NAME
  fi
  if [ -z "$GITLAB_DATABASE_USER" ]; then
    GITLAB_DATABASE_USER=gitlab-user
    updateConfigVar GITLAB_DATABASE_USER $GITLAB_DATABASE_USER
  fi
  if [ -z "$GITLAB_DATABASE_USER_PASSWORD" ]; then
    GITLAB_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GITLAB_DATABASE_USER_PASSWORD $GITLAB_DATABASE_USER_PASSWORD
  fi
  if [ -z "$VAULTWARDEN_ADMIN_TOKEN" ]; then
    VAULTWARDEN_ADMIN_TOKEN=$(pwgen -c -n 64 1)
    updateConfigVar VAULTWARDEN_ADMIN_TOKEN $VAULTWARDEN_ADMIN_TOKEN
  fi
  if [ -z "$VAULTWARDEN_DATABASE_NAME" ]; then
    VAULTWARDEN_DATABASE_NAME=vaultwardendb
    updateConfigVar VAULTWARDEN_DATABASE_NAME $VAULTWARDEN_DATABASE_NAME
  fi
  if [ -z "$VAULTWARDEN_DATABASE_USER" ]; then
    VAULTWARDEN_DATABASE_USER=vaultwarden-user
    updateConfigVar VAULTWARDEN_DATABASE_USER $VAULTWARDEN_DATABASE_USER
  fi
  if [ -z "$VAULTWARDEN_DATABASE_USER_PASSWORD" ]; then
    VAULTWARDEN_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar VAULTWARDEN_DATABASE_USER_PASSWORD $VAULTWARDEN_DATABASE_USER_PASSWORD
  fi
  if [ -z "$DISCOURSE_ADMIN_USERNAME" ]; then
    DISCOURSE_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_discourse"
    updateConfigVar DISCOURSE_ADMIN_USERNAME $DISCOURSE_ADMIN_USERNAME
  fi
  if [ -z "$DISCOURSE_ADMIN_EMAIL_ADDRESS" ]; then
    DISCOURSE_ADMIN_EMAIL_ADDRESS=$DISCOURSE_ADMIN_USERNAME"@"$HOMESERVER_DOMAIN
    updateConfigVar DISCOURSE_ADMIN_EMAIL_ADDRESS $DISCOURSE_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$DISCOURSE_ADMIN_PASSWORD" ]; then
    DISCOURSE_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar DISCOURSE_ADMIN_PASSWORD $DISCOURSE_ADMIN_PASSWORD
  fi
  if [ -z "$DISCOURSE_DATABASE_NAME" ]; then
    DISCOURSE_DATABASE_NAME=discoursedb
    updateConfigVar DISCOURSE_DATABASE_NAME $DISCOURSE_DATABASE_NAME
  fi
  if [ -z "$DISCOURSE_DATABASE_USER" ]; then
    DISCOURSE_DATABASE_USER=discourse-user
    updateConfigVar DISCOURSE_DATABASE_USER $DISCOURSE_DATABASE_USER
  fi
  if [ -z "$DISCOURSE_DATABASE_USER_PASSWORD" ]; then
    DISCOURSE_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar DISCOURSE_DATABASE_USER_PASSWORD $DISCOURSE_DATABASE_USER_PASSWORD
  fi
  if [ -z "$SYNCTHING_ADMIN_USERNAME" ]; then
    SYNCTHING_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_syncthing"
    updateConfigVar SYNCTHING_ADMIN_USERNAME $SYNCTHING_ADMIN_USERNAME
  fi
  if [ -z "$SYNCTHING_ADMIN_PASSWORD" ]; then
    SYNCTHING_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SYNCTHING_ADMIN_PASSWORD $SYNCTHING_ADMIN_PASSWORD
  fi
  if [ -z "$CODESERVER_ADMIN_USERNAME" ]; then
    CODESERVER_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_codeserver"
    updateConfigVar CODESERVER_ADMIN_USERNAME $CODESERVER_ADMIN_USERNAME
  fi
  if [ -z "$CODESERVER_ADMIN_PASSWORD" ]; then
    CODESERVER_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar CODESERVER_ADMIN_PASSWORD $CODESERVER_ADMIN_PASSWORD
  fi
  if [ -z "$SHLINK_DATABASE_NAME" ]; then
    SHLINK_DATABASE_NAME=shlinkdb
    updateConfigVar SHLINK_DATABASE_NAME $SHLINK_DATABASE_NAME
  fi
  if [ -z "$SHLINK_DATABASE_USER" ]; then
    SHLINK_DATABASE_USER=shlink-user
    updateConfigVar SHLINK_DATABASE_USER $SHLINK_DATABASE_USER
  fi
  if [ -z "$SHLINK_DATABASE_USER_PASSWORD" ]; then
    SHLINK_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SHLINK_DATABASE_USER_PASSWORD $SHLINK_DATABASE_USER_PASSWORD
  fi
  if [ -z "$FIREFLY_DATABASE_NAME" ]; then
    FIREFLY_DATABASE_NAME=fireflydb
    updateConfigVar FIREFLY_DATABASE_NAME $FIREFLY_DATABASE_NAME
  fi
  if [ -z "$FIREFLY_DATABASE_USER" ]; then
    FIREFLY_DATABASE_USER=firefly-user
    updateConfigVar FIREFLY_DATABASE_USER $FIREFLY_DATABASE_USER
  fi
  if [ -z "$FIREFLY_DATABASE_USER_PASSWORD" ]; then
    FIREFLY_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar FIREFLY_DATABASE_USER_PASSWORD $FIREFLY_DATABASE_USER_PASSWORD
  fi
  if [ -z "$INVIDIOUS_DATABASE_NAME" ]; then
    INVIDIOUS_DATABASE_NAME=invidiousdb
    updateConfigVar INVIDIOUS_DATABASE_NAME $INVIDIOUS_DATABASE_NAME
  fi
  if [ -z "$INVIDIOUS_DATABASE_USER" ]; then
    INVIDIOUS_DATABASE_USER=invidious-user
    updateConfigVar INVIDIOUS_DATABASE_USER $INVIDIOUS_DATABASE_USER
  fi
  if [ -z "$INVIDIOUS_DATABASE_USER_PASSWORD" ]; then
    INVIDIOUS_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar INVIDIOUS_DATABASE_USER_PASSWORD $INVIDIOUS_DATABASE_USER_PASSWORD
  fi
  if [ -z "$GITEA_ADMIN_USERNAME" ]; then
    GITEA_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_gitea"
    updateConfigVar GITEA_ADMIN_USERNAME $GITEA_ADMIN_USERNAME
  fi
  if [ -z "$GITEA_ADMIN_EMAIL_ADDRESS" ]; then
    GITEA_ADMIN_EMAIL_ADDRESS=$GITEA_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar GITEA_ADMIN_EMAIL_ADDRESS $GITEA_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$GITEA_ADMIN_PASSWORD" ]; then
    GITEA_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GITEA_ADMIN_PASSWORD $GITEA_ADMIN_PASSWORD
  fi
  if [ -z "$GITEA_DATABASE_NAME" ]; then
    GITEA_DATABASE_NAME=giteadb
    updateConfigVar GITEA_DATABASE_NAME $GITEA_DATABASE_NAME
  fi
  if [ -z "$GITEA_DATABASE_USER" ]; then
    GITEA_DATABASE_USER=gitea-user
    updateConfigVar GITEA_DATABASE_USER $GITEA_DATABASE_USER
  fi
  if [ -z "$GITEA_DATABASE_USER_PASSWORD" ]; then
    GITEA_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GITEA_DATABASE_USER_PASSWORD $GITEA_DATABASE_USER_PASSWORD
  fi
  if [ -z "$SQLPAD_ADMIN_USERNAME" ]; then
    SQLPAD_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_sqlpad"
    updateConfigVar SQLPAD_ADMIN_USERNAME $SQLPAD_ADMIN_USERNAME
  fi
  if [ -z "$SQLPAD_ADMIN_PASSWORD" ]; then
    SQLPAD_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SQLPAD_ADMIN_PASSWORD $SQLPAD_ADMIN_PASSWORD
  fi
  if [ -z "$HEIMDALL_ADMIN_USERNAME" ]; then
    HEIMDALL_ADMIN_USERNAME="Admin"
    updateConfigVar HEIMDALL_ADMIN_USERNAME $HEIMDALL_ADMIN_USERNAME
  fi
  if [ -z "$HEIMDALL_ADMIN_PASSWORD" ]; then
    HEIMDALL_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HEIMDALL_ADMIN_PASSWORD $HEIMDALL_ADMIN_PASSWORD
  fi
  if [ -z "$HEIMDALL_USER_USERNAME" ]; then
    HEIMDALL_USER_USERNAME="Users"
    updateConfigVar HEIMDALL_USER_USERNAME $HEIMDALL_USER_USERNAME
  fi
  if [ -z "$HEIMDALL_USER_PASSWORD" ]; then
    HEIMDALL_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HEIMDALL_USER_PASSWORD $HEIMDALL_USER_PASSWORD
  fi
  if [ -z "$HEIMDALL_HOMESERVERS_USERNAME" ]; then
    HEIMDALL_HOMESERVERS_USERNAME="HomeServers"
    updateConfigVar HEIMDALL_HOMESERVERS_USERNAME $HEIMDALL_HOMESERVERS_USERNAME
  fi
  if [ -z "$HEIMDALL_HOMESERVERS_PASSWORD" ]; then
    HEIMDALL_HOMESERVERS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HEIMDALL_HOMESERVERS_PASSWORD $HEIMDALL_HOMESERVERS_PASSWORD
  fi
  if [ -z "$HEIMDALL_RELAYSERVER_USERNAME" ]; then
    HEIMDALL_RELAYSERVER_USERNAME="RelayServer"
    updateConfigVar HEIMDALL_RELAYSERVER_USERNAME $HEIMDALL_RELAYSERVER_USERNAME
  fi
  if [ -z "$HEIMDALL_RELAYSERVER_PASSWORD" ]; then
    HEIMDALL_RELAYSERVER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HEIMDALL_RELAYSERVER_PASSWORD $HEIMDALL_RELAYSERVER_PASSWORD
  fi
  if [ -z "$UPTIMEKUMA_USERNAME" ]; then
    UPTIMEKUMA_USERNAME=$ADMIN_USERNAME_BASE"_uptimekuma"
    updateConfigVar UPTIMEKUMA_USERNAME $UPTIMEKUMA_USERNAME
  fi
  if [ -z "$UPTIMEKUMA_PASSWORD" ]; then
    UPTIMEKUMA_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar UPTIMEKUMA_PASSWORD $UPTIMEKUMA_PASSWORD
  fi
  if [ -z "$MEALIE_ADMIN_USERNAME" ]; then
    MEALIE_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_mealie"
    updateConfigVar MEALIE_ADMIN_USERNAME $MEALIE_ADMIN_USERNAME
  fi
  if [ -z "$MEALIE_ADMIN_EMAIL_ADDRESS" ]; then
    MEALIE_ADMIN_EMAIL_ADDRESS=$MEALIE_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar MEALIE_ADMIN_EMAIL_ADDRESS $MEALIE_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$MEALIE_ADMIN_PASSWORD" ]; then
    MEALIE_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar MEALIE_ADMIN_PASSWORD $MEALIE_ADMIN_PASSWORD
  fi
  if [ -z "$MEALIE_DATABASE_NAME" ]; then
    MEALIE_DATABASE_NAME=mealiedb
    updateConfigVar MEALIE_DATABASE_NAME $MEALIE_DATABASE_NAME
  fi
  if [ -z "$MEALIE_DATABASE_USER" ]; then
    MEALIE_DATABASE_USER=mealie-user
    updateConfigVar MEALIE_DATABASE_USER $MEALIE_DATABASE_USER
  fi
  if [ -z "$MEALIE_DATABASE_USER_PASSWORD" ]; then
    MEALIE_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar MEALIE_DATABASE_USER_PASSWORD $MEALIE_DATABASE_USER_PASSWORD
  fi
  if [ -z "$REMOTELY_ADMIN_USERNAME" ]; then
    REMOTELY_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_remotely"
    updateConfigVar REMOTELY_ADMIN_USERNAME $REMOTELY_ADMIN_USERNAME
  fi
  if [ -z "$REMOTELY_ADMIN_EMAIL_ADDRESS" ]; then
    REMOTELY_ADMIN_EMAIL_ADDRESS=$REMOTELY_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar REMOTELY_ADMIN_EMAIL_ADDRESS $REMOTELY_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$REMOTELY_ADMIN_PASSWORD" ]; then
    REMOTELY_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar REMOTELY_ADMIN_PASSWORD $REMOTELY_ADMIN_PASSWORD
  fi
  if [ -z "$CALIBRE_WEB_ADMIN_USERNAME" ]; then
    CALIBRE_WEB_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_calibre"
    updateConfigVar CALIBRE_WEB_ADMIN_USERNAME $CALIBRE_WEB_ADMIN_USERNAME
  fi
  if [ -z "$CALIBRE_WEB_ADMIN_EMAIL_ADDRESS" ]; then
    CALIBRE_WEB_ADMIN_EMAIL_ADDRESS=$CALIBRE_WEB_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar CALIBRE_WEB_ADMIN_EMAIL_ADDRESS $CALIBRE_WEB_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$CALIBRE_WEB_ADMIN_PASSWORD" ]; then
    CALIBRE_WEB_ADMIN_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar CALIBRE_WEB_ADMIN_PASSWORD $CALIBRE_WEB_ADMIN_PASSWORD
  fi
  if [ -z "$LINKWARDEN_DATABASE_NAME" ]; then
    LINKWARDEN_DATABASE_NAME=linkwardendb
    updateConfigVar LINKWARDEN_DATABASE_NAME $LINKWARDEN_DATABASE_NAME
  fi
  if [ -z "$LINKWARDEN_DATABASE_USER" ]; then
    LINKWARDEN_DATABASE_USER=linkwarden-user
    updateConfigVar LINKWARDEN_DATABASE_USER $LINKWARDEN_DATABASE_USER
  fi
  if [ -z "$LINKWARDEN_DATABASE_USER_PASSWORD" ]; then
    LINKWARDEN_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar LINKWARDEN_DATABASE_USER_PASSWORD $LINKWARDEN_DATABASE_USER_PASSWORD
  fi
  if [ -z "$FRESHRSS_ADMIN_USERNAME" ]; then
    FRESHRSS_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_freshrss"
    updateConfigVar FRESHRSS_ADMIN_USERNAME $FRESHRSS_ADMIN_USERNAME
  fi
  if [ -z "$FRESHRSS_ADMIN_EMAIL_ADDRESS" ]; then
    FRESHRSS_ADMIN_EMAIL_ADDRESS=$FRESHRSS_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar FRESHRSS_ADMIN_EMAIL_ADDRESS $FRESHRSS_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$FRESHRSS_ADMIN_PASSWORD" ]; then
    FRESHRSS_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar FRESHRSS_ADMIN_PASSWORD $FRESHRSS_ADMIN_PASSWORD
  fi
  if [ -z "$FRESHRSS_DATABASE_NAME" ]; then
    FRESHRSS_DATABASE_NAME=freshrssdb
    updateConfigVar FRESHRSS_DATABASE_NAME $FRESHRSS_DATABASE_NAME
  fi
  if [ -z "$FRESHRSS_DATABASE_USER" ]; then
    FRESHRSS_DATABASE_USER=freshrss-user
    updateConfigVar FRESHRSS_DATABASE_USER $FRESHRSS_DATABASE_USER
  fi
  if [ -z "$FRESHRSS_DATABASE_USER_PASSWORD" ]; then
    FRESHRSS_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar FRESHRSS_DATABASE_USER_PASSWORD $FRESHRSS_DATABASE_USER_PASSWORD
  fi
  if [ -z "$KEILA_ADMIN_USERNAME" ]; then
    KEILA_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_keila"
    updateConfigVar KEILA_ADMIN_USERNAME $KEILA_ADMIN_USERNAME
  fi
  if [ -z "$KEILA_ADMIN_EMAIL_ADDRESS" ]; then
    KEILA_ADMIN_EMAIL_ADDRESS=$KEILA_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar KEILA_ADMIN_EMAIL_ADDRESS $KEILA_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$KEILA_ADMIN_PASSWORD" ]; then
    KEILA_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar KEILA_ADMIN_PASSWORD $KEILA_ADMIN_PASSWORD
  fi
  if [ -z "$KEILA_DATABASE_NAME" ]; then
    KEILA_DATABASE_NAME=keiladb
    updateConfigVar KEILA_DATABASE_NAME $KEILA_DATABASE_NAME
  fi
  if [ -z "$KEILA_DATABASE_USER" ]; then
    KEILA_DATABASE_USER=keila-user
    updateConfigVar KEILA_DATABASE_USER $KEILA_DATABASE_USER
  fi
  if [ -z "$KEILA_DATABASE_USER_PASSWORD" ]; then
    KEILA_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar KEILA_DATABASE_USER_PASSWORD $KEILA_DATABASE_USER_PASSWORD
  fi
  if [ -z "$WALLABAG_ADMIN_USERNAME" ]; then
    WALLABAG_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_wallabag"
    updateConfigVar WALLABAG_ADMIN_USERNAME $WALLABAG_ADMIN_USERNAME
  fi
  if [ -z "$WALLABAG_ADMIN_EMAIL_ADDRESS" ]; then
    WALLABAG_ADMIN_EMAIL_ADDRESS=$WALLABAG_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar WALLABAG_ADMIN_EMAIL_ADDRESS $WALLABAG_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$WALLABAG_ADMIN_PASSWORD" ]; then
    WALLABAG_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar WALLABAG_ADMIN_PASSWORD $WALLABAG_ADMIN_PASSWORD
  fi
  if [ -z "$WALLABAG_DATABASE_NAME" ]; then
    WALLABAG_DATABASE_NAME=wallabagdb
    updateConfigVar WALLABAG_DATABASE_NAME $WALLABAG_DATABASE_NAME
  fi
  if [ -z "$WALLABAG_DATABASE_USER" ]; then
    WALLABAG_DATABASE_USER=wallabag-user
    updateConfigVar WALLABAG_DATABASE_USER $WALLABAG_DATABASE_USER
  fi
  if [ -z "$WALLABAG_DATABASE_USER_PASSWORD" ]; then
    WALLABAG_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar WALLABAG_DATABASE_USER_PASSWORD $WALLABAG_DATABASE_USER_PASSWORD
  fi
  if [ -z "$JUPYTER_ADMIN_PASSWORD" ]; then
    JUPYTER_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar JUPYTER_ADMIN_PASSWORD $JUPYTER_ADMIN_PASSWORD
  fi
  if [ -z "$PAPERLESS_ADMIN_USERNAME" ]; then
    PAPERLESS_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_paperless"
    updateConfigVar PAPERLESS_ADMIN_USERNAME $PAPERLESS_ADMIN_USERNAME
  fi
  if [ -z "$PAPERLESS_ADMIN_EMAIL_ADDRESS" ]; then
    PAPERLESS_ADMIN_EMAIL_ADDRESS=$PAPERLESS_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar PAPERLESS_ADMIN_EMAIL_ADDRESS $PAPERLESS_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$PAPERLESS_ADMIN_PASSWORD" ]; then
    PAPERLESS_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PAPERLESS_ADMIN_PASSWORD $PAPERLESS_ADMIN_PASSWORD
  fi
  if [ -z "$PAPERLESS_DATABASE_NAME" ]; then
    PAPERLESS_DATABASE_NAME=paperlessdb
    updateConfigVar PAPERLESS_DATABASE_NAME $PAPERLESS_DATABASE_NAME
  fi
  if [ -z "$PAPERLESS_DATABASE_USER" ]; then
    PAPERLESS_DATABASE_USER=paperless-user
    updateConfigVar PAPERLESS_DATABASE_USER $PAPERLESS_DATABASE_USER
  fi
  if [ -z "$PAPERLESS_DATABASE_USER_PASSWORD" ]; then
    PAPERLESS_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PAPERLESS_DATABASE_USER_PASSWORD $PAPERLESS_DATABASE_USER_PASSWORD
  fi
  if [ -z "$SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME" ]; then
    SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_speedtest_tracker_local"
    updateConfigVar SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME $SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME
  fi
  if [ -z "$SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS" ]; then
    SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS=$SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS $SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD" ]; then
    SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD $SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD
  fi
  if [ -z "$SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME" ]; then
    SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME=speedtesttrackerlocaldb
    updateConfigVar SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
  fi
  if [ -z "$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER" ]; then
    SPEEDTEST_TRACKER_LOCAL_DATABASE_USER=speedtest-tracker-local-user
    updateConfigVar SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER
  fi
  if [ -z "$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD" ]; then
    SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD
  fi
  if [ -z "$SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME" ]; then
    SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_speedtest_tracker_vpn"
    updateConfigVar SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME $SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME
  fi
  if [ -z "$SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS" ]; then
    SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS=$SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS $SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD" ]; then
    SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD $SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD
  fi
  if [ -z "$SPEEDTEST_TRACKER_VPN_DATABASE_NAME" ]; then
    SPEEDTEST_TRACKER_VPN_DATABASE_NAME=speedtesttrackervpndb
    updateConfigVar SPEEDTEST_TRACKER_VPN_DATABASE_NAME $SPEEDTEST_TRACKER_VPN_DATABASE_NAME
  fi
  if [ -z "$SPEEDTEST_TRACKER_VPN_DATABASE_USER" ]; then
    SPEEDTEST_TRACKER_VPN_DATABASE_USER=speedtest-tracker-vpn-user
    updateConfigVar SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_USER
  fi
  if [ -z "$SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD" ]; then
    SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD $SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD
  fi
  if [ -z "$CHANGEDETECTION_ADMIN_PASSWORD" ]; then
    CHANGEDETECTION_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar CHANGEDETECTION_ADMIN_PASSWORD $CHANGEDETECTION_ADMIN_PASSWORD
  fi
  if [ -z "$HUGINN_ADMIN_USERNAME" ]; then
    HUGINN_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_huginn"
    updateConfigVar HUGINN_ADMIN_USERNAME $HUGINN_ADMIN_USERNAME
  fi
  if [ -z "$HUGINN_ADMIN_EMAIL_ADDRESS" ]; then
    HUGINN_ADMIN_EMAIL_ADDRESS=$HUGINN_ADMIN_USERNAME@$HOMESERVER_DOMAIN
    updateConfigVar HUGINN_ADMIN_EMAIL_ADDRESS $HUGINN_ADMIN_EMAIL_ADDRESS
  fi
  if [ -z "$HUGINN_ADMIN_PASSWORD" ]; then
    HUGINN_ADMIN_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HUGINN_ADMIN_PASSWORD $HUGINN_ADMIN_PASSWORD
  fi
  if [ -z "$HUGINN_DATABASE_NAME" ]; then
    HUGINN_DATABASE_NAME=huginndb
    updateConfigVar HUGINN_DATABASE_NAME $HUGINN_DATABASE_NAME
  fi
  if [ -z "$HUGINN_DATABASE_USER" ]; then
    HUGINN_DATABASE_USER=huginn-user
    updateConfigVar HUGINN_DATABASE_USER $HUGINN_DATABASE_USER
  fi
  if [ -z "$HUGINN_DATABASE_USER_PASSWORD" ]; then
    HUGINN_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar HUGINN_DATABASE_USER_PASSWORD $HUGINN_DATABASE_USER_PASSWORD
  fi
  if [ -z "$COTURN_STATIC_SECRET" ]; then
    COTURN_STATIC_SECRET=$(pwgen -c -n 64 1)
    updateConfigVar COTURN_STATIC_SECRET $COTURN_STATIC_SECRET
  fi
  if [ -z "$PIPED_DATABASE_NAME" ]; then
    PIPED_DATABASE_NAME=pipeddb
    updateConfigVar PIPED_DATABASE_NAME $PIPED_DATABASE_NAME
  fi
  if [ -z "$PIPED_DATABASE_USER" ]; then
    PIPED_DATABASE_USER=piped-user
    updateConfigVar PIPED_DATABASE_USER $PIPED_DATABASE_USER
  fi
  if [ -z "$PIPED_DATABASE_USER_PASSWORD" ]; then
    PIPED_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PIPED_DATABASE_USER_PASSWORD $PIPED_DATABASE_USER_PASSWORD
  fi
}

function installBaseStacks()
{
  initCaddyCommon
  installPortainer
  installStackByName adguard
  installStackByName openldap
  installStackByName mailu
  installStackByName duplicati
  installStackByName authelia
  installStackByName syncthing
  installStackByName heimdall
  installStackByName ofelia
  installCaddy home home $HOMESERVER_HOST_IP home na na na "$(getNonPrivateConnectingIP)"
  installStackByName uptimekuma
  installStackByName script-server
}

function initServiceVars()
{
  set +e
  checkAddSvc "SVCD_ADGUARD=adguard,adguard,primary,admin,AdguardHome,adguard,hshq"
  checkAddSvc "SVCD_AUTHELIA=authelia,authelia,other,user,Authelia,authelia,hshq"
  checkAddSvc "SVCD_BARASSISTANT=bar-assistant,bar-assistant,primary,user,Bar Assistant,bar-assistant,hshq"
  checkAddSvc "SVCD_CADDY=caddy,caddy,primary,admin,Caddy,caddy,hshq"
  checkAddSvc "SVCD_CADDYDNS=caddy,caddy-dns,primary,admin,CaddyDNS,caddy-dns,hshq"
  checkAddSvc "SVCD_CALIBRE_SERVER=calibre,calibre-server,primary,admin,Calibre-Server,calibre-server,hshq"
  checkAddSvc "SVCD_CALIBRE_WEB=calibre,calibre-web,other,user,Calibre-Web,calibre-web,le"
  checkAddSvc "SVCD_CHANGEDETECTION=changedetection,changedetection,primary,user,Change Detection,changedetection,hshq"
  checkAddSvc "SVCD_CLIENTDNS=clientdns,clientdns,primary,admin,ClientDNS,clientdns,hshq"
  checkAddSvc "SVCD_CODESERVER=codeserver,codeserver,primary,admin,CodeServer,codeserver,hshq"
  checkAddSvc "SVCD_COLLABORA=collabora,collabora,other,user,Collabora,collabora,hshq"
  checkAddSvc "SVCD_COTURN=coturn,coturn,other,user,Coturn,coturn,hshq"
  checkAddSvc "SVCD_DISCOURSE=discourse,discourse,other,user,Discourse,discourse,hshq"
  checkAddSvc "SVCD_DOZZLE=dozzle,dozzle,primary,admin,Dozzle,dozzle,hshq"
  checkAddSvc "SVCD_DRAWIO_WEB=drawio,drawio,primary,user,Draw.io,drawio,hshq"
  checkAddSvc "SVCD_DUPLICATI=duplicati,duplicati,home,admin,Duplicati,duplicati,hshq"
  checkAddSvc "SVCD_EXCALIDRAW_WEB=excalidraw,excalidraw,primary,user,Excalidraw,excalidraw,hshq"
  checkAddSvc "SVCD_EXCALIDRAW_SERVER=excalidraw,excalidraw-server,primary,user,Excalidraw Server,excalidraw-server,hshq"
  checkAddSvc "SVCD_EXCALIDRAW_STORAGE=excalidraw,excalidraw-storage,primary,user,Excalidraw Storage,excalidraw-storage,hshq"
  checkAddSvc "SVCD_FILEBROWSER=filebrowser,filebrowser,other,user,FileBrowser,filebrowser,hshq"
  checkAddSvc "SVCD_FILEDROP=filedrop,filedrop,other,user,FileDrop,filedrop,hshq"
  checkAddSvc "SVCD_FILES=files,files,other,user,Files,files,hshq"
  checkAddSvc "SVCD_FIREFLY=firefly,firefly,home,admin,Firefly III,fireflyiii,hshq"
  checkAddSvc "SVCD_FRESHRSS=freshrss,freshrss,primary,user,FreshRSS,freshrss,le"
  checkAddSvc "SVCD_GHOST=ghost,ghost,other,user,Ghost,ghost,hshq"
  checkAddSvc "SVCD_GITEA=gitea,gitea,primary,user,Gitea,gitea,le"
  checkAddSvc "SVCD_GITLAB=gitlab,gitlab,primary,user,Gitlab,gitlab,hshq"
  checkAddSvc "SVCD_GRAFANA=sysutils,grafana,primary,admin,Grafana,grafana,hshq"
  checkAddSvc "SVCD_GUACAMOLE=guacamole,guacamole,primary,admin,Guacamole,guacamole,hshq"
  checkAddSvc "SVCD_HEIMDALL=heimdall,heimdall,other,user,Heimdall,heimdall,hshq"
  checkAddSvc "SVCD_HOMEASSISTANT_APP=homeassistant,homeassistant,primary,admin,HomeAssistant,homeassistant,hshq"
  checkAddSvc "SVCD_HOMEASSISTANT_CONFIGURATOR=homeassistant,hass-configurator,primary,admin,HomeAssistant-Configurator,hass-configurator,hshq"
  checkAddSvc "SVCD_HOMEASSISTANT_NODERED=homeassistant,hass-nodered,primary,admin,HomeAssistant-NodeRed,hass-nodered,hshq"
  checkAddSvc "SVCD_HOMEASSISTANT_TASMOADMIN=homeassistant,hass-tasmoadmin,primary,admin,HomeAssistant-Tasmoadmin,hass-tasmoadmin,hshq"
  checkAddSvc "SVCD_SCRIPTSERVER=script-server,script-server,primary,admin,Script-server,script-server,hshq"
  checkAddSvc "SVCD_HUGINN=huginn,huginn,primary,user,Huginn,huginn,hshq"
  checkAddSvc "SVCD_IMAGES=images,images,other,user,Images,images,hshq"
  checkAddSvc "SVCD_INFLUXDB=sysutils,influxdb,primary,admin,InfluxDB,influxdb,hshq"
  checkAddSvc "SVCD_INVIDIOUS=invidious,invidious,primary,user,Invidious,invidious,hshq"
  checkAddSvc "SVCD_ITTOOLS=ittools,ittools,primary,admin,IT Tools,ittools,hshq"
  checkAddSvc "SVCD_JELLYFIN=jellyfin,jellyfin,primary,user,Jellyfin,jellyfin,hshq"
  checkAddSvc "SVCD_JITSI=jitsi,jitsi,other,user,Jitsi,jitsi,le"
  checkAddSvc "SVCD_JUPYTER=jupyter,jupyter,primary,admin,Jupyter,jupyter,hshq"
  checkAddSvc "SVCD_LINKWARDEN=linkwarden,linkwarden,primary,user,Linkwarden,linkwarden,hshq"
  checkAddSvc "SVCD_KASM=kasm,kasm,primary,user,Kasm,kasm,hshq"
  checkAddSvc "SVCD_KASM_WIZARD=kasm,kasm-wizard,home,admin,Kasm Wizard,kasm-wizard,hshq"
  checkAddSvc "SVCD_KEILA=keila,keila,primary,user,Keila,keila,hshq"
  checkAddSvc "SVCD_MAILU=mailu,mailu,primary,user,Mailu,mailu,hshq"
  checkAddSvc "SVCD_MASTODON=mastodon,mastodon,other,user,Mastodon,mastodon,le"
  checkAddSvc "SVCD_MATRIX_ELEMENT_PRIVATE=matrix,element-private,other,user,Matrix Element (Private Jitsi),element-private,hshq"
  checkAddSvc "SVCD_MATRIX_ELEMENT_PUBLIC=matrix,element-public,other,user,Matrix Element (Public Jitsi),element-public,hshq"
  checkAddSvc "SVCD_MATRIX_SYNAPSE=matrix,synapse,other,user,Synapse,synapse,le"
  checkAddSvc "SVCD_MEALIE=mealie,mealie,other,user,Mealie,mealie,hshq"
  checkAddSvc "SVCD_NETDATA=netdata,netdata,primary,admin,Netdata,netdata,hshq"
  checkAddSvc "SVCD_NEXTCLOUD=nextcloud,nextcloud,other,user,Nextcloud,nextcloud,hshq"
  checkAddSvc "SVCD_NTFY=ntfy,ntfy,primary,admin,NTFY,ntfy,hshq"
  checkAddSvc "SVCD_OPENLDAP_MANAGER=openldap,usermanager,other,user,User Manager,usermanager,hshq"
  checkAddSvc "SVCD_OPENLDAP_PHP=openldap,ldapphp,primary,admin,LDAP PHP,ldapphp,hshq"
  checkAddSvc "SVCD_PAPERLESS=paperless,paperless,primary,user,Paperless-ngx,paperless,hshq"
  checkAddSvc "SVCD_PEERTUBE=peertube,peertube,other,user,PeerTube,peertube,hshq"
  checkAddSvc "SVCD_PHOTOPRISM=photoprism,photoprism,other,user,PhotoPrism,photoprism,hshq"
  checkAddSvc "SVCD_PIPED_FRONTEND=piped,piped,primary,user,Piped,piped,hshq"
  checkAddSvc "SVCD_PIPED_PROXY=piped,piped-proxy,primary,user,Piped,piped-proxy,hshq"
  checkAddSvc "SVCD_PIPED_API=piped,piped-api,primary,user,Piped,piped-api,hshq"
  checkAddSvc "SVCD_PORTAINER=portainer,portainer,primary,admin,Portainer,portainer,hshq"
  checkAddSvc "SVCD_POSTFIX=mail-relay,mail,primary,admin,Mail,mail,hshq"
  checkAddSvc "SVCD_PROMETHEUS=sysutils,prometheus,primary,admin,Prometheus,prometheus,hshq"
  checkAddSvc "SVCD_REMOTELY=remotely,remotely,primary,admin,Remotely,remotely,hshq"
  checkAddSvc "SVCD_RSPAMD=mail-relay,rspamd,primary,admin,Rspamd,rspamd,hshq"
  checkAddSvc "SVCD_SEARXNG=searxng,searxng,primary,user,SearxNG,searxng,hshq"
  checkAddSvc "SVCD_SHLINK_APP=shlink,shlink-app,other,user,Shlink App,links,hshq"
  checkAddSvc "SVCD_SHLINK_WEB=shlink,shlink-web,primary,admin,Shlink,shlink,hshq"
  checkAddSvc "SVCD_SPEEDTEST_TRACKER_LOCAL=speedtest-tracker-local,speedtest-tracker-local,primary,admin,Speedtest Tracker Local,speedtest-tracker-local,hshq"
  checkAddSvc "SVCD_SPEEDTEST_TRACKER_VPN=speedtest-tracker-vpn,speedtest-tracker-vpn,primary,admin,Speedtest Tracker VPN,speedtest-tracker-vpn,hshq"
  checkAddSvc "SVCD_SQLPAD=sqlpad,sqlpad,primary,admin,SQLPad,sqlpad,hshq"
  checkAddSvc "SVCD_STIRLINGPDF=stirlingpdf,stirlingpdf,primary,user,Stirling PDF,stirlingpdf,hshq"
  checkAddSvc "SVCD_SYNCTHING=syncthing,syncthing,primary,admin,Syncthing,syncthing,hshq"
  checkAddSvc "SVCD_SYSUTILS=sysutils,sysutils,primary,admin,SysUtils,sysutils,hshq"
  checkAddSvc "SVCD_UPTIMEKUMA=uptimekuma,uptimekuma,primary,admin,UptimeKuma,uptimekuma,hshq"
  checkAddSvc "SVCD_VAULTWARDEN=vaultwarden,vaultwarden,primary,user,Vaultwarden,vaultwarden,hshq"
  checkAddSvc "SVCD_WALLABAG=wallabag,wallabag,primary,user,Wallabag,wallabag,le"
  checkAddSvc "SVCD_WAZUH=wazuh,wazuh,primary,admin,Wazuh,wazuh,hshq"
  checkAddSvc "SVCD_WGPORTAL=wgportal,wgportal,primary,admin,WG Portal,wgportal,hshq"
  checkAddSvc "SVCD_WIKIJS=wikijs,wikijs,other,user,Wiki.js,wikijs,hshq"
  checkAddSvc "SVCD_WORDPRESS=wordpress,wordpress,other,user,WordPress,wordpress,hshq"
  set -e
}

function installStackByName()
{
  stack_name=$1
  is_integrate=$2
  
  case "$stack_name" in
    adguard)
      installAdGuard $is_integrate ;;
    sysutils)
      installSysUtils $is_integrate ;;
    openldap)
      installOpenLDAP $is_integrate ;;
    mailu)
      installMailu $is_integrate ;;
    wazuh)
      installWazuh $is_integrate ;;
    collabora)
      installCollabora $is_integrate ;;
    nextcloud)
      installNextcloud $is_integrate ;;
    jitsi)
      installJitsi $is_integrate ;;
    matrix)
      installMatrix $is_integrate ;;
    wikijs)
      installWikijs $is_integrate ;;
    duplicati)
      installDuplicati $is_integrate ;;
    mastodon)
      installMastodon $is_integrate ;;
    dozzle)
      installDozzle $is_integrate ;;
    searxng)
      installSearxNG $is_integrate ;;
    jellyfin)
      installJellyfin $is_integrate ;;
    filebrowser)
      installFileBrowser $is_integrate ;;
    photoprism)
      installPhotoPrism $is_integrate ;;
    guacamole)
      installGuacamole $is_integrate ;;
    authelia)
      installAuthelia $is_integrate ;;
    wordpress)
      installWordPress $is_integrate ;;
    ghost)
      installGhost $is_integrate ;;
    peertube)
      installPeerTube $is_integrate ;;
    homeassistant)
      installHomeAssistant $is_integrate ;;
    gitlab)
      installGitlab $is_integrate ;;
    vaultwarden)
      installVaultwarden $is_integrate ;;
    discourse)
      installDiscourse $is_integrate ;;
    syncthing)
      installSyncthing $is_integrate ;;
    codeserver)
      installCodeServer $is_integrate ;;
    shlink)
      installShlink $is_integrate ;;
    firefly)
      installFirefly $is_integrate ;;
    excalidraw)
      installExcalidraw $is_integrate ;;
    drawio)
      installDrawIO $is_integrate ;;
    invidious)
      installInvidious $is_integrate ;;
    ittools)
      installITTools $is_integrate ;;
    gitea)
      installGitea $is_integrate ;;
    mealie)
      installMealie $is_integrate ;;
    kasm)
      installKasm $is_integrate ;;
    ntfy)
      installNTFY $is_integrate ;;
    remotely)
      installRemotely $is_integrate ;;
    calibre)
      installCalibre $is_integrate ;;
    netdata)
      installNetdata $is_integrate ;;
    linkwarden)
      installLinkwarden $is_integrate ;;
    stirlingpdf)
      installStirlingPDF $is_integrate ;;
    bar-assistant)
      installBarAssistant $is_integrate ;;
    freshrss)
      installFreshRSS $is_integrate ;;
    keila)
      installKeila $is_integrate ;;
    wallabag)
      installWallabag $is_integrate ;;
    jupyter)
      installJupyter $is_integrate ;;
    paperless)
      installPaperless $is_integrate ;;
    speedtest-tracker-local)
      installSpeedtestTrackerLocal $is_integrate ;;
    speedtest-tracker-vpn)
      installSpeedtestTrackerVPN $is_integrate ;;
    changedetection)
      installChangeDetection $is_integrate ;;
    huginn)
      installHuginn $is_integrate ;;
    coturn)
      installCoturn $is_integrate ;;
    filedrop)
      installFileDrop $is_integrate ;;
    piped)
      installPiped $is_integrate ;;
    heimdall)
      installHeimdall $is_integrate ;;
    ofelia)
      installOfelia $is_integrate ;;
    script-server)
      installScriptServer $is_integrate ;;
    sqlpad)
      installSQLPad $is_integrate ;;
    uptimekuma)
      installUptimeKuma $is_integrate ;;
  esac
  stack_install_retval=$?
  if [ $stack_install_retval -ne 0 ]; then
    notifyStackInstallFailure "$stack_name"
  fi
}

function performUpdateStackByName()
{
  stack_name=$1
  portainerToken="$2"
  case "$stack_name" in
    portainer)
      performUpdatePortainer ;;
    adguard)
      performUpdateAdGuard "$portainerToken" ;;
    sysutils)
      performUpdateSysUtils "$portainerToken" ;;
    openldap)
      performUpdateOpenLDAP "$portainerToken" ;;
    mailu)
      performUpdateMailu "$portainerToken" ;;
    wazuh)
      performUpdateWazuh "$portainerToken" ;;
    collabora)
      performUpdateCollabora "$portainerToken" ;;
    nextcloud)
      performUpdateNextcloud "$portainerToken" ;;
    jitsi)
      performUpdateJitsi "$portainerToken" ;;
    matrix)
      performUpdateMatrix "$portainerToken" ;;
    wikijs)
      performUpdateWikijs "$portainerToken" ;;
    duplicati)
      performUpdateDuplicati "$portainerToken" ;;
    mastodon)
      performUpdateMastodon "$portainerToken" ;;
    dozzle)
      performUpdateDozzle "$portainerToken" ;;
    searxng)
      performUpdateSearxNG "$portainerToken" ;;
    jellyfin)
      performUpdateJellyfin "$portainerToken" ;;
    filebrowser)
      performUpdateFileBrowser "$portainerToken" ;;
    photoprism)
      performUpdatePhotoPrism "$portainerToken" ;;
    guacamole)
      performUpdateGuacamole "$portainerToken" ;;
    authelia)
      performUpdateAuthelia "$portainerToken" ;;
    wordpress)
      performUpdateWordPress "$portainerToken" ;;
    ghost)
      performUpdateGhost "$portainerToken" ;;
    peertube)
      performUpdatePeerTube "$portainerToken" ;;
    homeassistant)
      performUpdateHomeAssistant "$portainerToken" ;;
    gitlab)
      performUpdateGitlab "$portainerToken" ;;
    vaultwarden)
      performUpdateVaultwarden "$portainerToken" ;;
    discourse)
      performUpdateDiscourse "$portainerToken" ;;
    syncthing)
      performUpdateSyncthing "$portainerToken" ;;
    codeserver)
      performUpdateCodeServer "$portainerToken" ;;
    shlink)
      performUpdateShlink "$portainerToken" ;;
    firefly)
      performUpdateFirefly "$portainerToken" ;;
    excalidraw)
      performUpdateExcalidraw "$portainerToken" ;;
    drawio)
      performUpdateDrawIO "$portainerToken" ;;
    invidious)
      performUpdateInvidious "$portainerToken" ;;
    ittools)
      performUpdateITTools "$portainerToken" ;;
    gitea)
      performUpdateGitea "$portainerToken" ;;
    mealie)
      performUpdateMealie "$portainerToken" ;;
    kasm)
      performUpdateKasm "$portainerToken" ;;
    ntfy)
      performUpdateNTFY "$portainerToken" ;;
    remotely)
      performUpdateRemotely "$portainerToken" ;;
    calibre)
      performUpdateCalibre "$portainerToken" ;;
    netdata)
      performUpdateNetdata "$portainerToken" ;;
    linkwarden)
      performUpdateLinkwarden "$portainerToken" ;;
    stirlingpdf)
      performUpdateStirlingPDF "$portainerToken" ;;
    bar-assistant)
      performUpdateBarAssistant "$portainerToken" ;;
    freshrss)
      performUpdateFreshRSS "$portainerToken" ;;
    keila)
      performUpdateKeila "$portainerToken" ;;
    wallabag)
      performUpdateWallabag "$portainerToken" ;;
    jupyter)
      performUpdateJupyter "$portainerToken" ;;
    paperless)
      performUpdatePaperless "$portainerToken" ;;
    speedtest-tracker-local)
      performUpdateSpeedtestTrackerLocal "$portainerToken" ;;
    speedtest-tracker-vpn)
      performUpdateSpeedtestTrackerVPN "$portainerToken" ;;
    changedetection)
      performUpdateChangeDetection "$portainerToken" ;;
    huginn)
      performUpdateHuginn "$portainerToken" ;;
    coturn)
      performUpdateCoturn "$portainerToken" ;;
    filedrop)
      performUpdateFileDrop "$portainerToken" ;;
    piped)
      performUpdatePiped "$portainerToken" ;;
    heimdall)
      performUpdateHeimdall "$portainerToken" ;;
    ofelia)
      performUpdateOfelia "$portainerToken" ;;
    script-server)
      performUpdateScriptServer "$portainerToken" ;;
    sqlpad)
      performUpdateSQLPad "$portainerToken" ;;
    uptimekuma)
      performUpdateUptimeKuma "$portainerToken" ;;
    caddy-*)
      performUpdateCaddy "$portainerToken" "$stack_name" ;;
    clientdns-*)
      performUpdateClientDNS "$portainerToken" "$stack_name" ;;
  esac
}

function getAutheliaBlock()
{
  retval=""
  retval="${retval}access_control:\n"
  retval="${retval}  default_policy: deny\n"
  retval="${retval}  rules:\n"
  retval="${retval}    - domain:\n"
  retval="${retval}# Authelia bypass BEGIN\n"
  retval="${retval}        - $SUB_AUTHELIA.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_COLLABORA.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_DRAWIO_WEB.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_EXCALIDRAW_WEB.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_EXCALIDRAW_SERVER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_EXCALIDRAW_STORAGE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_FILEBROWSER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_FILEDROP.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_FRESHRSS.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_GITEA.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_HEIMDALL.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - home.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_HOMEASSISTANT_CONFIGURATOR.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_HOMEASSISTANT_NODERED.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_HOMEASSISTANT_TASMOADMIN.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_IMAGES.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_JITSI.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_KASM.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_KEILA.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_MAILU.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_MASTODON.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_MATRIX_ELEMENT_PRIVATE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_MEALIE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_NEXTCLOUD.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_NTFY.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_OPENLDAP_MANAGER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PEERTUBE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PIPED_PROXY.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PIPED_API.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_REMOTELY.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SHLINK_APP.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_VAULTWARDEN.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_WALLABAG.$HOMESERVER_DOMAIN\n"
  retval="${retval}# Authelia bypass END\n"
  retval="${retval}      policy: bypass\n"
  retval="${retval}    - domain:\n"
  retval="${retval}# Authelia basicusers BEGIN\n"
  retval="${retval}        - $SUB_DISCOURSE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PHOTOPRISM.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_INVIDIOUS.$HOMESERVER_DOMAIN\n"
  retval="${retval}# Authelia basicusers END\n"
  retval="${retval}      policy: one_factor\n"
  retval="${retval}      subject:\n"
  retval="${retval}        - \"group:$LDAP_BASIC_USER_GROUP_NAME\"\n"
  retval="${retval}    - domain:\n"
  retval="${retval}# Authelia primaryusers BEGIN\n"
  retval="${retval}        - $SUB_BARASSISTANT.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_HUGINN.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_LINKWARDEN.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_GITLAB.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PAPERLESS.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_STIRLINGPDF.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SEARXNG.$HOMESERVER_DOMAIN\n"
  retval="${retval}# Authelia primaryusers END\n"
  retval="${retval}      policy: one_factor\n"
  retval="${retval}      subject:\n"
  retval="${retval}        - \"group:$LDAP_PRIMARY_USER_GROUP_NAME\"\n"
  retval="${retval}    - domain:\n"
  retval="${retval}# Authelia admins BEGIN\n"
  retval="${retval}        - $SUB_ADGUARD.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_CALIBRE_SERVER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - ${SUB_CLIENTDNS}-user1.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_CODESERVER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_DOZZLE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_DUPLICATI.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_FIREFLY.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_GHOST.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_GRAFANA.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_GUACAMOLE.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_INFLUXDB.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_ITTOOLS.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_JELLYFIN.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_JUPYTER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_KASM_WIZARD.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_NETDATA.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_OPENLDAP_PHP.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PORTAINER.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_PROMETHEUS.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SHLINK_WEB.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SQLPAD.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_SYNCTHING.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_UPTIMEKUMA.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_WAZUH.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_WIKIJS.$HOMESERVER_DOMAIN\n"
  retval="${retval}        - $SUB_WORDPRESS.$HOMESERVER_DOMAIN\n"
  retval="${retval}# Authelia admins END\n"
  retval="${retval}      policy: one_factor\n"
  retval="${retval}      subject:\n"
  retval="${retval}        - \"group:$LDAP_ADMIN_USER_GROUP_NAME\"\n"
  echo "$retval"
}

function emailVaultwardenCredentials()
{
  is_relay_only=$1
  strOutput="_________________________________________________________________________\n\n"
  strOutput=$strOutput"folder,favorite,type,name,notes,fields,reprompt,login_uri,login_username,login_password,login_totp\n"
  if ! [ "$is_relay_only" = "true" ]; then
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_PORTAINER" "\"https://$SUB_PORTAINER.$HOMESERVER_DOMAIN/#!/auth,https://$HOMESERVER_HOST_IP:$PORTAINER_LOCAL_HTTPS_PORT/#!/auth\"" $HOMESERVER_ABBREV $PORTAINER_ADMIN_USERNAME $PORTAINER_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_ADGUARD" https://$SUB_ADGUARD.$HOMESERVER_DOMAIN/login.html $HOMESERVER_ABBREV $ADGUARD_ADMIN_USERNAME $ADGUARD_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_SCRIPTSERVER" "\"https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN/login.html,https://$HOMESERVER_HOST_IP:$SCRIPTSERVER_LOCALHOST_PORT/login.html\"" $HOMESERVER_ABBREV $SCRIPTSERVER_ADMIN_USERNAME $SCRIPTSERVER_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_OPENLDAP_PHP" https://$SUB_OPENLDAP_PHP.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV \"$LDAP_ADMIN_BIND_DN\" $LDAP_ADMIN_BIND_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_AUTHELIA" https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_WAZUH" https://$SUB_WAZUH.$HOMESERVER_DOMAIN/app/login $HOMESERVER_ABBREV $WAZUH_USERS_DASHBOARD_USERNAME $WAZUH_USERS_DASHBOARD_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_GRAFANA" https://$SUB_GRAFANA.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $GRAFANA_ADMIN_USERNAME $GRAFANA_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_INFLUXDB" https://$SUB_INFLUXDB.$HOMESERVER_DOMAIN/signin $HOMESERVER_ABBREV $INFLUXDB_ADMIN_USERNAME $INFLUXDB_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_DOZZLE" https://$SUB_DOZZLE.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $DOZZLE_USERNAME $DOZZLE_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_JELLYFIN}-Admin" https://$SUB_JELLYFIN.$HOMESERVER_DOMAIN/web/index.html#!/login.html $HOMESERVER_ABBREV $JELLYFIN_ADMIN_USERNAME $JELLYFIN_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_JELLYFIN}-User" https://$SUB_JELLYFIN.$HOMESERVER_DOMAIN/web/index.html#!/login.html $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_GUACAMOLE" https://$SUB_GUACAMOLE.$HOMESERVER_DOMAIN/guacamole/ $HOMESERVER_ABBREV $GUACAMOLE_DEFAULT_ADMIN_USERNAME $GUACAMOLE_DEFAULT_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_UPTIMEKUMA" https://$SUB_UPTIMEKUMA.$HOMESERVER_DOMAIN/dashboard $HOMESERVER_ABBREV $UPTIMEKUMA_USERNAME $UPTIMEKUMA_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_SQLPAD" https://$SUB_SQLPAD.$HOMESERVER_DOMAIN/signin $HOMESERVER_ABBREV $SQLPAD_ADMIN_USERNAME $SQLPAD_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_SYNCTHING" https://$SUB_SYNCTHING.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $SYNCTHING_ADMIN_USERNAME $SYNCTHING_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_CODESERVER" https://$SUB_CODESERVER.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $CODESERVER_ADMIN_USERNAME $CODESERVER_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_HOMEASSISTANT_TASMOADMIN" https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN/tasmoadmin $HOMESERVER_ABBREV $HOMEASSISTANT_TASMOADMIN_USER $HOMEASSISTANT_TASMOADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_HOMEASSISTANT_CONFIGURATOR" https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN/configurator $HOMESERVER_ABBREV $HOMEASSISTANT_CONFIGURATOR_USER $HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_HEIMDALL}-Admin" https://$SUB_HEIMDALL.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $HEIMDALL_ADMIN_USERNAME $HEIMDALL_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_HEIMDALL}-Users" https://$SUB_HEIMDALL.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $HEIMDALL_USER_USERNAME $HEIMDALL_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_HEIMDALL}-HomeServers" https://$SUB_HEIMDALL.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $HEIMDALL_HOMESERVERS_USERNAME $HEIMDALL_HOMESERVERS_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_HEIMDALL}-RelayServer" https://$SUB_HEIMDALL.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $HEIMDALL_RELAYSERVER_USERNAME $HEIMDALL_RELAYSERVER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_GITEA}-Admin" https://$SUB_GITEA.$HOMESERVER_DOMAIN/user/login $HOMESERVER_ABBREV $GITEA_ADMIN_USERNAME $GITEA_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_GITEA}-User" https://$SUB_GITEA.$HOMESERVER_DOMAIN/user/login $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_GITLAB" https://$SUB_GITLAB.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_OPENLDAP_MANAGER" https://$SUB_OPENLDAP_MANAGER.$HOMESERVER_DOMAIN/log_in/ $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_MAILU}-Admin" https://$SUB_MAILU.$HOMESERVER_DOMAIN/sso/login $HOMESERVER_ABBREV $EMAIL_ADMIN_EMAIL_ADDRESS $EMAIL_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_MATRIX_ELEMENT_PRIVATE" https://$SUB_MATRIX_ELEMENT_PRIVATE.$HOMESERVER_DOMAIN/#/login $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_MATRIX_ELEMENT_PUBLIC" https://$SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN/#/login $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_MEALIE}-Admin" https://$SUB_MEALIE.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $MEALIE_ADMIN_USERNAME $MEALIE_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_MEALIE}-User" https://$SUB_MEALIE.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_REMOTELY" "\"https://$SUB_REMOTELY.$HOMESERVER_DOMAIN/Account/Register,https://$SUB_REMOTELY.$HOMESERVER_DOMAIN/Account/Login\"" $HOMESERVER_ABBREV $REMOTELY_ADMIN_EMAIL_ADDRESS $REMOTELY_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_DUPLICATI" https://$SUB_DUPLICATI.$HOMESERVER_DOMAIN/login.html $HOMESERVER_ABBREV "NA" $DUPLICATI_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "$FMLNAME_FILEBROWSER" https://$SUB_FILEBROWSER.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $FILEBROWSER_USERNAME $FILEBROWSER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_MASTODON}-Admin" https://$SUB_MASTODON.$HOMESERVER_DOMAIN/auth/sign_in $HOMESERVER_ABBREV $MASTODON_ADMIN_EMAIL_ADDRESS $MASTODON_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_MASTODON}-User" https://$SUB_MASTODON.$HOMESERVER_DOMAIN/auth/sign_in $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_PEERTUBE}-Admin" https://$SUB_PEERTUBE.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $PEERTUBE_ADMIN_USERNAME $PEERTUBE_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_PEERTUBE}-User" https://$SUB_PEERTUBE.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_COLLABORA}-Admin" https://$SUB_COLLABORA.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $COLLABORA_ADMIN_USERNAME $COLLABORA_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_NEXTCLOUD}-Admin" https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $NEXTCLOUD_ADMIN_USERNAME $NEXTCLOUD_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_NEXTCLOUD}-User" https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_DISCOURSE}-Admin" https://$SUB_DISCOURSE.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $DISCOURSE_ADMIN_USERNAME $DISCOURSE_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_VAULTWARDEN}-Admin" https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN/admin $HOMESERVER_ABBREV admin $VAULTWARDEN_ADMIN_TOKEN)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_CALIBRE_WEB}-Admin" https://$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $CALIBRE_WEB_ADMIN_USERNAME $CALIBRE_WEB_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_CALIBRE_WEB}-User" https://$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $LDAP_ADMIN_USER_USERNAME $LDAP_ADMIN_USER_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_FRESHRSS}-Admin" https://$SUB_FRESHRSS.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $FRESHRSS_ADMIN_USERNAME $FRESHRSS_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_KEILA}-Admin" https://$SUB_KEILA.$HOMESERVER_DOMAIN/auth/login $HOMESERVER_ABBREV $KEILA_ADMIN_EMAIL_ADDRESS $KEILA_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_WALLABAG}-Admin" https://$SUB_WALLABAG.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV $WALLABAG_ADMIN_USERNAME $WALLABAG_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_JUPYTER}-Admin" https://$SUB_JUPYTER.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV admin $JUPYTER_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_PAPERLESS}-Admin" https://$SUB_PAPERLESS.$HOMESERVER_DOMAIN/accounts/login/ $HOMESERVER_ABBREV $PAPERLESS_ADMIN_USER $PAPERLESS_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_SPEEDTEST_TRACKER_LOCAL}-Admin" https://$SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN/admin/login $HOMESERVER_ABBREV $SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS $SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_SPEEDTEST_TRACKER_VPN}-Admin" https://$SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN/admin/login $HOMESERVER_ABBREV $SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS $SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_CHANGEDETECTION}-Admin" https://$SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN/login $HOMESERVER_ABBREV admin $CHANGEDETECTION_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_HUGINN}-Admin" https://$SUB_HUGINN.$HOMESERVER_DOMAIN/users/sign_in $HOMESERVER_ABBREV $HUGINN_ADMIN_USERNAME $HUGINN_ADMIN_PASSWORD)"\n"
  fi
  # RelayServer
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ] || [ "$is_relay_only" = "true" ]; then
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_CLIENTDNS}-user1" https://${SUB_CLIENTDNS}-user1.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $CLIENTDNS_USER1_ADMIN_USERNAME $CLIENTDNS_USER1_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_ADGUARD}-RelayServer" https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/login.html $HOMESERVER_ABBREV $RELAYSERVER_ADGUARD_ADMIN_USERNAME $RELAYSERVER_ADGUARD_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_CLIENTDNS}-RelayServer" https://$SUB_CLIENTDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $RELAYSERVER_CLIENTDNS_ADMIN_USERNAME $RELAYSERVER_CLIENTDNS_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_PORTAINER}-RelayServer" https://$SUB_PORTAINER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/#!/auth $HOMESERVER_ABBREV $RELAYSERVER_PORTAINER_ADMIN_USERNAME $RELAYSERVER_PORTAINER_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_RSPAMD}-RelayServer" https://$SUB_RSPAMD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $RELAYSERVER_RSPAMD_ADMIN_USERNAME $RELAYSERVER_RSPAMD_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_SYNCTHING}-RelayServer" https://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $RELAYSERVER_SYNCTHING_ADMIN_USERNAME $RELAYSERVER_SYNCTHING_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_FILEBROWSER}-RelayServer" https://$SUB_FILEBROWSER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $RELAYSERVER_FILEBROWSER_ADMIN_USERNAME $RELAYSERVER_FILEBROWSER_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_CADDYDNS}-RelayServer" https://$SUB_CADDYDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/ $HOMESERVER_ABBREV $RELAYSERVER_CADDYDNS_ADMIN_USERNAME $RELAYSERVER_CADDYDNS_ADMIN_PASSWORD)"\n"
    strOutput=${strOutput}$(getSvcCredentialsVW "${FMLNAME_WGPORTAL}-RelayServer" https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN/auth/login $HOMESERVER_ABBREV $RELAYSERVER_WGPORTAL_ADMIN_EMAIL $RELAYSERVER_WGPORTAL_ADMIN_PASSWORD)"\n"
  fi
  strOutput=${strOutput}"\n\n\n\n"
  strInstructions="Vaultwarden Import Instructions - !!! READ ALL STEPS !!!\n_________________________________________________________________________\n\n"
  strInstructions=$strInstructions"1. Vaultwarden is only accessible on your private network, so any devices that you wish to access this service with must be correctly added. \n\n2. Upon installation, you should receive a seperate 'Join Vaultwarden' email from the Vaultwarden service. Click the provided 'Join Organization Now' button and create an account. \n\n3. After creating your account, log in through the same web interface. \n\n4. Select Tools on top of page, then Import Data on left side. For File format, select Bitwarden(csv) from the drop down.  Then copy all of the data AFTER the line below (including field headers) and paste it into the provided empty text box. Then click Import Data. \n\n5. Download and install Bitwarden plugin/extension for your browser (https://bitwarden.com/download/). \n\n6. In the browser plugin, select Self-hosted for Region. Then enter https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN in both Server URL and Web vault server URL fields, and Save. \n\n7. Log in with email and master password. Go to Settings (bottom right), then Auto-fill, then under Default URI match detection, select Starts with. (You can also check the Auto-fill on page load option, but ensure you know how it works and the risks)\n\n8. Delete this email (and empty it from Trash) once you have imported the passwords into Vaultwarden. There is an option within the Script-server or the console UI to send yourself another copy if need be (01 Misc Utils -> 07 Email Vaultwarden Credentials).\n\n9. All of these passwords are randomly generated during install and stored in your configuration file, which is encrypted at rest (thus the need to enter your config decrypt password for nearly every operation). Nota Bene: If you change any of these generated passwords it will not sync back to this source. If you change the Portainer, AdguardHome, or WG Portal admin passwords without also changing them in the configuration file, then you will break any of the script functions that use these utilities (they use API calls that require authorization). There could also be consequences for a few others as well. For more information, ask on the forum (https://forum.homeserverhq.com). To view/edit the configuration file, run the console UI (enter 'bash hshq.sh' on your HomeServer), then go to HSHQ Utils -> 1 Edit Configuration File. BE VERY CAREFUL editing anything in this config file, you could break things!!!\n\n10. After any operation that requires the config decrypt password, whether via the console UI or Script-server web interface, you should ALWAYS see a confirmation that the configuration file has been encrypted. If a script function terminates abnormally, ensure to re-run another simple function, for example (01 Misc Utils -> 08 Email Root CA) just to ensure the configuration file is back to an encrypted state."
  sendEmail -s "Vaultwarden Login Import !!! READ ALL STEPS !!!" -b "$strInstructions\n\n$strOutput" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>" -t $EMAIL_ADMIN_EMAIL_ADDRESS
}

function emailUserVaultwardenCredentials()
{
  vw_username=$1
  vw_email=$2
  strOutput="_________________________________________________________________________\n\n"
  strOutput=$strOutput"folder,favorite,type,name,notes,fields,reprompt,login_uri,login_username,login_password,login_totp\n"
  strOutput=${strOutput}$(getSvcCredentialsVW "All LDAP-Based Services" "\"https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN/,https://$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN/login,https://$SUB_GITEA.$HOMESERVER_DOMAIN/user/login,https://$SUB_JELLYFIN.$HOMESERVER_DOMAIN/web/index.html#!/login.html,https://$SUB_MASTODON.$HOMESERVER_DOMAIN/auth/sign_in,https://$SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN/#/login,https://$SUB_MEALIE.$HOMESERVER_DOMAIN/login,https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN/login,https://$SUB_PEERTUBE.$HOMESERVER_DOMAIN/login\"" $HOMESERVER_ABBREV $vw_username abcdefg)"\n"
  strOutput=${strOutput}"\n\n"
  strInstructions="Vaultwarden User Import Instructions:\n\n"
  strInstructions=$strInstructions"For convenience, import the text BELOW the following solid line into Vaultwarden. Then simply change the password (abcdefg) to your correct password. It will be reflected for all LDAP-based services. If you change your password in the future, then you only need to update this one entry within the Vaultwarden password manager."
  sendEmail -s "Vaultwarden User Login Import" -b "$strInstructions\n\n$strOutput" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>" -t $vw_email
}

function insertServicesHeimdall()
{
  curdt=$(getCurrentDate)
  cur_id=1
  # Admin Tab
  insertIntoHeimdallDB "$FMLNAME_SCRIPTSERVER" $USERTYPE_SCRIPTSERVER "https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN" 1 "script-server.png"
  insertIntoHeimdallDB "$FMLNAME_SCRIPTSERVER (IP)" $USERTYPE_SCRIPTSERVER "https://$HOMESERVER_HOST_IP:$SCRIPTSERVER_LOCALHOST_PORT" 1 "script-server.png"
  insertIntoHeimdallDB "$FMLNAME_PORTAINER" $USERTYPE_PORTAINER "https://$SUB_PORTAINER.$HOMESERVER_DOMAIN" 1 "portainer.png"
  insertIntoHeimdallDB "$FMLNAME_PORTAINER (IP)" $USERTYPE_PORTAINER "https://$HOMESERVER_HOST_IP:$PORTAINER_LOCAL_HTTPS_PORT" 1 "portainer.png"
  insertIntoHeimdallDB "$FMLNAME_ADGUARD" $USERTYPE_ADGUARD "https://$SUB_ADGUARD.$HOMESERVER_DOMAIN" 1 "adguardhome.png"
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    insertIntoHeimdallDB "${FMLNAME_CLIENTDNS}-user1" $USERTYPE_CLIENTDNS "https://${SUB_CLIENTDNS}-user1.$HOMESERVER_DOMAIN" 1 "dnsmasq.png"
  fi
  insertIntoHeimdallDB "$FMLNAME_OPENLDAP_PHP" $USERTYPE_OPENLDAP_PHP "https://$SUB_OPENLDAP_PHP.$HOMESERVER_DOMAIN" 1 "ldapphp.png"
  insertIntoHeimdallDB "$FMLNAME_WAZUH" $USERTYPE_WAZUH "https://$SUB_WAZUH.$HOMESERVER_DOMAIN" 0 "wazuh.png"
  insertIntoHeimdallDB "$FMLNAME_GRAFANA" $USERTYPE_GRAFANA "https://$SUB_GRAFANA.$HOMESERVER_DOMAIN" 0 "grafana.png"
  insertIntoHeimdallDB "$FMLNAME_PROMETHEUS" $USERTYPE_PROMETHEUS "https://$SUB_PROMETHEUS.$HOMESERVER_DOMAIN" 0 "prometheus.png"
  insertIntoHeimdallDB "$FMLNAME_INFLUXDB" $USERTYPE_INFLUXDB "https://$SUB_INFLUXDB.$HOMESERVER_DOMAIN" 0 "influxdb.png"
  insertIntoHeimdallDB "$FMLNAME_DOZZLE" $USERTYPE_DOZZLE "https://$SUB_DOZZLE.$HOMESERVER_DOMAIN" 0 "dozzle.png"
  insertIntoHeimdallDB "$FMLNAME_GUACAMOLE" $USERTYPE_GUACAMOLE "https://$SUB_GUACAMOLE.$HOMESERVER_DOMAIN" 0 "guacamole.png"
  insertIntoHeimdallDB "$FMLNAME_UPTIMEKUMA" $USERTYPE_UPTIMEKUMA "https://$SUB_UPTIMEKUMA.$HOMESERVER_DOMAIN" 1 "uptimekuma.png"
  insertIntoHeimdallDB "$FMLNAME_DUPLICATI" $USERTYPE_DUPLICATI "https://$SUB_DUPLICATI.$HOMESERVER_DOMAIN" 1 "duplicati.png"
  insertIntoHeimdallDB "$FMLNAME_SYNCTHING" $USERTYPE_SYNCTHING "https://$SUB_SYNCTHING.$HOMESERVER_DOMAIN" 1 "syncthing.png"
  insertIntoHeimdallDB "$FMLNAME_CODESERVER" $USERTYPE_CODESERVER "https://$SUB_CODESERVER.$HOMESERVER_DOMAIN" 0 "codeserver.png"
  insertIntoHeimdallDB "$FMLNAME_SQLPAD" $USERTYPE_SQLPAD "https://$SUB_SQLPAD.$HOMESERVER_DOMAIN" 0 "sqlpad.png"
  insertIntoHeimdallDB "$FMLNAME_HOMEASSISTANT_APP" $USERTYPE_HOMEASSISTANT_APP "https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN" 0 "homeassistant.png"
  insertIntoHeimdallDB "$FMLNAME_SHLINK_WEB" $USERTYPE_SHLINK_WEB "https://$SUB_SHLINK_WEB.$HOMESERVER_DOMAIN" 0 "shlink.png"
  insertIntoHeimdallDB "$FMLNAME_FIREFLY" $USERTYPE_FIREFLY "https://$SUB_FIREFLY.$HOMESERVER_DOMAIN" 0 "firefly.png"
  insertIntoHeimdallDB "$FMLNAME_KASM_WIZARD" $USERTYPE_KASM_WIZARD "https://$SUB_KASM_WIZARD.$HOMESERVER_DOMAIN" 0 "kasm.png"
  insertIntoHeimdallDB "$FMLNAME_VAULTWARDEN Admin" $USERTYPE_PORTAINER "https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN/admin" 0 "vaultwarden.png"
  insertIntoHeimdallDB "$FMLNAME_COLLABORA Admin" $USERTYPE_PORTAINER "https://$SUB_COLLABORA.$HOMESERVER_DOMAIN/browser/dist/admin/admin.html" 0 "collabora.png"
  insertIntoHeimdallDB "$FMLNAME_NTFY" $USERTYPE_NTFY "https://$SUB_NTFY.$HOMESERVER_DOMAIN" 0 "ntfy.png"
  insertIntoHeimdallDB "$FMLNAME_ITTOOLS" $USERTYPE_ITTOOLS "https://$SUB_ITTOOLS.$HOMESERVER_DOMAIN" 0 "ittools.png"
  insertIntoHeimdallDB "$FMLNAME_REMOTELY" $USERTYPE_REMOTELY "https://$SUB_REMOTELY.$HOMESERVER_DOMAIN" 0 "remotely.png"
  insertIntoHeimdallDB "$FMLNAME_CALIBRE_SERVER" $USERTYPE_CALIBRE_SERVER "https://$SUB_CALIBRE_SERVER.$HOMESERVER_DOMAIN" 0 "calibre-server.png"
  insertIntoHeimdallDB "$FMLNAME_NETDATA" $USERTYPE_NETDATA "https://$SUB_NETDATA.$HOMESERVER_DOMAIN" 0 "netdata.png"
  insertIntoHeimdallDB "$FMLNAME_JUPYTER" $USERTYPE_JUPYTER "https://$SUB_JUPYTER.$HOMESERVER_DOMAIN" 0 "jupyter.png"
  insertIntoHeimdallDB "$FMLNAME_SPEEDTEST_TRACKER_LOCAL" $USERTYPE_SPEEDTEST_TRACKER_LOCAL "https://$SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN" 0 "speedtest-tracker.png"
  insertIntoHeimdallDB "$FMLNAME_SPEEDTEST_TRACKER_VPN" $USERTYPE_SPEEDTEST_TRACKER_VPN "https://$SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN" 0 "speedtest-tracker.png"
  insertIntoHeimdallDB "Logout $FMLNAME_AUTHELIA" $USERTYPE_PORTAINER "https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN/logout" 1 "authelia.png"
  # Users Tab
  insertIntoHeimdallDB "HomeServerHQ" $USERTYPE_AUTHELIA "https://www.homeserverhq.com" 1 "homeserverhq.png"
  insertIntoHeimdallDB "$FMLNAME_OPENLDAP_MANAGER" $USERTYPE_OPENLDAP_MANAGER "https://$SUB_OPENLDAP_MANAGER.$HOMESERVER_DOMAIN" 1 "ldapmanager.png"
  insertIntoHeimdallDB "$FMLNAME_MAILU" $USERTYPE_MAILU "https://$SUB_MAILU.$HOMESERVER_DOMAIN" 1 "mailu.png"
  insertIntoHeimdallDB "$FMLNAME_NEXTCLOUD" $USERTYPE_NEXTCLOUD "https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN" 0 "nextcloud.png"
  insertIntoHeimdallDB "$FMLNAME_JITSI" $USERTYPE_JITSI "https://$SUB_JITSI.$HOMESERVER_DOMAIN" 0 "jitsi.png"
  insertIntoHeimdallDB "$FMLNAME_MATRIX_ELEMENT_PRIVATE" $USERTYPE_MATRIX_ELEMENT_PRIVATE "https://$SUB_MATRIX_ELEMENT_PRIVATE.$HOMESERVER_DOMAIN" 0 "element-private.png"
  insertIntoHeimdallDB "$FMLNAME_MATRIX_ELEMENT_PUBLIC" $USERTYPE_MATRIX_ELEMENT_PUBLIC "https://$SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN" 0 "element-public.png"
  insertIntoHeimdallDB "$FMLNAME_MASTODON" $USERTYPE_MASTODON "https://$SUB_MASTODON.$HOMESERVER_DOMAIN" 0 "mastodon.png"
  insertIntoHeimdallDB "$FMLNAME_PEERTUBE" $USERTYPE_PEERTUBE "https://$SUB_PEERTUBE.$HOMESERVER_DOMAIN" 0 "peertube.png"
  insertIntoHeimdallDB "$FMLNAME_SEARXNG" $USERTYPE_SEARXNG "https://$SUB_SEARXNG.$HOMESERVER_DOMAIN" 0 "searxng.png"
  insertIntoHeimdallDB "$FMLNAME_PHOTOPRISM" $USERTYPE_PHOTOPRISM "https://$SUB_PHOTOPRISM.$HOMESERVER_DOMAIN" 0 "photoprism.png"
  insertIntoHeimdallDB "$FMLNAME_WIKIJS" $USERTYPE_WIKIJS "https://$SUB_WIKIJS.$HOMESERVER_DOMAIN" 0 "wikijs.png"
  insertIntoHeimdallDB "$FMLNAME_WORDPRESS" $USERTYPE_WORDPRESS "https://$SUB_WORDPRESS.$HOMESERVER_DOMAIN" 0 "wordpress.png"
  insertIntoHeimdallDB "$FMLNAME_GHOST" $USERTYPE_GHOST "https://$SUB_GHOST.$HOMESERVER_DOMAIN" 0 "ghost.png"
  insertIntoHeimdallDB "$FMLNAME_JELLYFIN" $USERTYPE_JELLYFIN "https://$SUB_JELLYFIN.$HOMESERVER_DOMAIN" 0 "jellyfin.png"
  insertIntoHeimdallDB "$FMLNAME_FILEBROWSER" $USERTYPE_FILEBROWSER "https://$SUB_FILEBROWSER.$HOMESERVER_DOMAIN" 0 "filebrowser.png"
  insertIntoHeimdallDB "$FMLNAME_GITLAB" $USERTYPE_GITLAB "https://$SUB_GITLAB.$HOMESERVER_DOMAIN" 0 "gitlab.png"
  insertIntoHeimdallDB "$FMLNAME_VAULTWARDEN" $USERTYPE_VAULTWARDEN "https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN" 0 "vaultwarden.png"
  insertIntoHeimdallDB "$FMLNAME_DISCOURSE" $USERTYPE_DISCOURSE "https://$SUB_DISCOURSE.$HOMESERVER_DOMAIN" 0 "discourse.png"
  insertIntoHeimdallDB "$FMLNAME_GITEA" $USERTYPE_GITEA "https://$SUB_GITEA.$HOMESERVER_DOMAIN" 0 "gitea.png"
  insertIntoHeimdallDB "$FMLNAME_INVIDIOUS" $USERTYPE_INVIDIOUS "https://$SUB_INVIDIOUS.$HOMESERVER_DOMAIN" 0 "invidious.png"
  insertIntoHeimdallDB "$FMLNAME_EXCALIDRAW_WEB" $USERTYPE_EXCALIDRAW_WEB "https://$SUB_EXCALIDRAW_WEB.$HOMESERVER_DOMAIN" 0 "excalidraw.png"
  insertIntoHeimdallDB "$FMLNAME_DRAWIO_WEB" $USERTYPE_DRAWIO_WEB "https://$SUB_DRAWIO_WEB.$HOMESERVER_DOMAIN" 0 "drawio.png"
  insertIntoHeimdallDB "$FMLNAME_MEALIE" $USERTYPE_MEALIE "https://$SUB_MEALIE.$HOMESERVER_DOMAIN" 0 "mealie.png"
  insertIntoHeimdallDB "$FMLNAME_BARASSISTANT" $USERTYPE_BARASSISTANT "https://$SUB_BARASSISTANT.$HOMESERVER_DOMAIN" 0 "bar-assistant.png"
  insertIntoHeimdallDB "$FMLNAME_KASM" $USERTYPE_KASM "https://$SUB_KASM.$HOMESERVER_DOMAIN" 0 "kasm.png"
  insertIntoHeimdallDB "$FMLNAME_CALIBRE_WEB" $USERTYPE_CALIBRE_WEB "https://$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN" 0 "calibre-web.png"
  insertIntoHeimdallDB "$FMLNAME_LINKWARDEN" $USERTYPE_LINKWARDEN "https://$SUB_LINKWARDEN.$HOMESERVER_DOMAIN" 0 "linkwarden.png"
  insertIntoHeimdallDB "$FMLNAME_STIRLINGPDF" $USERTYPE_STIRLINGPDF "https://$SUB_STIRLINGPDF.$HOMESERVER_DOMAIN" 0 "stirlingpdf.png"
  insertIntoHeimdallDB "$FMLNAME_FRESHRSS" $USERTYPE_FRESHRSS "https://$SUB_FRESHRSS.$HOMESERVER_DOMAIN" 0 "freshrss.png"
  insertIntoHeimdallDB "$FMLNAME_KEILA" $USERTYPE_KEILA "https://$SUB_KEILA.$HOMESERVER_DOMAIN" 0 "keila.png"
  insertIntoHeimdallDB "$FMLNAME_WALLABAG" $USERTYPE_WALLABAG "https://$SUB_WALLABAG.$HOMESERVER_DOMAIN" 0 "wallabag.png"
  insertIntoHeimdallDB "$FMLNAME_PAPERLESS" $USERTYPE_PAPERLESS "https://$SUB_PAPERLESS.$HOMESERVER_DOMAIN" 0 "paperless.png"
  insertIntoHeimdallDB "$FMLNAME_CHANGEDETECTION" $USERTYPE_CHANGEDETECTION "https://$SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN" 0 "changedetection.png"
  insertIntoHeimdallDB "$FMLNAME_HUGINN" $USERTYPE_HUGINN "https://$SUB_HUGINN.$HOMESERVER_DOMAIN" 0 "huginn.png"
  insertIntoHeimdallDB "$FMLNAME_FILEDROP" $USERTYPE_FILEDROP "https://$SUB_FILEDROP.$HOMESERVER_DOMAIN" 0 "filedrop.png"
  insertIntoHeimdallDB "$FMLNAME_PIPED_FRONTEND" $USERTYPE_PIPED_FRONTEND "https://$SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN" 0 "piped.png"
  insertIntoHeimdallDB "Logout $FMLNAME_AUTHELIA" $USERTYPE_AUTHELIA "https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN/logout" 1 "authelia.png"
  # HomeServers Tab
  insertIntoHeimdallDB "$HOMESERVER_NAME" homeservers "https://home.$HOMESERVER_DOMAIN" 1 "hs1.png"
  # RelayServer Tab
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    insertIntoHeimdallDB "$FMLNAME_ADGUARD" relayserver "https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1 "adguardhome.png"
    insertIntoHeimdallDB "$FMLNAME_CLIENTDNS" relayserver "https://$SUB_CLIENTDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1 "dnsmasq.png"
    insertIntoHeimdallDB "$FMLNAME_CADDYDNS" relayserver "https://$SUB_CADDYDNS.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 0 "dnsmasq.png"
    insertIntoHeimdallDB "$FMLNAME_PORTAINER" relayserver "https://$SUB_PORTAINER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1 "portainer.png"
    insertIntoHeimdallDB "$FMLNAME_RSPAMD" relayserver "https://$SUB_RSPAMD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1 "rspamd.png"
    insertIntoHeimdallDB "$FMLNAME_SYNCTHING" relayserver "https://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1 "syncthing.png"
    insertIntoHeimdallDB "$FMLNAME_WGPORTAL" relayserver "https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 0 "wgportal.png"
    insertIntoHeimdallDB "$FMLNAME_FILEBROWSER" relayserver "https://$SUB_FILEBROWSER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 0 "filebrowser.png"
  fi
}

function insertServicesUptimeKuma()
{
  curdt=$(getCurrentDate)
  insertServiceUptimeKuma "$FMLNAME_AUTHELIA" $USERTYPE_AUTHELIA "https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_PORTAINER" $USERTYPE_PORTAINER "https://$SUB_PORTAINER.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_ADGUARD" $USERTYPE_ADGUARD "https://$SUB_ADGUARD.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_OPENLDAP_MANAGER" $USERTYPE_OPENLDAP_MANAGER "https://$SUB_OPENLDAP_MANAGER.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_OPENLDAP_PHP" $USERTYPE_OPENLDAP_PHP "https://$SUB_OPENLDAP_PHP.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_MAILU" $USERTYPE_MAILU "https://$SUB_MAILU.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_SCRIPTSERVER" $USERTYPE_SCRIPTSERVER "https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_WAZUH" $USERTYPE_WAZUH "https://$SUB_WAZUH.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_COLLABORA" $USERTYPE_COLLABORA "https://$SUB_COLLABORA.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_NEXTCLOUD" $USERTYPE_NEXTCLOUD "https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_JITSI" $USERTYPE_JITSI "https://$SUB_JITSI.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_MATRIX_ELEMENT_PRIVATE" $USERTYPE_MATRIX_ELEMENT_PRIVATE "https://$SUB_MATRIX_ELEMENT_PRIVATE.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_MATRIX_ELEMENT_PUBLIC" $USERTYPE_MATRIX_ELEMENT_PUBLIC "https://$SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_WIKIJS" $USERTYPE_WIKIJS "https://$SUB_WIKIJS.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_GRAFANA" $USERTYPE_GRAFANA "https://$SUB_GRAFANA.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_PROMETHEUS" $USERTYPE_PROMETHEUS "https://$SUB_PROMETHEUS.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_INFLUXDB" $USERTYPE_INFLUXDB "https://$SUB_INFLUXDB.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_MASTODON" $USERTYPE_MASTODON "https://$SUB_MASTODON.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_DOZZLE" $USERTYPE_DOZZLE "https://$SUB_DOZZLE.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_SEARXNG" $USERTYPE_SEARXNG "https://$SUB_SEARXNG.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_JELLYFIN" $USERTYPE_JELLYFIN "https://$SUB_JELLYFIN.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_FILEBROWSER" $USERTYPE_FILEBROWSER "https://$SUB_FILEBROWSER.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_PHOTOPRISM" $USERTYPE_PHOTOPRISM "https://$SUB_PHOTOPRISM.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_GUACAMOLE" $USERTYPE_GUACAMOLE "https://$SUB_GUACAMOLE.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_HEIMDALL" $USERTYPE_HEIMDALL "https://$SUB_HEIMDALL.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_WORDPRESS" $USERTYPE_WORDPRESS "https://$SUB_WORDPRESS.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_GHOST" $USERTYPE_GHOST "https://$SUB_GHOST.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_DUPLICATI" $USERTYPE_DUPLICATI "https://$SUB_DUPLICATI.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_SYNCTHING" $USERTYPE_SYNCTHING "https://$SUB_SYNCTHING.$HOMESERVER_DOMAIN" 1
  insertServiceUptimeKuma "$FMLNAME_PEERTUBE" $USERTYPE_PEERTUBE "https://$SUB_PEERTUBE.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_SQLPAD" $USERTYPE_SQLPAD "https://$SUB_SQLPAD.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_CODESERVER" $USERTYPE_CODESERVER "https://$SUB_CODESERVER.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_HOMEASSISTANT_APP" $USERTYPE_HOMEASSISTANT_APP "https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_HOMEASSISTANT_CONFIGURATOR" $USERTYPE_HOMEASSISTANT_CONFIGURATOR "https://$SUB_HOMEASSISTANT_CONFIGURATOR.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_HOMEASSISTANT_NODERED" $USERTYPE_HOMEASSISTANT_NODERED "https://$SUB_HOMEASSISTANT_NODERED.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_HOMEASSISTANT_TASMOADMIN" $USERTYPE_HOMEASSISTANT_TASMOADMIN "https://$SUB_HOMEASSISTANT_TASMOADMIN.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_GITEA" $USERTYPE_GITEA "https://$SUB_GITEA.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_GITLAB" $USERTYPE_GITLAB "https://$SUB_GITLAB.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_VAULTWARDEN" $USERTYPE_VAULTWARDEN "https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_DISCOURSE" $USERTYPE_DISCOURSE "https://$SUB_DISCOURSE.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_SHLINK_WEB" $USERTYPE_SHLINK_WEB "https://$SUB_SHLINK_WEB.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_FIREFLY" $USERTYPE_FIREFLY "https://$SUB_FIREFLY.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_EXCALIDRAW_WEB" $USERTYPE_EXCALIDRAW_WEB "https://$SUB_EXCALIDRAW_WEB.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "${FMLNAME_EXCALIDRAW_WEB}-Server" $USERTYPE_EXCALIDRAW_WEB "https://$SUB_EXCALIDRAW_SERVER.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_DRAWIO_WEB" $USERTYPE_DRAWIO_WEB "https://$SUB_DRAWIO_WEB.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_INVIDIOUS" $USERTYPE_INVIDIOUS "https://$SUB_INVIDIOUS.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_MEALIE" $USERTYPE_MEALIE "https://$SUB_MEALIE.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_BARASSISTANT" $USERTYPE_BARASSISTANT "https://$SUB_BARASSISTANT.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_KASM" $USERTYPE_KASM "https://$SUB_KASM.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_NTFY" $USERTYPE_NTFY "https://$SUB_NTFY.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_ITTOOLS" $USERTYPE_ITTOOLS "https://$SUB_ITTOOLS.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_REMOTELY" $USERTYPE_REMOTELY "https://$SUB_REMOTELY.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_CALIBRE_SERVER" $USERTYPE_CALIBRE_SERVER "https://$SUB_CALIBRE_SERVER.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_CALIBRE_WEB" $USERTYPE_CALIBRE_WEB "https://$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_NETDATA" $USERTYPE_NETDATA "https://$SUB_NETDATA.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_LINKWARDEN" $USERTYPE_LINKWARDEN "https://$SUB_LINKWARDEN.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_STIRLINGPDF" $USERTYPE_STIRLINGPDF "https://$SUB_STIRLINGPDF.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_FRESHRSS" $USERTYPE_FRESHRSS "https://$SUB_FRESHRSS.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_KEILA" $USERTYPE_KEILA "https://$SUB_KEILA.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_WALLABAG" $USERTYPE_WALLABAG "https://$SUB_WALLABAG.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_JUPYTER" $USERTYPE_JUPYTER "https://$SUB_JUPYTER.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_PAPERLESS" $USERTYPE_PAPERLESS "https://$SUB_PAPERLESS.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_SPEEDTEST_TRACKER_LOCAL" $USERTYPE_SPEEDTEST_TRACKER_LOCAL "https://$SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_SPEEDTEST_TRACKER_VPN" $USERTYPE_SPEEDTEST_TRACKER_VPN "https://$SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_CHANGEDETECTION" $USERTYPE_CHANGEDETECTION "https://$SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_HUGINN" $USERTYPE_HUGINN "https://$SUB_HUGINN.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_FILEDROP" $USERTYPE_FILEDROP "https://$SUB_FILEDROP.$HOMESERVER_DOMAIN" 0
  insertServiceUptimeKuma "$FMLNAME_PIPED_FRONTEND" $USERTYPE_PIPED_FRONTEND "https://$SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN" 0
  if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    insertServiceUptimeKuma "${FMLNAME_ADGUARD}-RelayServer" relayserver "https://$SUB_ADGUARD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1
    insertServiceUptimeKuma "${FMLNAME_PORTAINER}-RelayServer" relayserver "https://$SUB_PORTAINER.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1
    insertServiceUptimeKuma "${FMLNAME_RSPAMD}-RelayServer" relayserver "https://$SUB_RSPAMD.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1
    insertServiceUptimeKuma "${FMLNAME_SYNCTHING}-RelayServer" relayserver "https://$SUB_SYNCTHING.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1
    insertServiceUptimeKuma "${FMLNAME_WGPORTAL}-RelayServer" relayserver "https://$SUB_WGPORTAL.$INT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 1
    insertServiceUptimeKuma "${FMLNAME_FILEBROWSER}-RelayServer" relayserver "https://$SUB_FILEBROWSER.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN" 0
  fi
}

function getLetsEncryptCertsDefault()
{
  echo "$SUB_JITSI.$HOMESERVER_DOMAIN,$SUB_MASTODON.$HOMESERVER_DOMAIN,$SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN,$SUB_GITEA.$HOMESERVER_DOMAIN,$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN,$SUB_FRESHRSS.$HOMESERVER_DOMAIN,$SUB_WALLABAG.$HOMESERVER_DOMAIN"
}

function initServiceDefaults()
{
  HSHQ_REQUIRED_STACKS="adguard,authelia,duplicati,heimdall,mailu,openldap,portainer,syncthing,ofelia,uptimekuma"
  HSHQ_OPTIONAL_STACKS="vaultwarden,sysutils,wazuh,jitsi,collabora,nextcloud,matrix,mastodon,dozzle,searxng,jellyfin,filebrowser,photoprism,guacamole,codeserver,ghost,wikijs,wordpress,peertube,homeassistant,gitlab,discourse,shlink,firefly,excalidraw,drawio,invidious,gitea,mealie,kasm,ntfy,ittools,remotely,calibre,netdata,linkwarden,stirlingpdf,bar-assistant,freshrss,keila,wallabag,jupyter,paperless,speedtest-tracker-local,speedtest-tracker-vpn,changedetection,huginn,coturn,filedrop,piped,sqlpad"

  DS_MEM_LOW=minimal
  DS_MEM_12=gitlab,discourse,netdata,jupyter,paperless,speedtest-tracker-local,speedtest-tracker-vpn,huginn,drawio,firefly,shlink,homeassistant,wordpress,ghost,wikijs,guacamole,searxng,excalidraw,invidious,jitsi,jellyfin,peertube,photoprism,sysutils,wazuh,mealie,kasm,bar-assistant,calibre,netdata,linkwarden,stirlingpdf,freshrss,keila,wallabag,changedetection,piped
  DS_MEM_16=gitlab,discourse,netdata,jupyter,paperless,speedtest-tracker-local,speedtest-tracker-vpn,huginn,drawio,firefly,shlink,homeassistant,wordpress,ghost,wikijs,guacamole,searxng,excalidraw,invidious,mealie,kasm,bar-assistant,calibre,netdata,linkwarden,stirlingpdf,freshrss,keila,wallabag,changedetection,piped
  DS_MEM_24=gitlab,discourse,netdata,jupyter,paperless,speedtest-tracker-local,speedtest-tracker-vpn,huginn,drawio,guacamole,kasm,stirlingpdf,piped
  DS_MEM_32=gitlab,discourse,netdata,jupyter,paperless,speedtest-tracker-local,speedtest-tracker-vpn,huginn
}

function getScriptImageByContainerName()
{
  case "$1" in
    "portainer")
      container_image=$IMG_PORTAINER
      ;;
    "adguard")
      container_image=$IMG_ADGUARD
      ;;
    "grafana")
      container_image=$IMG_GRAFANA
      ;;
    "prometheus")
      container_image=$IMG_PROMETHEUS
      ;;
    "node-exporter")
      container_image=$IMG_NODE_EXPORTER
      ;;
    "influxdb")
      container_image=$IMG_INFLUXDB
      ;;
    "ldapserver")
      container_image=$IMG_OPENLDAP_SERVER
      ;;
    "ldapphp")
      container_image=$IMG_OPENLDAP_PHP
      ;;
    "ldapmanager")
      container_image=$IMG_OPENLDAP_MANAGER
      ;;
    "$SMTP_HOSTNAME")
      container_image=$IMG_MAILU_FRONT
      ;;
    "mailu-unbound")
      container_image=$IMG_MAILU_UNBOUND
      ;;
    "mailu-redis")
      container_image=$IMG_REDIS
      ;;
    "mailu-admin")
      container_image=$IMG_MAILU_ADMIN
      ;;
    "mailu-imap")
      container_image=$IMG_MAILU_IMAP
      ;;
    "mailu-smtp")
      container_image=$IMG_MAILU_SMTP
      ;;
    "mailu-oletools")
      container_image=$IMG_MAILU_OLETOOLS
      ;;
    "mailu-antispam")
      container_image=$IMG_MAILU_ANTISPAM
      ;;
    "mailu-antivirus")
      container_image=$IMG_MAILU_ANTIVIRUS
      ;;
    "mailu-webdav")
      container_image=$IMG_MAILU_WEBDAV
      ;;
    "mailu-fetchmail")
      container_image=$IMG_MAILU_FETCHMAIL
      ;;
    "mailu-webmail")
      container_image=$IMG_MAILU_WEBMAIL
      ;;
    "wazuh.manager")
      container_image=$IMG_WAZUH_MANAGER
      ;;
    "wazuh.indexer")
      container_image=$IMG_WAZUH_INDEXER
      ;;
    "wazuh.dashboard")
      container_image=$IMG_WAZUH_DASHBOARD
      ;;
    "collabora")
      container_image=$IMG_COLLABORA
      ;;
    "nextcloud-db")
      container_image=$IMG_POSTGRES
      ;;
    "nextcloud-redis")
      container_image=$IMG_REDIS
      ;;
    "nextcloud-app")
      container_image=$IMG_NEXTCLOUD_APP
      ;;
    "nextcloud-cron")
      container_image=$IMG_NEXTCLOUD_APP
      ;;
    "nextcloud-push")
      container_image=$IMG_NEXTCLOUD_APP
      ;;
    "nextcloud-imaginary")
      container_image=$IMG_NEXTCLOUD_IMAGINARY
      ;;
    "nextcloud-web")
      container_image=$IMG_NEXTCLOUD_WEB
      ;;
    "jitsi-web")
      container_image=$IMG_JITSI_WEB
      ;;
    "jitsi-prosody")
      container_image=$IMG_JITSI_PROSODY
      ;;
    "jitsi-jicofo")
      container_image=$IMG_JITSI_JICOFO
      ;;
    "jitsi-jvb")
      container_image=$IMG_JITSI_JVB
      ;;
    "matrix-db")
      container_image=$IMG_POSTGRES
      ;;
    "matrix-synapse")
      container_image=$IMG_MATRIX_SYNAPSE
      ;;
    "matrix-redis")
      container_image=$IMG_REDIS
      ;;
    "matrix-element-private")
      container_image=$IMG_MATRIX_ELEMENT
      ;;
    "matrix-element-public")
      container_image=$IMG_MATRIX_ELEMENT
      ;;
    "wikijs-db")
      container_image=$IMG_POSTGRES
      ;;
    "wikijs-web")
      container_image=$IMG_WIKIJS
      ;;
    "duplicati")
      container_image=$IMG_DUPLICATI
      ;;
    "mastodon-db")
      container_image=$IMG_POSTGRES
      ;;
    "mastodon-redis")
      container_image=$IMG_REDIS
      ;;
    "mastodon-redis-cache")
      container_image=$IMG_REDIS
      ;;
    "mastodon-app")
      container_image=$IMG_MASTODON_APP
      ;;
    "mastodon-streaming")
      container_image=$IMG_MASTODON_APP
      ;;
    "mastodon-sidekiq")
      container_image=$IMG_MASTODON_APP
      ;;
    "mastodon-web")
      container_image=$IMG_MASTODON_WEB
      ;;
    "mastodon-elasticsearch")
      container_image=$IMG_MASTODON_ELASTICSEARCH
      ;;
    "dozzle")
      container_image=$IMG_DOZZLE
      ;;
    "searxng-caddy")
      container_image=$IMG_CADDY
      ;;
    "searxng-app")
      container_image=$IMG_SEARXNG
      ;;
    "searxng-redis")
      container_image=$IMG_REDIS
      ;;
    "jellyfin")
      container_image=$IMG_JELLYFIN
      ;;
    "filebrowser")
      container_image=$IMG_FILEBROWSER
      ;;
    "photoprism-db")
      container_image=$IMG_MYSQL
      ;;
    "photoprism-app")
      container_image=$IMG_PHOTOPRISM_APP
      ;;
    "guacamole-db")
      container_image=$IMG_MYSQL
      ;;
    "guacamole-daemon")
      container_image=$IMG_GUACAMOLE_GUACD
      ;;
    "guacamole-web")
      container_image=$IMG_GUACAMOLE_WEB
      ;;
    "authelia")
      container_image=$IMG_AUTHELIA
      ;;
    "authelia-redis")
      container_image=$IMG_REDIS
      ;;
    "wordpress-db")
      container_image=$IMG_MYSQL
      ;;
    "wordpress-web")
      container_image=$IMG_WORDPRESS
      ;;
    "ghost-db")
      container_image=$IMG_MYSQL
      ;;
    "ghost-web")
      container_image=$IMG_GHOST
      ;;
    "peertube-db")
      container_image=$IMG_POSTGRES
      ;;
    "peertube-app")
      container_image=$IMG_PEERTUBE_APP
      ;;
    "peertube-redis")
      container_image=$IMG_REDIS
      ;;
    "homeassistant-db")
      container_image=$IMG_POSTGRES
      ;;
    "homeassistant-app")
      container_image=$IMG_HOMEASSISTANT_APP
      ;;
    "homeassistant-nodered")
      container_image=$IMG_HOMEASSISTANT_NODERED
      ;;
    "homeassistant-configurator")
      container_image=$IMG_HOMEASSISTANT_CONFIGURATOR
      ;;
    "homeassistant-tasmoadmin")
      container_image=$IMG_HOMEASSISTANT_TASMOADMIN
      ;;
    "gitlab-db")
      container_image=$IMG_POSTGRES
      ;;
    "gitlab-app")
      container_image=$IMG_GITLAB_APP
      ;;
    "gitlab-redis")
      container_image=$IMG_REDIS
      ;;
    "vaultwarden-db")
      container_image=$IMG_POSTGRES
      ;;
    "vaultwarden-app")
      container_image=$IMG_VAULTWARDEN_APP
      ;;
    "vaultwarden-ldap")
      container_image=$IMG_VAULTWARDEN_LDAP
      ;;
    "discourse-db")
      container_image=$IMG_POSTGRES
      ;;
    "discourse-app")
      container_image=$IMG_DISCOURSE
      ;;
    "discourse-sidekiq")
      container_image=$IMG_DISCOURSE
      ;;
    "discourse-redis")
      container_image=$IMG_REDIS
      ;;
    "syncthing")
      container_image=$IMG_SYNCTHING
      ;;
    "codeserver")
      container_image=$IMG_CODESERVER
      ;;
    "shlink-db")
      container_image=$IMG_POSTGRES
      ;;
    "shlink-app")
      container_image=$IMG_SHLINK_APP
      ;;
    "shlink-web")
      container_image=$IMG_SHLINK_WEB
      ;;
    "shlink-redis")
      container_image=$IMG_REDIS
      ;;
    "firefly-db")
      container_image=$IMG_POSTGRES
      ;;
    "firefly-app")
      container_image=$IMG_FIREFLY
      ;;
    "firefly-redis")
      container_image=$IMG_REDIS
      ;;
    "excalidraw-storage")
      container_image=$IMG_EXCALIDRAW_STORAGE
      ;;
    "excalidraw-server")
      container_image=$IMG_EXCALIDRAW_SERVER
      ;;
    "excalidraw-web")
      container_image=$IMG_EXCALIDRAW_WEB
      ;;
    "excalidraw-redis")
      container_image=$IMG_REDIS
      ;;
    "drawio-plantuml")
      container_image=$IMG_DRAWIO_PLANTUML
      ;;
    "drawio-export")
      container_image=$IMG_DRAWIO_EXPORT
      ;;
    "drawio-web")
      container_image=$IMG_DRAWIO_WEB
      ;;
    "invidious-db")
      container_image=$IMG_POSTGRES
      ;;
    "invidious-web")
      container_image=$IMG_INVIDIOUS
      ;;
    "gitea-db")
      container_image=$IMG_POSTGRES
      ;;
    "gitea-app")
      container_image=$IMG_GITEA_APP
      ;;
    "mealie-db")
      container_image=$IMG_POSTGRES
      ;;
    "mealie-app")
      container_image=$IMG_MEALIE
      ;;
    "kasm")
      container_image=$IMG_KASM
      ;;
    "ntfy")
      container_image=$IMG_NTFY
      ;;
    "ittools")
      container_image=$IMG_ITTOOLS
      ;;
    "remotely")
      container_image=$IMG_REMOTELY
      ;;
    "calibre-server")
      container_image=$IMG_CALIBRE_SERVER
      ;;
    "calibre-web")
      container_image=$IMG_CALIBRE_WEB
      ;;
    "netdata")
      container_image=$IMG_NETDATA
      ;;
    "linkwarden-db")
      container_image=$IMG_POSTGRES
      ;;
    "linkwarden-app")
      container_image=$IMG_LINKWARDEN
      ;;
    "stirlingpdf")
      container_image=$IMG_STIRLINGPDF
      ;;
    "bar-assistant-app")
      container_image=$IMG_BARASSISTANT_APP
      ;;
    "bar-assistant-meilisearch")
      container_image=$IMG_MEILISEARCH
      ;;
    "bar-assistant-redis")
      container_image=$IMG_REDIS
      ;;
    "bar-assistant-saltrim")
      container_image=$IMG_SALTRIM
      ;;
    "bar-assistant-web")
      container_image=$IMG_BARASSISTANT_WEB
      ;;
    "freshrss-db")
      container_image=$IMG_POSTGRES
      ;;
    "freshrss-app")
      container_image=$IMG_FRESHRSS
      ;;
    "keila-db")
      container_image=$IMG_POSTGRES
      ;;
    "keila-app")
      container_image=$IMG_KEILA
      ;;
    "wallabag-db")
      container_image=$IMG_POSTGRES
      ;;
    "wallabag-redis")
      container_image=$IMG_REDIS
      ;;
    "wallabag-app")
      container_image=$IMG_WALLABAG
      ;;
    "jupyter")
      container_image=$IMG_JUPYTER
      ;;
    "paperless-db")
      container_image=$IMG_POSTGRES
      ;;
    "paperless-redis")
      container_image=$IMG_REDIS
      ;;
    "paperless-app")
      container_image=$IMG_PAPERLESS_APP
      ;;
    "paperless-gotenberg")
      container_image=$IMG_PAPERLESS_GOTENBERG
      ;;
    "paperless-tika")
      container_image=$IMG_PAPERLESS_TIKA
      ;;
    "speedtest-tracker-local-db")
      container_image=$IMG_POSTGRES
      ;;
    "speedtest-tracker-local-app")
      container_image=$IMG_SPEEDTEST_TRACKER_APP
      ;;
    "speedtest-tracker-vpn-db")
      container_image=$IMG_POSTGRES
      ;;
    "speedtest-tracker-vpn-app")
      container_image=$IMG_SPEEDTEST_TRACKER_APP
      ;;
    "changedetection-app")
      container_image=$IMG_CHANGEDETECTION_APP
      ;;
    "changedetection-playwright-chrome")
      container_image=$IMG_CHANGEDETECTION_PLAYWRIGHT_CHROME
      ;;
    "huginn-db")
      container_image=$IMG_POSTGRES
      ;;
    "huginn-app")
      container_image=$IMG_HUGINN_APP
      ;;
    "coturn")
      container_image=$IMG_COTURN
      ;;
    "filedrop")
      container_image=$IMG_FILEDROP
      ;;
    "piped-db")
      container_image=$IMG_POSTGRES
      ;;
    "piped-frontend")
      container_image=$IMG_PIPED_FRONTEND
      ;;
    "piped-proxy")
      container_image=$IMG_PIPED_PROXY
      ;;
    "piped-api")
      container_image=$IMG_PIPED_API
      ;;
    "piped-cron")
      container_image=$IMG_PIPED_CRON
      ;;
    "piped-web")
      container_image=$IMG_PIPED_WEB
      ;;
    "sqlpad")
      container_image=$IMG_SQLPAD
      ;;
    "heimdall")
      container_image=$IMG_HEIMDALL
      ;;
    "ofelia")
      container_image=$IMG_OFELIA
      ;;
    "uptimekuma")
      container_image=$IMG_UPTIMEKUMA
      ;;
    *)
      ;;
  esac
  echo "$container_image"
}

# Stacks Installation/Update Functions

# Portainer
function installPortainer()
{
  set +e
  is_containers=$(docker ps -q)
  if [ ${#is_containers} -gt 0 ]; then
    showMessageBox "Docker Containers Running" "There are docker containers running. Please stop these containers before continuing. Exiting..."
    exit 1
  fi
  # Don't install if directory exists
  checkDeleteStackAndDirectory portainer "Portainer" false
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  set -e
  createDockerNetworks

  mkdir $HSHQ_STACKS_DIR/portainer
  mkdir $HSHQ_STACKS_DIR/portainer/certs

  initServicesCredentials
  outputConfigPortainer
  generateCert portainer portainer $HOMESERVER_HOST_IP
  if [ -z "$PORTAINER_DB_KEY" ]; then
    PORTAINER_DB_KEY=$(pwgen -c -n 64 1)
    updateConfigVar PORTAINER_DB_KEY $PORTAINER_DB_KEY
	rm -f $HSHQ_SECRETS_DIR/portainer_key.txt
    echo $PORTAINER_DB_KEY > $HSHQ_SECRETS_DIR/portainer_key.txt
    chmod 0400 $HSHQ_SECRETS_DIR/portainer_key.txt
  fi

  if ! [ -f $HSHQ_SECRETS_DIR/portainer_key.txt ]; then
    echo $PORTAINER_DB_KEY > $HSHQ_SECRETS_DIR/portainer_key.txt
    chmod 0400 $HSHQ_SECRETS_DIR/portainer_key.txt 
  fi

  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d
  search="starting HTTPS server"
  isFound="F"
  i=0
  set +e
  while [ $i -le 300 ]
  do
    findtext=$(docker logs portainer 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 1 second, total wait=$i seconds..."
    sleep 1
    i=$((i+1))
  done
  set -e
  if [ $isFound == "F" ]; then
    echo "Portainer did not start up correctly..."
    exit 1
  fi

  echo "Portainer has been loaded and started..."
  echo "Sleeping 10 seconds to ensure Portainer has loaded completely."
  sleep 10

  PORTAINER_ADMIN_USERID=$(http --verify=no --print="b" POST https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/users/admin/init Username="$PORTAINER_ADMIN_USERNAME" Password="$PORTAINER_ADMIN_PASSWORD"  | jq -r .Id)
  updateConfigVar PORTAINER_ADMIN_USERID $PORTAINER_ADMIN_USERID
  PORTAINER_TOKEN="$(getPortainerToken -u $PORTAINER_ADMIN_USERNAME -p $PORTAINER_ADMIN_PASSWORD)"
  http -f --verify=no --timeout=300 --print="b" POST https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/endpoints "Authorization: Bearer $PORTAINER_TOKEN" Name="$HOMESERVER_NAME" EndpointCreationType=1 >/dev/null

  # Enable dark mode because it looks better
  echo "{\"theme\":{\"color\":\"dark\"}}" > $HOME/portainer-json.tmp
  http --verify=no --timeout=300 PUT https://127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT/api/users/$PORTAINER_ADMIN_USERID "Authorization: Bearer $PORTAINER_TOKEN" @$HOME/portainer-json.tmp > /dev/null
  rm $HOME/portainer-json.tmp

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PORTAINER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://portainer:9443 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PORTAINER $MANAGETLS_PORTAINER "$is_integrate_hshq" $NETDEFAULT_PORTAINER "$inner_block"
}

function outputConfigPortainer()
{
  DOCKER_SOCKET="/var/run/docker.sock"
  if [ "$IS_ROOTLESS_DOCKER" = "true" ]; then
	  DOCKER_SOCKET='$XDG_RUNTIME_DIR/docker.sock'
  fi
  if ! [ "$HOMESERVER_HOST_ISPRIVATE" = "true" ]; then
    pdocknet=dock-ext
  else
    pdocknet=dock-privateip
  fi

  cat <<EOFPC > $HSHQ_STACKS_DIR/portainer/docker-compose.yml
$STACK_VERSION_PREFIX portainer $(getScriptStackVersion portainer)
version: '3.5'

services:
  portainer:
    image: $(getScriptImageByContainerName portainer)
    container_name: portainer
    hostname: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    env_file: portainer.env
    networks:
      - dock-proxy-net
      - ${pdocknet}-net
    ports:
      - 127.0.0.1:$PORTAINER_LOCAL_HTTPS_PORT:9443
      - $HOMESERVER_HOST_IP:$PORTAINER_LOCAL_HTTPS_PORT:9443
    command:
      --sslcert /data/certs/portainer.crt
      --sslkey /data/certs/portainer.key
      --http-disabled
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - ${DOCKER_SOCKET}:/var/run/docker.sock
      - ${HSHQ_STACKS_DIR}/portainer:/data
      - ${HSHQ_SSL_DIR}/portainer.crt:/data/certs/portainer.crt:ro
      - ${HSHQ_SSL_DIR}/portainer.key:/data/certs/portainer.key:ro
      - ${HSHQ_SECRETS_DIR}/portainer_key.txt:/run/secrets/portainer

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  ${pdocknet}-net:
    name: ${pdocknet}
    external: true
EOFPC

  rm -f $HSHQ_STACKS_DIR/portainer/portainer.env
  cat <<EOFPC > $HSHQ_STACKS_DIR/portainer/portainer.env
HSHQ_BASE_DIR=$HSHQ_BASE_DIR
HSHQ_DATA_DIR=$HSHQ_DATA_DIR
HSHQ_BACKUP_DIR=$HSHQ_BACKUP_DIR
HSHQ_NONBACKUP_DIR=$HSHQ_NONBACKUP_DIR
HSHQ_ASSETS_DIR=$HSHQ_ASSETS_DIR
HSHQ_BUILD_DIR=$HSHQ_BUILD_DIR
HSHQ_CONFIG_DIR=$HSHQ_CONFIG_DIR
HSHQ_LIB_DIR=$HSHQ_LIB_DIR
HSHQ_RELAYSERVER_DIR=$HSHQ_RELAYSERVER_DIR
HSHQ_SCRIPTS_DIR=$HSHQ_SCRIPTS_DIR
HSHQ_SECRETS_DIR=$HSHQ_SECRETS_DIR
HSHQ_SSL_DIR=$HSHQ_SSL_DIR
HSHQ_STACKS_DIR=$HSHQ_STACKS_DIR
HSHQ_WIREGUARD_DIR=$HSHQ_WIREGUARD_DIR
HOMESERVER_HOST_IP=$HOMESERVER_HOST_IP
HOMESERVER_HOST_RANGE=$HOMESERVER_HOST_RANGE
TZ=$TZ
UID=$USERID
GID=$GROUPID
EOFPC

  chmod 600 $HSHQ_STACKS_DIR/portainer/portainer.env
}

function performUpdatePortainer()
{
  # This is a special case and has not been tested. Ensure to test on next image release.
  perform_stack_name=portainer
  # This function modifies the variable perform_update_report
  # with the results of the update process. It is up to the 
  # caller to do something with it.
  perform_update_report=""
  portainerToken="$1"
  perform_compose=$HSHQ_STACKS_DIR/portainer/docker-compose.yml
  perform_stack_firstline=$(sudo sed -n 1p $perform_compose)
  perform_stack_ver=$(getVersionFromComposeLine "$perform_stack_firstline")
  unset image_update_map
  oldVer=v"$perform_stack_ver"
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=portainer/portainer-ce:2.19.3-alpine
      image_update_map[0]="portainer/portainer-ce:2.19.3-alpine,portainer/portainer-ce:2.19.4-alpine"
    ;;
    2)
      newVer=v2
      curImageList=portainer/portainer-ce:2.19.4-alpine
      image_update_map[0]="portainer/portainer-ce:2.19.4-alpine,portainer/portainer-ce:2.19.4-alpine"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "0" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function restartPortainer()
{
  resp_curE=${-//[^e]/}
  set +e
  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml down > /dev/null 2>&1
  sleep 3
  docker-compose -f $HSHQ_STACKS_DIR/portainer/docker-compose.yml up -d > /dev/null 2>&1
  search="starting HTTPS server"
  isFound="F"
  i=0
  while [ $i -le 300 ]
  do
    findtext=$(docker logs portainer 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 1 second, total wait=$i seconds..."
    sleep 1
    i=$((i+1))
  done
  if ! [ -z $resp_curE ]; then
    set -e
  fi
  sleep 3
}

# Adguard
function installAdGuard()
{
  set +e
  is_integrate_hshq=$1
  # Remove directory if it exists
  checkDeleteStackAndDirectory adguard "Adguard"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: AdGuard directory exists"
    exit 1
  fi
  pullImage $IMG_ADGUARD
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain AdGuard docker image"
    exit 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/adguard
  mkdir $HSHQ_NONBACKUP_DIR/adguard
  mkdir $HSHQ_STACKS_DIR/adguard/conf
  mkdir $HSHQ_NONBACKUP_DIR/adguard/work

  initServicesCredentials
  outputConfigAdGuard
  generateCert adguard adguard

  sudo systemctl stop systemd-resolved > /dev/null 2>&1
  sudo systemctl disable systemd-resolved > /dev/null 2>&1
  sudo rm -f /etc/resolv.conf > /dev/null 2>&1
  sudo tee /etc/resolv.conf >/dev/null <<EOFR
nameserver 127.0.0.1
EOFR
  np_path="/etc/netplan/*"
  for cur_np in "$np_path"
  do
    sudo sed -i "s|8.8.8.8|9.9.9.9|g" $cur_np
    sudo sed -i "s|8.8.4.4|149.112.112.112|g" $cur_np
  done
  sudo netplan apply > /dev/null 2>&1

  installStack adguard adguard "entering tls listener loop on" $HOME/adguard.env
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing AdGuard"
    exit $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_ADGUARD.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://adguard {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_ADGUARD $MANAGETLS_ADGUARD "$is_integrate_hshq" $NETDEFAULT_ADGUARD "$inner_block"
}

function outputConfigAdGuard()
{
  ADGUARD_ADMIN_PASSWORD_HASH=$(htpasswd -B -n -b $ADGUARD_ADMIN_USERNAME $ADGUARD_ADMIN_PASSWORD | cut -d":" -f2-)
  cat <<EOFAC > $HOME/adguard-compose.yml
$STACK_VERSION_PREFIX adguard $(getScriptStackVersion adguard)
version: '3.5'

services:
  adguard:
    image: $(getScriptImageByContainerName adguard)
    container_name: adguard
    hostname: adguard
    restart: unless-stopped
    env_file: stack.env
    user: "\${UID}:\${GID}"
    security_opt:
      - no-new-privileges:true
    networks:
      dock-proxy-net:
      dock-ext-net:
        ipv4_address: \${NET_EXTERNAL_SUBNET_PREFIX}.253
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 127.0.0.1:$ADGUARD_LOCALHOST_PORT:443
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/adguard/conf:/opt/adguardhome/conf
      - \${HSHQ_NONBACKUP_DIR}/adguard/work:/opt/adguardhome/work
      - \${HSHQ_SSL_DIR}/adguard.crt:/opt/adguardhome/conf/cert.pem
      - \${HSHQ_SSL_DIR}/adguard.key:/opt/adguardhome/conf/key.pem

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFAC

  cat <<EOFAD > $HOME/adguard.env
NET_EXTERNAL_SUBNET_PREFIX=$NET_EXTERNAL_SUBNET_PREFIX
UID=$USERID
GID=$GROUPID
EOFAD

  cat <<EOFAD > $HSHQ_STACKS_DIR/adguard/conf/AdGuardHome.yaml
http:
  pprof:
    port: 6060
    enabled: false
  address: 0.0.0.0:3000
  session_ttl: 720h
users:
  - name: $ADGUARD_ADMIN_USERNAME
    password: $ADGUARD_ADMIN_PASSWORD_HASH
auth_attempts: 5
block_auth_min: 15
http_proxy: ""
language: en
theme: dark
dns:
  bind_hosts:
    - 0.0.0.0
  port: 53
  anonymize_client_ip: false
  ratelimit: 0
  ratelimit_whitelist: []
  refuse_any: true
  upstream_dns:
    - https://dns.quad9.net/dns-query
    - https://anycast.dns.nextdns.io/dns-query
    - quic://dns-unfiltered.adguard.com:784
    - https://dns.nextdns.io/dns-query
  upstream_dns_file: ""
  bootstrap_dns:
    - 9.9.9.9
    - 149.112.112.112
  fallback_dns: []
  all_servers: false
  fastest_addr: false
  fastest_timeout: 1s
  allowed_clients:
    - 127.0.0.0/8
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
  disallowed_clients: []
  blocked_hosts:
    - version.bind
    - id.server
    - hostname.bind
  trusted_proxies:
    - 127.0.0.0/8
    - ::1/128
  cache_size: 41943040
  cache_ttl_min: 0
  cache_ttl_max: 0
  cache_optimistic: true
  bogus_nxdomain: []
  aaaa_disabled: true
  enable_dnssec: true
  edns_client_subnet:
    custom_ip: ""
    enabled: false
    use_custom: false
  max_goroutines: 300
  handle_ddr: true
  ipset: []
  ipset_file: ""
  bootstrap_prefer_ipv6: false
  upstream_timeout: 3s
  private_networks: []
  use_private_ptr_resolvers: true
  local_ptr_upstreams: []
  use_dns64: false
  dns64_prefixes: []
  serve_http3: false
  use_http3_upstreams: false
tls:
  enabled: true
  server_name: adguard
  force_https: true
  port_https: 443
  port_dns_over_tls: 853
  port_dns_over_quic: 853
  port_dnscrypt: 0
  dnscrypt_config_file: ""
  allow_unencrypted_doh: false
  certificate_chain: ""
  private_key: ""
  certificate_path: /opt/adguardhome/conf/cert.pem
  private_key_path: /opt/adguardhome/conf/key.pem
  strict_sni_check: false
querylog:
  ignored:
    - $HOMESERVER_DOMAIN
    - '*.$HOMESERVER_DOMAIN'
  interval: 720h
  size_memory: 1000
  enabled: true
  file_enabled: true
statistics:
  ignored:
    - $HOMESERVER_DOMAIN
    - '*.$HOMESERVER_DOMAIN'
  interval: 720h
  enabled: true
filters:
  - enabled: true
    url: https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
    name: AdGuard DNS filter
    id: 1
  - enabled: true
    url: https://adaway.org/hosts.txt
    name: AdAway Default Blocklist
    id: 2
  - enabled: true
    url: https://someonewhocares.org/hosts/zero/hosts
    name: Dan Pollock's List
    id: 1657273139
  - enabled: true
    url: https://raw.githubusercontent.com/Perflyst/PiHoleBlocklist/master/SmartTV-AGH.txt
    name: Perflyst and Dandelion Sprout's Smart-TV Blocklist
    id: 1657273140
  - enabled: true
    url: https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt
    name: WindowsSpyBlocker - Hosts spy rules
    id: 1657273141
  - enabled: true
    url: https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareAdGuardHome.txt
    name: Dandelion Sprout's Anti-Malware List
    id: 1657273142
  - enabled: true
    url: https://raw.githubusercontent.com/hoshsadiq/adblock-nocoin-list/master/hosts.txt
    name: NoCoin Filter List
    id: 1657273143
  - enabled: true
    url: https://raw.githubusercontent.com/durablenapkin/scamblocklist/master/adguard.txt
    name: Scam Blocklist by DurableNapkin
    id: 1657273144
  - enabled: true
    url: https://raw.githubusercontent.com/mitchellkrogza/The-Big-List-of-Hacked-Malware-Web-Sites/master/hosts
    name: The Big List of Hacked Malware Web Sites
    id: 1657273145
  - enabled: true
    url: https://malware-filter.gitlab.io/malware-filter/urlhaus-filter-agh-online.txt
    name: Online Malicious URL Blocklist
    id: 1657273146
  - enabled: true
    url: https://pgl.yoyo.org/adservers/serverlist.php?hostformat=adblockplus&showintro=1&mimetype=plaintext
    name: Peter Lowe's List
    id: 1657273147
whitelist_filters: []
user_rules:
  - '@@||api.ipify.org^'
dhcp:
  enabled: false
  interface_name: ""
  local_domain_name: lan
  dhcpv4:
    gateway_ip: ""
    subnet_mask: ""
    range_start: ""
    range_end: ""
    lease_duration: 86400
    icmp_timeout_msec: 1000
    options: []
  dhcpv6:
    range_start: ""
    lease_duration: 86400
    ra_slaac_only: false
    ra_allow_slaac: false
filtering:
  blocking_ipv4: ""
  blocking_ipv6: ""
  blocked_services:
    schedule:
      time_zone: Local
    ids: []
  rewrites:
    - domain: '$HOMESERVER_DOMAIN'
      answer: $HOMESERVER_HOST_IP
    - domain: '*.$HOMESERVER_DOMAIN'
      answer: $HOMESERVER_HOST_IP
    - domain: '*.$EXT_DOMAIN_PREFIX.$HOMESERVER_DOMAIN'
      answer: $RELAYSERVER_SERVER_IP
  protection_disabled_until: null
  safe_search:
    enabled: false
    bing: true
    duckduckgo: true
    google: true
    pixabay: true
    yandex: true
    youtube: true
  blocking_mode: default
  parental_block_host: family-block.dns.adguard.com
  safebrowsing_block_host: standard-block.dns.adguard.com
  safebrowsing_cache_size: 10485760
  safesearch_cache_size: 10485760
  parental_cache_size: 10485760
  cache_time: 30
  filters_update_interval: 24
  blocked_response_ttl: 10
  filtering_enabled: true
  parental_enabled: false
  safebrowsing_enabled: true
  protection_enabled: true
clients:
  runtime_sources:
    whois: true
    arp: true
    rdns: true
    dhcp: true
    hosts: true
  persistent: []
log:
  file: ""
  max_backups: 0
  max_size: 100
  max_age: 3
  compress: false
  local_time: false
  verbose: false
os:
  group: ""
  user: ""
  rlimit_nofile: 0
schema_version: 27
EOFAD
}

function performUpdateAdGuard()
{
  perform_stack_name=adguard
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=adguard/adguardhome:v0.107.41
      image_update_map[0]="adguard/adguardhome:v0.107.41,adguard/adguardhome:v0.107.45"
    ;;
    2)
      newVer=v3
      curImageList=adguard/adguardhome:v0.107.43
      image_update_map[0]="adguard/adguardhome:v0.107.43,adguard/adguardhome:v0.107.45"
    ;;
    3)
      newVer=v3
      curImageList=adguard/adguardhome:v0.107.45
      image_update_map[0]="adguard/adguardhome:v0.107.45,adguard/adguardhome:v0.107.45"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# SysUtils
function installSysUtils()
{
  set +e
  is_integrate_hshq=$1
  # Don't install if directory exists
  checkDeleteStackAndDirectory sysutils "SystemUtils"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_GRAFANA
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PROMETHEUS
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_NODE_EXPORTER
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_INFLUXDB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/sysutils
  mkdir $HSHQ_STACKS_DIR/sysutils/grafana
  mkdir $HSHQ_STACKS_DIR/sysutils/influxdb
  mkdir $HSHQ_STACKS_DIR/sysutils/influxdb/etc
  mkdir $HSHQ_STACKS_DIR/sysutils/influxdb/var
  mkdir $HSHQ_STACKS_DIR/sysutils/prometheus
  mkdir $HSHQ_NONBACKUP_DIR/sysutils
  mkdir $HSHQ_NONBACKUP_DIR/sysutils/prometheus

  initServicesCredentials
  generateCert influxdb influxdb
  gf_dataset_uid=$(pwgen -c -n 9 1)
  gf_dashboard_uid=$(pwgen -c -n 9 1)
  outputConfigSysUtils
  docker-compose -f $HOME/sysutils-compose-tmp.yml up -d

  search="HTTP Server Listen"
  isFound="F"
  i=0
  set +e
  while [ $i -le 120 ]
  do
    findtext=$(docker logs grafana 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 5 seconds, total wait=$i seconds..."
    sleep 5
    i=$((i+5))
  done
  if [ $isFound == "F" ]; then
    echo "System Utils did not start up correctly..."
    docker-compose -f $HOME/sysutils-compose-tmp.yml down -v
    return 1
  fi

  search="service=tcp-listener transport=https"
  isFound="F"
  i=0
  while [ $i -le 60 ]
  do
    findtext=$(docker logs influxdb 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 1 second, total wait=$i seconds..."
    sleep 1
    i=$((i+1))
  done
  if [ $isFound == "F" ]; then
    echo "System Utils did not start up correctly..."
    docker-compose -f $HOME/sysutils-compose-tmp.yml down -v
    return 1
  fi
  sleep 5
  datasource_json=$(jq -n --arg gfid "$gf_dataset_uid" '{name: "Prometheus", uid: $gfid, type: "prometheus", url: "http://prometheus:9090", access: "proxy", basicAuth: false}')
  num_tries=1
  total_tries=5
  isSuccess=false
  while [ "$isSuccess" = "false" ] && [ $num_tries -lt $total_tries ]
  do
    echo $datasource_json | http POST http://$GRAFANA_ADMIN_USERNAME:$GRAFANA_ADMIN_PASSWORD@127.0.0.1:6565/api/datasources > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      isSuccess=true
      break
    fi
    echo "ERROR: Grafana datasource import failed, retrying in 5 seconds..."
    sleep 5
    ((num_tries++))
  done
  if [ "$isSuccess" = "false" ]; then
    echo "ERROR: Could not import datasource into Grafana."
  else
    sleep 3
    isSuccess=false
    num_tries=1
    while [ "$isSuccess" = "false" ] && [ $num_tries -lt $total_tries ]
    do
      cat $HOME/gfdashboard.json | http POST http://$GRAFANA_ADMIN_USERNAME:$GRAFANA_ADMIN_PASSWORD@127.0.0.1:6565/api/dashboards/db > /dev/null 2>&1
      if [ $? -eq 0 ]; then
        isSuccess=true
        break
      fi
      echo "ERROR: Grafana dashboard import failed, retrying in 5 seconds..."
      sleep 5
      ((num_tries++))
    done
    if [ "$isSuccess" = "false" ]; then
      echo "ERROR: Could not import dashboard into Grafana."
    fi
  fi
  set -e
  pref_string=$(jq -n --arg gfid "$gf_dashboard_uid" --arg tz "$TZ" '{theme: "dark", homeDashboardUID: $gfid, timezone: $tz}')
  echo $pref_string | http PATCH http://$GRAFANA_ADMIN_USERNAME:$GRAFANA_ADMIN_PASSWORD@127.0.0.1:6565/api/org/preferences > /dev/null 2>&1

  sleep 2
  docker-compose -f $HOME/sysutils-compose-tmp.yml down -v
  sleep 2
  installStack sysutils grafana "HTTP Server Listen" $HOME/sysutils.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  rm -f $HOME/sysutils-compose-tmp.yml
  rm -f $HOME/gfdashboard.json

  inner_block=""
  inner_block=$inner_block">>https://$SUB_GRAFANA.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://grafana:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_GRAFANA $MANAGETLS_GRAFANA "$is_integrate_hshq" $NETDEFAULT_GRAFANA "$inner_block"

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PROMETHEUS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://prometheus:9090 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PROMETHEUS $MANAGETLS_PROMETHEUS "$is_integrate_hshq" $NETDEFAULT_PROMETHEUS "$inner_block"

  inner_block=""
  inner_block=$inner_block">>https://$SUB_INFLUXDB.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://influxdb:8086 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_INFLUXDB $MANAGETLS_INFLUXDB "$is_integrate_hshq" $NETDEFAULT_INFLUXDB "$inner_block"

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll sysutils "$FMLNAME_GRAFANA" $USERTYPE_GRAFANA "https://$SUB_GRAFANA.$HOMESERVER_DOMAIN" "grafana.png"
    insertEnableSvcAll sysutils "$FMLNAME_PROMETHEUS" $USERTYPE_PROMETHEUS "https://$SUB_PROMETHEUS.$HOMESERVER_DOMAIN" "prometheus.png"
    insertEnableSvcAll sysutils "$FMLNAME_INFLUXDB" $USERTYPE_INFLUXDB "https://$SUB_INFLUXDB.$HOMESERVER_DOMAIN" "influxdb.png"
    restartAllCaddyContainers
  fi
}

function outputConfigSysUtils()
{
  cat <<EOFGF > $HOME/sysutils-compose-tmp.yml
version: '3.5'

services:
  grafana:
    image: $(getScriptImageByContainerName grafana)
    container_name: grafana
    hostname: grafana
    user: "$UID"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-sysutils-net
      - dock-proxy-net
      - dock-ext-net
    ports:
      - 127.0.0.1:6565:3000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-sysutils-grafana:/var/lib/grafana
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=$GRAFANA_ADMIN_USERNAME
      - GF_SECURITY_ADMIN_PASSWORD=$GRAFANA_ADMIN_PASSWORD
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel,grafana-simple-json-datasource

  prometheus:
    image: $(getScriptImageByContainerName prometheus)
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - int-sysutils-net
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ${HSHQ_STACKS_DIR}/sysutils/prometheus:/etc/prometheus
      - v-sysutils-prometheus:/prometheus
      
  node-exporter:
    image: $(getScriptImageByContainerName node-exporter)
    container_name: node-exporter
    hostname: node-exporter
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "0:0"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|var/lib/docker/(containers|devicemapper|volumes)/.+)(\$\$|/)'
    networks:
      - int-sysutils-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  influxdb:
    image: $(getScriptImageByContainerName influxdb)
    container_name: influxdb
    hostname: influxdb
    user: "$USERID"
    restart: unless-stopped
    command:
      - '--reporting-disabled'
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - ${HSHQ_SSL_DIR}/influxdb.crt:/certs/influxdb.crt
      - ${HSHQ_SSL_DIR}/influxdb.key:/certs/influxdb.key
      - ${HSHQ_STACKS_DIR}/sysutils/influxdb/etc:/etc/influxdb2
      - ${HSHQ_STACKS_DIR}/sysutils/influxdb/var:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=$INFLUXDB_ADMIN_USERNAME
      - DOCKER_INFLUXDB_INIT_PASSWORD=$INFLUXDB_ADMIN_PASSWORD
      - DOCKER_INFLUXDB_INIT_ORG=$INFLUXDB_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET=$INFLUXDB_HA_BUCKET
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=$INFLUXDB_TOKEN
      - INFLUXD_TLS_CERT=/certs/influxdb.crt
      - INFLUXD_TLS_KEY=/certs/influxdb.key

volumes:
  v-sysutils-grafana:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HSHQ_STACKS_DIR}/sysutils/grafana
  v-sysutils-prometheus:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HSHQ_NONBACKUP_DIR}/sysutils/prometheus

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
  int-sysutils-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFGF

  cat <<EOFGF > $HOME/sysutils-compose.yml
$STACK_VERSION_PREFIX sysutils $(getScriptStackVersion sysutils)
version: '3.5'

services:
  grafana:
    image: $(getScriptImageByContainerName grafana)
    container_name: grafana
    hostname: grafana
    user: "\${UID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-sysutils-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-sysutils-grafana:/var/lib/grafana

  prometheus:
    image: $(getScriptImageByContainerName prometheus)
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - int-sysutils-net
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/sysutils/prometheus:/etc/prometheus
      - v-sysutils-prometheus:/prometheus
      
  node-exporter:
    image: $(getScriptImageByContainerName node-exporter)
    container_name: node-exporter
    hostname: node-exporter
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    user: "0:0"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|var/lib/docker/(containers|devicemapper|volumes)/.+)(\$\$|/)'
    networks:
      - int-sysutils-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  influxdb:
    image: $(getScriptImageByContainerName influxdb)
    container_name: influxdb
    hostname: influxdb
    user: "\${UID}"
    restart: unless-stopped
    env_file: stack.env
    command:
      - '--reporting-disabled'
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/influxdb.crt:/certs/influxdb.crt
      - \${HSHQ_SSL_DIR}/influxdb.key:/certs/influxdb.key
      - \${HSHQ_STACKS_DIR}/sysutils/influxdb/etc:/etc/influxdb2
      - \${HSHQ_STACKS_DIR}/sysutils/influxdb/var:/var/lib/influxdb2

volumes:
  v-sysutils-grafana:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/sysutils/grafana
  v-sysutils-prometheus:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/sysutils/prometheus

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
  int-sysutils-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFGF

  cat <<EOFGF > $HOME/sysutils.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
INFLUXD_TLS_CERT=/certs/influxdb.crt
INFLUXD_TLS_KEY=/certs/influxdb.key
EOFGF

  cat <<EOFPM > $HSHQ_STACKS_DIR/sysutils/prometheus/prometheus.yml
global:
  scrape_interval: 15s
scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
  - job_name: docker
    static_configs:
      - targets: ["host.docker.internal:$DOCKER_METRICS_PORT"]
EOFPM

  cat <<EOFJS > $HOME/gfdashboard.json
{
	"dashboard": {
		"annotations": {
			"list": [
				{
					"builtIn": 1,
					"datasource": "-- Grafana --",
					"enable": true,
					"hide": true,
					"iconColor": "rgba(0, 211, 255, 1)",
					"name": "Annotations & Alerts",
					"target": {
						"limit": 100,
						"matchAny": false,
						"tags": [],
						"type": "dashboard"
					},
					"type": "dashboard"
				}
			]
		},
		"description": "CPU/Memory/Disk IO/Network/Temperature and other monitoring indicators.",
		"editable": true,
		"fiscalYearStartMonth": 0,
		"gnetId": 9893,
		"graphTooltip": 0,
		"id": null,
		"iteration": 1645129641574,
		"links": [],
		"liveNow": false,
		"panels": [
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"decimals": 1,
						"mappings": [
							{
								"options": {
									"match": "null",
									"result": {
										"text": "N/A"
									}
								},
								"type": "special"
							}
						],
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "green",
									"value": null
								},
								{
									"color": "red",
									"value": 80
								}
							]
						},
						"unit": "s"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 5,
					"w": 2,
					"x": 0,
					"y": 1
				},
				"hideTimeOverride": true,
				"id": 15,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"colorMode": "none",
					"graphMode": "none",
					"justifyMode": "auto",
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"textMode": "auto"
				},
				"pluginVersion": "8.3.4",
				"targets": [
					{
						"expr": "time() - node_boot_time_seconds{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": false,
						"instant": true,
						"intervalFactor": 2,
						"refId": "A",
						"step": 40
					}
				],
				"title": "Uptime",
				"type": "stat"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"mappings": [
							{
								"options": {
									"match": "null",
									"result": {
										"text": "N/A"
									}
								},
								"type": "special"
							}
						],
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "green",
									"value": null
								},
								{
									"color": "red",
									"value": 80
								}
							]
						},
						"unit": "short"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 2,
					"w": 2,
					"x": 2,
					"y": 1
				},
				"id": 14,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"colorMode": "none",
					"graphMode": "none",
					"justifyMode": "auto",
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"textMode": "auto"
				},
				"pluginVersion": "8.3.4",
				"targets": [
					{
						"expr": "count(count(node_cpu_seconds_total{instance=~\"\$node\", mode='system'}) by (cpu))",
						"format": "time_series",
						"instant": true,
						"intervalFactor": 1,
						"legendFormat": "",
						"refId": "A",
						"step": 20
					}
				],
				"title": "CPU Count",
				"type": "stat"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"decimals": 2,
						"mappings": [
							{
								"options": {
									"match": "null",
									"result": {
										"text": "N/A"
									}
								},
								"type": "special"
							}
						],
						"max": 100,
						"min": 0,
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "rgba(50, 172, 45, 0.97)",
									"value": null
								},
								{
									"color": "rgba(237, 129, 40, 0.89)",
									"value": 50
								},
								{
									"color": "rgba(245, 54, 54, 0.9)",
									"value": 80
								}
							]
						},
						"unit": "percent"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 5,
					"w": 3,
					"x": 4,
					"y": 1
				},
				"id": 167,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"showThresholdLabels": false,
					"showThresholdMarkers": true
				},
				"pluginVersion": "8.3.4",
				"targets": [
					{
						"expr": "100 - (avg(irate(node_cpu_seconds_total{instance=~\"\$node\",mode=\"idle\"}[5m])) * 100)",
						"format": "time_series",
						"hide": false,
						"interval": "",
						"intervalFactor": 1,
						"legendFormat": "",
						"refId": "A",
						"step": 20
					}
				],
				"title": "CPU Usage（5m）",
				"type": "gauge"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"decimals": 2,
						"mappings": [
							{
								"options": {
									"match": "null",
									"result": {
										"text": "N/A"
									}
								},
								"type": "special"
							}
						],
						"max": 100,
						"min": 0,
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "rgba(50, 172, 45, 0.97)",
									"value": null
								},
								{
									"color": "rgba(237, 129, 40, 0.89)",
									"value": 20
								},
								{
									"color": "rgba(245, 54, 54, 0.9)",
									"value": 50
								}
							]
						},
						"unit": "percent"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 5,
					"w": 3,
					"x": 7,
					"y": 1
				},
				"id": 20,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"showThresholdLabels": false,
					"showThresholdMarkers": true
				},
				"pluginVersion": "8.3.4",
				"targets": [
					{
						"expr": "avg(irate(node_cpu_seconds_total{instance=~\"\$node\",mode=\"iowait\"}[5m])) * 100",
						"format": "time_series",
						"hide": false,
						"interval": "",
						"intervalFactor": 1,
						"legendFormat": "",
						"refId": "A",
						"step": 20
					}
				],
				"title": "CPU IO Wait（5m）",
				"type": "gauge"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"decimals": 0,
						"mappings": [],
						"max": 100,
						"min": 0,
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "rgba(50, 172, 45, 0.97)",
									"value": null
								},
								{
									"color": "rgba(237, 129, 40, 0.89)",
									"value": 80
								},
								{
									"color": "rgba(245, 54, 54, 0.9)",
									"value": 90
								}
							]
						},
						"unit": "percent"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 5,
					"w": 3,
					"x": 10,
					"y": 1
				},
				"hideTimeOverride": false,
				"id": 172,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"showThresholdLabels": false,
					"showThresholdMarkers": true
				},
				"pluginVersion": "8.3.4",
				"targets": [
					{
						"expr": "(1 - (node_memory_MemAvailable_bytes{instance=~\"\$node\"} / (node_memory_MemTotal_bytes{instance=~\"\$node\"})))* 100",
						"format": "time_series",
						"hide": false,
						"interval": "10s",
						"intervalFactor": 1,
						"refId": "A",
						"step": 20
					}
				],
				"title": "Memory Usage",
				"type": "gauge"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"decimals": 2,
						"mappings": [],
						"min": 0,
						"max": 100000,
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "rgba(50, 172, 45, 0.97)",
									"value": null
								},
								{
									"color": "rgba(237, 129, 40, 0.89)",
									"value": 60000
								},
								{
									"color": "rgba(245, 54, 54, 0.9)",
									"value": 80000
								}
							]
						},
						"unit": "short"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 5,
					"w": 3,
					"x": 13,
					"y": 1
				},
				"hideTimeOverride": false,
				"id": 16,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"showThresholdLabels": false,
					"showThresholdMarkers": true
				},
				"pluginVersion": "8.3.4",
				"targets": [
					{
						"expr": "node_filefd_allocated{instance=~\"\$node\"}",
						"format": "time_series",
						"instant": false,
						"interval": "10s",
						"intervalFactor": 1,
						"refId": "B"
					}
				],
				"title": "Open File Descriptors",
				"type": "gauge"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"mappings": [
							{
								"options": {
									"match": "null",
									"result": {
										"text": "N/A"
									}
								},
								"type": "special"
							}
						],
						"max": 100,
						"min": 0,
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "rgba(50, 172, 45, 0.97)",
									"value": null
								},
								{
									"color": "rgba(237, 129, 40, 0.89)",
									"value": 70
								},
								{
									"color": "rgba(245, 54, 54, 0.9)",
									"value": 90
								}
							]
						},
						"unit": "percent"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 5,
					"w": 4,
					"x": 16,
					"y": 1
				},
				"id": 166,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"showThresholdLabels": false,
					"showThresholdMarkers": true
				},
				"pluginVersion": "8.3.4",
				"repeatDirection": "h",
				"targets": [
					{
						"expr": "100 - ((node_filesystem_avail_bytes{instance=~\"\$node\",mountpoint=\"/\",fstype=~\"ext4|xfs\"} * 100) / node_filesystem_size_bytes {instance=~\"\$node\",mountpoint=\"/\",fstype=~\"ext4|xfs\"})",
						"format": "time_series",
						"interval": "10s",
						"intervalFactor": 1,
						"refId": "A",
						"step": 20
					}
				],
				"title": "Root Partition Usage",
				"type": "gauge"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "Get the largest partition by the variable maxmount. ",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"mappings": [
							{
								"options": {
									"match": "null",
									"result": {
										"text": "N/A"
									}
								},
								"type": "special"
							}
						],
						"max": 100,
						"min": 0,
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "rgba(50, 172, 45, 0.97)",
									"value": null
								},
								{
									"color": "rgba(237, 129, 40, 0.89)",
									"value": 70
								},
								{
									"color": "rgba(245, 54, 54, 0.9)",
									"value": 90
								}
							]
						},
						"unit": "percent"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 5,
					"w": 4,
					"x": 20,
					"y": 1
				},
				"id": 154,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"showThresholdLabels": false,
					"showThresholdMarkers": true
				},
				"pluginVersion": "8.3.4",
				"repeatDirection": "h",
				"targets": [
					{
						"expr": "100 - ((node_filesystem_avail_bytes{instance=~\"\$node\",mountpoint=\"\$maxmount\",fstype=~\"ext4|xfs\"} * 100) / node_filesystem_size_bytes {instance=~\"\$node\",mountpoint=\"\$maxmount\",fstype=~\"ext4|xfs\"})",
						"format": "time_series",
						"interval": "10s",
						"intervalFactor": 1,
						"refId": "A",
						"step": 20
					}
				],
				"title": "Maximum Partition (\$maxmount) Usage",
				"type": "gauge"
			},
			{
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "",
				"fieldConfig": {
					"defaults": {
						"color": {
							"mode": "thresholds"
						},
						"mappings": [
							{
								"options": {
									"match": "null",
									"result": {
										"text": "N/A"
									}
								},
								"type": "special"
							}
						],
						"thresholds": {
							"mode": "absolute",
							"steps": [
								{
									"color": "green",
									"value": null
								},
								{
									"color": "red",
									"value": 80
								}
							]
						},
						"unit": "bytes"
					},
					"overrides": []
				},
				"gridPos": {
					"h": 3,
					"w": 2,
					"x": 2,
					"y": 3
				},
				"id": 75,
				"links": [],
				"maxDataPoints": 100,
				"options": {
					"colorMode": "none",
					"graphMode": "none",
					"justifyMode": "auto",
					"orientation": "horizontal",
					"reduceOptions": {
						"calcs": [
							"lastNotNull"
						],
						"fields": "",
						"values": false
					},
					"textMode": "auto"
				},
				"pluginVersion": "8.3.4",
				"targets": [
					{
						"expr": "node_memory_MemTotal_bytes{instance=~\"\$node\"}",
						"format": "time_series",
						"instant": true,
						"intervalFactor": 1,
						"legendFormat": "{{instance}}",
						"refId": "A",
						"step": 20
					}
				],
				"title": "Total RAM",
				"type": "stat"
			},
			{
				"aliasColors": {
					"1 minute": "#BF1B00",
					"15 minutes": "#6ED0E0",
					"5 minutes": "#CCA300"
				},
				"bars": false,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"editable": true,
				"error": false,
				"fill": 1,
				"fillGradient": 0,
				"grid": {},
				"gridPos": {
					"h": 6,
					"w": 11,
					"x": 0,
					"y": 6
				},
				"height": "300",
				"hiddenSeries": false,
				"id": 13,
				"legend": {
					"alignAsTable": true,
					"avg": true,
					"current": true,
					"max": true,
					"min": false,
					"rightSide": true,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": true,
				"linewidth": 2,
				"links": [],
				"maxPerRow": 6,
				"nullPointMode": "null as zero",
				"options": {
					"alertThreshold": true
				},
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "node_load1{instance=~\"\$node\"}",
						"format": "time_series",
						"instant": false,
						"interval": "10s",
						"intervalFactor": 2,
						"legendFormat": "1m",
						"metric": "",
						"refId": "A",
						"step": 20,
						"target": ""
					},
					{
						"expr": "node_load5{instance=~\"\$node\"}",
						"format": "time_series",
						"instant": false,
						"interval": "10s",
						"intervalFactor": 2,
						"legendFormat": "5m",
						"refId": "B",
						"step": 20
					},
					{
						"expr": "node_load15{instance=~\"\$node\"}",
						"format": "time_series",
						"instant": false,
						"interval": "10s",
						"intervalFactor": 2,
						"legendFormat": "15m",
						"refId": "C",
						"step": 20
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "Average System Load",
				"tooltip": {
					"msResolution": false,
					"shared": true,
					"sort": 0,
					"value_type": "cumulative"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "short",
						"logBase": 1,
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": true
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {
					"/": "#eab839",
					"/boot": "#bf1b00",
					"/data": "#1f78c1"
				},
				"breakPoint": "100%",
				"combine": {
					"label": "Others",
					"threshold": ""
				},
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"decimals": 1,
				"fontSize": "50%",
				"format": "bytes",
				"gridPos": {
					"h": 6,
					"w": 5,
					"x": 11,
					"y": 6
				},
				"hideTimeOverride": false,
				"id": 171,
				"legend": {
					"header": "",
					"percentage": false,
					"percentageDecimals": 0,
					"show": true,
					"sideWidth": 142,
					"values": true
				},
				"legendType": "Right side",
				"links": [],
				"maxDataPoints": 3,
				"nullPointMode": "connected",
				"pieType": "pie",
				"strokeWidth": "2",
				"targets": [
					{
						"expr": "node_filesystem_size_bytes {instance=~\"\$node\",fstype=~\"ext4|xfs\"}",
						"format": "time_series",
						"instant": true,
						"interval": "10s",
						"intervalFactor": 1,
						"legendFormat": "{{mountpoint}}",
						"refId": "A"
					}
				],
				"title": "Total Disk Space",
				"type": "grafana-piechart-panel",
				"valueName": "current"
			},
			{
				"columns": [],
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"fontSize": "120%",
				"gridPos": {
					"h": 6,
					"w": 8,
					"x": 16,
					"y": 6
				},
				"id": 164,
				"links": [],
				"scroll": true,
				"showHeader": true,
				"sort": {
					"col": 11,
					"desc": true
				},
				"styles": [
					{
						"alias": "Time",
						"align": "auto",
						"dateFormat": "YYYY-MM-DD HH:mm:ss",
						"pattern": "Time",
						"type": "hidden"
					},
					{
						"alias": "Partition",
						"align": "auto",
						"colors": [
							"rgba(50, 172, 45, 0.97)",
							"rgba(237, 129, 40, 0.89)",
							"rgba(245, 54, 54, 0.9)"
						],
						"dateFormat": "YYYY-MM-DD HH:mm:ss",
						"decimals": 2,
						"mappingType": 1,
						"pattern": "mountpoint",
						"thresholds": [
							""
						],
						"type": "string",
						"unit": "bytes"
					},
					{
						"alias": "Available space",
						"align": "auto",
						"colorMode": "value",
						"colors": [
							"rgba(245, 54, 54, 0.9)",
							"rgba(237, 129, 40, 0.89)",
							"rgba(50, 172, 45, 0.97)"
						],
						"dateFormat": "YYYY-MM-DD HH:mm:ss",
						"decimals": 2,
						"mappingType": 1,
						"pattern": "Value #A",
						"thresholds": [
							"10000000000",
							"20000000000"
						],
						"type": "number",
						"unit": "bytes"
					},
					{
						"alias": "Usage rate",
						"align": "auto",
						"colorMode": "cell",
						"colors": [
							"rgba(50, 172, 45, 0.97)",
							"rgba(237, 129, 40, 0.89)",
							"rgba(245, 54, 54, 0.9)"
						],
						"dateFormat": "YYYY-MM-DD HH:mm:ss",
						"decimals": 2,
						"mappingType": 1,
						"pattern": "Value #B",
						"thresholds": [
							"70",
							"90"
						],
						"type": "number",
						"unit": "percentunit"
					},
					{
						"alias": "Total space",
						"align": "auto",
						"colors": [
							"rgba(245, 54, 54, 0.9)",
							"rgba(237, 129, 40, 0.89)",
							"rgba(50, 172, 45, 0.97)"
						],
						"dateFormat": "YYYY-MM-DD HH:mm:ss",
						"decimals": 1,
						"link": false,
						"mappingType": 1,
						"pattern": "Value #C",
						"thresholds": [],
						"type": "number",
						"unit": "bytes"
					},
					{
						"alias": "File system",
						"align": "auto",
						"colors": [
							"rgba(245, 54, 54, 0.9)",
							"rgba(237, 129, 40, 0.89)",
							"rgba(50, 172, 45, 0.97)"
						],
						"dateFormat": "YYYY-MM-DD HH:mm:ss",
						"decimals": 2,
						"link": false,
						"mappingType": 1,
						"pattern": "fstype",
						"thresholds": [],
						"type": "number",
						"unit": "short"
					},
					{
						"alias": "",
						"align": "auto",
						"colors": [
							"rgba(245, 54, 54, 0.9)",
							"rgba(237, 129, 40, 0.89)",
							"rgba(50, 172, 45, 0.97)"
						],
						"decimals": 2,
						"pattern": "/.*/",
						"preserveFormat": true,
						"sanitize": false,
						"thresholds": [],
						"type": "hidden",
						"unit": "short"
					}
				],
				"targets": [
					{
						"expr": "node_filesystem_size_bytes{instance=~'\$node',fstype=~\"ext4|xfs\"}",
						"format": "table",
						"hide": true,
						"instant": true,
						"intervalFactor": 1,
						"legendFormat": "",
						"refId": "C"
					},
					{
						"expr": "node_filesystem_avail_bytes {instance=~'\$node',fstype=~\"ext4|xfs\"}",
						"format": "table",
						"hide": false,
						"instant": true,
						"interval": "10s",
						"intervalFactor": 1,
						"legendFormat": "",
						"refId": "A"
					},
					{
						"expr": "1-(node_filesystem_free_bytes{instance=~'\$node',fstype=~\"ext4|xfs\"} / node_filesystem_size_bytes{instance=~'\$node',fstype=~\"ext4|xfs\"})",
						"format": "table",
						"hide": false,
						"instant": true,
						"intervalFactor": 1,
						"legendFormat": "",
						"refId": "B"
					},
					{
						"expr": "",
						"format": "table",
						"interval": "10s",
						"intervalFactor": 1,
						"legendFormat": "",
						"refId": "D"
					}
				],
				"title": "Free Space by Partition",
				"transform": "table",
				"type": "table-old"
			},
			{
				"aliasColors": {
					"Disk consumption in I/O operations": "#ba43a9",
					"Idle - Waiting for something to happen": "#052B51",
					"guest": "#9AC48A",
					"idle": "#052B51",
					"iowait": "#EAB839",
					"irq": "#BF1B00",
					"nice": "#C15C17",
					"sdb_% I/O operations per second": "#d683ce",
					"softirq": "#E24D42",
					"steal": "#FCE2DE",
					"system": "#508642",
					"user": "#5195CE"
				},
				"bars": false,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"decimals": 2,
				"description": "node_disk_io_time_seconds_total：\nThe number of milliseconds the disk spends on input/output operations. This value is the accumulated value.（Milliseconds Spent Doing I/Os）\n\nirate(node_disk_io_time_seconds_total[1m])：\nCalculate the rate per second: (last value - last previous value) / timestamp difference, that is, the percentage of time that the disk spends on I/O operations in 1 second.",
				"fill": 1,
				"fillGradient": 0,
				"gridPos": {
					"h": 7,
					"w": 16,
					"x": 0,
					"y": 12
				},
				"hiddenSeries": false,
				"id": 7,
				"legend": {
					"alignAsTable": true,
					"avg": true,
					"current": true,
					"hideEmpty": true,
					"hideZero": true,
					"max": true,
					"min": false,
					"rightSide": true,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": true,
				"linewidth": 1,
				"links": [],
				"maxPerRow": 6,
				"nullPointMode": "null",
				"options": {
					"alertThreshold": true
				},
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "avg(irate(node_cpu_seconds_total{instance=~\"\$node\",mode=\"system\"}[1m]))",
						"format": "time_series",
						"interval": "",
						"intervalFactor": 2,
						"legendFormat": "System",
						"refId": "A",
						"step": 20
					},
					{
						"expr": "avg(irate(node_cpu_seconds_total{instance=~\"\$node\",mode=\"user\"}[1m]))",
						"format": "time_series",
						"intervalFactor": 2,
						"legendFormat": "User",
						"refId": "B",
						"step": 240
					},
					{
						"expr": "avg(irate(node_cpu_seconds_total{instance=~\"\$node\",mode=\"idle\"}[1m]))",
						"format": "time_series",
						"hide": true,
						"intervalFactor": 2,
						"legendFormat": "Idle",
						"refId": "F",
						"step": 240
					},
					{
						"expr": "avg(irate(node_cpu_seconds_total{instance=~\"\$node\",mode=\"iowait\"}[1m]))",
						"format": "time_series",
						"intervalFactor": 2,
						"legendFormat": "Iowait",
						"refId": "D",
						"step": 240
					},
					{
						"expr": "irate(node_disk_io_time_seconds_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"intervalFactor": 1,
						"legendFormat": "{{device}}_% of I/O operations per second",
						"refId": "C"
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "CPU Usage, Disk I/O Operations Per Second （%）",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "percentunit",
						"label": "",
						"logBase": 1,
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": false
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {
					"Available": "#9ac48a",
					"Memory_Avaliable": "#6ED0E0",
					"Memory_Cached": "#EF843C",
					"Memory_Free": "#629E51",
					"Memory_Total": "#6d1f62",
					"Memory_Used": "#eab839",
					"Total memory": "#bf1b00"
				},
				"bars": false,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"decimals": 2,
				"fill": 6,
				"fillGradient": 0,
				"gridPos": {
					"h": 7,
					"w": 8,
					"x": 16,
					"y": 12
				},
				"height": "300",
				"hiddenSeries": false,
				"id": 156,
				"legend": {
					"alignAsTable": false,
					"avg": false,
					"current": true,
					"max": false,
					"min": false,
					"rightSide": false,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": true,
				"linewidth": 3,
				"links": [],
				"nullPointMode": "null",
				"options": {
					"alertThreshold": true
				},
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "node_memory_MemTotal_bytes{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": false,
						"instant": false,
						"intervalFactor": 2,
						"legendFormat": "Total memory",
						"refId": "A",
						"step": 4
					},
					{
						"expr": "node_memory_MemTotal_bytes{instance=~\"\$node\"} - node_memory_MemAvailable_bytes{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": false,
						"intervalFactor": 2,
						"legendFormat": "used",
						"refId": "B",
						"step": 4
					},
					{
						"expr": "node_memory_MemFree_bytes{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": true,
						"intervalFactor": 2,
						"legendFormat": "Memory_Free",
						"refId": "C",
						"step": 4
					},
					{
						"expr": "node_memory_Buffers_bytes{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": true,
						"intervalFactor": 2,
						"legendFormat": "Memory_Buffers",
						"refId": "D",
						"step": 4
					},
					{
						"expr": "node_memory_Cached_bytes{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": true,
						"intervalFactor": 2,
						"legendFormat": "Memory_Cached",
						"refId": "E",
						"step": 4
					},
					{
						"expr": "node_memory_MemAvailable_bytes{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": false,
						"interval": "",
						"intervalFactor": 2,
						"legendFormat": "Available",
						"refId": "F",
						"step": 4
					},
					{
						"expr": "node_memory_MemTotal_bytes{instance=~\"\$node\"} - (node_memory_Cached_bytes{instance=~\"\$node\"} + node_memory_Buffers_bytes{instance=~\"\$node\"} + node_memory_MemFree_bytes{instance=~\"\$node\"})",
						"format": "time_series",
						"hide": true,
						"intervalFactor": 1,
						"refId": "G"
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "Memory information",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "bytes",
						"logBase": 1,
						"min": "0",
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": true
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {
					"vda_write": "#6ED0E0"
				},
				"bars": true,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "Reads completed: Reads per second per disk partition\n\nWrites completed: Number of writes per second per disk partition\n\nIO now Number of input/output requests being processed per disk partition per second",
				"fill": 2,
				"fillGradient": 0,
				"gridPos": {
					"h": 8,
					"w": 8,
					"x": 0,
					"y": 19
				},
				"height": "300",
				"hiddenSeries": false,
				"id": 161,
				"legend": {
					"alignAsTable": false,
					"avg": false,
					"current": true,
					"hideEmpty": true,
					"hideZero": true,
					"max": true,
					"min": false,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": false,
				"linewidth": 1,
				"links": [],
				"nullPointMode": "null",
				"options": {
					"alertThreshold": true
				},
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [
					{
						"alias": "/.*_read \$/",
						"transform": "negative-Y"
					}
				],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "irate(node_disk_reads_completed_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"hide": false,
						"interval": "",
						"intervalFactor": 2,
						"legendFormat": "{{device}}_read",
						"refId": "A",
						"step": 10
					},
					{
						"expr": "irate(node_disk_writes_completed_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"hide": false,
						"intervalFactor": 2,
						"legendFormat": "{{device}}_write",
						"refId": "B",
						"step": 10
					},
					{
						"expr": "node_disk_io_now{instance=~\"\$node\"}",
						"format": "time_series",
						"hide": true,
						"interval": "",
						"intervalFactor": 1,
						"legendFormat": "{{device}}",
						"refId": "C"
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "Disk Read and Write Rate （IOPS）",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "iops",
						"label": "Read (-) / write（+）I/O ops/sec",
						"logBase": 1,
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": true
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {
					"vda_write": "#6ED0E0"
				},
				"bars": true,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "Read bytes The number of bits read per second per disk partition\nWritten bytes The number of bits written per second per disk partition",
				"fill": 2,
				"fillGradient": 0,
				"gridPos": {
					"h": 8,
					"w": 8,
					"x": 8,
					"y": 19
				},
				"height": "300",
				"hiddenSeries": false,
				"id": 168,
				"legend": {
					"alignAsTable": false,
					"avg": false,
					"current": true,
					"hideEmpty": true,
					"hideZero": true,
					"max": true,
					"min": false,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": false,
				"linewidth": 1,
				"links": [],
				"nullPointMode": "null",
				"options": {
					"alertThreshold": true
				},
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [
					{
						"alias": "/.*_read \$/",
						"transform": "negative-Y"
					}
				],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "irate(node_disk_read_bytes_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"interval": "",
						"intervalFactor": 2,
						"legendFormat": "{{device}}_read",
						"refId": "A",
						"step": 10
					},
					{
						"expr": "irate(node_disk_written_bytes_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"hide": false,
						"intervalFactor": 2,
						"legendFormat": "{{device}}_write",
						"refId": "B",
						"step": 10
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "Disk Read and Write Capacity",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "Bps",
						"label": "Read (-) / write (+)",
						"logBase": 1,
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": false
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {
					"vda": "#6ED0E0"
				},
				"bars": false,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "Read time ms Number of seconds per disk partition read operation\n\nWrite time ms Number of seconds spent per disk partition write operation\n\nIO time ms Number of seconds spent per disk partition input/output operation\n\n IO time weighted Weighted seconds spent per disk partition input/output operation",
				"fill": 3,
				"fillGradient": 0,
				"gridPos": {
					"h": 8,
					"w": 8,
					"x": 16,
					"y": 19
				},
				"height": "300",
				"hiddenSeries": false,
				"id": 160,
				"legend": {
					"alignAsTable": false,
					"avg": false,
					"current": true,
					"hideEmpty": true,
					"hideZero": true,
					"max": true,
					"min": false,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": true,
				"linewidth": 1,
				"links": [],
				"nullPointMode": "null",
				"options": {
					"alertThreshold": true
				},
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [
					{
						"alias": "/,*_read \$/",
						"transform": "negative-Y"
					}
				],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "irate(node_disk_io_time_seconds_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"hide": true,
						"interval": "",
						"intervalFactor": 2,
						"legendFormat": "{{device}}",
						"refId": "A",
						"step": 10
					},
					{
						"expr": "irate(node_disk_io_time_weighted_seconds_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"hide": true,
						"intervalFactor": 1,
						"legendFormat": "{{device}}_weighted",
						"refId": "D"
					},
					{
						"expr": "irate(node_disk_read_time_seconds_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"hide": false,
						"interval": "",
						"intervalFactor": 1,
						"legendFormat": "{{device}}_read",
						"refId": "B"
					},
					{
						"expr": "irate(node_disk_write_time_seconds_total{instance=~\"\$node\"}[1m])",
						"format": "time_series",
						"hide": false,
						"intervalFactor": 1,
						"legendFormat": "{{device}}_write",
						"refId": "C"
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "Disk IO Read and Write Time",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "s",
						"label": "Read (-) / write (+) ",
						"logBase": 1,
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": false
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {},
				"bars": false,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"fill": 1,
				"gridPos": {
					"h": 8,
					"w": 12,
					"x": 0,
					"y": 27
				},
				"height": "300",
				"id": 157,
				"legend": {
					"alignAsTable": false,
					"avg": false,
					"current": true,
					"hideEmpty": true,
					"hideZero": true,
					"max": false,
					"min": false,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": true,
				"linewidth": 2,
				"links": [],
				"nullPointMode": "null",
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [
					{
						"alias": "/.*_out upload \$/",
						"transform": "negative-Y"
					}
				],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "irate(node_network_receive_bytes_total{instance=~'\$node',device!~'tap.*'}[5m])*8",
						"format": "time_series",
						"intervalFactor": 2,
						"legendFormat": "{{device}}_in download",
						"refId": "A",
						"step": 4
					},
					{
						"expr": "irate(node_network_transmit_bytes_total{instance=~'\$node',device!~'tap.*'}[5m])*8",
						"format": "time_series",
						"intervalFactor": 2,
						"legendFormat": "{{device}}_out upload",
						"refId": "B",
						"step": 4
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "Network Traffic",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "bps",
						"label": "Upload (-) / Download（+）",
						"logBase": 1,
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": false
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {
					"TCP": "#6ED0E0"
				},
				"bars": false,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"description": "CurrEstab - TCP connections with current state ESTABLISHED or CLOSE-WAIT\n\nActiveOpens - TCP average connections that have been converted from CLOSED state to SYN-SENT state (within 1 minute)\n\nPassiveOpens - Directly from LISTEN state The average number of TCP connections to SYN-RCVD state (within 1 minute)\n\nTCP_all oc - the number of TCP sockets allocated (established, applied to sk_buff)\n\nTCP_inuse - in use (listening The number of TCP sockets \n\nTCP_tw - the number of TCP connections waiting to be closed",
				"fill": 0,
				"gridPos": {
					"h": 8,
					"w": 12,
					"x": 12,
					"y": 27
				},
				"height": "300",
				"id": 158,
				"legend": {
					"alignAsTable": true,
					"avg": false,
					"current": true,
					"max": true,
					"min": false,
					"rightSide": true,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": true,
				"linewidth": 1,
				"links": [],
				"nullPointMode": "null",
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "node_netstat_Tcp_CurrEstab{instance=~'\$node'}",
						"format": "time_series",
						"hide": false,
						"interval": "10s",
						"intervalFactor": 1,
						"legendFormat": "ESTABLISHED",
						"refId": "A",
						"step": 20
					},
					{
						"expr": "node_sockstat_TCP_tw{instance=~'\$node'}",
						"format": "time_series",
						"intervalFactor": 1,
						"legendFormat": "TCP_tw",
						"refId": "D"
					},
					{
						"expr": "irate(node_netstat_Tcp_ActiveOpens{instance=~'\$node'}[1m])",
						"format": "time_series",
						"hide": false,
						"intervalFactor": 1,
						"legendFormat": "ActiveOpens",
						"refId": "B"
					},
					{
						"expr": "irate(node_netstat_Tcp_PassiveOpens{instance=~'\$node'}[1m])",
						"format": "time_series",
						"intervalFactor": 1,
						"legendFormat": "PassiveOpens",
						"refId": "C"
					},
					{
						"expr": "node_sockstat_TCP_alloc{instance=~'\$node'}",
						"format": "time_series",
						"intervalFactor": 1,
						"legendFormat": "TCP_alloc",
						"refId": "E"
					},
					{
						"expr": "node_sockstat_TCP_inuse{instance=~'\$node'}",
						"format": "time_series",
						"intervalFactor": 1,
						"legendFormat": "TCP_inuse",
						"refId": "F"
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "TCP Connections",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "short",
						"logBase": 1,
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"show": true
					}
				],
				"yaxis": {
					"align": false
				}
			},
			{
				"aliasColors": {},
				"bars": false,
				"dashLength": 10,
				"dashes": false,
				"datasource": {
					"type": "prometheus",
					"uid": "$gf_dataset_uid"
				},
				"fill": 0,
				"gridPos": {
					"h": 10,
					"w": 24,
					"x": 0,
					"y": 35
				},
				"id": 169,
				"legend": {
					"alignAsTable": true,
					"avg": true,
					"current": true,
					"hideEmpty": true,
					"hideZero": true,
					"max": true,
					"min": false,
					"rightSide": true,
					"show": true,
					"total": false,
					"values": true
				},
				"lines": true,
				"linewidth": 1,
				"links": [],
				"nullPointMode": "null as zero",
				"percentage": false,
				"pluginVersion": "8.3.4",
				"pointradius": 0.5,
				"points": false,
				"renderer": "flot",
				"seriesOverrides": [],
				"spaceLength": 10,
				"stack": false,
				"steppedLine": false,
				"targets": [
					{
						"expr": "node_hwmon_temp_celsius{instance=\"\$node\"}",
						"format": "time_series",
						"intervalFactor": 1,
						"legendFormat": "{{chip}} {{sensor}}",
						"refId": "A"
					}
				],
				"thresholds": [],
				"timeRegions": [],
				"title": "Hardware Temperature",
				"tooltip": {
					"shared": true,
					"sort": 0,
					"value_type": "individual"
				},
				"type": "graph",
				"xaxis": {
					"mode": "time",
					"show": true,
					"values": []
				},
				"yaxes": [
					{
						"format": "celsius",
						"logBase": 1,
						"min": "0",
						"show": true
					},
					{
						"format": "short",
						"logBase": 1,
						"min": "0",
						"show": true
					}
				],
				"yaxis": {
					"align": false
				}
			}
		],
		"refresh": "5s",
		"schemaVersion": 34,
		"style": "dark",
		"tags": [
			"StarsL",
			"Prometheus"
		],
		"templating": {
			"list": [
				{
					"auto": true,
					"auto_count": 30,
					"auto_min": "10s",
					"current": {
						"selected": false,
						"text": "auto",
						"value": "\$__auto_interval_interval"
					},
					"hide": 0,
					"label": "interval",
					"name": "interval",
					"options": [
						{
							"selected": true,
							"text": "auto",
							"value": "\$__auto_interval_interval"
						},
						{
							"selected": false,
							"text": "1m",
							"value": "1m"
						},
						{
							"selected": false,
							"text": "10m",
							"value": "10m"
						},
						{
							"selected": false,
							"text": "30m",
							"value": "30m"
						},
						{
							"selected": false,
							"text": "1h",
							"value": "1h"
						},
						{
							"selected": false,
							"text": "6h",
							"value": "6h"
						},
						{
							"selected": false,
							"text": "12h",
							"value": "12h"
						},
						{
							"selected": false,
							"text": "1d",
							"value": "1d"
						},
						{
							"selected": false,
							"text": "7d",
							"value": "7d"
						},
						{
							"selected": false,
							"text": "14d",
							"value": "14d"
						},
						{
							"selected": false,
							"text": "30d",
							"value": "30d"
						}
					],
					"query": "1m,10m,30m,1h,6h,12h,1d,7d,14d,30d",
					"refresh": 2,
					"skipUrlSync": false,
					"type": "interval"
				},
				{
					"allFormat": "glob",
					"current": {},
					"datasource": {
						"type": "prometheus",
						"uid": "$gf_dataset_uid"
					},
					"definition": "",
					"hide": 0,
					"includeAll": false,
					"label": "surroundings",
					"multi": false,
					"multiFormat": "regex values",
					"name": "env",
					"options": [],
					"query": {
						"query": "label_values(node_exporter_build_info,env)",
						"refId": "Prometheus-env-Variable-Query"
					},
					"refresh": 1,
					"regex": "",
					"skipUrlSync": false,
					"sort": 1,
					"tagValuesQuery": "",
					"tagsQuery": "",
					"type": "query",
					"useTags": false
				},
				{
					"allFormat": "glob",
					"current": {},
					"datasource": {
						"type": "prometheus",
						"uid": "$gf_dataset_uid"
					},
					"definition": "",
					"hide": 0,
					"includeAll": false,
					"label": "CPU name",
					"multi": false,
					"multiFormat": "regex values",
					"name": "name",
					"options": [],
					"query": {
						"query": "label_values(node_exporter_build_info{env='\$env'},name)",
						"refId": "Prometheus-name-Variable-Query"
					},
					"refresh": 1,
					"regex": "",
					"skipUrlSync": false,
					"sort": 1,
					"tagValuesQuery": "",
					"tagsQuery": "",
					"type": "query",
					"useTags": false
				},
				{
					"allFormat": "glob",
					"current": {},
					"datasource": {
						"type": "prometheus",
						"uid": "$gf_dataset_uid"
					},
					"definition": "",
					"hide": 0,
					"includeAll": false,
					"label": "node",
					"multi": false,
					"multiFormat": "regex values",
					"name": "node",
					"options": [],
					"query": {
						"query": "label_values(node_exporter_build_info{name='\$name'},instance)",
						"refId": "Prometheus-node-Variable-Query"
					},
					"refresh": 1,
					"regex": "",
					"skipUrlSync": false,
					"sort": 1,
					"tagValuesQuery": "",
					"tagsQuery": "",
					"type": "query",
					"useTags": false
				},
				{
					"current": {},
					"datasource": {
						"type": "prometheus",
						"uid": "$gf_dataset_uid"
					},
					"definition": "",
					"hide": 2,
					"includeAll": false,
					"label": "",
					"multi": false,
					"name": "maxmount",
					"options": [],
					"query": {
						"query": "query_result(topk(1,sort_desc (max(node_filesystem_size_bytes{instance=~'\$node',fstype=~\"ext4|xfs\"}) by (mountpoint))))",
						"refId": "Prometheus-maxmount-Variable-Query"
					},
					"refresh": 1,
					"regex": "/.*\\\\\\"(.*)\\\\\\".*/",
					"skipUrlSync": false,
					"sort": 0,
					"tagValuesQuery": "",
					"tagsQuery": "",
					"type": "query",
					"useTags": false
				}
			]
		},
		"time": {
			"from": "now-1h",
			"to": "now"
		},
		"timepicker": {
			"now": true,
			"refresh_intervals": [
				"5s",
				"10s",
				"30s",
				"1m",
				"5m",
				"15m",
				"30m",
				"1h",
				"2h",
				"1d"
			],
			"time_options": [
				"5m",
				"15m",
				"1h",
				"6h",
				"12h",
				"24h",
				"2d",
				"7d",
				"30d"
			]
		},
		"timezone": "browser",
		"title": "System Metrics",
		"uid": "$gf_dashboard_uid",
		"version": 1,
		"weekStart": ""
	}
}
EOFJS

}

function performUpdateSysUtils()
{
  perform_stack_name=sysutils
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=grafana/grafana-oss:9.5.8,prom/prometheus:v2.46.0,prom/node-exporter:v1.6.1,influxdb:2.7.1-alpine
      image_update_map[0]="grafana/grafana-oss:9.5.8,grafana/grafana-oss:10.3.4"
      image_update_map[1]="prom/prometheus:v2.46.0,prom/prometheus:v2.50.1"
      image_update_map[2]="prom/node-exporter:v1.6.1,prom/node-exporter:v1.7.0"
      image_update_map[3]="influxdb:2.7.1-alpine,influxdb:2.7.5-alpine"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfAddPrometheusWeb false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    2)
      newVer=v4
      curImageList=grafana/grafana-oss:9.5.15,prom/prometheus:v2.48.1,prom/node-exporter:v1.7.0,influxdb:2.7.4-alpine
      image_update_map[0]="grafana/grafana-oss:9.5.15,grafana/grafana-oss:10.3.4"
      image_update_map[1]="prom/prometheus:v2.48.1,prom/prometheus:v2.50.1"
      image_update_map[2]="prom/node-exporter:v1.7.0,prom/node-exporter:v1.7.0"
      image_update_map[3]="influxdb:2.7.4-alpine,influxdb:2.7.5-alpine"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfAddPrometheusWeb false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    3)
      newVer=v4
      curImageList=grafana/grafana-oss:10.3.1,prom/prometheus:v2.49.1,prom/node-exporter:v1.7.0,influxdb:2.7.5-alpine
      image_update_map[0]="grafana/grafana-oss:10.3.1,grafana/grafana-oss:10.3.4"
      image_update_map[1]="prom/prometheus:v2.49.1,prom/prometheus:v2.50.1"
      image_update_map[2]="prom/node-exporter:v1.7.0,prom/node-exporter:v1.7.0"
      image_update_map[3]="influxdb:2.7.5-alpine,influxdb:2.7.5-alpine"
    ;;
    4)
      newVer=v4
      curImageList=grafana/grafana-oss:10.3.4,prom/prometheus:v2.50.1,prom/node-exporter:v1.7.0,influxdb:2.7.5-alpine
      image_update_map[0]="grafana/grafana-oss:10.3.4,grafana/grafana-oss:10.3.4"
      image_update_map[1]="prom/prometheus:v2.50.1,prom/prometheus:v2.50.1"
      image_update_map[2]="prom/node-exporter:v1.7.0,prom/node-exporter:v1.7.0"
      image_update_map[3]="influxdb:2.7.5-alpine,influxdb:2.7.5-alpine"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function mfAddPrometheusWeb()
{
  inner_block=""
  inner_block=$inner_block">>https://$SUB_PROMETHEUS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://prometheus:9090 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PROMETHEUS $MANAGETLS_PROMETHEUS true $NETDEFAULT_PROMETHEUS "$inner_block"
  insertEnableSvcAll sysutils "$FMLNAME_PROMETHEUS" $USERTYPE_PROMETHEUS "https://$SUB_PROMETHEUS.$HOMESERVER_DOMAIN" "prometheus.png"
  restartAllCaddyContainers
  grep "job_name: docker" $HSHQ_STACKS_DIR/sysutils/prometheus/prometheus.yml > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    tee -a $HSHQ_STACKS_DIR/sysutils/prometheus/prometheus.yml >/dev/null <<EOFPR
  - job_name: docker
    static_configs:
      - targets: ["host.docker.internal:$DOCKER_METRICS_PORT"]
EOFPR
  fi

  cat <<EOFGF > $HOME/sysutils-compose.yml
$STACK_VERSION_PREFIX sysutils $(getScriptStackVersion sysutils)
version: '3.5'

services:
  grafana:
    image: $(getScriptImageByContainerName grafana)
    container_name: grafana
    hostname: grafana
    user: "\${UID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-sysutils-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-sysutils-grafana:/var/lib/grafana

  prometheus:
    image: $(getScriptImageByContainerName prometheus)
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - int-sysutils-net
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/sysutils/prometheus:/etc/prometheus
      - v-sysutils-prometheus:/prometheus
      
  node-exporter:
    image: $(getScriptImageByContainerName node-exporter)
    container_name: node-exporter
    hostname: node-exporter
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    user: "0:0"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|var/lib/docker/(containers|devicemapper|volumes)/.+)(\$\$|/)'
    networks:
      - int-sysutils-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  influxdb:
    image: $(getScriptImageByContainerName influxdb)
    container_name: influxdb
    hostname: influxdb
    user: "\${UID}"
    restart: unless-stopped
    env_file: stack.env
    command:
      - '--reporting-disabled'
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/influxdb.crt:/certs/influxdb.crt
      - \${HSHQ_SSL_DIR}/influxdb.key:/certs/influxdb.key
      - \${HSHQ_STACKS_DIR}/sysutils/influxdb/etc:/etc/influxdb2
      - \${HSHQ_STACKS_DIR}/sysutils/influxdb/var:/var/lib/influxdb2

volumes:
  v-sysutils-grafana:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/sysutils/grafana
  v-sysutils-prometheus:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/sysutils/prometheus

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
  int-sysutils-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFGF

  # Too many edits to the compose file, just replace the whole darn thing...
  chmod 600 $HOME/sysutils-compose.yml
  sudo chown root:root $HOME/sysutils-compose.yml
  sudo mv $HOME/sysutils-compose.yml $upgrade_compose_file
}

# OpenLDAP
function installOpenLDAP()
{
  set +e
  is_integrate_hshq=$1
  # Only install if directory does not exist
  checkDeleteStackAndDirectory openldap "OpenLDAP"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: OpenLDAP directory exists"
    exit 1
  fi
  pullImage $IMG_OPENLDAP_SERVER
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain OpenLDAP Server docker image"
    exit 1
  fi
  pullImage $IMG_OPENLDAP_MANAGER
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain OpenLDAP Manager docker image"
    exit 1
  fi
  pullImage $IMG_OPENLDAP_PHP
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain OpenLDAP PHP docker image"
    exit 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/openldap
  mkdir $HSHQ_STACKS_DIR/openldap/certs
  mkdir $HSHQ_STACKS_DIR/openldap/ldapserver
  mkdir $HSHQ_STACKS_DIR/openldap/ldapphp
  mkdir $HSHQ_STACKS_DIR/openldap/ldapmanager
  mkdir $HSHQ_STACKS_DIR/openldap/ldapserver/initconfig

  initServicesCredentials

  LDAP_URI="ldap://ldapserver:389"
  updateConfigVar LDAP_URI $LDAP_URI
  LDAPS_URI="ldaps://ldapserver:636"
  updateConfigVar LDAPS_URI $LDAPS_URI

  rm -f $HSHQ_SECRETS_DIR/ldap_admin_bind_dn.txt
  echo "$LDAP_ADMIN_BIND_DN" > $HSHQ_SECRETS_DIR/ldap_admin_bind_dn.txt
  chmod 0400 $HSHQ_SECRETS_DIR/ldap_admin_bind_dn.txt

  rm -f $HSHQ_SECRETS_DIR/ldap_admin_bind_password.txt
  echo "$LDAP_ADMIN_BIND_PASSWORD" > $HSHQ_SECRETS_DIR/ldap_admin_bind_password.txt
  chmod 0400 $HSHQ_SECRETS_DIR/ldap_admin_bind_password.txt

  if [ -z "$LDAP_READONLY_USER_USERNAME" ]; then
    LDAP_READONLY_USER_USERNAME=$ADMIN_USERNAME_BASE"_openldap_readonly"
    updateConfigVar LDAP_READONLY_USER_USERNAME $LDAP_READONLY_USER_USERNAME
  fi

  if [ -z "$LDAP_READONLY_USER_PASSWORD" ]; then
    LDAP_READONLY_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar LDAP_READONLY_USER_PASSWORD $LDAP_READONLY_USER_PASSWORD
  fi
  rm -f $HSHQ_SECRETS_DIR/ldap_readonly_user_password.txt
  echo "$LDAP_READONLY_USER_PASSWORD" > $HSHQ_SECRETS_DIR/ldap_readonly_user_password.txt
  chmod 0400 $HSHQ_SECRETS_DIR/ldap_readonly_user_password.txt

  if [ -z "$LDAP_CONFIG_PASSWORD" ]; then
    LDAP_CONFIG_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar LDAP_CONFIG_PASSWORD $LDAP_CONFIG_PASSWORD
  fi
  rm -f $HSHQ_SECRETS_DIR/ldap_config_password.txt
  echo "$LDAP_CONFIG_PASSWORD" > $HSHQ_SECRETS_DIR/ldap_config_password.txt
  chmod 0400 $HSHQ_SECRETS_DIR/ldap_config_password.txt

  LDAP_READONLY_USER_BIND_DN="cn=$LDAP_READONLY_USER_USERNAME,$LDAP_BASE_DN"
  updateConfigVar LDAP_READONLY_USER_BIND_DN $LDAP_READONLY_USER_BIND_DN
  ADMIN_PASSWORD_CRYPT=$(openssl passwd -6 $LDAP_ADMIN_USER_PASSWORD)

  outputConfigOpenLDAP

  generateCert ldapserver ldapserver
  generateCert ldapphp ldapphp
  generateCert ldapmanager ldapmanager

  cp $HSHQ_SSL_DIR/dhparam.pem $HSHQ_STACKS_DIR/openldap/certs/dhparam.pem
  cp $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt $HSHQ_STACKS_DIR/openldap/certs/${CERTS_ROOT_CA_NAME}.crt
  installStack openldap ldapserver "slapd starting" $HOME/openldap.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing OpenLDAP"
    exit $retval
  fi

  docker exec ldapserver chmod +x /tmp/initconfig/initdbscript.sh
  docker exec ldapserver sh /tmp/initconfig/initdbscript.sh > /dev/null 2>&1
  rm -f $HSHQ_STACKS_DIR/openldap/ldapserver/initconfig/*
  chmod 644 $HSHQ_SSL_DIR/dhparam.pem

  inner_block=""
  inner_block=$inner_block">>https://$SUB_OPENLDAP_PHP.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://ldapphp {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_OPENLDAP_PHP $MANAGETLS_OPENLDAP_PHP "$is_integrate_hshq" $NETDEFAULT_OPENLDAP_PHP "$inner_block"

  inner_block=""
  inner_block=$inner_block">>https://$SUB_OPENLDAP_MANAGER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://ldapmanager {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_OPENLDAP_MANAGER $MANAGETLS_OPENLDAP_MANAGER "$is_integrate_hshq" $NETDEFAULT_OPENLDAP_MANAGER "$inner_block"
}

function outputConfigOpenLDAP()
{
  cat <<EOFLC > $HOME/openldap-compose.yml
$STACK_VERSION_PREFIX openldap $(getScriptStackVersion openldap)
version: '3.5'

services:
  ldapserver:
    image: $(getScriptImageByContainerName ldapserver)
    container_name: ldapserver
    hostname: ldapserver
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ldap-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/ldapserver.crt:/container/service/slapd/assets/certs/ldapserver.crt
      - \${HSHQ_SSL_DIR}/ldapserver.key:/container/service/slapd/assets/certs/ldapserver.key
      - \${HSHQ_STACKS_DIR}/openldap/certs/${CERTS_ROOT_CA_NAME}.crt:/container/service/slapd/assets/certs/${CERTS_ROOT_CA_NAME}.crt
      - \${HSHQ_STACKS_DIR}/openldap/certs/dhparam.pem:/container/service/slapd/assets/certs/dhparam.pem
      - \${HSHQ_STACKS_DIR}/openldap/ldapserver/initconfig:/tmp/initconfig
      - \${HSHQ_STACKS_DIR}/openldap/ldapserver/db:/var/lib/ldap
      - \${HSHQ_STACKS_DIR}/openldap/ldapserver/slapd:/etc/ldap/slapd.d
    secrets:
      - ldap_admin_bind_password
      - ldap_config_password
      - ldap_readonly_user_password

  ldapphp:
    image: $(getScriptImageByContainerName ldapphp)
    container_name: ldapphp
    hostname: ldapphp
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ldap-net
      - dock-proxy-net
    depends_on:
      - ldapserver
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/openldap/ldapphp/www:/var/www/phpldapadmin
      - \${HSHQ_SSL_DIR}/ldapphp.crt:/container/service/phpldapadmin/assets/apache2/certs/ldapphp.crt
      - \${HSHQ_SSL_DIR}/ldapphp.key:/container/service/phpldapadmin/assets/apache2/certs/ldapphp.key
      - \${HSHQ_STACKS_DIR}/openldap/certs/${CERTS_ROOT_CA_NAME}.crt:/container/service/phpldapadmin/assets/apache2/certs/${CERTS_ROOT_CA_NAME}.crt
      - \${HSHQ_SSL_DIR}/ldapphp.crt:/container/service/ldap-client/assets/certs/ldapphp.crt
      - \${HSHQ_SSL_DIR}/ldapphp.key:/container/service/ldap-client/assets/certs/ldapphp.key
      - \${HSHQ_STACKS_DIR}/openldap/certs/${CERTS_ROOT_CA_NAME}.crt:/container/service/ldap-client/assets/certs/${CERTS_ROOT_CA_NAME}.crt
    environment:
      - "PHPLDAPADMIN_LDAP_HOSTS=#PYTHON2BASH:[{'ldapserver': [{'server': [{'tls': True}]}]}]"

  ldapmanager:
    image: $(getScriptImageByContainerName ldapmanager)
    container_name: ldapmanager
    hostname: ldapmanager
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ldap-net
      - dock-proxy-net
      - dock-internalmail-net
    depends_on:
      - ldapserver
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/ldapmanager.crt:/opt/ssl/ldapmanager.crt:ro
      - \${HSHQ_SSL_DIR}/ldapmanager.key:/opt/ssl/ldapmanager.key:ro
      - \${HSHQ_STACKS_DIR}/openldap/certs/${CERTS_ROOT_CA_NAME}.crt:/opt/ssl/${CERTS_ROOT_CA_NAME}.crt:ro
      - \${HSHQ_STACKS_DIR}/openldap/ldapmanager/ldap.conf:/etc/ldap/ldap.conf
    secrets:
      - ldap_admin_bind_dn
      - ldap_admin_bind_password
      - ldap_config_password
      - ldap_readonly_user_password

secrets:
  ldap_admin_bind_dn:
    file: \${HSHQ_SECRETS_DIR}/ldap_admin_bind_dn.txt
  ldap_admin_bind_password:
    file: \${HSHQ_SECRETS_DIR}/ldap_admin_bind_password.txt
  ldap_config_password:
    file: \${HSHQ_SECRETS_DIR}/ldap_config_password.txt
  ldap_readonly_user_password:
    file: \${HSHQ_SECRETS_DIR}/ldap_readonly_user_password.txt

networks:
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true

EOFLC

  cat <<EOFLD > $HOME/openldap.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
LDAP_OPENLDAP_UID=$USERID
LDAP_OPENLDAP_GID=$GROUPID
LDAP_ORGANISATION=$HOMESERVER_NAME
LDAP_DOMAIN=$HOMESERVER_DOMAIN
LDAP_BASE_DN=$LDAP_BASE_DN
LDAP_READONLY_USER_USERNAME=$LDAP_READONLY_USER_USERNAME
LDAP_TLS_VERIFY_CLIENT=try
LDAP_READONLY_USER=true
LDAP_RFC2307BIS_SCHEMA=true
LDAP_TLS=true
LDAP_TLS_ENFORCE=true
LDAP_TLS_CRT_FILENAME=ldapserver.crt
LDAP_TLS_KEY_FILENAME=ldapserver.key
LDAP_TLS_CA_CRT_FILENAME=${CERTS_ROOT_CA_NAME}.crt
LDAP_TLS_DH_PARAM_FILENAME=dhparam.pem
LDAP_ADMIN_PASSWORD_FILE=/run/secrets/ldap_admin_bind_password
LDAP_CONFIG_PASSWORD_FILE=/run/secrets/ldap_config_password
LDAP_READONLY_USER_PASSWORD_FILE=/run/secrets/ldap_readonly_user_password
PHPLDAPADMIN_HTTPS=true
PHPLDAPADMIN_LDAP_CLIENT_TLS=true
PHPLDAPADMIN_LDAP_CLIENT_TLS_REQCERT=demand
PHPLDAPADMIN_HTTPS_CA_CRT_FILENAME=${CERTS_ROOT_CA_NAME}.crt
PHPLDAPADMIN_HTTPS_CRT_FILENAME=ldapphp.crt
PHPLDAPADMIN_HTTPS_KEY_FILENAME=ldapphp.key
PHPLDAPADMIN_LDAP_CLIENT_TLS_CRT_FILENAME=ldapphp.crt
PHPLDAPADMIN_LDAP_CLIENT_TLS_KEY_FILENAME=ldapphp.key
PHPLDAPADMIN_LDAP_CLIENT_TLS_CA_CRT_FILENAME=${CERTS_ROOT_CA_NAME}.crt
SERVER_HOSTNAME=$SUB_OPENLDAP_MANAGER.$HOMESERVER_DOMAIN
LDAP_URI=$LDAP_URI
EMAIL_DOMAIN=$HOMESERVER_DOMAIN
SMTP_HOSTNAME=$SMTP_HOSTNAME
SMTP_HOST_PORT=$SMTP_HOSTPORT
EMAIL_FROM_ADDRESS=$EMAIL_ADMIN_EMAIL_ADDRESS
EMAIL_FROM_NAME=$LDAP_EMAIL_FROM_NAME
ACCOUNT_REQUESTS_ENABLED=$LDAP_ACCOUNT_REQUESTS_ENABLED
ACCOUNT_REQUESTS_EMAIL=$LDAP_ACCOUNT_REQUESTS_EMAIL
LDAP_ACCOUNT_ADDITIONAL_ATTRIBUTES=jpegphoto^:Photograph
ORGANISATION_NAME=$HOMESERVER_NAME
SITE_NAME=$HOMESERVER_NAME User Manager
LDAP_REQUIRE_STARTTLS=true
LDAP_ADMINS_GROUP=$LDAP_ADMIN_USER_GROUP_NAME
NO_HTTPS=false
LDAP_IGNORE_CERT_ERRORS=false
DEFAULT_USER_SHELL=/sbin/nologin
USERNAME_FORMAT={first_name}
ENFORCE_SAFE_SYSTEM_NAMES=true
SMTP_USE_TLS=true
SERVER_CERT_FILENAME=ldapmanager.crt
SERVER_KEY_FILENAME=ldapmanager.key
CA_CERT_FILENAME=${CERTS_ROOT_CA_NAME}.crt
LDAP_TLS_CACERT_FILE=/opt/ssl/${CERTS_ROOT_CA_NAME}.crt
LDAP_ADMIN_BIND_DN_FILE=/run/secrets/ldap_admin_bind_dn
LDAP_ADMIN_BIND_PWD_FILE=/run/secrets/ldap_admin_bind_password
SMTP_USERNAME_FILE=/run/secrets/smtp_username
SMTP_PASSWORD_FILE=/run/secrets/smtp_password
NEW_ACCOUNT_EMAIL_BODY=<h1>New Account Created</h1><p>You've been set up with an account for {organisation}.  Your credentials are:</p><p></p><p>Login: {login}<br>Password: {password}</p><p></p><p>You should log into <a href={change_password_url}>{change_password_url}</a> and change the password as soon as possible.</p>

EOFLD

  cat <<EOFLD > $HSHQ_STACKS_DIR/openldap/ldapmanager/ldap.conf
TLS_CERT /opt/ssl/ldapmanager.crt
TLS_KEY /opt/ssl/ldapmanager.key
TLS_CACERT /opt/ssl/${CERTS_ROOT_CA_NAME}.crt
TLS_REQCERT demand
TLS_REQSAN demand
EOFLD

  cat <<EOFLI > $HSHQ_STACKS_DIR/openldap/ldapserver/initconfig/initdbscript.sh
#!/bin/sh

ldapadd -f /tmp/initconfig/initdb.ldif -D $LDAP_ADMIN_BIND_DN -Z -w $LDAP_ADMIN_BIND_PASSWORD
EOFLI

  cat <<EOFLB > $HSHQ_STACKS_DIR/openldap/ldapserver/initconfig/initdb.ldif
# People
dn: ou=people,${LDAP_BASE_DN}
objectClass: organizationalUnit
ou: people

# Groups
dn: ou=groups,${LDAP_BASE_DN}
objectClass: organizationalUnit
ou: groups

# Admin User
dn: uid=${LDAP_ADMIN_USER_USERNAME},ou=people,${LDAP_BASE_DN}
givenName:: $(echo -n "${HOMESERVER_ABBREV^^} " | base64)
sn: Admin
uid: ${LDAP_ADMIN_USER_USERNAME}
mail: ${EMAIL_ADMIN_EMAIL_ADDRESS}
objectClass: person
objectClass: inetOrgPerson
objectClass: posixAccount
uidNumber: 2001
gidNumber: 2001
loginShell: /sbin/nologin
homeDirectory: /home/${LDAP_ADMIN_USER_USERNAME}
cn: ${HOMESERVER_ABBREV^^} Admin
userPassword: {CRYPT}${ADMIN_PASSWORD_CRYPT}

# Basic User
dn: uid=${LDAP_PRIMARY_USER_USERNAME},ou=people,${LDAP_BASE_DN}
givenName: ${LDAP_PRIMARY_USER_USERNAME^}
sn:: IA==
uid: ${LDAP_PRIMARY_USER_USERNAME}
mail: ${LDAP_PRIMARY_USER_EMAIL_ADDRESS}
objectClass: person
objectClass: inetOrgPerson
objectClass: posixAccount
uidNumber: 2002
gidNumber: 2001
loginShell: /sbin/nologin
homeDirectory: /home/${LDAP_PRIMARY_USER_USERNAME}
cn:: $(echo -n "${LDAP_PRIMARY_USER_USERNAME^} " | base64)
userPassword: {CRYPT}${LDAP_PRIMARY_USER_PASSWORD_HASH}

# Last UID
dn: cn=lastUID,${LDAP_BASE_DN}
objectClass: device
objectClass: top
description: Records the last UID used to create a Posix account. This prevents the re-use of a UID from a deleted account.
cn: lastUID
serialNumber: 2002

# Last GID
dn: cn=lastGID,${LDAP_BASE_DN}
objectClass: device
objectClass: top
description: Records the last GID used to create a Posix group. This prevents the re-use of a GID from a deleted group.
cn: lastGID
serialNumber: 2004

# Group Everybody
dn: cn=everybody,ou=groups,${LDAP_BASE_DN}
objectClass: top
objectClass: posixGroup
objectClass: groupOfUniqueNames
cn: everybody
uniqueMember: uid=${LDAP_ADMIN_USER_USERNAME},ou=people,${LDAP_BASE_DN}
uniqueMember: uid=${LDAP_PRIMARY_USER_USERNAME},ou=people,${LDAP_BASE_DN}
gidNumber: 2001

# Group Admins
dn: cn=$LDAP_ADMIN_USER_GROUP_NAME,ou=groups,${LDAP_BASE_DN}
objectClass: top
objectClass: posixGroup
objectClass: groupOfUniqueNames
cn: $LDAP_ADMIN_USER_GROUP_NAME
uniqueMember: uid=${LDAP_ADMIN_USER_USERNAME},ou=people,${LDAP_BASE_DN}
gidNumber: 2002

# Group Primary Users
dn: cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,${LDAP_BASE_DN}
objectClass: top
objectClass: posixGroup
objectClass: groupOfUniqueNames
cn: $LDAP_PRIMARY_USER_GROUP_NAME
uniqueMember: uid=${LDAP_ADMIN_USER_USERNAME},ou=people,${LDAP_BASE_DN}
uniqueMember: uid=${LDAP_PRIMARY_USER_USERNAME},ou=people,${LDAP_BASE_DN}
gidNumber: 2003

# Group Basic Users
dn: cn=$LDAP_BASIC_USER_GROUP_NAME,ou=groups,${LDAP_BASE_DN}
objectClass: top
objectClass: posixGroup
objectClass: groupOfUniqueNames
cn: $LDAP_BASIC_USER_GROUP_NAME
uniqueMember: uid=${LDAP_ADMIN_USER_USERNAME},ou=people,${LDAP_BASE_DN}
uniqueMember: uid=${LDAP_PRIMARY_USER_USERNAME},ou=people,${LDAP_BASE_DN}
gidNumber: 2004
EOFLB

}

function performUpdateOpenLDAP()
{
  perform_stack_name=openldap
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=osixia/openldap:1.5.0,osixia/phpldapadmin:stable,wheelybird/ldap-user-manager:v1.11
      image_update_map[0]="osixia/openldap:1.5.0,osixia/openldap:1.5.0"
      image_update_map[1]="osixia/phpldapadmin:stable,osixia/phpldapadmin:stable"
      image_update_map[2]="wheelybird/ldap-user-manager:v1.11,wheelybird/ldap-user-manager:v1.11"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Mailu
function installMailu()
{
  set +e
  is_integrate_hshq=$1
  # Unless directory doesn't exist, don't proceed
  checkDeleteStackAndDirectory mailu "Mailu"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: Mailu directory exists"
    exit 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/mailu
  mkdir $HSHQ_STACKS_DIR/mailu/certs
  mkdir $HSHQ_STACKS_DIR/mailu/redis

  # Generate email certificate if not joining another VPN
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
    generateCert mail "$SMTP_HOSTNAME,$SUB_POSTFIX.$HOMESERVER_DOMAIN"
  fi
  if [ -z SMTP_RELAY_HOST ] || [ -z SMTP_RELAY_USERNAME ]; then
    # Set these to something
    SMTP_RELAY_HOST="[$SUB_POSTFIX.internal.$HOMESERVER_DOMAIN]:587"
    SMTP_RELAY_USERNAME=$HOMESERVER_DOMAIN
    SMTP_RELAY_PASSWORD=$(pwgen -c -n 32 1)
  fi
  outputConfigMailu
  installStack mailu mailu-admin "Listening at: http://0.0.0.0:8080" $HOME/mailu.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing Mailu"
    exit $retval
  fi
  echo "Installed Mailu stack, sleeping 5 seconds..."
  sleep 5
  # Since the upgrade from 1.9 to 2.0, the following commands occasionally error out and halt the installation.
  # Added a short sleep and some error handling/retries to see if it fixes it.
  addUserMailu admin "$EMAIL_ADMIN_USERNAME" "$HOMESERVER_DOMAIN" "$EMAIL_ADMIN_PASSWORD"
  addUserMailu user "$EMAIL_SMTP_USERNAME" "$HOMESERVER_DOMAIN" "$EMAIL_SMTP_PASSWORD"
  addUserMailu user-import "$LDAP_PRIMARY_USER_USERNAME" "$HOMESERVER_DOMAIN" "$LDAP_PRIMARY_USER_PASSWORD_HASH"
  if ! [ -z $RELAYSERVER_WGPORTAL_ADMIN_EMAIL ]; then
    addUserMailu alias "$RELAYSERVER_WGPORTAL_ADMIN_USERNAME" "$HOMESERVER_DOMAIN" "$EMAIL_ADMIN_EMAIL_ADDRESS"
  fi
  startStopStack mailu stop
  sudo mv $HSHQ_STACKS_DIR/mailu/postfix-override.cf $HSHQ_STACKS_DIR/mailu/overrides/postfix/postfix.cf
  sudo mv $HSHQ_STACKS_DIR/mailu/dovecot-override.conf $HSHQ_STACKS_DIR/mailu/overrides/dovecot/dovecot.conf
  sudo mv $HSHQ_STACKS_DIR/mailu/custom.inc.php $HSHQ_STACKS_DIR/mailu/overrides/roundcube/custom.inc.php
  sudo mv $HSHQ_STACKS_DIR/mailu/external_relay.conf $HSHQ_STACKS_DIR/mailu/overrides/rspamd/external_relay.conf
  sudo mv $HSHQ_STACKS_DIR/mailu/ip_whitelist.map $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_whitelist.map
  sudo chown 101:101 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_whitelist.map
  sudo chmod 644 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_whitelist.map
  sudo mv $HSHQ_STACKS_DIR/mailu/ip_blacklist.map $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_blacklist.map
  sudo chown 101:101 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_blacklist.map
  sudo chmod 644 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/ip_blacklist.map
  sudo touch $HSHQ_STACKS_DIR/mailu/overrides/rspamd/domain_whitelist.map
  sudo chown 101:101 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/domain_whitelist.map
  sudo chmod 644 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/domain_whitelist.map
  sudo touch $HSHQ_STACKS_DIR/mailu/overrides/rspamd/domain_blacklist.map
  sudo chown 101:101 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/domain_blacklist.map
  sudo chmod 644 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/domain_blacklist.map
  sudo mv $HSHQ_STACKS_DIR/mailu/multimap.conf $HSHQ_STACKS_DIR/mailu/overrides/rspamd/multimap.conf
  sudo mv $HSHQ_STACKS_DIR/mailu/groups.conf $HSHQ_STACKS_DIR/mailu/overrides/rspamd/groups.conf
  sudo chmod 664 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/groups.conf
  sudo chown 101:101 $HSHQ_STACKS_DIR/mailu/overrides/rspamd/groups.conf
  sudo chown 101:101 $HSHQ_STACKS_DIR/mailu/overrides/rspamd
  sudo rm -fr $HSHQ_STACKS_DIR/mailu/filter/*
  sleep 5
  echo "Restarting mailu stack..."
  startStopStack mailu start
  inner_block=""
  inner_block=$inner_block">>https://$SUB_MAILU.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://$SMTP_HOSTNAME {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_MAILU $MANAGETLS_MAILU "$is_integrate_hshq" $NETDEFAULT_MAILU "$inner_block"
}

function outputConfigMailu()
{
  is_antivirus_commented_out=""
  is_antivirus_env="clamav"
  if [ "$(isServiceDisabled clamav)" = "true" ]; then
    is_antivirus_commented_out="#"
    is_antivirus_env="none"
  fi
  cat <<EOFMC > $HOME/mailu-compose.yml
$STACK_VERSION_PREFIX mailu $(getScriptStackVersion mailu)
version: '3.5'

services:
  front:
    image: $(getScriptImageByContainerName $SMTP_HOSTNAME)
    container_name: $SMTP_HOSTNAME
    hostname: $SMTP_HOSTNAME
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: $SMTP_HOSTNAME
    networks:
      - dock-mailu-ext-net
      - dock-internalmail-net
      - dock-proxy-net
    ports:
      - "25:25"
      - "465:465"
      - "587:587"
      - "110:110"
      - "995:995"
      - "143:143"
      - "993:993"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/mailu/certs:/certs
      - \${HSHQ_SSL_DIR}/mail.crt:/certs/mail.crt:ro
      - \${HSHQ_SSL_DIR}/mail.key:/certs/mail.key:ro
      - \${HSHQ_STACKS_DIR}/mailu/overrides/nginx:/overrides:ro

  resolver:
    image: $(getScriptImageByContainerName mailu-unbound)
    container_name: mailu-unbound
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      dock-mailu-ext-net:
        ipv4_address: \${SUBNET_PREFIX}.253
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  redis:
    image: $(getScriptImageByContainerName mailu-redis)
    container_name: mailu-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-mailu-redis:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

  admin:
    image: $(getScriptImageByContainerName mailu-admin)
    container_name: mailu-admin
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-admin
    networks:
      - dock-mailu-ext-net
    depends_on:
      - redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/data:/data
      - \${HSHQ_STACKS_DIR}/mailu/dkim:/dkim

  imap:
    image: $(getScriptImageByContainerName mailu-imap)
    container_name: mailu-imap
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-imap
    networks:
      - dock-mailu-ext-net
    depends_on:
      - front
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/mail:/mail
      - \${HSHQ_STACKS_DIR}/mailu/overrides/dovecot:/overrides:ro

  smtp:
    image: $(getScriptImageByContainerName mailu-smtp)
    container_name: mailu-smtp
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-smtp
    networks:
      - dock-mailu-ext-net
    depends_on:
      - front
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/mailqueue:/queue
      - \${HSHQ_STACKS_DIR}/mailu/certs:/certs
      - \${HSHQ_SSL_DIR}/mail.crt:/certs/mail.crt:ro
      - \${HSHQ_SSL_DIR}/mail.key:/certs/mail.key:ro
      - \${HSHQ_STACKS_DIR}/mailu/overrides/postfix:/overrides:ro

  oletools:
    image: $(getScriptImageByContainerName mailu-oletools)
    container_name: mailu-oletools
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-int-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  antispam:
    image: $(getScriptImageByContainerName mailu-antispam)
    container_name: mailu-antispam
    hostname: antispam
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: journald
      options:
        tag: mailu-antispam
    networks:
      - dock-mailu-ext-net
      - dock-mailu-int-net
      - dock-proxy-net
    dns:
      - \${SUBNET_PREFIX}.253
    depends_on:
      - front
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/filter:/var/lib/rspamd
      - \${HSHQ_STACKS_DIR}/mailu/overrides/rspamd:/etc/rspamd/override.d

$is_antivirus_commented_out  antivirus:
$is_antivirus_commented_out    image: $(getScriptImageByContainerName mailu-antivirus)
$is_antivirus_commented_out    container_name: mailu-antivirus
$is_antivirus_commented_out    restart: unless-stopped
$is_antivirus_commented_out    env_file: stack.env
$is_antivirus_commented_out    security_opt:
$is_antivirus_commented_out      - no-new-privileges:true
$is_antivirus_commented_out    networks:
$is_antivirus_commented_out      - dock-mailu-ext-net
$is_antivirus_commented_out      - dock-proxy-net
$is_antivirus_commented_out    volumes:
$is_antivirus_commented_out      - /etc/localtime:/etc/localtime:ro
$is_antivirus_commented_out      - /etc/timezone:/etc/timezone:ro
$is_antivirus_commented_out      - \${HSHQ_STACKS_DIR}/mailu/filter:/data

  webdav:
    image: $(getScriptImageByContainerName mailu-webdav)
    container_name: mailu-webdav
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/dav:/data

  fetchmail:
    image: $(getScriptImageByContainerName mailu-fetchmail)
    container_name: mailu-fetchmail
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/data/fetchmail:/data

  webmail:
    image: $(getScriptImageByContainerName mailu-webmail)
    container_name: mailu-webmail
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-mailu-ext-net
    depends_on:
      - imap
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mailu/webmail:/data
      - \${HSHQ_STACKS_DIR}/mailu/overrides/roundcube:/overrides:ro

volumes:
  v-mailu-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/mailu/redis

networks:
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-mailu-int-net:
    name: dock-mailu-int
    external: true
  dock-mailu-ext-net:
    name: dock-mailu-ext
    external: true

EOFMC

  cat <<EOFMC > $HOME/mailu.env
TZ=\${TZ}
SECRET_KEY=$(pwgen -c -n 16 1)
SUBNET=$NET_MAILU_EXT_SUBNET
SUBNET_PREFIX=$NET_MAILU_EXT_SUBNET_PREFIX
DOMAIN=$HOMESERVER_DOMAIN
HOSTNAMES=$SUB_POSTFIX.$HOMESERVER_DOMAIN
POSTMASTER=$EMAIL_ADMIN_USERNAME
TLS_FLAVOR=cert
TLS_CERT_FILENAME=mail.crt
TLS_KEYPAIR_FILENAME=mail.key
OUTBOUND_TLS_LEVEL=encrypt
INBOUND_TLS_ENFORCE=false
AUTH_RATELIMIT_IP=60/hour
AUTH_RATELIMIT_USER=100/day
DISABLE_STATISTICS=True
ADMIN=true
WEBMAIL=roundcube
WEBDAV=radicale
ANTIVIRUS=$is_antivirus_env
SCAN_MACROS=True
MESSAGE_SIZE_LIMIT=50000000
MESSAGE_RATELIMIT=200/day
RELAYHOST=$SMTP_RELAY_HOST
RELAYUSER=$SMTP_RELAY_USERNAME
RELAYPASSWORD=$SMTP_RELAY_PASSWORD
FETCHMAIL_DELAY=600
FETCHMAIL_ENABLED=true
RECIPIENT_DELIMITER=+
DMARC_RUA=$EMAIL_ADMIN_USERNAME
DMARC_RUF=$EMAIL_ADMIN_USERNAME
WELCOME=true
WELCOME_SUBJECT=Welcome to your new email account
WELCOME_BODY=Welcome to your new email account, if you can read this, then it is configured properly!
COMPRESSION=gz
COMPRESSION_LEVEL=5
WEBROOT_REDIRECT=/webmail
WEB_ADMIN=/admin
WEB_WEBMAIL=/webmail
SITENAME=Mailu
WEBSITE=https://mailu.io
COMPOSE_PROJECT_NAME=mailu
CREDENTIAL_ROUNDS=12
REJECT_UNLISTED_RECIPIENT=yes
LOG_LEVEL=WARNING
DB_FLAVOR=sqlite
EOFMC

  cat <<EOFMO > $HSHQ_STACKS_DIR/mailu/postfix-override.cf
smtp_tls_cert_file=/certs/mail.crt
smtp_tls_key_file=/certs/mail.key
mynetworks = 127.0.0.1/32 $NET_MAILU_EXT_SUBNET $NET_INTERNALMAIL_SUBNET ${HOMESERVER_HOST_IP}/32
EOFMO

  cat <<EOFMD > $HSHQ_STACKS_DIR/mailu/dovecot-override.conf
listen = *
EOFMD

  cat <<EOFSP > $HSHQ_STACKS_DIR/mailu/external_relay.conf
enabled = true;
rules {
  EXTERNAL_RELAY_AUTHENTICATED {
    strategy = "count";
    count = 3;
  }
}
EOFSP

  cat <<EOFRS > $HSHQ_STACKS_DIR/mailu/ip_whitelist.map
$NET_INTERNALMAIL_SUBNET
${HOMESERVER_HOST_IP}/32
EOFRS

  touch $HSHQ_STACKS_DIR/mailu/ip_blacklist.map

  cat <<EOFRO > $HSHQ_STACKS_DIR/mailu/custom.inc.php
<?php
\$config['show_images'] = 3;
\$config['timezone'] = '$TZ';
?>
EOFRO
  sudo chown root:root $HSHQ_STACKS_DIR/mailu/custom.inc.php

  cat <<EOFRS > $HSHQ_STACKS_DIR/mailu/multimap.conf
IP_WHITELIST {
  type = "ip";
  prefilter = true;
  map = "/\${LOCAL_CONFDIR}/override.d/ip_whitelist.map";
  action = "accept";
}

IP_BLACKLIST {
  type = "ip";
  prefilter = true;
  map = "/\${LOCAL_CONFDIR}/override.d/ip_blacklist.map";
  action = "reject";
}

DOMAIN_WHITELIST {
  regexp = true;
  type = "from";
  filter = "email:domain";
  map = "/\${LOCAL_CONFDIR}/override.d/domain_whitelist.map";
  score = -100.0;
  action = "accept";
}

DOMAIN_BLACKLIST {
  regexp = true;
  type = "from";
  filter = "email:domain";
  map = "/\${LOCAL_CONFDIR}/override.d/domain_blacklist.map";
  score = 100.0;
  action = "reject";
}

EOFRS

  cat <<EOFRS > $HSHQ_STACKS_DIR/mailu/groups.conf
group "dkim" {
  symbols = {
    "R_DKIM_ALLOW" = {
      weight = -6.0;
    }
  }
}

EOFRS

}

function performUpdateMailu()
{
  perform_stack_name=mailu
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=bitnami/redis:7.0.5,ghcr.io/mailu/admin:2.0,ghcr.io/mailu/rspamd:2.0,ghcr.io/mailu/clamav:2.0,ghcr.io/mailu/fetchmail:2.0,ghcr.io/mailu/nginx:2.0,ghcr.io/mailu/dovecot:2.0,ghcr.io/mailu/oletools:2.0,ghcr.io/mailu/postfix:2.0,ghcr.io/mailu/unbound:2.0,ghcr.io/mailu/radicale:2.0,ghcr.io/mailu/webmail:2.0
      image_update_map[0]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[1]="ghcr.io/mailu/admin:2.0,ghcr.io/mailu/admin:2.0.39"
      image_update_map[2]="ghcr.io/mailu/rspamd:2.0,ghcr.io/mailu/rspamd:2.0.39"
      image_update_map[3]="ghcr.io/mailu/clamav:2.0,ghcr.io/mailu/clamav:2.0.39"
      image_update_map[4]="ghcr.io/mailu/fetchmail:2.0,ghcr.io/mailu/fetchmail:2.0.39"
      image_update_map[5]="ghcr.io/mailu/nginx:2.0,ghcr.io/mailu/nginx:2.0.39"
      image_update_map[6]="ghcr.io/mailu/dovecot:2.0,ghcr.io/mailu/dovecot:2.0.39"
      image_update_map[7]="ghcr.io/mailu/oletools:2.0,ghcr.io/mailu/oletools:2.0.39"
      image_update_map[8]="ghcr.io/mailu/postfix:2.0,ghcr.io/mailu/postfix:2.0.39"
      image_update_map[9]="ghcr.io/mailu/unbound:2.0,ghcr.io/mailu/unbound:2.0.39"
      image_update_map[10]="ghcr.io/mailu/radicale:2.0,ghcr.io/mailu/radicale:2.0.39"
      image_update_map[11]="ghcr.io/mailu/webmail:2.0,ghcr.io/mailu/webmail:2.0.39"
    ;;
    2)
      newVer=v3
      curImageList=bitnami/redis:7.0.5,ghcr.io/mailu/admin:2.0.37,ghcr.io/mailu/rspamd:2.0.37,ghcr.io/mailu/clamav:2.0.37,ghcr.io/mailu/fetchmail:2.0.37,ghcr.io/mailu/nginx:2.0.37,ghcr.io/mailu/dovecot:2.0.37,ghcr.io/mailu/oletools:2.0.37,ghcr.io/mailu/postfix:2.0.37,ghcr.io/mailu/unbound:2.0.37,ghcr.io/mailu/radicale:2.0.37,ghcr.io/mailu/webmail:2.0.37
      image_update_map[0]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[1]="ghcr.io/mailu/admin:2.0.37,ghcr.io/mailu/admin:2.0.39"
      image_update_map[2]="ghcr.io/mailu/rspamd:2.0.37,ghcr.io/mailu/rspamd:2.0.39"
      image_update_map[3]="ghcr.io/mailu/clamav:2.0.37,ghcr.io/mailu/clamav:2.0.39"
      image_update_map[4]="ghcr.io/mailu/fetchmail:2.0.37,ghcr.io/mailu/fetchmail:2.0.39"
      image_update_map[5]="ghcr.io/mailu/nginx:2.0.37,ghcr.io/mailu/nginx:2.0.39"
      image_update_map[6]="ghcr.io/mailu/dovecot:2.0.37,ghcr.io/mailu/dovecot:2.0.39"
      image_update_map[7]="ghcr.io/mailu/oletools:2.0.37,ghcr.io/mailu/oletools:2.0.39"
      image_update_map[8]="ghcr.io/mailu/postfix:2.0.37,ghcr.io/mailu/postfix:2.0.39"
      image_update_map[9]="ghcr.io/mailu/unbound:2.0.37,ghcr.io/mailu/unbound:2.0.39"
      image_update_map[10]="ghcr.io/mailu/radicale:2.0.37,ghcr.io/mailu/radicale:2.0.39"
      image_update_map[11]="ghcr.io/mailu/webmail:2.0.37,ghcr.io/mailu/webmail:2.0.39"
    ;;
    3)
      newVer=v3
      curImageList=bitnami/redis:7.0.5,ghcr.io/mailu/admin:2.0.39,ghcr.io/mailu/rspamd:2.0.39,ghcr.io/mailu/clamav:2.0.39,ghcr.io/mailu/fetchmail:2.0.39,ghcr.io/mailu/nginx:2.0.39,ghcr.io/mailu/dovecot:2.0.39,ghcr.io/mailu/oletools:2.0.39,ghcr.io/mailu/postfix:2.0.39,ghcr.io/mailu/unbound:2.0.39,ghcr.io/mailu/radicale:2.0.39,ghcr.io/mailu/webmail:2.0.39
      image_update_map[0]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[1]="ghcr.io/mailu/admin:2.0.39,ghcr.io/mailu/admin:2.0.39"
      image_update_map[2]="ghcr.io/mailu/rspamd:2.0.39,ghcr.io/mailu/rspamd:2.0.39"
      image_update_map[3]="ghcr.io/mailu/clamav:2.0.39,ghcr.io/mailu/clamav:2.0.39"
      image_update_map[4]="ghcr.io/mailu/fetchmail:2.0.39,ghcr.io/mailu/fetchmail:2.0.39"
      image_update_map[5]="ghcr.io/mailu/nginx:2.0.39,ghcr.io/mailu/nginx:2.0.39"
      image_update_map[6]="ghcr.io/mailu/dovecot:2.0.39,ghcr.io/mailu/dovecot:2.0.39"
      image_update_map[7]="ghcr.io/mailu/oletools:2.0.39,ghcr.io/mailu/oletools:2.0.39"
      image_update_map[8]="ghcr.io/mailu/postfix:2.0.39,ghcr.io/mailu/postfix:2.0.39"
      image_update_map[9]="ghcr.io/mailu/unbound:2.0.39,ghcr.io/mailu/unbound:2.0.39"
      image_update_map[10]="ghcr.io/mailu/radicale:2.0.39,ghcr.io/mailu/radicale:2.0.39"
      image_update_map[11]="ghcr.io/mailu/webmail:2.0.39,ghcr.io/mailu/webmail:2.0.39"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function addUserMailu()
{
  set +e
  add_type=$1
  username=$2
  domain=$3
  password=$4
  total_tries=5
  num_tries=1
  is_added=false
  while [ $num_tries -le $total_tries ]
  do
    docker exec mailu-admin flask mailu $add_type $username $domain $password
    if [ $? -eq 0 ]; then
      is_added=true
      echo "[Mailu] Added $username"
      break
    fi
    sleep 1
    ((num_tries++))
    echo "[Mailu] Error Adding $username, retry $num_tries of $total_tries"
  done
  if [ "$is_added" = "false" ]; then
    echo "[Mailu] Error adding $username, exiting..."
    # Sleep here to ensure error gets logged
    sleep 3
    exit 1
  fi
  sleep 5
  set -e
}

# Wazuh
function installWazuh()
{
  set +e
  is_integrate_hshq=$1
  # Get/check contents of wazuh directory
  checkDeleteStackAndDirectory wazuh "Wazuh"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_WAZUH_DASHBOARD
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_WAZUH_INDEXER
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_WAZUH_MANAGER
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/wazuh
  mkdir $HSHQ_STACKS_DIR/wazuh/wazuh-cluster
  mkdir $HSHQ_STACKS_DIR/wazuh/wazuh-indexer
  mkdir $HSHQ_STACKS_DIR/wazuh/wazuh-dashboard
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/api-configuration
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/etc
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/var-multigroups
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/integrations
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/active-response
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/agentless
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/wodles
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/filebeat-etc
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/filebeat-var
  mkdir $HSHQ_STACKS_DIR/wazuh/volumes/indexer-data
  mkdir $HSHQ_NONBACKUP_DIR/wazuh
  mkdir $HSHQ_NONBACKUP_DIR/wazuh/volumes
  mkdir $HSHQ_NONBACKUP_DIR/wazuh/volumes/queue
  mkdir $HSHQ_NONBACKUP_DIR/wazuh/volumes/logs
  mkdir $HSHQ_NONBACKUP_DIR/wazuh/volumes/indexer-data

  initServicesCredentials
  if [ -z "$WAZUH_API_USERNAME" ]; then
    WAZUH_API_USERNAME=$ADMIN_USERNAME_BASE"_wazuh_api"
    updateConfigVar WAZUH_API_USERNAME $WAZUH_API_USERNAME
  fi
  if [ -z "$WAZUH_API_PASSWORD" ]; then
    WAZUH_API_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar WAZUH_API_PASSWORD $WAZUH_API_PASSWORD
  fi
  if [ -z "$WAZUH_USERS_ADMIN_USERNAME" ]; then
    WAZUH_USERS_ADMIN_USERNAME=$ADMIN_USERNAME_BASE"_wazuh_indexer"
    updateConfigVar WAZUH_USERS_ADMIN_USERNAME $WAZUH_USERS_ADMIN_USERNAME
  fi
  if [ -z "$WAZUH_USERS_ADMIN_PASSWORD" ]; then
    WAZUH_USERS_ADMIN_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar WAZUH_USERS_ADMIN_PASSWORD $WAZUH_USERS_ADMIN_PASSWORD
  fi
  if [ -z "$WAZUH_USERS_KIBANARO_PASSWORD" ]; then
    WAZUH_USERS_KIBANARO_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar WAZUH_USERS_KIBANARO_PASSWORD $WAZUH_USERS_KIBANARO_PASSWORD
  fi
  if [ -z "$WAZUH_USERS_LOGSTASH_PASSWORD" ]; then
    WAZUH_USERS_LOGSTASH_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar WAZUH_USERS_LOGSTASH_PASSWORD $WAZUH_USERS_LOGSTASH_PASSWORD
  fi
  if [ -z "$WAZUH_USERS_READALL_PASSWORD" ]; then
    WAZUH_USERS_READALL_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar WAZUH_USERS_READALL_PASSWORD $WAZUH_USERS_READALL_PASSWORD
  fi
  if [ -z "$WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD" ]; then
    WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD=$(getPasswordWithSymbol 32)
    updateConfigVar WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD $WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD
  fi
  outputConfigWazuh
  generateCert wazuh.manager "wazuh.manager"
  generateCert wazuh.indexer "wazuh.indexer"
  generateCert wazuh.admin "wazuh.admin"
  generateCert wazuh.dashboard "wazuh.dashboard"

  installStack wazuh wazuh.manager " " $HOME/wazuh.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Wazuh installed, sleeping 5 seconds..."
  sleep 5

  curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | sudo gpg --no-default-keyring --keyring gnupg-ring:/usr/share/keyrings/wazuh.gpg --import && sudo chmod 644 /usr/share/keyrings/wazuh.gpg
  echo "deb [signed-by=/usr/share/keyrings/wazuh.gpg] https://packages.wazuh.com/4.x/apt/ stable main" | sudo tee /etc/apt/sources.list.d/wazuh.list
  sudo DEBIAN_FRONTEND=noninteractive apt update
  sudo WAZUH_MANAGER="$SUB_WAZUH.$HOMESERVER_DOMAIN" DEBIAN_FRONTEND=noninteractive apt install wazuh-agent
  sudo systemctl daemon-reload
  set +e
  sudo grep "/var/log/docker/" /var/ossec/etc/ossec.conf
  if [ $? -ne 0 ]; then
    sudo sed -i "/<\/ossec_config>/{s//  <localfile>\n    <log_format>syslog<\/log_format>\n    <location>\/var\/log\/docker\/*<\/location>\n  <\/localfile>\n\n<\/ossec_config>/;:p;n;bp}" /var/ossec/etc/ossec.conf
  fi
  set -e
  sudo systemctl enable wazuh-agent
  sudo systemctl start wazuh-agent

  inner_block=""
  inner_block=$inner_block">>https://$SUB_WAZUH.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://wazuh.dashboard:5601 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_WAZUH $MANAGETLS_WAZUH "$is_integrate_hshq" $NETDEFAULT_WAZUH "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll wazuh "$FMLNAME_WAZUH" $USERTYPE_WAZUH "https://$SUB_WAZUH.$HOMESERVER_DOMAIN" "wazuh.png"
    restartAllCaddyContainers
  fi
}

function outputConfigWazuh()
{
  cat <<EOFWZ > $HOME/wazuh-compose.yml
$STACK_VERSION_PREFIX wazuh $(getScriptStackVersion wazuh)
version: '3.5'

services:
  wazuh.manager:
    image: $(getScriptImageByContainerName wazuh.manager)
    container_name: wazuh.manager
    hostname: wazuh.manager
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 655360
        hard: 655360
    networks:
      - int-wazuh-net
      - dock-ext-net
      - dock-internalmail-net
    ports:
      - "1514:1514"
      - "1515:1515"
      - "514:514/udp"
      - "55000:55000"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt:/etc/ssl/root-ca.pem:ro
      - \${HSHQ_SSL_DIR}/wazuh.manager.crt:/etc/ssl/filebeat.pem
      - \${HSHQ_SSL_DIR}/wazuh.manager.key:/etc/ssl/filebeat.key
      - \${HSHQ_STACKS_DIR}/wazuh/wazuh-cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf
      - v-wazuh-api-configuration:/var/ossec/api/configuration
      - v-wazuh-etc:/var/ossec/etc
      - v-wazuh-logs:/var/ossec/logs
      - v-wazuh-queue:/var/ossec/queue
      - v-wazuh-var-multigroups:/var/ossec/var/multigroups
      - v-wazuh-integrations:/var/ossec/integrations
      - v-wazuh-active-response:/var/ossec/active-response/bin
      - v-wazuh-agentless:/var/ossec/agentless
      - v-wazuh-wodles:/var/ossec/wodles
      - v-wazuh-filebeat-etc:/etc/filebeat
      - v-wazuh-filebeat-var:/var/lib/filebeat

  wazuh.indexer:
    image: $(getScriptImageByContainerName wazuh.indexer)
    container_name: wazuh.indexer
    hostname: wazuh.indexer
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-wazuh-net
      - dock-ext-net
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt:/usr/share/wazuh-indexer/certs/root-ca.pem:ro
      - \${HSHQ_SSL_DIR}/wazuh.indexer.crt:/usr/share/wazuh-indexer/certs/wazuh.indexer.pem
      - \${HSHQ_SSL_DIR}/wazuh.indexer.key:/usr/share/wazuh-indexer/certs/wazuh.indexer.key
      - \${HSHQ_SSL_DIR}/wazuh.admin.crt:/usr/share/wazuh-indexer/certs/admin.pem
      - \${HSHQ_SSL_DIR}/wazuh.admin.key:/usr/share/wazuh-indexer/certs/admin-key.pem
      - \${HSHQ_STACKS_DIR}/wazuh/wazuh-indexer/wazuh_indexer.yml:/usr/share/wazuh-indexer/opensearch.yml
      - \${HSHQ_STACKS_DIR}/wazuh/wazuh-indexer/internal_users.yml:/usr/share/wazuh-indexer/opensearch-security/internal_users.yml
      - v-wazuh-indexer-data:/var/lib/wazuh-indexer

  wazuh.dashboard:
    image: $(getScriptImageByContainerName wazuh.dashboard)
    container_name: wazuh.dashboard
    hostname: wazuh.dashboard
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - wazuh.indexer
    networks:
      - int-wazuh-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt:/usr/share/wazuh-dashboard/certs/root-ca.pem:ro
      - \${HSHQ_SSL_DIR}/wazuh.dashboard.crt:/usr/share/wazuh-dashboard/certs/wazuh-dashboard.pem
      - \${HSHQ_SSL_DIR}/wazuh.dashboard.key:/usr/share/wazuh-dashboard/certs/wazuh-dashboard-key.pem
      - \${HSHQ_STACKS_DIR}/wazuh/wazuh-dashboard/opensearch_dashboards.yml:/usr/share/wazuh-dashboard/config/opensearch_dashboards.yml
      - \${HSHQ_STACKS_DIR}/wazuh/wazuh-dashboard/wazuh.yml:/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml

volumes:
  v-wazuh-api-configuration:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/api-configuration
  v-wazuh-etc:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/etc
  v-wazuh-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/wazuh/volumes/logs
  v-wazuh-queue:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/wazuh/volumes/queue
  v-wazuh-var-multigroups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/var-multigroups
  v-wazuh-integrations:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/integrations
  v-wazuh-active-response:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/active-response
  v-wazuh-agentless:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/agentless
  v-wazuh-wodles:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/wodles
  v-wazuh-filebeat-etc:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/filebeat-etc
  v-wazuh-filebeat-var:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wazuh/volumes/filebeat-var
  v-wazuh-indexer-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/wazuh/volumes/indexer-data

networks:
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  int-wazuh-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFWZ

  cat <<EOFWZ > $HOME/wazuh.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
INDEXER_URL=https://wazuh.indexer:9200
INDEXER_USERNAME=$WAZUH_USERS_ADMIN_USERNAME
INDEXER_PASSWORD=$WAZUH_USERS_ADMIN_PASSWORD
FILEBEAT_SSL_VERIFICATION_MODE=full
SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.pem
SSL_CERTIFICATE=/etc/ssl/filebeat.pem
SSL_KEY=/etc/ssl/filebeat.key
API_USERNAME=$WAZUH_API_USERNAME
API_PASSWORD=$WAZUH_API_PASSWORD
OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g
WAZUH_API_URL=https://wazuh.manager
DASHBOARD_USERNAME=$WAZUH_USERS_DASHBOARD_USERNAME
DASHBOARD_PASSWORD=$WAZUH_USERS_DASHBOARD_PASSWORD
EOFWZ

  cat <<EOFWZ > $HSHQ_STACKS_DIR/wazuh/wazuh-cluster/wazuh_manager.conf
<ossec_config>
  <global>
    <jsonout_output>yes</jsonout_output>
    <alerts_log>yes</alerts_log>
    <logall>no</logall>
    <logall_json>no</logall_json>
    <email_notification>yes</email_notification>
    <smtp_server>$SMTP_HOSTNAME</smtp_server>
    <email_from>$EMAIL_ADMIN_EMAIL_ADDRESS</email_from>
    <email_to>$EMAIL_ADMIN_EMAIL_ADDRESS</email_to>
    <email_maxperhour>12</email_maxperhour>
    <email_log_source>alerts.log</email_log_source>
    <agents_disconnection_time>10m</agents_disconnection_time>
    <agents_disconnection_alert_time>0</agents_disconnection_alert_time>
  </global>

  <alerts>
    <log_alert_level>3</log_alert_level>
    <email_alert_level>12</email_alert_level>
  </alerts>

  <!-- Choose between "plain", "json", or "plain,json" for the format of internal logs -->
  <logging>
    <log_format>plain</log_format>
  </logging>

  <remote>
    <connection>secure</connection>
    <port>1514</port>
    <protocol>tcp</protocol>
    <queue_size>131072</queue_size>
  </remote>

  <!-- Policy monitoring -->
  <rootcheck>
    <disabled>no</disabled>
    <check_files>yes</check_files>
    <check_trojans>yes</check_trojans>
    <check_dev>yes</check_dev>
    <check_sys>yes</check_sys>
    <check_pids>yes</check_pids>
    <check_ports>yes</check_ports>
    <check_if>yes</check_if>

    <!-- Frequency that rootcheck is executed - every 12 hours -->
    <frequency>43200</frequency>

    <rootkit_files>etc/rootcheck/rootkit_files.txt</rootkit_files>
    <rootkit_trojans>etc/rootcheck/rootkit_trojans.txt</rootkit_trojans>

    <skip_nfs>yes</skip_nfs>
  </rootcheck>

  <wodle name="cis-cat">
    <disabled>no</disabled>
    <timeout>1800</timeout>
    <interval>1d</interval>
    <scan-on-start>yes</scan-on-start>
    <java_path>wodles/java</java_path>
    <ciscat_path>wodles/ciscat</ciscat_path>
  </wodle>

  <wodle name="docker-listener">
    <interval>1m</interval>
    <attempts>5</attempts>
    <run_on_start>yes</run_on_start>
    <disabled>no</disabled>
  </wodle>

  <!-- Osquery integration -->
  <wodle name="osquery">
    <disabled>yes</disabled>
    <run_daemon>yes</run_daemon>
    <log_path>/var/log/osquery/osqueryd.results.log</log_path>
    <config_path>/etc/osquery/osquery.conf</config_path>
    <add_labels>yes</add_labels>
  </wodle>

  <!-- System inventory -->
  <wodle name="syscollector">
    <disabled>no</disabled>
    <interval>1h</interval>
    <scan_on_start>yes</scan_on_start>
    <hardware>yes</hardware>
    <os>yes</os>
    <network>yes</network>
    <packages>yes</packages>
    <ports all="no">yes</ports>
    <processes>yes</processes>

    <!-- Database synchronization settings -->
    <synchronization>
      <max_eps>10</max_eps>
    </synchronization>
  </wodle>

  <sca>
    <enabled>yes</enabled>
    <scan_on_start>yes</scan_on_start>
    <interval>12h</interval>
    <skip_nfs>yes</skip_nfs>
  </sca>

  <vulnerability-detector>
    <enabled>yes</enabled>
    <interval>5m</interval>
    <min_full_scan_interval>6h</min_full_scan_interval>
    <run_on_start>yes</run_on_start>

    <!-- Ubuntu OS vulnerabilities -->
    <provider name="canonical">
      <enabled>yes</enabled>
      <os>jammy</os>
      <update_interval>1h</update_interval>
    </provider>

    <!-- Windows OS vulnerabilities -->
    <provider name="msu">
      <enabled>yes</enabled>
      <update_interval>1h</update_interval>
    </provider>

    <!-- Aggregate vulnerabilities -->
    <provider name="nvd">
      <enabled>yes</enabled>
      <update_from_year>2010</update_from_year>
      <update_interval>1h</update_interval>
    </provider>

  </vulnerability-detector>

  <!-- File integrity monitoring -->
  <syscheck>
    <disabled>no</disabled>

    <!-- Frequency that syscheck is executed default every 12 hours -->
    <frequency>43200</frequency>

    <scan_on_start>yes</scan_on_start>

    <!-- Generate alert when new file detected -->
    <alert_new_files>yes</alert_new_files>

    <!-- Don't ignore files that change more than 'frequency' times -->
    <auto_ignore frequency="10" timeframe="3600">no</auto_ignore>

    <!-- Directories to check  (perform all possible verifications) -->
    <directories>/etc,/usr/bin,/usr/sbin</directories>
    <directories>/bin,/sbin,/boot</directories>
    <directories>/home</directories>

    <!-- Files/directories to ignore -->
    <ignore>/etc/mtab</ignore>
    <ignore>/etc/hosts.deny</ignore>
    <ignore>/etc/mail/statistics</ignore>
    <ignore>/etc/random-seed</ignore>
    <ignore>/etc/random.seed</ignore>
    <ignore>/etc/adjtime</ignore>
    <ignore>/etc/httpd/logs</ignore>
    <ignore>/etc/utmpx</ignore>
    <ignore>/etc/wtmpx</ignore>
    <ignore>/etc/cups/certs</ignore>
    <ignore>/etc/dumpdates</ignore>
    <ignore>/etc/svc/volatile</ignore>

    <!-- File types to ignore -->
    <ignore type="sregex">.log\$|.swp\$</ignore>

    <!-- Check the file, but never compute the diff -->
    <nodiff>/etc/ssl/private.key</nodiff>

    <skip_nfs>yes</skip_nfs>
    <skip_dev>yes</skip_dev>
    <skip_proc>yes</skip_proc>
    <skip_sys>yes</skip_sys>

    <!-- Nice value for Syscheck process -->
    <process_priority>10</process_priority>

    <!-- Maximum output throughput -->
    <max_eps>100</max_eps>

    <!-- Database synchronization settings -->
    <synchronization>
      <enabled>yes</enabled>
      <interval>5m</interval>
      <max_interval>1h</max_interval>
      <max_eps>10</max_eps>
    </synchronization>
  </syscheck>

  <!-- Active response -->
  <global>
    <white_list>127.0.0.1</white_list>
    <white_list>^localhost.localdomain\$</white_list>
  </global>

  <command>
    <name>disable-account</name>
    <executable>disable-account</executable>
    <timeout_allowed>yes</timeout_allowed>
  </command>

  <command>
    <name>restart-wazuh</name>
    <executable>restart-wazuh</executable>
  </command>

  <command>
    <name>firewall-drop</name>
    <executable>firewall-drop</executable>
    <timeout_allowed>yes</timeout_allowed>
  </command>

  <command>
    <name>host-deny</name>
    <executable>host-deny</executable>
    <timeout_allowed>yes</timeout_allowed>
  </command>

  <command>
    <name>route-null</name>
    <executable>route-null</executable>
    <timeout_allowed>yes</timeout_allowed>
  </command>

  <command>
    <name>win_route-null</name>
    <executable>route-null.exe</executable>
    <timeout_allowed>yes</timeout_allowed>
  </command>

  <command>
    <name>netsh</name>
    <executable>netsh.exe</executable>
    <timeout_allowed>yes</timeout_allowed>
  </command>

  <!--
  <active-response>
    <command>firewall-drop</command>
    <location>localhost</location>
    <rules_id>5710</rules_id>
    <timeout>1000</timeout>
  </active-response>
  -->

  <!-- Log analysis -->
  <localfile>
    <log_format>command</log_format>
    <command>df -P</command>
    <frequency>360</frequency>
  </localfile>

  <localfile>
    <log_format>full_command</log_format>
    <command>netstat -tulpn | sed 's/\([[:alnum:]]\+\)\ \+[[:digit:]]\+\ \+[[:digit:]]\+\ \+\(.*\):\([[:digit:]]*\)\ \+\([0-9\.\:\*]\+\).\+\ \([[:digit:]]*\/[[:alnum:]\-]*\).*/\1 \2 == \3 == \4 \5/' | sort -k 4 -g | sed 's/ == \(.*\) ==/:\1/' | sed 1,2d</command>
    <alias>netstat listening ports</alias>
    <frequency>360</frequency>
  </localfile>

  <localfile>
    <log_format>full_command</log_format>
    <command>last -n 20</command>
    <frequency>360</frequency>
  </localfile>

  <ruleset>
    <!-- Default ruleset -->
    <decoder_dir>ruleset/decoders</decoder_dir>
    <rule_dir>ruleset/rules</rule_dir>
    <rule_exclude>0215-policy_rules.xml</rule_exclude>
    <list>etc/lists/audit-keys</list>
    <list>etc/lists/amazon/aws-eventnames</list>
    <list>etc/lists/security-eventchannel</list>

    <!-- User-defined ruleset -->
    <decoder_dir>etc/decoders</decoder_dir>
    <rule_dir>etc/rules</rule_dir>
  </ruleset>

  <rule_test>
    <enabled>yes</enabled>
    <threads>1</threads>
    <max_sessions>64</max_sessions>
    <session_timeout>15m</session_timeout>
  </rule_test>

  <!-- Configuration for wazuh-authd -->
  <auth>
    <disabled>no</disabled>
    <port>1515</port>
    <use_source_ip>no</use_source_ip>
    <purge>yes</purge>
    <use_password>no</use_password>
    <ciphers>HIGH:!ADH:!EXP:!MD5:!RC4:!3DES:!CAMELLIA:@STRENGTH</ciphers>
    <!-- <ssl_agent_ca></ssl_agent_ca> -->
    <ssl_verify_host>no</ssl_verify_host>
    <ssl_manager_cert>etc/sslmanager.cert</ssl_manager_cert>
    <ssl_manager_key>etc/sslmanager.key</ssl_manager_key>
    <ssl_auto_negotiate>no</ssl_auto_negotiate>
  </auth>

  <cluster>
    <name>wazuh</name>
    <node_name>node01</node_name>
    <node_type>master</node_type>
    <key></key>
    <port>1516</port>
    <bind_addr>0.0.0.0</bind_addr>
    <nodes>
        <node>NODE_IP</node>
    </nodes>
    <hidden>no</hidden>
    <disabled>yes</disabled>
  </cluster>

</ossec_config>

<ossec_config>
  <localfile>
    <log_format>syslog</log_format>
    <location>/var/ossec/logs/active-responses.log</location>
  </localfile>

  <localfile>
    <log_format>syslog</log_format>
    <location>/var/log/docker/*</location>
  </localfile>

</ossec_config>
EOFWZ

  cat <<EOFWZ > $HSHQ_STACKS_DIR/wazuh/wazuh-indexer/wazuh_indexer.yml
network.host: "0.0.0.0"
node.name: "wazuh.indexer"
path.data: /var/lib/wazuh-indexer
path.logs: /var/log/wazuh-indexer
discovery.type: single-node
compatibility.override_main_response_version: true
plugins.security.ssl.http.pemcert_filepath: \${OPENSEARCH_PATH_CONF}/certs/wazuh.indexer.pem
plugins.security.ssl.http.pemkey_filepath: \${OPENSEARCH_PATH_CONF}/certs/wazuh.indexer.key
plugins.security.ssl.http.pemtrustedcas_filepath: \${OPENSEARCH_PATH_CONF}/certs/root-ca.pem
plugins.security.ssl.transport.pemcert_filepath: \${OPENSEARCH_PATH_CONF}/certs/wazuh.indexer.pem
plugins.security.ssl.transport.pemkey_filepath: \${OPENSEARCH_PATH_CONF}/certs/wazuh.indexer.key
plugins.security.ssl.transport.pemtrustedcas_filepath: \${OPENSEARCH_PATH_CONF}/certs/root-ca.pem
plugins.security.ssl.http.enabled: true
plugins.security.ssl.transport.enforce_hostname_verification: false
plugins.security.ssl.transport.resolve_hostname: false
plugins.security.authcz.admin_dn:
- "CN=wazuh.admin,OU=$CERTS_INTERNAL_OU_NAME,O=$CERTS_INTERNAL_OU_NAME,L=$CERTS_INTERNAL_LOCALITY,ST=$CERTS_INTERNAL_STATE,C=$CERTS_INTERNAL_COUNTRY"
plugins.security.check_snapshot_restore_write_privileges: true
plugins.security.enable_snapshot_restore_privilege: true
plugins.security.nodes_dn:
- "CN=wazuh.indexer,OU=$CERTS_INTERNAL_OU_NAME,O=$CERTS_INTERNAL_OU_NAME,L=$CERTS_INTERNAL_LOCALITY,ST=$CERTS_INTERNAL_STATE,C=$CERTS_INTERNAL_COUNTRY"
plugins.security.restapi.roles_enabled:
- "all_access"
- "security_rest_api_access"
plugins.security.system_indices.enabled: true
plugins.security.system_indices.indices: [".opendistro-alerting-config", ".opendistro-alerting-alert*", ".opendistro-anomaly-results*", ".opendistro-anomaly-detector*", ".opendistro-anomaly-checkpoints", ".opendistro-anomaly-detection-state", ".opendistro-reports-*", ".opendistro-notifications-*", ".opendistro-notebooks", ".opensearch-observability", ".opendistro-asynchronous-search-response*", ".replication-metadata-store"]
plugins.security.allow_default_init_securityindex: true
cluster.routing.allocation.disk.threshold_enabled: false
EOFWZ

  WAZUH_USERS_ADMIN_PASSWORD_HASH=$(htpasswd -B -n -b $WAZUH_USERS_ADMIN_USERNAME $WAZUH_USERS_ADMIN_PASSWORD | cut -d":" -f2-)
  WAZUH_USERS_DASHBOARD_PASSWORD_HASH=$(htpasswd -B -n -b kibanaserver $WAZUH_USERS_DASHBOARD_PASSWORD | cut -d":" -f2-)
  WAZUH_USERS_KIBANARO_PASSWORD_HASH=$(htpasswd -B -n -b kibanaro $WAZUH_USERS_KIBANARO_PASSWORD | cut -d":" -f2-)
  WAZUH_USERS_LOGSTASH_PASSWORD_HASH=$(htpasswd -B -n -b logstash $WAZUH_USERS_LOGSTASH_PASSWORD | cut -d":" -f2-)
  WAZUH_USERS_READALL_PASSWORD_HASH=$(htpasswd -B -n -b readall $WAZUH_USERS_READALL_PASSWORD | cut -d":" -f2-)
  WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD_HASH=$(htpasswd -B -n -b snapshotrestore $WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD | cut -d":" -f2-)

  cat <<EOFWZ > $HSHQ_STACKS_DIR/wazuh/wazuh-indexer/internal_users.yml
---
# This is the internal user database
# The hash value is a bcrypt hash and can be generated with plugin/tools/hash.sh

_meta:
  type: "internalusers"
  config_version: 2

# Define your internal users here

## Demo users

$WAZUH_USERS_ADMIN_USERNAME:
  hash: "$WAZUH_USERS_ADMIN_PASSWORD_HASH"
  reserved: true
  backend_roles:
  - "admin"
  description: "Demo admin user"

kibanaserver:
  hash: "$WAZUH_USERS_DASHBOARD_PASSWORD_HASH"
  reserved: true
  description: "Demo kibanaserver user"

kibanaro:
  hash: "$WAZUH_USERS_KIBANARO_PASSWORD_HASH"
  reserved: false
  backend_roles:
  - "kibanauser"
  - "readall"
  attributes:
    attribute1: "value1"
    attribute2: "value2"
    attribute3: "value3"
  description: "Demo kibanaro user"

logstash:
  hash: "$WAZUH_USERS_LOGSTASH_PASSWORD_HASH"
  reserved: false
  backend_roles:
  - "logstash"
  description: "Demo logstash user"

readall:
  hash: "$WAZUH_USERS_READALL_PASSWORD_HASH"
  reserved: false
  backend_roles:
  - "readall"
  description: "Demo readall user"

snapshotrestore:
  hash: "$WAZUH_USERS_SNAPSHOTRESTORE_PASSWORD_HASH"
  reserved: false
  backend_roles:
  - "snapshotrestore"
  description: "Demo snapshotrestore user"
EOFWZ

  cat <<EOFWZ > $HSHQ_STACKS_DIR/wazuh/wazuh-dashboard/opensearch_dashboards.yml
server.host: 0.0.0.0
server.port: 5601
opensearch.hosts: https://wazuh.indexer:9200
opensearch.ssl.verificationMode: certificate
opensearch.requestHeadersWhitelist: ["securitytenant","Authorization"]
opensearch_security.multitenancy.enabled: false
opensearch_security.readonly_mode.roles: ["kibana_read_only"]
server.ssl.enabled: true
server.ssl.key: "/usr/share/wazuh-dashboard/certs/wazuh-dashboard-key.pem"
server.ssl.certificate: "/usr/share/wazuh-dashboard/certs/wazuh-dashboard.pem"
opensearch.ssl.certificateAuthorities: ["/usr/share/wazuh-dashboard/certs/root-ca.pem"]
uiSettings.overrides.defaultRoute: /app/wazuh
EOFWZ

  cat <<EOFWZ > $HSHQ_STACKS_DIR/wazuh/wazuh-dashboard/wazuh.yml
hosts:
  - 1513629884013:
      url: "https://wazuh.manager"
      port: 55000
      username: $WAZUH_API_USERNAME
      password: "$WAZUH_API_PASSWORD"
      run_as: false
EOFWZ
}

function performUpdateWazuh()
{
  perform_stack_name=wazuh
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=wazuh/wazuh-manager:4.6.0,wazuh/wazuh-indexer:4.6.0,wazuh/wazuh-dashboard:4.6.0
      image_update_map[0]="wazuh/wazuh-manager:4.6.0,wazuh/wazuh-manager:4.7.3"
      image_update_map[1]="wazuh/wazuh-indexer:4.6.0,wazuh/wazuh-indexer:4.7.3"
      image_update_map[2]="wazuh/wazuh-dashboard:4.6.0,wazuh/wazuh-dashboard:4.7.3"
    ;;
    2)
      newVer=v4
      curImageList=wazuh/wazuh-manager:4.7.1,wazuh/wazuh-indexer:4.7.1,wazuh/wazuh-dashboard:4.7.1
      image_update_map[0]="wazuh/wazuh-manager:4.7.1,wazuh/wazuh-manager:4.7.3"
      image_update_map[1]="wazuh/wazuh-indexer:4.7.1,wazuh/wazuh-indexer:4.7.3"
      image_update_map[2]="wazuh/wazuh-dashboard:4.7.1,wazuh/wazuh-dashboard:4.7.3"
    ;;
    3)
      newVer=v4
      curImageList=wazuh/wazuh-manager:4.7.2,wazuh/wazuh-indexer:4.7.2,wazuh/wazuh-dashboard:4.7.2
      image_update_map[0]="wazuh/wazuh-manager:4.7.2,wazuh/wazuh-manager:4.7.3"
      image_update_map[1]="wazuh/wazuh-indexer:4.7.2,wazuh/wazuh-indexer:4.7.3"
      image_update_map[2]="wazuh/wazuh-dashboard:4.7.2,wazuh/wazuh-dashboard:4.7.3"
    ;;
    4)
      # The only purpose of this stack upgrade is to implement the increased Java memory fix
      newVer=v5
      curImageList=wazuh/wazuh-manager:4.7.3,wazuh/wazuh-indexer:4.7.3,wazuh/wazuh-dashboard:4.7.3
      image_update_map[0]="wazuh/wazuh-manager:4.7.3,wazuh/wazuh-manager:4.7.3"
      image_update_map[1]="wazuh/wazuh-indexer:4.7.3,wazuh/wazuh-indexer:4.7.3"
      image_update_map[2]="wazuh/wazuh-dashboard:4.7.3,wazuh/wazuh-dashboard:4.7.3"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing "true" mfUpdateWazuhStackJavaMem
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    5)
      newVer=v5
      curImageList=wazuh/wazuh-manager:4.7.3,wazuh/wazuh-indexer:4.7.3,wazuh/wazuh-dashboard:4.7.3
      image_update_map[0]="wazuh/wazuh-manager:4.7.3,wazuh/wazuh-manager:4.7.3"
      image_update_map[1]="wazuh/wazuh-indexer:4.7.3,wazuh/wazuh-indexer:4.7.3"
      image_update_map[2]="wazuh/wazuh-dashboard:4.7.3,wazuh/wazuh-dashboard:4.7.3"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function mfUpdateWazuhStackJavaMem()
{
  sed -i "s|OPENSEARCH_JAVA_OPTS=.*|OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g|" $HOME/wazuh.env
}

# Collabora
function installCollabora()
{
  set +e
  is_integrate_hshq=$1
  # And don't forget to check if directory exists
  checkDeleteStackAndDirectory collabora "Collabora"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  mkdir $HSHQ_STACKS_DIR/collabora
  pullImage $IMG_COLLABORA
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e
  initServicesCredentials
  outputConfigCollabora
  installStack collabora collabora " " $HOME/collabora.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  inner_block=""
  inner_block=$inner_block">>https://$SUB_COLLABORA.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>encode gzip\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://collabora:9980 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_COLLABORA $MANAGETLS_COLLABORA "$is_integrate_hshq" $NETDEFAULT_COLLABORA "$inner_block"

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcUptimeKuma collabora "$FMLNAME_COLLABORA" $USERTYPE_COLLABORA "https://$SUB_COLLABORA.$HOMESERVER_DOMAIN" true
    insertEnableSvcHeimdall collabora "$FMLNAME_COLLABORA Admin" admin "https://$SUB_COLLABORA.$HOMESERVER_DOMAIN/browser/dist/admin/admin.html" "collabora.png" true
    restartAllCaddyContainers
  fi
}

function outputConfigCollabora()
{
  cat <<EOFCO > $HOME/collabora-compose.yml
$STACK_VERSION_PREFIX collabora $(getScriptStackVersion collabora)
version: '3.5'

services:
  collabora:
    image: $(getScriptImageByContainerName collabora)
    container_name: collabora
    hostname: collabora
    restart: unless-stopped
    env_file: stack.env
    cap_add:
      - MKNOD
      - SYS_ADMIN
    networks:
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true

EOFCO

  cat <<EOFCO > $HOME/collabora.env
username=$COLLABORA_ADMIN_USERNAME
password=$COLLABORA_ADMIN_PASSWORD
aliasgroup1=https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN:443
extra_params=--o:ssl.enable=false --o:ssl.termination=true --o:net.frame_ancestors=*
EOFCO
}

function performUpdateCollabora()
{
  perform_stack_name=collabora
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=collabora/code:23.05.5.3.1
      image_update_map[0]="collabora/code:23.05.5.3.1,collabora/code:23.05.9.4.1"
    ;;
    2)
      newVer=v4
      curImageList=collabora/code:23.05.6.4.1
      image_update_map[0]="collabora/code:23.05.6.4.1,collabora/code:23.05.9.4.1"
    ;;
    3)
      newVer=v4
      curImageList=collabora/code:23.05.8.2.1
      image_update_map[0]="collabora/code:23.05.8.2.1,collabora/code:23.05.9.4.1"
    ;;
    4)
      newVer=v4
      curImageList=collabora/code:23.05.9.4.1
      image_update_map[0]="collabora/code:23.05.9.4.1,collabora/code:23.05.9.4.1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Nextcloud
function installNextcloud()
{
  set +e
  is_integrate_hshq=$1
  # With great power comes great responsibility
  checkDeleteStackAndDirectory nextcloud "Nextcloud"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_NEXTCLOUD_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_NEXTCLOUD_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_NEXTCLOUD_IMAGINARY
  if [ $? -ne 0 ]; then
    return 1
  fi
  if ! [ -d $HSHQ_STACKS_DIR/coturn ]; then
    echo "Missing coturn, installing..."
    installCoturn
    retval=$?
    if [ $retval -ne 0 ]; then
      notifyStackInstallFailure Coturn
    fi
  fi
  set -e
  initServicesCredentials
  if [ -z "$NEXTCLOUD_REDIS_PASSWORD" ]; then
    NEXTCLOUD_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar NEXTCLOUD_REDIS_PASSWORD $NEXTCLOUD_REDIS_PASSWORD
  fi
  set +e
  docker exec mailu-admin flask mailu alias-delete $NEXTCLOUD_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $NEXTCLOUD_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS
  generateCert nextcloud-app nextcloud-app
  generateCert nextcloud-cron nextcloud-cron
  generateCert nextcloud-web nextcloud-web
  generateCert nextcloud-push nextcloud-push

  numTries=5
  curTries=1
  while [ $curTries -le $numTries ]
  do
    mkdir $HSHQ_STACKS_DIR/nextcloud
    mkdir $HSHQ_STACKS_DIR/nextcloud/app
    mkdir $HSHQ_STACKS_DIR/nextcloud/db
    mkdir $HSHQ_STACKS_DIR/nextcloud/dbexport
    mkdir $HSHQ_STACKS_DIR/nextcloud/web
    mkdir $HSHQ_STACKS_DIR/nextcloud/ssl
    chmod 777 $HSHQ_STACKS_DIR/nextcloud/dbexport
    outputConfigNextcloud
    docker-compose -f $HOME/nextcloud-compose-tmp.yml up -d
    search="ready to handle connections"
    error_text="rsync error"
    isFound="F"
    isError="F"
    i=0
    set +e
    while [ $i -le 300 ]
    do
      findtext=$(docker logs nextcloud-app 2>&1 | grep "$search")
      finderror=$(docker logs nextcloud-app 2>&1 | grep "$error_text")
      if ! [ -z "$finderror" ]; then
        isError="T"
        break
      fi
      if ! [ -z "$findtext" ]; then
        isFound="T"
        break
      fi
      echo "Container not ready, sleeping 5 seconds, total wait=$i seconds..."
      sleep 5
      i=$((i+5))
    done
    if [ $isFound == "T" ] && [ $isError == "F" ]; then
      break
    fi
    if [ $isError == "T" ]; then
      echo "(Attempt $curTries of $numTries) Error starting Nextcloud stack, restarting..."
    fi
    docker-compose -f $HOME/nextcloud-compose-tmp.yml down -v
    sudo rm -fr $HSHQ_STACKS_DIR/nextcloud
    ((curTries++))
  done
  if [ $isFound == "F" ]; then
    echo "ERROR: Nextcloud did not start up correctly, exiting..."
    return 1
  fi
  echo "Sleeping 10 seconds..."
  sleep 10
  set +e
  ls /usr/local/share/ca-certificates/ | while read cert
  do
    docker exec -u www-data nextcloud-app php occ --no-warnings security:certificates:import /usr/local/share/ca-certificates/$cert
  done
  docker exec -u www-data nextcloud-app php occ --no-warnings config:system:set default_phone_region --type string --value="$DEFAULT_PHONE_REGION"
  docker exec -u www-data nextcloud-app php occ --no-warnings config:system:set allow_local_remote_servers --value=true
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install calendar
  # Sometimes there are issues with apps, check the first one to see if there is an error.
  if [ $? -ne 0 ]; then
    docker-compose -f $HOME/nextcloud-compose-tmp.yml down -v
    echo "ERROR: Nextcloud did not start up correctly, exiting..."
    return 1
  fi
  docker exec -u www-data nextcloud-app php occ user:setting $NEXTCLOUD_ADMIN_USERNAME settings email "$NEXTCLOUD_ADMIN_EMAIL_ADDRESS"
  docker exec -u www-data nextcloud-app php occ user:setting $NEXTCLOUD_ADMIN_USERNAME settings display_name "${HOMESERVER_ABBREV^^} Nextcloud Admin"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install contacts
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install groupfolders
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install tasks
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install deck
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install forms
  docker exec -u www-data nextcloud-app php occ --no-warnings app:enable user_ldap
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install mail
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install maps
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install notes
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install spreed
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install integration_excalidraw
  docker exec -u www-data nextcloud-app php occ config:app:set integration_excalidraw base_url --value="https://$SUB_EXCALIDRAW_WEB.$HOMESERVER_DOMAIN"
  docker exec -u www-data nextcloud-app php occ config:app:set integration_excalidraw enabled --value="yes"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install integration_mastodon
  docker exec -u www-data nextcloud-app php occ config:app:set integration_mastodon use_popup --value="1"
  docker exec -u www-data nextcloud-app php occ config:app:set integration_mastodon oauth_instance_url --value="https://$SUB_MASTODON.$HOMESERVER_DOMAIN"
  docker exec -u www-data nextcloud-app php occ config:app:set integration_mastodon enabled --value="yes"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install workflow_media_converter
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install drawio
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install riotchat
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install previewgenerator
  docker exec -u www-data nextcloud-app php occ config:app:set riotchat custom_json --value="{\"disable_guests\":true,\"piwik\":false,\"settingDefaults\":{\"language\":\"en\"},\"disable_custom_urls\":true,\"disable_login_language_selector\":true,\"disable_3pid_login\": true,\"default_server_config\":{\"m.homeserver\":{\"base_url\":\"https:\/\/$SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN\",\"server_name\":\"$HOMESERVER_DOMAIN\"}},\"brand\":\"Nextcloud\",\"branding\":{\"authHeaderLogoUrl\":\"\/core\/img\/logo\/logo.svg?v=0\"},\"showLabsSettings\":true,\"sso_immediate_redirect\":false,\"jitsi\": {\"preferred_domain\": \"$SUB_JITSI.$HOMESERVER_DOMAIN\"},\"roomDirectory\": {\"servers\": [\"$HOMESERVER_DOMAIN\"]},\"default_theme\": \"dark\"}"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install jitsi
  docker exec -u www-data nextcloud-app php occ config:app:set jitsi display_join_using_the_jitsi_app --value=1
  docker exec -u www-data nextcloud-app php occ config:app:set jitsi jitsi_server_url --value="https://$SUB_JITSI.$HOMESERVER_DOMAIN"
  docker exec -u www-data nextcloud-app php occ config:app:set jitsi enabled --value="yes"
  docker exec -u www-data nextcloud-app php occ config:app:set spreed turn_servers --value="[{\"schemes\":\"turns\",\"server\":\"$SUB_COTURN.$HOMESERVER_DOMAIN:5349\",\"secret\":\"$COTURN_STATIC_SECRET\",\"protocols\":\"udp,tcp\"}]"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install richdocuments
  docker exec -u www-data nextcloud-app php occ config:app:set richdocuments wopi_allowlist --value="10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 127.0.0.0/8"
  docker exec -u www-data nextcloud-app php occ config:app:set richdocuments public_wopi_url --value="https://$SUB_COLLABORA.$HOMESERVER_DOMAIN"
  docker exec -u www-data nextcloud-app php occ config:app:set richdocuments wopi_url --value="https://$SUB_COLLABORA.$HOMESERVER_DOMAIN:443"
  docker exec -u www-data nextcloud-app php occ config:app:set richdocuments federation_use_trusted_domains --value="yes"
  docker exec -u www-data nextcloud-app php occ config:app:set richdocuments enabled --value="yes"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install files_mindmap
  docker exec -u www-data nextcloud-app php occ ldap:create-empty-config
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapAgentName "$LDAP_ADMIN_BIND_DN"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapAgentPassword "$LDAP_ADMIN_BIND_PASSWORD"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapBase "$LDAP_BASE_DN"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapBaseGroups "$LDAP_BASE_DN"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapBaseUsers "$LDAP_BASE_DN"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapExpertUsernameAttr "uid"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapGroupFilter "(&(|(objectclass=groupOfUniqueNames)(objectclass=posixGroup)(objectclass=top))(|(cn=$LDAP_ADMIN_USER_GROUP_NAME)(cn=$LDAP_PRIMARY_USER_GROUP_NAME)))"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapGroupFilterGroups "$LDAP_ADMIN_USER_GROUP_NAME;$LDAP_PRIMARY_USER_GROUP_NAME"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapGroupFilterObjectclass "groupOfUniqueNames;posixGroup;top"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapGroupMemberAssocAttr "uniqueMember"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapHost "ldaps://ldapserver"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapPort "636"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapLoginFilter "(&(&(|(objectclass=inetOrgPerson)(objectclass=person)(objectclass=posixAccount))(|(memberof=cn=$LDAP_ADMIN_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)(memberof=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)))(uid=%uid))"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapUserFilter "(&(|(objectclass=inetOrgPerson)(objectclass=person)(objectclass=posixAccount))(|(memberof=cn=$LDAP_ADMIN_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)(memberof=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)))"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapUserFilterGroups "$LDAP_ADMIN_USER_GROUP_NAME;$LDAP_PRIMARY_USER_GROUP_NAME"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapUserFilterObjectclass "inetOrgPerson;person;posixAccount"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 turnOnPasswordChange "1"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 useMemberOfToDetectMembership "1"
  docker exec -u www-data nextcloud-app php occ ldap:set-config s01 ldapConfigurationActive "1"
  docker exec -u www-data nextcloud-app php occ ldap:test-config s01
  docker exec -u www-data nextcloud-app php occ config:app:set user_ldap enabled --value="yes"
  docker exec -u www-data nextcloud-app php occ ldap:check-user --force "$LDAP_ADMIN_USER_USERNAME"
  docker exec -u www-data nextcloud-app php occ ldap:search "$LDAP_ADMIN_USER_USERNAME"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install ldap_write_support
  docker exec -u www-data nextcloud-app php occ config:system:set trusted_domains 2 --value=$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN
  docker exec -u www-data nextcloud-app php occ config:system:set enabledPreviewProviders 0 --value="OC\\Preview\\Imaginary"
  docker exec -u www-data nextcloud-app php occ config:system:set preview_imaginary_url --value="http://nextcloud-imaginary:$NEXTCLOUD_IMAGINARY_PORT"
  docker exec -u www-data nextcloud-app php occ --no-warnings app:install notify_push

  if ! [ "$(isServiceDisabled clamav)" = "true" ]; then
    docker exec -u www-data nextcloud-app php occ --no-warnings app:install files_antivirus
    docker exec -u www-data nextcloud-app php occ config:app:set files_antivirus av_mode --value="daemon"
    docker exec -u www-data nextcloud-app php occ config:app:set files_antivirus av_host --value="antivirus"
    docker exec -u www-data nextcloud-app php occ config:app:set files_antivirus av_port --value="3310"
    docker exec -u www-data nextcloud-app php occ config:app:set files_antivirus av_stream_max_length --value="26214400"
    docker exec -u www-data nextcloud-app php occ config:app:set files_antivirus av_max_file_size --value="-1"
    docker exec -u www-data nextcloud-app php occ config:app:set files_antivirus av_infected_action --value="delete"
    docker exec -u www-data nextcloud-app php occ config:app:set files_antivirus enabled --value="yes"
  fi
  docker exec -u www-data nextcloud-app php occ background:cron

  sleep 5
  docker-compose -f $HOME/nextcloud-compose-tmp.yml down -v

  # This is dumb. https://github.com/nextcloud/notify_push/issues/355
  sudo chmod -R 755 $HSHQ_STACKS_DIR/nextcloud/app/custom_apps/notify_push/bin

  rm -f $HOME/nextcloud-compose-tmp.yml
  echo "post_max_size=16G" | sudo tee -a $HSHQ_STACKS_DIR/nextcloud/app/.user.ini
  echo "upload_max_filesize=16G" | sudo tee -a $HSHQ_STACKS_DIR/nextcloud/app/.user.ini
  echo "memory_limit=2G" | sudo tee -a $HSHQ_STACKS_DIR/nextcloud/app/.user.ini
  echo "max_input_time=3600" | sudo tee -a $HSHQ_STACKS_DIR/nextcloud/app/.user.ini
  echo "max_execution_time=3600" | sudo tee -a $HSHQ_STACKS_DIR/nextcloud/app/.user.ini

  installStack nextcloud nextcloud-app "ready to handle connections" $HOME/nextcloud.env
  if [ $? -ne 0 ]; then
    nc_arr=($(docker ps --filter name=nextcloud --format "{{.Names}}"))
    for curcont in "${nc_arr[@]}"
    do
      docker container stop $curcont
      docker container rm $curcont
    done
    docker volume rm nextcloud_v-nextcloud > /dev/null 2>&1
    echo "ERROR: Nextcloud did not start up correctly, exiting..."
    return 1
  fi
  set -e
  inner_block=""
  inner_block=$inner_block">>https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>rewrite /.well-known/carddav /remote.php/dav\n"
  inner_block=$inner_block">>>>rewrite /.well-known/caldav /remote.php/dav\n"
  inner_block=$inner_block">>>>rewrite /.well-known/webfinger /index.php/.well-known/webfinger\n"
  inner_block=$inner_block">>>>rewrite /.well-known/nodeinfo /index.php/.well-known/nodeinfo\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>route /push/* {\n"
  inner_block=$inner_block">>>>>>>>uri strip_prefix /push\n"
  inner_block=$inner_block">>>>>>>>reverse_proxy http://nextcloud-push:$NEXTCLOUD_PUSH_PORT\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://nextcloud-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_NEXTCLOUD $MANAGETLS_NEXTCLOUD "$is_integrate_hshq" $NETDEFAULT_NEXTCLOUD "$inner_block"

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll nextcloud "$FMLNAME_NEXTCLOUD" $USERTYPE_NEXTCLOUD "https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN" "nextcloud.png"
    restartAllCaddyContainers
  fi
  docker exec -u www-data nextcloud-app php occ app:enable notify_push
  docker exec -u www-data nextcloud-app php occ notify_push:setup https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN/push
}

function outputConfigNextcloud()
{
  cat <<EOFNG > $HSHQ_STACKS_DIR/nextcloud/web/nginx.conf
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                      '\$status \$body_bytes_sent "\$http_referer" '
                      '"\$http_user_agent" "\$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    # Prevent nginx HTTP Server Detection
    server_tokens   off;

    keepalive_timeout  65;

    map \$http_host \$this_host {
        "" \$host;
        default \$http_host;
    }

    map \$http_x_forwarded_proto \$the_scheme {
        default \$http_x_forwarded_proto;
        "" \$scheme;
    }

    map \$http_x_forwarded_host \$the_host {
       default \$http_x_forwarded_host;
       "" \$this_host;
    }

    #gzip  on;

    upstream php-handler {
        server nextcloud-app:9000;
    }

    server {
        listen 80;
        listen 443 ssl http2;
        ssl_certificate /etc/nginx/certs/cert.crt;
        ssl_certificate_key /etc/nginx/certs/cert.key;

        # HSTS settings
        # WARNING: Only add the preload option once you read about
        # the consequences in https://hstspreload.org/. This option
        # will add the domain to a hardcoded list that is shipped
        # in all major browsers and getting removed from this list
        # could take several months.
        #add_header Strict-Transport-Security "max-age=15768000; includeSubDomains;" always;

        # set max upload size
        client_max_body_size 16400M;
        fastcgi_buffers 64 16K;
        fastcgi_buffer_size 16K;

        # Enable gzip but do not remove ETag headers
        gzip on;
        gzip_vary on;
        gzip_comp_level 4;
        gzip_min_length 256;
        gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;
        gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;

        # Pagespeed is not supported by Nextcloud, so if your server is built
        # with the ngx_pagespeed module, uncomment this line to disable it.
        #pagespeed off;

        # HTTP response headers borrowed from Nextcloud .htaccess
        add_header Referrer-Policy                      "no-referrer"   always;
        add_header X-Content-Type-Options               "nosniff"       always;
        add_header X-Download-Options                   "noopen"        always;
        add_header X-Frame-Options                      "SAMEORIGIN"    always;
        add_header X-Permitted-Cross-Domain-Policies    "none"          always;
        add_header X-Robots-Tag                     "noindex, nofollow" always;
        add_header X-XSS-Protection                     "1; mode=block" always;

        # Remove X-Powered-By, which is an information leak
        fastcgi_hide_header X-Powered-By;

        # Path to the root of your installation
        root /var/www/html;

        # Specify how to handle directories -- specifying /index.php\$request_uri
        # here as the fallback means that Nginx always exhibits the desired behaviour
        # when a client requests a path that corresponds to a directory that exists
        # on the server. In particular, if that directory contains an index.php file,
        # that file is correctly served; if it doesn't, then the request is passed to
        # the front-end controller. This consistent behaviour means that we don't need
        # to specify custom rules for certain paths (e.g. images and other assets,
        # /updater, /ocm-provider, /ocs-provider), and thus
        # try_files \$uri \$uri/ /index.php\$request_uri
        # always provides the desired behaviour.
        index index.php index.html /index.php\$request_uri;

        # Rule borrowed from .htaccess to handle Microsoft DAV clients
        location = / {
            if ( \$http_user_agent ~ ^DavClnt ) {
                return 302 /remote.php/webdav/\$is_args\$args;
            }
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        # Make a regex exception for /.well-known so that clients can still
        # access it despite the existence of the regex rule
        # location ~ /(\.|autotest|...) which would otherwise handle requests
        # for /.well-known.
        location ^~ /.well-known {
            # The rules in this block are an adaptation of the rules
            # in .htaccess that concern /.well-known.

            location = /.well-known/carddav { return 301 /remote.php/dav/; }
            location = /.well-known/caldav  { return 301 /remote.php/dav/; }

            location /.well-known/acme-challenge    { try_files \$uri \$uri/ =404; }
            location /.well-known/pki-validation    { try_files \$uri \$uri/ =404; }

            # Let Nextcloud's API for /.well-known URIs handle all other
            # requests by passing them to the front-end controller.
            return 301 /index.php\$request_uri;
        }

        # Rules borrowed from .htaccess to hide certain paths from clients
        location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\$|/)  { return 404; }
        location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                { return 404; }

        # Ensure this block, which passes PHP files to the PHP process, is above the blocks
        # which handle static assets (as seen below). If this block is not declared first,
        # then Nginx will encounter an infinite rewriting loop when it prepends /index.php
        # to the URI, resulting in a HTTP 500 error response.
        location ~ \.php(?:\$|/) {
            # Required for legacy support
            rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy) /index.php\$request_uri;

            fastcgi_split_path_info ^(.+?\.php)(/.*)\$;
            set \$path_info \$fastcgi_path_info;

            try_files \$fastcgi_script_name =404;

            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
            fastcgi_param PATH_INFO \$path_info;
            #fastcgi_param HTTPS on;

            fastcgi_param modHeadersAvailable true;         # Avoid sending the security headers twice
            fastcgi_param front_controller_active true;     # Enable pretty urls
            fastcgi_pass php-handler;

            fastcgi_intercept_errors on;
            fastcgi_request_buffering off;
        }

        location ~ \.(?:css|js|svg|gif)\$ {
            try_files \$uri /index.php\$request_uri;
            expires 6M;         # Cache-Control policy borrowed from .htaccess
            access_log off;     # Optional: Don't log access to assets
        }

        location ~ \.woff2?\$ {
            try_files \$uri /index.php\$request_uri;
            expires 7d;         # Cache-Control policy borrowed from .htaccess
            access_log off;     # Optional: Don't log access to assets
        }

        # Rule borrowed from .htaccess
        location /remote {
            return 301 /remote.php\$request_uri;
        }

        location / {
            try_files \$uri \$uri/ /index.php\$request_uri;
        }
    }
}

EOFNG

  cat <<EOFNC > $HSHQ_STACKS_DIR/nextcloud/www.conf
[www]
user = www-data
group = www-data
listen = 127.0.0.1:9000 
pm = dynamic
pm.max_children = 200
pm.start_servers = 50
pm.min_spare_servers = 50
pm.max_spare_servers = 150

EOFNC

  cat <<EOFLD > $HSHQ_STACKS_DIR/nextcloud/ldap-app.conf
TLS_CERT /opt/ssl/nextcloud-app.crt
TLS_KEY /opt/ssl/nextcloud-app.key
TLS_CACERT /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
TLS_REQCERT demand
TLS_REQSAN demand
EOFLD

  cat <<EOFLC > $HSHQ_STACKS_DIR/nextcloud/ldap-cron.conf
TLS_CERT /opt/ssl/nextcloud-cron.crt
TLS_KEY /opt/ssl/nextcloud-cron.key
TLS_CACERT /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
TLS_REQCERT demand
TLS_REQSAN demand
EOFLC

  cat <<EOFLC > $HSHQ_STACKS_DIR/nextcloud/ldap-push.conf
TLS_CERT /opt/ssl/nextcloud-push.crt
TLS_KEY /opt/ssl/nextcloud-push.key
TLS_CACERT /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
TLS_REQCERT demand
TLS_REQSAN demand
EOFLC

  cat <<EOFNC > $HOME/nextcloud-compose-tmp.yml
version: '3.5'

services:
  nextcloud-db:
    image: $(getScriptImageByContainerName nextcloud-db)
    container_name: nextcloud-db
    hostname: nextcloud-db
    user: "${USERID}"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-nextcloud-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ${HSHQ_STACKS_DIR}/nextcloud/db:/var/lib/postgresql/data
    environment:
      - TZ=$TZ
      - POSTGRES_DB=$NEXTCLOUD_DATABASE_NAME
      - POSTGRES_USER=$NEXTCLOUD_DATABASE_USER
      - POSTGRES_PASSWORD=$NEXTCLOUD_DATABASE_USER_PASSWORD

  nextcloud-redis:
    image: $(getScriptImageByContainerName nextcloud-redis)
    container_name: nextcloud-redis
    hostname: nextcloud-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-nextcloud-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - TZ=$TZ
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_PASSWORD=$NEXTCLOUD_REDIS_PASSWORD
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
      - REDIS_TLS_ENABLED=no

  nextcloud-app:
    image: $(getScriptImageByContainerName nextcloud-app)
    container_name: nextcloud-app
    hostname: nextcloud-app
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ldap-net
      - dock-internalmail-net
      - int-nextcloud-net
      - dock-ext-net
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - $HSHQ_STACKS_DIR/nextcloud/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - $HSHQ_SSL_DIR/nextcloud-app.crt:/opt/ssl/nextcloud-app.crt
      - $HSHQ_SSL_DIR/nextcloud-app.key:/opt/ssl/nextcloud-app.key
      - $HSHQ_STACKS_DIR/nextcloud/ldap-app.conf:/etc/openldap/ldap.conf
      - v-nextcloud:/var/www/html
    environment:
      - TZ=$TZ
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=$NEXTCLOUD_DATABASE_NAME
      - POSTGRES_USER=$NEXTCLOUD_DATABASE_USER
      - POSTGRES_PASSWORD=$NEXTCLOUD_DATABASE_USER_PASSWORD
      - REDIS_HOST_PASSWORD=$NEXTCLOUD_REDIS_PASSWORD
      - REDIS_HOST=nextcloud-redis
      - NEXTCLOUD_ADMIN_USER=$NEXTCLOUD_ADMIN_USERNAME
      - NEXTCLOUD_ADMIN_PASSWORD=$NEXTCLOUD_ADMIN_PASSWORD
      - SMTP_MODE=smtp
      - SMTP_HOST=$SMTP_HOSTNAME
      - SMTP_PORT=$SMTP_HOSTPORT
      - SMTP_SECURE=tls
      - SMTP_AUTH=0
      - SMTP_AUTHTYPE=NONE
      - MAIL_FROM_ADDRESS=$EMAIL_SMTP_USERNAME
      - MAIL_DOMAIN=$HOMESERVER_DOMAIN
      - "NEXTCLOUD_TRUSTED_DOMAINS=nextcloud-web"
      - "TRUSTED_PROXIES=$TRUSTED_PROXIES"
      - NEXTCLOUD_DATA_DIR=/var/www/html/data

  nextcloud-cron:
    image: $(getScriptImageByContainerName nextcloud-cron)
    container_name: nextcloud-cron
    hostname: nextcloud-cron
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    entrypoint: /cron.sh
    networks:
      - dock-proxy-net
      - dock-ldap-net
      - dock-internalmail-net
      - int-nextcloud-net
      - dock-ext-net
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - $HSHQ_SSL_DIR/nextcloud-cron.crt:/opt/ssl/nextcloud-cron.crt
      - $HSHQ_SSL_DIR/nextcloud-cron.key:/opt/ssl/nextcloud-cron.key
      - $HSHQ_STACKS_DIR/nextcloud/ldap-cron.conf:/etc/openldap/ldap.conf
      - v-nextcloud:/var/www/html
    environment:
      - TZ=$TZ
      - POSTGRES_HOST=nextcloud-db
      - POSTGRES_DB=$NEXTCLOUD_DATABASE_NAME
      - POSTGRES_USER=$NEXTCLOUD_DATABASE_USER
      - POSTGRES_PASSWORD=$NEXTCLOUD_DATABASE_USER_PASSWORD
      - REDIS_HOST_PASSWORD=$NEXTCLOUD_REDIS_PASSWORD
      - REDIS_HOST=nextcloud-redis
      - NEXTCLOUD_ADMIN_USER=$NEXTCLOUD_ADMIN_USERNAME
      - NEXTCLOUD_ADMIN_PASSWORD=$NEXTCLOUD_ADMIN_PASSWORD
      - SMTP_MODE=smtp
      - SMTP_HOST=$SMTP_HOSTNAME
      - SMTP_PORT=$SMTP_HOSTPORT
      - SMTP_SECURE=tls
      - SMTP_AUTH=0
      - SMTP_AUTHTYPE=NONE
      - MAIL_FROM_ADDRESS=$EMAIL_SMTP_USERNAME
      - MAIL_DOMAIN=$HOMESERVER_DOMAIN
      - "NEXTCLOUD_TRUSTED_DOMAINS=nextcloud-web"
      - "TRUSTED_PROXIES=$TRUSTED_PROXIES"
      - NEXTCLOUD_DATA_DIR=/var/www/html/data

  nextcloud-imaginary:
    image: $(getScriptImageByContainerName nextcloud-imaginary)
    container_name: nextcloud-imaginary
    hostname: nextcloud-imaginary
    restart: unless-stopped
    command: -concurrency 50 -enable-url-source
    cap_add:
      - SYS_NICE
    networks:
      - int-nextcloud-net
      - dock-proxy-net
    depends_on:
      - nextcloud-app
    environment:
      - PORT=$NEXTCLOUD_IMAGINARY_PORT

  nextcloud-web:
    image: $(getScriptImageByContainerName nextcloud-web)
    container_name: nextcloud-web
    hostname: nextcloud-web
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - int-nextcloud-net
    depends_on:
      - nextcloud-app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-nextcloud:/var/www/html:ro
      - $HSHQ_STACKS_DIR/nextcloud/web/nginx.conf:/etc/nginx/nginx.conf
      - $HSHQ_SSL_DIR/nextcloud-web.crt:/etc/nginx/certs/cert.crt
      - $HSHQ_SSL_DIR/nextcloud-web.key:/etc/nginx/certs/cert.key
    environment:
      - TZ=$TZ

volumes:
  v-nextcloud:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $HSHQ_STACKS_DIR/nextcloud/app

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  int-nextcloud-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFNC

  cat <<EOFNC > $HOME/nextcloud-compose.yml
$STACK_VERSION_PREFIX nextcloud $(getScriptStackVersion nextcloud)
version: '3.5'

services:
  nextcloud-db:
    image: $(getScriptImageByContainerName nextcloud-db)
    container_name: nextcloud-db
    hostname: nextcloud-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-nextcloud-net
      - dock-dbs-net
    depends_on:
      - nextcloud-redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/nextcloud/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/nextcloud/dbexport:/dbexport
    environment:
      - TZ=$TZ
      - POSTGRES_DB=$NEXTCLOUD_DATABASE_NAME
      - POSTGRES_USER=$NEXTCLOUD_DATABASE_USER
      - POSTGRES_PASSWORD=$NEXTCLOUD_DATABASE_USER_PASSWORD
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.nextcloud-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.nextcloud-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.nextcloud-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.nextcloud-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.nextcloud-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.nextcloud-hourly-db.email-from=Nextcloud Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.nextcloud-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.nextcloud-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.nextcloud-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.nextcloud-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.nextcloud-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.nextcloud-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.nextcloud-monthly-db.email-from=Nextcloud Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.nextcloud-monthly-db.mail-only-on-error=false"

  nextcloud-redis:
    image: $(getScriptImageByContainerName nextcloud-redis)
    container_name: nextcloud-redis
    hostname: nextcloud-redis
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-nextcloud-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_PASSWORD=$NEXTCLOUD_REDIS_PASSWORD

  nextcloud-app:
    image: $(getScriptImageByContainerName nextcloud-app)
    container_name: nextcloud-app
    hostname: nextcloud-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ldap-net
      - dock-proxy-net
      - dock-internalmail-net
      - int-nextcloud-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/nextcloud/www.conf:/usr/local/etc/php-fpm.d/www.conf
      - \${HSHQ_SSL_DIR}/nextcloud-app.crt:/opt/ssl/nextcloud-app.crt
      - \${HSHQ_SSL_DIR}/nextcloud-app.key:/opt/ssl/nextcloud-app.key
      - \${HSHQ_STACKS_DIR}/nextcloud/ldap-app.conf:/etc/openldap/ldap.conf
      - v-nextcloud:/var/www/html
    depends_on:
      - nextcloud-db
      - nextcloud-redis

  nextcloud-cron:
    image: $(getScriptImageByContainerName nextcloud-cron)
    container_name: nextcloud-cron
    hostname: nextcloud-cron
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    entrypoint: /cron.sh
    networks:
      - dock-ldap-net
      - dock-proxy-net
      - dock-internalmail-net
      - int-nextcloud-net
      - dock-ext-net
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/nextcloud-cron.crt:/opt/ssl/nextcloud-cron.crt
      - \${HSHQ_SSL_DIR}/nextcloud-cron.key:/opt/ssl/nextcloud-cron.key
      - \${HSHQ_STACKS_DIR}/nextcloud/ldap-cron.conf:/etc/openldap/ldap.conf
      - v-nextcloud:/var/www/html

  nextcloud-push:
    image: $(getScriptImageByContainerName nextcloud-push)
    container_name: nextcloud-push
    hostname: nextcloud-push
    restart: unless-stopped
    entrypoint: /var/www/html/custom_apps/notify_push/bin/x86_64/notify_push /var/www/html/config/config.php
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ldap-net
      - dock-proxy-net
      - dock-internalmail-net
      - int-nextcloud-net
      - dock-ext-net
    depends_on:
      - nextcloud-db
      - nextcloud-redis
      - nextcloud-app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/nextcloud-push.crt:/opt/ssl/nextcloud-push.crt
      - \${HSHQ_SSL_DIR}/nextcloud-push.key:/opt/ssl/nextcloud-push.key
      - \${HSHQ_STACKS_DIR}/nextcloud/ldap-push.conf:/etc/openldap/ldap.conf
      - v-nextcloud:/var/www/html
    environment:
      - PORT=$NEXTCLOUD_PUSH_PORT
      - NEXTCLOUD_URL=http://nextcloud-web

  nextcloud-imaginary:
    image: $(getScriptImageByContainerName nextcloud-imaginary)
    container_name: nextcloud-imaginary
    hostname: nextcloud-imaginary
    restart: unless-stopped
    command: -concurrency 50 -enable-url-source
    cap_add:
      - SYS_NICE
    networks:
      - int-nextcloud-net
      - dock-proxy-net
    depends_on:
      - nextcloud-app
    environment:
      - PORT=$NEXTCLOUD_IMAGINARY_PORT

  nextcloud-web:
    image: $(getScriptImageByContainerName nextcloud-web)
    container_name: nextcloud-web
    hostname: nextcloud-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - int-nextcloud-net
    depends_on:
      - nextcloud-app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-nextcloud:/var/www/html:ro
      - \${HSHQ_STACKS_DIR}/nextcloud/web/nginx.conf:/etc/nginx/nginx.conf
      - \${HSHQ_SSL_DIR}/nextcloud-web.crt:/etc/nginx/certs/cert.crt
      - \${HSHQ_SSL_DIR}/nextcloud-web.key:/etc/nginx/certs/cert.key

volumes:
  v-nextcloud:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/nextcloud/app

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-nextcloud-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFNC

  cat <<EOFNC > $HOME/nextcloud.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
REDIS_TLS_ENABLED=no
EOFNC
}

function performUpdateNextcloud()
{
  perform_stack_name=nextcloud
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,nextcloud:27.1.3-fpm-alpine,nextcloud/aio-imaginary:latest,nginx:1.23.2-alpine
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="nextcloud:27.1.3-fpm-alpine,nextcloud:27.1.7-fpm-alpine"
      image_update_map[3]="nextcloud/aio-imaginary:latest,nextcloud/aio-imaginary:latest"
      image_update_map[4]="nginx:1.23.2-alpine,nginx:1.25.3-alpine"
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,nextcloud:27.1.5-fpm-alpine,nextcloud/aio-imaginary:latest,nginx:1.25.3-alpine
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="nextcloud:27.1.5-fpm-alpine,nextcloud:27.1.7-fpm-alpine"
      image_update_map[3]="nextcloud/aio-imaginary:latest,nextcloud/aio-imaginary:latest"
      image_update_map[4]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,nextcloud:27.1.6-fpm-alpine,nextcloud/aio-imaginary:latest,nginx:1.25.3-alpine
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="nextcloud:27.1.6-fpm-alpine,nextcloud:27.1.7-fpm-alpine"
      image_update_map[3]="nextcloud/aio-imaginary:latest,nextcloud/aio-imaginary:latest"
      image_update_map[4]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,nextcloud:27.1.7-fpm-alpine,nextcloud/aio-imaginary:latest,nginx:1.25.3-alpine
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="nextcloud:27.1.7-fpm-alpine,nextcloud:27.1.7-fpm-alpine"
      image_update_map[3]="nextcloud/aio-imaginary:latest,nextcloud/aio-imaginary:latest"
      image_update_map[4]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Jitsi
function installJitsi()
{
  set +e
  is_integrate_hshq=$1
  # Remember to check if directory exists
  checkDeleteStackAndDirectory jitsi "Jitsi"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_JITSI_JICOFO
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_JITSI_JVB
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_JITSI_PROSODY
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_JITSI_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/jitsi
  outputConfigJitsi
  generateCert jitsi-web jitsi-web
  installStack jitsi jitsi-web "starting services" $HOME/jitsi.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Jitsi installed, sleeping 5 seconds..."
  sleep 5

  inner_block=""
  inner_block=$inner_block">>https://$SUB_JITSI.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://jitsi-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_JITSI $MANAGETLS_JITSI "$is_integrate_hshq" $NETDEFAULT_JITSI "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll jitsi "$FMLNAME_JITSI" $USERTYPE_JITSI "https://$SUB_JITSI.$HOMESERVER_DOMAIN" "jitsi.png"
    restartAllCaddyContainers
  fi
}

function outputConfigJitsi()
{
  cat <<EOFJT > $HOME/jitsi-compose.yml
$STACK_VERSION_PREFIX jitsi $(getScriptStackVersion jitsi)
version: '3.5'

services:
  jitsi-web:
    image: $(getScriptImageByContainerName jitsi-web)
    container_name: jitsi-web
    hostname: jitsi-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-jitsi-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/jitsi/web:/config:Z
      - \${HSHQ_STACKS_DIR}/jitsi/web/crontabs:/var/spool/cron/crontabs:Z
      - \${HSHQ_STACKS_DIR}/jitsi/transcripts:/usr/share/jitsi-meet/transcripts:Z
      - \${HSHQ_SSL_DIR}/jitsi-web.crt:/config/keys/cert.crt
      - \${HSHQ_SSL_DIR}/jitsi-web.key:/config/keys/cert.key

  jitsi-prosody:
    image: $(getScriptImageByContainerName jitsi-prosody)
    container_name: jitsi-prosody
    hostname: jitsi-prosody
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      int-jitsi-net:
        aliases:
          - xmpp.meet.jitsi
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/jitsi/prosody/config:/config:Z
      - \${HSHQ_STACKS_DIR}/jitsi/prosody/prosody-plugins-custom:/prosody-plugins-custom:Z

  jitsi-jicofo:
    image: $(getScriptImageByContainerName jitsi-jicofo)
    container_name: jitsi-jicofo
    hostname: jitsi-jicofo
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-jitsi-net
    depends_on:
      - jitsi-prosody
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/jitsi/jicofo:/config:Z

  jitsi-jvb:
    image: $(getScriptImageByContainerName jitsi-jvb)
    container_name: jitsi-jvb
    hostname: jitsi-jvb
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - jitsi-prosody
    networks:
      - int-jitsi-net
      - dock-privateip-net
    ports:
      - '10000:10000/udp'
      - '4443:4443'
      - '127.0.0.1:8020:8020'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/jitsi/jvb:/config:Z

networks:
  int-jitsi-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
EOFJT

  cat <<EOFJT > $HOME/jitsi.env
JVB_COLIBRI_PORT=8020
PUBLIC_URL=https://$SUB_JITSI.$HOMESERVER_DOMAIN
JVB_ADVERTISE_IPS=\${HOMESERVER_HOST_IP},${JITSI_ADVERTISE_IPS}
DOCKER_HOST_ADDRESS=\${HOMESERVER_HOST_IP}
ENABLE_LETSENCRYPT=0
ENABLE_AUTH=0
JICOFO_AUTH_PASSWORD=$(openssl rand -hex 16)
JVB_AUTH_PASSWORD=$(openssl rand -hex 16)
JIGASI_XMPP_PASSWORD=$(openssl rand -hex 16)
JIBRI_RECORDER_PASSWORD=$(openssl rand -hex 16)
JIBRI_XMPP_PASSWORD=$(openssl rand -hex 16)
ENABLE_P2P=false
JVB_STUN_SERVERS=none
JVB_DISABLE_STUN=true
EOFJT

}

function performUpdateJitsi()
{
  perform_stack_name=jitsi
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=jitsi/jicofo:stable-8719,jitsi/jvb:stable-8719,jitsi/prosody:stable-8719,jitsi/web:stable-8719
      image_update_map[0]="jitsi/jicofo:stable-8719,jitsi/jicofo:stable-9258"
      image_update_map[1]="jitsi/jvb:stable-8719,jitsi/jvb:stable-9258"
      image_update_map[2]="jitsi/prosody:stable-8719,jitsi/prosody:stable-9258"
      image_update_map[3]="jitsi/web:stable-8719,jitsi/web:stable-9258"
    ;;
    2)
      newVer=v4
      curImageList=jitsi/jicofo:stable-9111,jitsi/jvb:stable-9111,jitsi/prosody:stable-9111,jitsi/web:stable-9111
      image_update_map[0]="jitsi/jicofo:stable-9111,jitsi/jicofo:stable-9258"
      image_update_map[1]="jitsi/jvb:stable-9111,jitsi/jvb:stable-9258"
      image_update_map[2]="jitsi/prosody:stable-9111,jitsi/prosody:stable-9258"
      image_update_map[3]="jitsi/web:stable-9111,jitsi/web:stable-9258"
    ;;
    3)
      newVer=v4
      curImageList=jitsi/jicofo:stable-9220,jitsi/jvb:stable-9220,jitsi/prosody:stable-9220,jitsi/web:stable-9220
      image_update_map[0]="jitsi/jicofo:stable-9220,jitsi/jicofo:stable-9258"
      image_update_map[1]="jitsi/jvb:stable-9220,jitsi/jvb:stable-9258"
      image_update_map[2]="jitsi/prosody:stable-9220,jitsi/prosody:stable-9258"
      image_update_map[3]="jitsi/web:stable-9220,jitsi/web:stable-9258"
    ;;
    4)
      newVer=v4
      curImageList=jitsi/jicofo:stable-9258,jitsi/jvb:stable-9258,jitsi/prosody:stable-9258,jitsi/web:stable-9258
      image_update_map[0]="jitsi/jicofo:stable-9258,jitsi/jicofo:stable-9258"
      image_update_map[1]="jitsi/jvb:stable-9258,jitsi/jvb:stable-9258"
      image_update_map[2]="jitsi/prosody:stable-9258,jitsi/prosody:stable-9258"
      image_update_map[3]="jitsi/web:stable-9258,jitsi/web:stable-9258"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Matrix
function installMatrix()
{
  set +e
  is_integrate_hshq=$1
  # Only install if directory does not exist
  checkDeleteStackAndDirectory matrix "Matrix"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_MATRIX_ELEMENT
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_MATRIX_SYNAPSE
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/matrix
  mkdir $HSHQ_STACKS_DIR/matrix/db
  mkdir $HSHQ_STACKS_DIR/matrix/dbexport
  mkdir $HSHQ_STACKS_DIR/matrix/synapse
  mkdir $HSHQ_STACKS_DIR/matrix/element
  chmod 777 $HSHQ_STACKS_DIR/matrix/dbexport

  initServicesCredentials
  if [ -z "$MATRIX_REDIS_PASSWORD" ]; then
    MATRIX_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar MATRIX_REDIS_PASSWORD $MATRIX_REDIS_PASSWORD
  fi
  if [ -z "$MATRIX_SYNAPSE_REGISTRATION_SECRET" ]; then
    MATRIX_SYNAPSE_REGISTRATION_SECRET=$(pwgen -c -n 64 1)
    updateConfigVar MATRIX_SYNAPSE_REGISTRATION_SECRET $MATRIX_SYNAPSE_REGISTRATION_SECRET
  fi
  if [ -z "$MATRIX_SYNAPSE_MACAROON_SECRET" ]; then
    MATRIX_SYNAPSE_MACAROON_SECRET=$(pwgen -c -n 64 1)
    updateConfigVar MATRIX_SYNAPSE_MACAROON_SECRET $MATRIX_SYNAPSE_MACAROON_SECRET
  fi
  if [ -z "$MATRIX_SYNAPSE_FORM_SECRET" ]; then
    MATRIX_SYNAPSE_FORM_SECRET=$(pwgen -c -n 64 1)
    updateConfigVar MATRIX_SYNAPSE_FORM_SECRET $MATRIX_SYNAPSE_FORM_SECRET
  fi

  outputConfigMatrix
  generateCert matrix-synapse matrix-synapse
  installStack matrix matrix-synapse "Starting synapse with args" $HOME/matrix.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Matrix installed, sleeping 5 seconds..."
  sleep 5

  inner_block=""
  inner_block=$inner_block">>https://$SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWCORS\n"
  inner_block=$inner_block">>>>encode zstd gzip\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy \"/_matrix/*\" https://matrix-synapse:8448 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>>>reverse_proxy \"/_synapse/client/*\" https://matrix-synapse:8448 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_MATRIX_SYNAPSE $MANAGETLS_MATRIX_SYNAPSE "$is_integrate_hshq" $NETDEFAULT_MATRIX_SYNAPSE "$inner_block"
  inner_block=""
  inner_block=$inner_block">>https://$SUB_MATRIX_ELEMENT_PRIVATE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>encode zstd gzip\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://matrix-element-private {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_MATRIX_ELEMENT_PRIVATE $MANAGETLS_MATRIX_ELEMENT_PRIVATE "$is_integrate_hshq" $NETDEFAULT_MATRIX_ELEMENT_PRIVATE "$inner_block"
  inner_block=""
  inner_block=$inner_block">>https://$SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>encode zstd gzip\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://matrix-element-public {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_MATRIX_ELEMENT_PUBLIC $MANAGETLS_MATRIX_ELEMENT_PUBLIC "$is_integrate_hshq" $NETDEFAULT_MATRIX_ELEMENT_PUBLIC "$inner_block"

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll matrix "$FMLNAME_MATRIX_ELEMENT_PRIVATE" $USERTYPE_MATRIX_ELEMENT_PRIVATE "https://$SUB_MATRIX_ELEMENT_PRIVATE.$HOMESERVER_DOMAIN" "element-private.png"
    insertEnableSvcAll matrix "$FMLNAME_MATRIX_ELEMENT_PUBLIC" $USERTYPE_MATRIX_ELEMENT_PUBLIC "https://$SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN" "element-public.png"
    restartAllCaddyContainers
  fi
}

function outputConfigMatrix()
{
  cat <<EOFJT > $HOME/matrix-compose.yml
$STACK_VERSION_PREFIX matrix $(getScriptStackVersion matrix)
version: '3.5'

services:
  matrix-db:
    image: $(getScriptImageByContainerName matrix-db)
    container_name: matrix-db
    hostname: matrix-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-matrix-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/matrix/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/matrix/dbexport:/dbexport
    environment:
      - POSTGRES_DB=$MATRIX_DATABASE_NAME
      - POSTGRES_USER=$MATRIX_DATABASE_USER
      - POSTGRES_PASSWORD=$MATRIX_DATABASE_USER_PASSWORD
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.matrix-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.matrix-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.matrix-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.matrix-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.matrix-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.matrix-hourly-db.email-from=Matrix Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.matrix-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.matrix-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.matrix-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.matrix-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.matrix-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.matrix-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.matrix-monthly-db.email-from=Matrix Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.matrix-monthly-db.mail-only-on-error=false"

  matrix-synapse:
    image: $(getScriptImageByContainerName matrix-synapse)
    container_name: matrix-synapse
    hostname: matrix-synapse
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - matrix-db
      - matrix-redis
    networks:
      - int-matrix-net
      - dock-ldap-net
      - dock-ext-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/matrix-synapse.crt:/data/matrix-synapse.crt:ro
      - \${HSHQ_SSL_DIR}/matrix-synapse.key:/data/matrix-synapse.key:ro
      - \${HSHQ_STACKS_DIR}/matrix/synapse:/data

  matrix-redis:
    image: $(getScriptImageByContainerName matrix-redis)
    container_name: matrix-redis
    hostname: matrix-redis
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-matrix-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - REDIS_PASSWORD=$MATRIX_REDIS_PASSWORD

  matrix-element-private:
    image: $(getScriptImageByContainerName matrix-element-private)
    container_name: matrix-element-private
    hostname: matrix-element-private
    restart: unless-stopped
    env_file: stack.env
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/matrix/element/element-private-config.json:/app/config.json

  matrix-element-public:
    image: $(getScriptImageByContainerName matrix-element-public)
    container_name: matrix-element-public
    hostname: matrix-element-public
    restart: unless-stopped
    env_file: stack.env
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/matrix/element/element-public-config.json:/app/config.json

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-matrix-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFJT

  cat <<EOFJT > $HOME/matrix.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
SYNAPSE_CONFIG_DIR=/data
SYNAPSE_CONFIG_PATH=/data/homeserver.yaml
REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
REDIS_TLS_ENABLED=no
EOFJT

  cat <<EOFJT > $HSHQ_STACKS_DIR/matrix/synapse/homeserver.yaml
server_name: $HOMESERVER_DOMAIN
pid_file: /data/homeserver.pid
web_client_location: https://$SUB_MATRIX_ELEMENT_PUBLIC.$HOMESERVER_DOMAIN/
public_baseurl: https://$SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN/
limit_profile_requests_to_users_who_share_rooms: true
include_profile_data_on_invite: false
allow_public_rooms_over_federation: false
default_room_version: "9"
auto_join_rooms:
  - "#Main:$HOMESERVER_DOMAIN"
listeners:
  - port: 8008
    tls: false
    type: http
    x_forwarded: true
    resources:
      - names: [client, federation]
        compress: false
  - port: 8448
    tls: true
    type: http
    x_forwarded: true
    resources:
      - names: [client, federation]
        compress: false
ip_range_whitelist:
  - '10.0.0.0/8'
max_avatar_size: 10M
redaction_retention_period: 1d
tls_certificate_path: /data/matrix-synapse.crt
tls_private_key_path: /data/matrix-synapse.key
#federation_domain_whitelist:
#  - $HOMESERVER_DOMAIN
allow_profile_lookup_over_federation: false
allow_device_name_lookup_over_federation: false
database:
  name: psycopg2
  txn_limit: 10000
  args:
    user: $MATRIX_DATABASE_USER
    password: $MATRIX_DATABASE_USER_PASSWORD
    database: $MATRIX_DATABASE_NAME
    host: matrix-db
    port: 5432
    cp_min: 5
    cp_max: 10
log_config: "/data/${HOMESERVER_DOMAIN}.log.config"
enable_media_repo: true
media_store_path: "/data/media_store"
max_upload_size: 512M
dynamic_thumbnails: true
thumbnail_sizes:
  - width: 32
    height: 32
    method: crop
  - width: 96
    height: 96
    method: crop
  - width: 320
    height: 240
    method: scale
  - width: 640
    height: 480
    method: scale
  - width: 800
    height: 600
    method: scale
url_preview_accept_language:
   - en-US;q=0.9
enable_registration: false
session_lifetime: 720h
registration_shared_secret: "$MATRIX_SYNAPSE_REGISTRATION_SECRET"
macaroon_secret_key: "$MATRIX_SYNAPSE_MACAROON_SECRET"
form_secret: "$MATRIX_SYNAPSE_FORM_SECRET"
allow_guest_access: false
enable_set_displayname: true
enable_set_avatar_url: true
enable_3pid_changes: false
enable_metrics: false
report_stats: false
signing_key_path: "/data/${HOMESERVER_DOMAIN}.signing.key"
trusted_key_servers:
  - server_name: "matrix.org"
encryption_enabled_by_default_for_room_type: off
enable_group_creation: true
group_creation_prefix: "unofficial_"
password_providers:
 - module: "ldap_auth_provider.LdapAuthProvider"
   config:
     enabled: true
     uri: "ldap://ldapserver:389"
     start_tls: true
     base: "ou=people,$LDAP_BASE_DN"
     attributes:
        uid: "uid"
        mail: "mail"
        name: "givenName"
     bind_dn: $LDAP_READONLY_USER_BIND_DN 
     bind_password: $LDAP_READONLY_USER_PASSWORD
     filter: "(&(objectClass=person)(memberOf=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN))"
     tls_options:
       validate: false
       local_certificate_file: /data/matrix-synapse.crt
       local_private_key_file: /data/matrix-synapse.key
password_config:
   enabled: true
   localdb_enabled: false
user_directory:
    enabled: true
    search_all_users: true
    prefer_local_users: true
enable_room_list_search: true
redis:
  enabled: true
  host: matrix-redis
  port: 6379
  password: $MATRIX_REDIS_PASSWORD
admin_contact: 'mailto:$EMAIL_ADMIN_EMAIL_ADDRESS'
email:
  smtp_host: $SMTP_HOSTNAME
  smtp_port: SMTP_HOSTPORT
  require_transport_security: true
  enable_tls: true
  notif_from: "Matrix Homeserver <$EMAIL_ADMIN_EMAIL_ADDRESS>"
  app_name: "$HOMESERVER_NAME Secure Communications"
  enable_notifs: true
  notif_for_new_users: true
  #client_base_url: "http://localhost/riot"
  #validation_token_lifetime: 15m
  #invite_client_location: https://app.element.io
  #subjects:
    #message_from_person_in_room: "[%(app)s] You have a message on %(app)s from %(person)s in the %(room)s room..."
    #message_from_person: "[%(app)s] You have a message on %(app)s from %(person)s..."
    #messages_from_person: "[%(app)s] You have messages on %(app)s from %(person)s..."
    #messages_in_room: "[%(app)s] You have messages on %(app)s in the %(room)s room..."
    #messages_in_room_and_others: "[%(app)s] You have messages on %(app)s in the %(room)s room and others..."
    #messages_from_person_and_others: "[%(app)s] You have messages on %(app)s from %(person)s and others..."
    #invite_from_person_to_room: "[%(app)s] %(person)s has invited you to join the %(room)s room on %(app)s..."
    #invite_from_person: "[%(app)s] %(person)s has invited you to chat on %(app)s..."
    #password_reset: "[%(server_name)s] Password reset"
    #email_validation: "[%(server_name)s] Validate your email"
EOFJT

  cat <<EOFJT > $HSHQ_STACKS_DIR/matrix/synapse/${HOMESERVER_DOMAIN}.log.config
version: 1
formatters:
  precise:
    format: '%(asctime)s - %(name)s - %(lineno)d - %(levelname)s - %(request)s - %(message)s'
handlers:
  console:
    class: logging.StreamHandler
    formatter: precise
loggers:
    synapse.storage.SQL:
        level: INFO
root:
    level: INFO
    handlers: [console]
disable_existing_loggers: false
EOFJT

  outputMatrixElementJSONConfig "$SUB_JITSI.$HOMESERVER_DOMAIN" $HSHQ_STACKS_DIR/matrix/element/element-private-config.json
  outputMatrixElementJSONConfig "meet.element.io" $HSHQ_STACKS_DIR/matrix/element/element-public-config.json
}

function performUpdateMatrix()
{
  perform_stack_name=matrix
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=postgres:15.0-bullseye,matrixdotorg/synapse:v1.90.0,bitnami/redis:7.0.5,vectorim/element-web:v1.11.40
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="matrixdotorg/synapse:v1.90.0,matrixdotorg/synapse:v1.102.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[3]="vectorim/element-web:v1.11.40,vectorim/element-web:v1.11.61"
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,matrixdotorg/synapse:v1.98.0,bitnami/redis:7.0.5,vectorim/element-web:v1.11.52
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="matrixdotorg/synapse:v1.98.0,matrixdotorg/synapse:v1.102.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[3]="vectorim/element-web:v1.11.52,vectorim/element-web:v1.11.61"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,matrixdotorg/synapse:v1.100.0,bitnami/redis:7.0.5,vectorim/element-web:v1.11.57
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="matrixdotorg/synapse:v1.100.0,matrixdotorg/synapse:v1.102.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[3]="vectorim/element-web:v1.11.57,vectorim/element-web:v1.11.61"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,matrixdotorg/synapse:v1.102.0,bitnami/redis:7.0.5,vectorim/element-web:v1.11.61
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="matrixdotorg/synapse:v1.102.0,matrixdotorg/synapse:v1.102.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[3]="vectorim/element-web:v1.11.61,vectorim/element-web:v1.11.61"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function outputMatrixElementJSONConfig()
{
  jitsi_url=$1
  output_file=$2
  cat <<EOFEL > $output_file
{
    "default_server_config": {
        "m.homeserver": {
            "base_url": "https://$SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN",
            "server_name": "$HOMESERVER_DOMAIN"
        },
        "m.identity_server": {
            "base_url": "https://vector.im"
        }
    },
    "disable_custom_urls": true,
    "disable_guests": true,
    "disable_login_language_selector": true,
    "disable_3pid_login": true,
	"brand": "Element",
    "integrations_ui_url": "https://scalar.vector.im/",
    "integrations_rest_url": "https://scalar.vector.im/api",
    "integrations_widgets_urls": [
        "https://scalar.vector.im/_matrix/integrations/v1",
        "https://scalar.vector.im/api",
        "https://scalar-staging.vector.im/_matrix/integrations/v1",
        "https://scalar-staging.vector.im/api",
        "https://scalar-staging.riot.im/scalar/api"
    ],
    "hosting_signup_link": "https://element.io/matrix-services?utm_source=element-web&utm_medium=web",
    "bug_report_endpoint_url": "https://element.io/bugreports/submit",
    "defaultCountryCode": "US",
    "uisi_autorageshake_app": "element-auto-uisi",
    "showLabsSettings": true,
    "jitsi": {
        "preferred_domain": "$jitsi_url"
     },
    "piwik": {
        "url": "https://piwik.riot.im/",
        "siteId": 1,
        "policyUrl": "https://element.io/cookie-policy"
    },
    "roomDirectory": {
        "servers": [
            "$HOMESERVER_DOMAIN"
        ]
    },
    "enable_presence_by_hs_url": {
        "https://matrix.org": false,
        "https://matrix-client.matrix.org": false
    },
    "terms_and_conditions_links": [
        {
            "url": "https://element.io/privacy",
            "text": "Privacy Policy"
        },
        {
            "url": "https://element.io/cookie-policy",
            "text": "Cookie Policy"
        }
    ],
    "hostSignup": {
      "brand": "$HOMESERVER_NAME",
      "cookiePolicyUrl": "https://element.io/cookie-policy",
      "domains": [
          "matrix.org"
      ],
      "privacyPolicyUrl": "https://element.io/privacy",
      "termsOfServiceUrl": "https://element.io/terms-of-service",
      "url": "https://ems.element.io/element-home/in-app-loader"
    },
    "sentry": {
        "dsn": "https://029a0eb289f942508ae0fb17935bd8c5@sentry.matrix.org/6",
        "environment": "develop"
    },
    "posthog": {
        "projectApiKey": "phc_Jzsm6DTm6V2705zeU5dcNvQDlonOR68XvX2sh1sEOHO",
        "apiHost": "https://posthog.hss.element.io"
    },
    "features": {
        "feature_spotlight": true,
        "feature_new_spinner": "labs",
        "feature_pinning": "labs",
        "feature_custom_status": "labs",
        "feature_custom_tags": "labs",
        "feature_state_counters": "labs"
      },
      "default_federate": false,
      "default_theme": "dark",
    "map_style_url": "https://api.maptiler.com/maps/streets/style.json?key=fU3vlMsMn4Jb6dnEIFsx"
}
EOFEL

}

# Wikijs
function installWikijs()
{
  set +e
  is_integrate_hshq=$1
  # Test if directory exists
  checkDeleteStackAndDirectory wikijs "Wikijs"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_WIKIJS
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/wikijs
  mkdir $HSHQ_STACKS_DIR/wikijs/db
  mkdir $HSHQ_STACKS_DIR/wikijs/dbexport
  mkdir $HSHQ_STACKS_DIR/wikijs/web
  chmod 777 $HSHQ_STACKS_DIR/wikijs/dbexport
  initServicesCredentials
  outputConfigWikijs
  generateCert wikijs-web wikijs-web
  installStack wikijs wikijs-web "HTTP Server on port" $HOME/wikijs.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sudo mv $HSHQ_STACKS_DIR/wikijs/config.yml $HSHQ_STACKS_DIR/wikijs/web/config.yml
  sleep 3
  docker container restart wikijs-web
  echo "Wikijs installed, sleeping 3 seconds..."
  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_WIKIJS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://wikijs-web:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_WIKIJS $MANAGETLS_WIKIJS "$is_integrate_hshq" $NETDEFAULT_WIKIJS "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll wikijs "$FMLNAME_WIKIJS" $USERTYPE_WIKIJS "https://$SUB_WIKIJS.$HOMESERVER_DOMAIN" "wikijs.png"
    restartAllCaddyContainers
  fi
}

function outputConfigWikijs()
{
  cat <<EOFWJ > $HOME/wikijs-compose.yml
$STACK_VERSION_PREFIX wikijs $(getScriptStackVersion wikijs)
version: '3.5'

services:
  wikijs-db:
    image: $(getScriptImageByContainerName wikijs-db)
    container_name: wikijs-db
    hostname: wikijs-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-wikijs-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/wikijs/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/wikijs/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.wikijs-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.wikijs-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.wikijs-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.wikijs-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.wikijs-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.wikijs-hourly-db.email-from=Wikijs Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.wikijs-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.wikijs-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.wikijs-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.wikijs-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.wikijs-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.wikijs-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.wikijs-monthly-db.email-from=Wikijs Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.wikijs-monthly-db.mail-only-on-error=false"

  wikijs-web:
    image: $(getScriptImageByContainerName wikijs-web)
    container_name: wikijs-web
    hostname: wikijs-web
    depends_on:
      - wikijs-db
    restart: unless-stopped
    env_file: stack.env
    networks:
      - int-wikijs-net
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_SSL_DIR}/wikijs-web.crt:/certs/wikijs-web.crt
      - \${HSHQ_SSL_DIR}/wikijs-web.key:/certs/wikijs-web.key
      - v-wikijs-web:/wiki/data/content

volumes:
  v-wikijs-web:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wikijs/web

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-wikijs-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFWJ

  cat <<EOFWJ > $HOME/wikijs.env
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$WIKIJS_DATABASE_NAME
POSTGRES_USER=$WIKIJS_DATABASE_USER
POSTGRES_PASSWORD=$WIKIJS_DATABASE_USER_PASSWORD
DB_TYPE=postgres
DB_HOST=wikijs-db
DB_NAME=$WIKIJS_DATABASE_NAME
DB_PORT=5432
DB_USER=$WIKIJS_DATABASE_USER
DB_PASS=$WIKIJS_DATABASE_USER_PASSWORD
EOFWJ

  cat <<EOFWJ > $HSHQ_STACKS_DIR/wikijs/config.yml
port: 3000
bindIP: 0.0.0.0
db:
  type: \$(DB_TYPE)
  host: '\$(DB_HOST)'
  port: \$(DB_PORT)
  user: '\$(DB_USER)'
  pass: '\$(DB_PASS)'
  db: \$(DB_NAME)
  storage: \$(DB_FILEPATH)
  ssl: \$(DB_SSL)
ssl:
  enabled: true
  port: 3443
  provider: custom
  format: pem
  key: /certs/wikijs-web.key
  cert: /certs/wikijs-web.crt
  passphrase: null
  dhparam: null

logLevel: \$(LOG_LEVEL:info)
logFormat: \$(LOG_FORMAT:default)
ha: \$(HA_ACTIVE)
EOFWJ

}

function performUpdateWikijs()
{
  perform_stack_name=wikijs
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=postgres:15.0-bullseye,requarks/wiki:2.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="requarks/wiki:2.5,requarks/wiki:2.5.301"
    ;;
    2)
      newVer=v2
      curImageList=postgres:15.0-bullseye,requarks/wiki:2.5.301
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="requarks/wiki:2.5.301,requarks/wiki:2.5.301"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Duplicati
function installDuplicati()
{
  set +e
  is_integrate_hshq=$1
  # Evaluate whether directory exists
  checkDeleteStackAndDirectory duplicati "Duplicati"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: Duplicati directory exists"
    exit 1
  fi
  pullImage $IMG_DUPLICATI
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain Duplicati docker image"
    exit 1
  fi
  set -e
  domain_noext=$(getDomainNoTLD $HOMESERVER_DOMAIN)
  mkdir $HSHQ_STACKS_DIR/duplicati
  mkdir $HSHQ_STACKS_DIR/duplicati/config
  mkdir $HSHQ_NONBACKUP_DIR/duplicati
  mkdir $HSHQ_NONBACKUP_DIR/duplicati/restore
  initServicesCredentials
  echo "Installing Duplicati..."
  outputConfigDuplicati
  generateCert duplicati duplicati
  installStack duplicati duplicati "\[ls.io-init\] done" $HOME/duplicati.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing Duplicati"
    exit $retval
  fi
  echo "Duplicati installed, sleeping 5 seconds..."
  sleep 5
  db_name=$HSHQ_STACKS_DIR/duplicati/config/Duplicati-server.sqlite
  sudo sqlite3 $db_name "INSERT INTO Option(BackupID,Filter,Name,Value) VALUES(-1,'','--accept-any-ssl-certificate','true');"
  sudo sqlite3 $db_name "INSERT INTO Option(BackupID,Filter,Name,Value) VALUES(-1,'','--send-mail-from','Duplicati $HSHQ_ADMIN_NAME<$EMAIL_ADMIN_EMAIL_ADDRESS>');"
  sudo sqlite3 $db_name "INSERT INTO Option(BackupID,Filter,Name,Value) VALUES(-1,'','--send-mail-to','$EMAIL_ADMIN_EMAIL_ADDRESS');"
  sudo sqlite3 $db_name "INSERT INTO Option(BackupID,Filter,Name,Value) VALUES(-1,'','--send-mail-url','smtp://$SMTP_HOSTNAME:$SMTP_HOSTPORT');"
  sudo sqlite3 $db_name "INSERT INTO Option(BackupID,Filter,Name,Value) VALUES(-1,'','--send-mail-level','all');"
  docker container restart duplicati

  inner_block=""
  inner_block=$inner_block">>https://$SUB_DUPLICATI.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://duplicati:8200 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_DUPLICATI $MANAGETLS_DUPLICATI "$is_integrate_hshq" $NETDEFAULT_DUPLICATI "$inner_block"
}

function outputConfigDuplicati()
{
  cat <<EOFDP > $HOME/duplicati-compose.yml
$STACK_VERSION_PREFIX duplicati $(getScriptStackVersion duplicati)
version: '3.5'

services:
  duplicati:
    image: $(getScriptImageByContainerName duplicati)
    container_name: duplicati
    hostname: duplicati
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/duplicati/config:/config
      - \${HSHQ_NONBACKUP_DIR}/duplicati/restore:/restore
      - \${HSHQ_BACKUP_DIR}:/backups
      - \${HSHQ_DATA_DIR}:/source

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
EOFDP

  cat <<EOFDP > $HOME/duplicati.env
PUID=0
PGID=0
EOFDP
}

function performUpdateDuplicati()
{
  perform_stack_name=duplicati
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=linuxserver/duplicati:2.0.7
      image_update_map[0]="linuxserver/duplicati:2.0.7,linuxserver/duplicati:2.0.7"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Mastodon
function installMastodon()
{
  set +e
  is_integrate_hshq=$1
  # Test if directory exists
  checkDeleteStackAndDirectory mastodon "Mastodon"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  set -e
  pullImage $IMG_MASTODON_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_MASTODON_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/mastodon
  mkdir $HSHQ_STACKS_DIR/mastodon/db
  mkdir $HSHQ_STACKS_DIR/mastodon/dbexport
  mkdir $HSHQ_STACKS_DIR/mastodon/elasticsearch
  mkdir $HSHQ_STACKS_DIR/mastodon/system
  mkdir $HSHQ_STACKS_DIR/mastodon/web
  sudo chown 991:991 $HSHQ_STACKS_DIR/mastodon/system
  chmod 777 $HSHQ_STACKS_DIR/mastodon/dbexport
  mkdir $HSHQ_NONBACKUP_DIR/mastodon
  mkdir $HSHQ_NONBACKUP_DIR/mastodon/redis
  mkdir $HSHQ_NONBACKUP_DIR/mastodon/static

  MASTODON_SECRET_KEY_BASE=$(openssl rand -hex 64)
  MASTODON_OTP_SECRET=$(openssl rand -hex 64)
  openssl ecparam -name prime256v1 -genkey -noout -out $HOME/vapid_private_key.pem
  openssl ec -in $HOME/vapid_private_key.pem -pubout -out $HOME/vapid_public_key.pem
  MASTODON_VAPID_PRIVATE_KEY=$(cat $HOME/vapid_private_key.pem | sed -e "1 d" -e "$ d" | tr -d "\n")
  MASTODON_VAPID_PUBLIC_KEY=$(cat $HOME/vapid_public_key.pem | sed -e "1 d" -e "$ d" | tr -d "\n")
  rm -f $HOME/vapid_private_key.pem
  rm -f $HOME/vapid_public_key.pem

  initServicesCredentials
  if [ -z "$MASTODON_REDIS_PASSWORD" ]; then
    MASTODON_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar MASTODON_REDIS_PASSWORD $MASTODON_REDIS_PASSWORD
  fi
  if [ -z "$MASTODON_ELASTICSEARCH_PASSWORD" ]; then
    MASTODON_ELASTICSEARCH_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar MASTODON_ELASTICSEARCH_PASSWORD $MASTODON_ELASTICSEARCH_PASSWORD
  fi

  outputConfigMastodon
  generateCert mastodon-app mastodon-app
  generateCert mastodon-web mastodon-web
  generateCert mastodon-elasticsearch mastodon-elasticsearch
  outputMastdonMigrate $(getScriptImageByContainerName mastodon-db) $(getScriptImageByContainerName mastodon-redis) $(getScriptImageByContainerName mastodon-app)
  cp $HOME/mastodon.env $HSHQ_STACKS_DIR/mastodon/stack.env
  migrateMastodon
  installStack mastodon mastodon-app "Listening on http" $HOME/mastodon.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Mastodon installed, sleeping 3 seconds..."
  sleep 3
  set +e
  docker exec mailu-admin flask mailu alias-delete $MASTODON_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $MASTODON_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS
  addaccount_res=$(docker exec mastodon-app tootctl accounts create $MASTODON_ADMIN_USERNAME --email=$MASTODON_ADMIN_EMAIL_ADDRESS --confirmed --role=Admin)
  MASTODON_ADMIN_PASSWORD=$(echo $addaccount_res | rev | cut -d" " -f1 | rev)
  updateConfigVar MASTODON_ADMIN_PASSWORD $MASTODON_ADMIN_PASSWORD

  sendEmail -s "Mastodon Login Info" -b "Mastodon Admin Username: $MASTODON_ADMIN_EMAIL_ADDRESS\nMastodon Admin Password: $MASTODON_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
  docker exec mastodon-app tootctl settings registrations close
  docker exec mastodon-app tootctl accounts approve $MASTODON_ADMIN_USERNAME > /dev/null 2>&1
  rm -f $HOME/mastodon-compose-tmp.yml

  inner_block=""
  inner_block=$inner_block">>https://$SUB_MASTODON.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://mastodon-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_MASTODON $MANAGETLS_MASTODON "$is_integrate_hshq" $NETDEFAULT_MASTODON "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll mastodon "$FMLNAME_MASTODON" $USERTYPE_MASTODON "https://$SUB_MASTODON.$HOMESERVER_DOMAIN" "mastodon.png"
    restartAllCaddyContainers
  fi
}

function outputConfigMastodon()
{
  cat <<EOFMD > $HOME/mastodon-compose.yml
$STACK_VERSION_PREFIX mastodon $(getScriptStackVersion mastodon)
version: '3.5'

services:
  mastodon-db:
    image: $(getScriptImageByContainerName mastodon-db)
    container_name: mastodon-db
    hostname: mastodon-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-mastodon-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mastodon/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/mastodon/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.mastodon-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.mastodon-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.mastodon-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.mastodon-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.mastodon-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.mastodon-hourly-db.email-from=Mastodon Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.mastodon-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.mastodon-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.mastodon-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.mastodon-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.mastodon-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.mastodon-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.mastodon-monthly-db.email-from=Mastodon Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.mastodon-monthly-db.mail-only-on-error=false"

  mastodon-redis:
    image: $(getScriptImageByContainerName mastodon-redis)
    container_name: mastodon-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-mastodon-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-mastodon-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$MASTODON_REDIS_PASSWORD

  mastodon-redis-cache:
    image: $(getScriptImageByContainerName mastodon-redis-cache)
    container_name: mastodon-redis-cache
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-mastodon-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    environment:
      - REDIS_PASSWORD=$MASTODON_REDIS_PASSWORD

  mastodon-app:
    image: $(getScriptImageByContainerName mastodon-app)
    container_name: mastodon-app
    hostname: mastodon-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    depends_on:
      - mastodon-db
      - mastodon-redis
      #- mastodon-elasticsearch
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    networks:
      - int-mastodon-net
      - dock-ext-net
      - dock-internalmail-net
      - dock-ldap-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/mastodon/system:/mastodon/public/system
      - v-mastodon-static:/mastodon/public

  mastodon-streaming:
    image: $(getScriptImageByContainerName mastodon-streaming)
    container_name: mastodon-streaming
    hostname: mastodon-streaming
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command: node ./streaming
    depends_on:
      - mastodon-db
      - mastodon-redis
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1']
    networks:
      - int-mastodon-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

  mastodon-sidekiq:
    image: $(getScriptImageByContainerName mastodon-sidekiq)
    container_name: mastodon-sidekiq
    hostname: mastodon-sidekiq
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command: bundle exec sidekiq
    depends_on:
      - mastodon-db
      - mastodon-redis
    healthcheck:
      test: ['CMD-SHELL', "ps aux | grep '[s]idekiq\ 6' || false"]
    networks:
      - int-mastodon-net
      - dock-ext-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/mastodon/system:/mastodon/public/system

  mastodon-web:
    image: $(getScriptImageByContainerName mastodon-web)
    container_name: mastodon-web
    hostname: mastodon-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-mastodon-net
      - dock-proxy-net
    depends_on:
      - mastodon-app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/mastodon-web.crt:/etc/nginx/certs/cert.crt
      - \${HSHQ_SSL_DIR}/mastodon-web.key:/etc/nginx/certs/cert.key
      - \${HSHQ_STACKS_DIR}/mastodon/web/nginx.conf:/etc/nginx/nginx.conf
      - v-mastodon-static:/var/www/html:ro

#  mastodon-elasticsearch:
#    image: $(getScriptImageByContainerName mastodon-elasticsearch)
#    container_name: mastodon-elasticsearch
#    hostname: mastodon-elasticsearch
#    restart: unless-stopped
#    security_opt:
#      - no-new-privileges:true
#    healthcheck:
#       test: ["CMD-SHELL", "nc -z mastodon-elasticsearch 9200"]
#    networks:
#      - int-mastodon-net
#      - dock-ext-net
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /etc/timezone:/etc/timezone:ro
#      - /etc/ssl/certs:/etc/ssl/certs:ro
#      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
#      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
#      - \${HSHQ_SSL_DIR}/mastodon-elasticsearch.crt:/usr/share/elasticsearch/config/certs/mastodon-elasticsearch.crt
#      - \${HSHQ_SSL_DIR}/mastodon-elasticsearch.key:/usr/share/elasticsearch/config/certs/mastodon-elasticsearch.key
#      - \${HSHQ_STACKS_DIR}/mastodon/elasticsearch:/usr/share/elasticsearch/data
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#      nofile:
#        soft: 65536
#        hard: 65536
#    environment:
#      - "ELASTIC_PASSWORD=$MASTODON_ELASTICSEARCH_PASSWORD"
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - "xpack.security.enabled=true"
#      - "xpack.security.transport.ssl.enabled=true"
#      - "xpack.security.transport.ssl.certificate=/usr/share/elasticsearch/config/certs/mastodon-elasticsearch.crt"
#      - "xpack.security.transport.ssl.key=/usr/share/elasticsearch/config/certs/mastodon-elasticsearch.key"
#      - "xpack.watcher.enabled=false"
#      - "xpack.graph.enabled=false"
#      - "xpack.ml.enabled=false"
#      - "ingest.geoip.downloader.enabled=false"
#      - "bootstrap.memory_lock=true"
#      - "cluster.name=es-mastodon"
#      - "discovery.type=single-node"

volumes:
  v-mastodon-static:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/mastodon/static
  v-mastodon-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/mastodon/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-mastodon-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFMD

  cat <<EOFMD > $HOME/mastodon.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
LOCAL_DOMAIN=$HOMESERVER_DOMAIN
WEB_DOMAIN=$SUB_MASTODON.$HOMESERVER_DOMAIN
SINGLE_USER_MODE=false
SECRET_KEY_BASE=$MASTODON_SECRET_KEY_BASE
OTP_SECRET=$MASTODON_OTP_SECRET
VAPID_PRIVATE_KEY=$MASTODON_VAPID_PRIVATE_KEY
VAPID_PUBLIC_KEY=$MASTODON_VAPID_PUBLIC_KEY
RAILS_SERVE_STATIC_FILES=true
ALLOWED_PRIVATE_ADDRESSES=10.0.0.0/8
DB_HOST=mastodon-db
DB_PORT=5432
DB_NAME=$MASTODON_DATABASE_NAME
DB_USER=$MASTODON_DATABASE_USER
DB_PASS=$MASTODON_DATABASE_USER_PASSWORD
POSTGRES_DB=$MASTODON_DATABASE_NAME
POSTGRES_USER=$MASTODON_DATABASE_USER
POSTGRES_PASSWORD=$MASTODON_DATABASE_USER_PASSWORD
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
REDIS_HOST=mastodon-redis
REDIS_PORT=6379
REDIS_PASSWORD=$MASTODON_REDIS_PASSWORD
CACHE_REDIS_HOST=mastodon-redis
CACHE_REDIS_PORT=6379
CACHE_REDIS_PASSWORD=$MASTODON_REDIS_PASSWORD
S3_ENABLED=false
IP_RETENTION_PERIOD=31556952
SESSION_RETENTION_PERIOD=31556952
SMTP_SERVER=$SMTP_HOSTNAME
SMTP_PORT=$SMTP_HOSTPORT
SMTP_FROM_ADDRESS=Mastodon $HSHQ_ADMIN_NAME <$EMAIL_ADMIN_EMAIL_ADDRESS>
ES_ENABLED=false
ES_HOST=mastodon-elasticsearch
ES_PORT=9200
ES_USER=elastic
ES_PASS=$MASTODON_ELASTICSEARCH_PASSWORD
LDAP_ENABLED=true
LDAP_HOST=ldapserver
LDAP_PORT=389
LDAP_METHOD=start_tls
LDAP_TLS_NO_VERIFY=false
LDAP_BASE=$LDAP_BASE_DN
LDAP_BIND_DN=$LDAP_READONLY_USER_BIND_DN
LDAP_PASSWORD=$LDAP_READONLY_USER_PASSWORD
LDAP_UID=uid
LDAP_SEARCH_FILTER=(&(|(%{uid}=%{email})(%{mail}=%{email}))(memberOf=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN))
EOFMD

  cat <<EOFMD > $HSHQ_STACKS_DIR/mastodon/web/nginx.conf
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
  worker_connections  1024;
}


http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '\$remote_addr - \$remote_user [\$time_local] "\$request" '
                    '\$status \$body_bytes_sent "\$http_referer" '
                    '"\$http_user_agent" "\$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  sendfile        on;
  #tcp_nopush     on;

  # Prevent nginx HTTP Server Detection
  server_tokens   off;

  keepalive_timeout  65;

  map \$http_upgrade \$connection_upgrade {
    default upgrade;
    ''      close;
  }

  #gzip  on;

  upstream backend {
    server mastodon-app:3000 fail_timeout=0;
  }
  upstream streaming {
    server mastodon-streaming:4000 fail_timeout=0;
  }

  proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=CACHE:10m inactive=7d max_size=1g;

  server {
    listen 80;
    listen [::]:80;
    root /var/www/html;
    location /.well-known/acme-challenge/ { allow all; }
    location / { return 301 https://\$host\$request_uri; }
  }

  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!MEDIUM:!LOW:!aNULL:!NULL:!SHA;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;

    ssl_certificate     /etc/nginx/certs/cert.crt;
    ssl_certificate_key /etc/nginx/certs/cert.key;

    keepalive_timeout    70;
    sendfile             on;
    client_max_body_size 256m;

    root /var/www/html;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml image/x-icon;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;" always;

    location / {
      try_files \$uri @proxy;
    }

    location ~ ^/(emoji|packs|system/accounts/avatars|system/media_attachments/files) {
      add_header Cache-Control "public, max-age=31536000, immutable";
      add_header Strict-Transport-Security "max-age=31536000" always;
      try_files \$uri @proxy;
    }

    location /sw.js {
      add_header Cache-Control "public, max-age=0";
      add_header Strict-Transport-Security "max-age=31536000" always;
      try_files \$uri @proxy;
    }

    location @proxy {
      proxy_set_header Host \$host;
      proxy_set_header X-Real-IP \$remote_addr;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto \$scheme;
      proxy_set_header Proxy "";
      proxy_pass_header Server;

      proxy_pass http://backend;
      proxy_buffering on;
      proxy_redirect off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection \$connection_upgrade;

      proxy_cache CACHE;
      proxy_cache_valid 200 7d;
      proxy_cache_valid 410 24h;
      proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
      add_header X-Cached \$upstream_cache_status;
      add_header Strict-Transport-Security "max-age=31536000" always;

      tcp_nodelay on;
    }

    location /api/v1/streaming {
      proxy_set_header Host \$host;
      proxy_set_header X-Real-IP \$remote_addr;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto \$scheme;
      proxy_set_header Proxy "";

      proxy_pass http://streaming;
      proxy_buffering off;
      proxy_redirect off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade \$http_upgrade;
      proxy_set_header Connection \$connection_upgrade;

      tcp_nodelay on;
    }

    error_page 500 501 502 503 504 /500.html;
  }
}

EOFMD
}

function performUpdateMastodon()
{
  perform_stack_name=mastodon
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # Stack status: 1=running, 2=stopped
  stackStatus=$(getStackStatusByID $perform_stack_id "$portainerToken")
  if [ -z "$stackStatus" ]; then
    is_upgrade_error=true
    perform_update_report="ERROR ($perform_stack_name): Could not get stack status"
    return
  fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,tootsuite/mastodon:v4.1.6,nginx:1.23.2-alpine,elasticsearch:8.8.1
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="tootsuite/mastodon:v4.1.6,tootsuite/mastodon:v4.2.8"
      image_update_map[3]="nginx:1.23.2-alpine,nginx:1.25.3-alpine"
      image_update_map[4]="elasticsearch:8.8.1,elasticsearch:8.12.2"
      # This upgrade requires a migration
      outputMastdonMigrate postgres:15.0-bullseye bitnami/redis:7.0.5 tootsuite/mastodon:v4.2.3
      sudo cp $HSHQ_STACKS_DIR/portainer/compose/$perform_stack_id/stack.env $HSHQ_STACKS_DIR/mastodon/stack.env
      sudo chown $USERID:$USERID $HSHQ_STACKS_DIR/mastodon/stack.env
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfMigrateMastodon false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,tootsuite/mastodon:v4.2.3,nginx:1.25.3-alpine,elasticsearch:8.11.3
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="tootsuite/mastodon:v4.2.3,tootsuite/mastodon:v4.2.8"
      image_update_map[3]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
      image_update_map[4]="elasticsearch:8.11.3,elasticsearch:8.12.2"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,tootsuite/mastodon:v4.2.3,nginx:1.25.3-alpine,elasticsearch:8.12.0
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="tootsuite/mastodon:v4.2.3,tootsuite/mastodon:v4.2.8"
      image_update_map[3]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
      image_update_map[4]="elasticsearch:8.12.0,elasticsearch:8.12.2"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,tootsuite/mastodon:v4.2.8,nginx:1.25.3-alpine,elasticsearch:8.12.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="tootsuite/mastodon:v4.2.8,tootsuite/mastodon:v4.2.8"
      image_update_map[3]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
      image_update_map[4]="elasticsearch:8.12.2,elasticsearch:8.12.2"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfClearStaticAssetsMastodon false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function outputMastdonMigrate()
{
  mastodon_db_image=$1
  mastodon_redis_image=$2
  mastodon_app_image=$3
  cat <<EOFMD > $HSHQ_STACKS_DIR/mastodon/docker-compose.yml
version: '3.5'

services:
  mastodon-db:
    image: $mastodon_db_image
    container_name: mastodon-db
    hostname: mastodon-db
    user: "${USERID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-mastodon-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ${HSHQ_STACKS_DIR}/mastodon/db:/var/lib/postgresql/data

  mastodon-redis:
    image: $mastodon_redis_image
    container_name: mastodon-redis
    hostname: mastodon-redis
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-mastodon-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-mastodon-redis:/bitnami/redis/data

  mastodon-redis-cache:
    image: $mastodon_redis_image
    container_name: mastodon-redis-cache
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-mastodon-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  mastodon-app:
    image: $mastodon_app_image
    container_name: mastodon-app
    hostname: mastodon-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    depends_on:
      - mastodon-db
      - mastodon-redis
    healthcheck:
      test: ['CMD-SHELL', 'wget -q --spider --proxy=off localhost:3000/health || exit 1']
    networks:
      - int-mastodon-net
      - dock-ext-net
      - dock-internalmail-net
      - dock-ldap-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - ${HSHQ_STACKS_DIR}/mastodon/system:/mastodon/public/system
      - v-mastodon-static:/mastodon/public

volumes:
  v-mastodon-static:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HSHQ_NONBACKUP_DIR}/mastodon/static
  v-mastodon-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${HSHQ_NONBACKUP_DIR}/mastodon/redis

networks:
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  int-mastodon-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFMD

}

function migrateMastodon()
{
  # This function assumes the Mastodon stack/containers are NOT running.
  echo -e "\nPerforming Mastodon database migration...this could take a few minutes\n"
  sudo rm -fr ${HSHQ_NONBACKUP_DIR}/mastodon/static/*
  sudo rm -fr ${HSHQ_NONBACKUP_DIR}/mastodon/redis/*
  docker-compose -f $HSHQ_STACKS_DIR/mastodon/docker-compose.yml run --rm mastodon-app bundle exec rake db:migrate > /dev/null
  docker-compose -f $HSHQ_STACKS_DIR/mastodon/docker-compose.yml down -v
  rm -f $HSHQ_STACKS_DIR/mastodon/docker-compose.yml
  rm -f $HSHQ_STACKS_DIR/mastodon/stack.env
  echo -e "\nFinished mastodon database migration, sleeping 3 seconds"
  sleep 3
}

function mfMigrateMastodon()
{
  if [ "$stackStatus" = "1" ];then
    # Stack is running, stop it, then migrate
    startStopStack mastodon stop "$portainerToken"
    isStartStackFromStopped=true
    sleep 3
  fi
  migrateMastodon
}

function clearStaticAssetsMastodon()
{
  # This function assumes the Mastodon stack/containers are NOT running.
  echo -e "\nClearing Mastodon static assets...\n"
  sudo rm -fr ${HSHQ_NONBACKUP_DIR}/mastodon/static/*
  sudo rm -fr ${HSHQ_NONBACKUP_DIR}/mastodon/redis/*
  sleep 3
}

function mfClearStaticAssetsMastodon()
{
  if [ "$stackStatus" = "1" ];then
    # Stack is running, stop it, then clear assets
    startStopStack mastodon stop "$portainerToken"
    isStartStackFromStopped=true
    sleep 3
  fi
  clearStaticAssetsMastodon
}

# Dozzle
function installDozzle()
{
  set +e
  is_integrate_hshq=$1
  # Have to check if stack/container exists
  checkDeleteStackAndDirectory dozzle "Dozzle"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  set -e
  pullImage $IMG_DOZZLE
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/dozzle
  initServicesCredentials
  outputConfigDozzle
  installStack dozzle dozzle "Accepting connections on" $HOME/dozzle.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Dozzle installed, sleeping 3 seconds..."
  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_DOZZLE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://dozzle:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_DOZZLE $MANAGETLS_DOZZLE "$is_integrate_hshq" $NETDEFAULT_DOZZLE "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll dozzle "$FMLNAME_DOZZLE" $USERTYPE_DOZZLE "https://$SUB_DOZZLE.$HOMESERVER_DOMAIN" "dozzle.png"
    restartAllCaddyContainers
  fi
}

function outputConfigDozzle()
{
  cat <<EOFDZ > $HOME/dozzle-compose.yml
$STACK_VERSION_PREFIX dozzle $(getScriptStackVersion dozzle)
version: '3.5'

services:
  dozzle:
    image: $(getScriptImageByContainerName dozzle)
    container_name: dozzle
    hostname: dozzle
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - \${HSHQ_STACKS_DIR}/dozzle/users.yml:/data/users.yml

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
EOFDZ

  cat <<EOFDZ > $HOME/dozzle.env
DOZZLE_NO_ANALYTICS=true
DOZZLE_AUTH_PROVIDER=simple
EOFDZ

  cat <<EOFDZ > $HSHQ_STACKS_DIR/dozzle/users.yml
users:
  $DOZZLE_USERNAME:
    name: "$HOMESERVER_NAME Admin"
    password: "$(echo -n $DOZZLE_PASSWORD | shasum -a 256 | xargs | cut -d' ' -f1)"
EOFDZ

}

function performUpdateDozzle()
{
  perform_stack_name=dozzle
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=amir20/dozzle:v4.10.26
      image_update_map[0]="amir20/dozzle:v4.10.26,amir20/dozzle:v6.1.1"
    ;;
    2)
      newVer=v4
      curImageList=amir20/dozzle:v5.8.1
      image_update_map[0]="amir20/dozzle:v5.8.1,amir20/dozzle:v6.1.1"
    ;;
    3)
      newVer=v4
      curImageList=amir20/dozzle:v6.0.8
      image_update_map[0]="amir20/dozzle:v6.0.8,amir20/dozzle:v6.1.1"
    ;;
    4)
      newVer=v4
      curImageList=amir20/dozzle:v6.1.1
      image_update_map[0]="amir20/dozzle:v6.1.1,amir20/dozzle:v6.1.1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# SearxNG
function installSearxNG()
{
  set +e
  is_integrate_hshq=$1
  # If directory exists, then delete it
  checkDeleteStackAndDirectory searxng "SearxNG"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_SEARXNG
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/searxng
  mkdir $HSHQ_STACKS_DIR/searxng/caddy
  mkdir $HSHQ_STACKS_DIR/searxng/web
  mkdir $HSHQ_NONBACKUP_DIR/searxng
  mkdir $HSHQ_NONBACKUP_DIR/searxng/redis

  if [ -z "$SEARXNG_REDIS_PASSWORD" ]; then
    SEARXNG_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SEARXNG_REDIS_PASSWORD $SEARXNG_REDIS_PASSWORD
  fi
  if [ -z "$SEARXNG_SECRET_KEY" ]; then
    SEARXNG_SECRET_KEY=$(openssl rand -hex 32)
    updateConfigVar SEARXNG_SECRET_KEY $SEARXNG_SECRET_KEY
  fi

  generateCert searxng-caddy searxng-caddy
  outputConfigSearxNG
  installStack searxng searxng-app "Listen on 0.0.0.0" $HOME/searxng.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_SEARXNG.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://searxng-caddy {\n"
  inner_block=$inner_block">>>>>>>>header_up Host {upstream_hostport}\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SEARXNG $MANAGETLS_SEARXNG "$is_integrate_hshq" $NETDEFAULT_SEARXNG "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll searxng "$FMLNAME_SEARXNG" $USERTYPE_SEARXNG "https://$SUB_SEARXNG.$HOMESERVER_DOMAIN" "searxng.png"
    restartAllCaddyContainers
  fi
}

function outputConfigSearxNG()
{
  cat <<EOFSE > $HOME/searxng-compose.yml
$STACK_VERSION_PREFIX searxng $(getScriptStackVersion searxng)
version: '3.5'

services:
  searxng-caddy:
    image: $(getScriptImageByContainerName searxng-caddy)
    container_name: searxng-caddy
    hostname: searxng-caddy
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-searxng-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/searxng-caddy.crt:/certs/searxng-caddy.crt
      - \${HSHQ_SSL_DIR}/searxng-caddy.key:/certs/searxng-caddy.key
      - \${HSHQ_STACKS_DIR}/searxng/caddy/Caddyfile:/etc/caddy/Caddyfile
      - \${HSHQ_STACKS_DIR}/searxng/caddy/data:/data
      - \${HSHQ_STACKS_DIR}/searxng/caddy/config:/config

  searxng-app:
    image: $(getScriptImageByContainerName searxng-app)
    container_name: searxng-app
    hostname: searxng-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-searxng-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/searxng/web:/etc/searxng:rw
    logging:
      driver: "json-file"
      options:
        max-size: "1m"
        max-file: "1"

  searxng-redis:
    image: $(getScriptImageByContainerName searxng-redis)
    container_name: searxng-redis
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-searxng-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-searxng-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$SEARXNG_REDIS_PASSWORD

volumes:
  v-searxng-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/searxng/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  int-searxng-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFSE

  cat <<EOFSE > $HOME/searxng.env
SEARXNG_BASE_URL=https://$SUB_SEARXNG.$HOMESERVER_DOMAIN/
EOFSE

  cat <<EOFSE > $HSHQ_STACKS_DIR/searxng/web/settings.yml
use_default_settings: true
general:
  instance_name: "$HOMESERVER_NAME Search Engine"
  donation_url: false
  contact_url: false
  enable_metrics: false
search:
  autocomplete: "startpage"
server:
  base_url: false
  bind_address: "0.0.0.0"
  secret_key: "$SEARXNG_SECRET_KEY"
  limiter: false
  image_proxy: true
  method: "GET"
ui:
  static_use_hash: true
  theme_args:
    simple_style: dark
  center_alignment: true
  results_on_new_tab: true
redis:
  url: redis://:$SEARXNG_REDIS_PASSWORD@searxng-redis:6379/0
enabled_plugins:
  - 'Hash plugin'
  - 'Search on category select'
  - 'Tracker URL remover'
  - 'Open Access DOI rewrite'
engines:
  - name: duckduckgo
    engine: duckduckgo
    shortcut: ddg
    disabled: true
  - name: brave
    shortcut: brave
    engine: xpath
    paging: true
    time_range_support: true
    first_page_num: 0
    time_range_url: "&tf={time_range_val}"
    search_url: https://search.brave.com/search?q={query}&offset={pageno}&spellcheck=1{time_range}
    url_xpath: //a[@class="result-header"]/@href
    title_xpath: //span[@class="snippet-title"]
    content_xpath: //p[1][@class="snippet-description"]
    suggestion_xpath: //div[@class="text-gray h6"]/a
    time_range_map:
      day: 'pd'
      week: 'pw'
      month: 'pm'
      year: 'py'
    categories: [general, web]
    disabled: false
    headers:
      Accept-Encoding: gzip, deflate
    about:
      website: https://brave.com/search/
      wikidata_id: Q107355971
      use_official_api: false
      require_api_key: false
      results: HTML
  - name: startpage
    engine: startpage
    shortcut: sp
    timeout: 6.0
    disabled: false
EOFSE

  cat <<EOFSE > $HSHQ_STACKS_DIR/searxng/caddy/Caddyfile
{
  admin off
}

https://searxng-caddy {

  tls /certs/searxng-caddy.crt /certs/searxng-caddy.key 

  @api {
    path /config
    path /healthz
    path /stats/errors
    path /stats/checker
  }
  @static {
    path /static/*
  }
  @notstatic {
    not path /static/*
  }
  @imageproxy {
    path /image_proxy
  }
  @notimageproxy {
    not path /image_proxy
  }
  header {
    Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    Permissions-Policy "accelerometer=(),ambient-light-sensor=(),autoplay=(),camera=(),encrypted-media=(),focus-without-user-activation=(),geolocation=(),gyroscope=(),magnetometer=(),microphone=(),midi=(),payment=(),picture-in-picture=(),speaker=(),sync-xhr=(),usb=(),vr=()"
    Feature-Policy "accelerometer 'none';ambient-light-sensor 'none'; autoplay 'none';camera 'none';encrypted-media 'none';focus-without-user-activation 'none'; geolocation 'none';gyroscope 'none';magnetometer 'none';microphone 'none';midi 'none';payment 'none';picture-in-picture 'none'; speaker 'none';sync-xhr 'none';usb 'none';vr 'none'"
    Referrer-Policy "no-referrer"
    X-Robots-Tag "noindex, noarchive, nofollow"
    -Server
  }
  header @api {
    Access-Control-Allow-Methods "GET, OPTIONS"
    Access-Control-Allow-Origin  "*"
  }
  header @static {
    Cache-Control "public, max-age=31536000"
    defer
  }
  header @notstatic {
    # No Cache
    Cache-Control "no-cache, no-store"
    Pragma "no-cache"
  }
  header @imageproxy {
    Content-Security-Policy "default-src 'none'; img-src 'self' data:"
  }
  header @notimageproxy {
    Content-Security-Policy "upgrade-insecure-requests; default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; form-action 'self' https://github.com/searxng/searxng/issues/new; font-src 'self'; frame-ancestors 'self'; base-uri 'self'; connect-src 'self' https://overpass-api.de; img-src 'self' data: https://*.tile.openstreetmap.org; frame-src https://www.youtube-nocookie.com https://player.vimeo.com https://www.dailymotion.com https://www.deezer.com https://www.mixcloud.com https://w.soundcloud.com https://embed.spotify.com"
  }
  handle {
    encode zstd gzip
    reverse_proxy searxng-app:8080 {
      header_up X-Forwarded-Port {http.request.port}
      header_up X-Forwarded-Proto {http.request.scheme}
    }
  }
}

EOFSE

}

function performUpdateSearxNG()
{
  perform_stack_name=searxng
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=searxng/searxng:2023.8.19-018b0a932
      image_update_map[0]="searxng/searxng:2023.8.19-018b0a932,searxng/searxng:2024.3.15-e2af3e497"
    ;;
    2)
      newVer=v3
      curImageList=searxng/searxng:2023.12.29-27e26b3d6
      image_update_map[0]="searxng/searxng:2023.12.29-27e26b3d6,searxng/searxng:2024.3.15-e2af3e497"
    ;;
    3)
      newVer=v3
      curImageList=searxng/searxng:2024.3.15-e2af3e497
      image_update_map[0]="searxng/searxng:2024.3.15-e2af3e497,searxng/searxng:2024.3.15-e2af3e497"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Jellyfin
function installJellyfin()
{
  set +e
  is_integrate_hshq=$1
  # Should check if directory exists
  checkDeleteStackAndDirectory jellyfin "Jellyfin"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_JELLYFIN
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/jellyfin
  mkdir $HSHQ_STACKS_DIR/jellyfin/config
  mkdir $HSHQ_STACKS_DIR/jellyfin/cache
  mkdir $HSHQ_STACKS_DIR/jellyfin/media

  initServicesCredentials

  outputConfigJellyfin
  installStack jellyfin jellyfin "Startup complete" $HOME/jellyfin.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 5
  sed -i 's/^.*EncodingThreadCount.*$/  <EncodingThreadCount>1<\/EncodingThreadCount>/' $HSHQ_STACKS_DIR/jellyfin/config/config/encoding.xml
  mv $HOME/jellyfin-ldap.xml $HSHQ_STACKS_DIR/jellyfin/config/plugins/configurations/LDAP-Auth.xml
  docker container restart jellyfin

  inner_block=""
  inner_block=$inner_block">>https://$SUB_JELLYFIN.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://jellyfin:8096 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_JELLYFIN $MANAGETLS_JELLYFIN "$is_integrate_hshq" $NETDEFAULT_JELLYFIN "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll jellyfin "$FMLNAME_JELLYFIN" $USERTYPE_JELLYFIN "https://$SUB_JELLYFIN.$HOMESERVER_DOMAIN" "jellyfin.png"
    restartAllCaddyContainers
  fi
}

function outputConfigJellyfin()
{
  cat <<EOFJF > $HOME/jellyfin-compose.yml
$STACK_VERSION_PREFIX jellyfin $(getScriptStackVersion jellyfin)
version: '3.5'

services:
  jellyfin:
    image: $(getScriptImageByContainerName jellyfin)
    container_name: jellyfin
    hostname: jellyfin
    restart: unless-stopped
    env_file: stack.env
    user: "\${UID}:\${GID}"
    networks:
      - dock-proxy-net
      - dock-ext-net
      - dock-ldap-net
    ports:
      # UPnP Conflicts with HomeAssistant
      #- 1900:1900/udp
      - 7359:7359/udp
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/jellyfin/config:/config
      - \${HSHQ_STACKS_DIR}/jellyfin/cache:/cache
      - \${HSHQ_STACKS_DIR}/jellyfin/media:/media
#    devices:
#      - /dev/dri/renderD128:/dev/dri/renderD128
#      - /dev/dri/card0:/dev/dri/card0

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true

EOFJF

  cat <<EOFJF > $HOME/jellyfin.env
UID=$USERID
GID=$GROUPID
EOFJF

  cat <<EOFLD > $HOME/jellyfin-ldap.xml
<?xml version="1.0" encoding="utf-8"?>
<PluginConfiguration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <LdapServer>ldapserver</LdapServer>
  <LdapPort>389</LdapPort>
  <UseSsl>false</UseSsl>
  <UseStartTls>true</UseStartTls>
  <SkipSslVerify>false</SkipSslVerify>
  <LdapBindUser>cn=$LDAP_READONLY_USER_USERNAME,$LDAP_BASE_DN</LdapBindUser>
  <LdapBindPassword>$LDAP_READONLY_USER_PASSWORD</LdapBindPassword>
  <LdapBaseDn>$LDAP_BASE_DN</LdapBaseDn>
  <LdapSearchFilter>(memberOf=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)</LdapSearchFilter>
  <LdapAdminBaseDn>cn=$LDAP_ADMIN_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN</LdapAdminBaseDn>
  <LdapAdminFilter>_disabled_</LdapAdminFilter>
  <LdapSearchAttributes>uid, cn, mail, displayName</LdapSearchAttributes>
  <EnableCaseInsensitiveUsername>false</EnableCaseInsensitiveUsername>
  <CreateUsersFromLdap>true</CreateUsersFromLdap>
  <AllowPassChange>false</AllowPassChange>
  <LdapUsernameAttribute>uid</LdapUsernameAttribute>
  <LdapPasswordAttribute>userPassword</LdapPasswordAttribute>
  <EnableAllFolders>true</EnableAllFolders>
  <PasswordResetUrl>https://$SUB_OPENLDAP_MANAGER.$HOMESERVER_DOMAIN</PasswordResetUrl>
</PluginConfiguration>
EOFLD

  chmod 644 $HOME/jellyfin-ldap.xml
}

function performUpdateJellyfin()
{
  perform_stack_name=jellyfin
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=jellyfin/jellyfin:10.8.10
      image_update_map[0]="jellyfin/jellyfin:10.8.10,jellyfin/jellyfin:10.8.13"
    ;;
    2)
      newVer=v2
      curImageList=jellyfin/jellyfin:10.8.13
      image_update_map[0]="jellyfin/jellyfin:10.8.13,jellyfin/jellyfin:10.8.13"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# FileBrowser
function installFileBrowser()
{
  set +e
  is_integrate_hshq=$1
  # Check if directory exists
  checkDeleteStackAndDirectory filebrowser "FileBrowser"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_FILEBROWSER
  if [ $? -ne 0 ]; then
    return 1
  fi
  set +e

  mkdir $HSHQ_STACKS_DIR/filebrowser
  mkdir $HSHQ_STACKS_DIR/filebrowser/db
  mkdir $HSHQ_STACKS_DIR/filebrowser/srv
  initServicesCredentials
  FILEBROWSER_PASSWORD_HASH=$(htpasswd -bnBC 10 "" $FILEBROWSER_PASSWORD | tr -d ':\n' | sed 's/$2y/$2a/')

  outputConfigFileBrowser
  installStack filebrowser filebrowser "Listening on" $HOME/filebrowser.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_FILEBROWSER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://filebrowser {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_FILEBROWSER $MANAGETLS_FILEBROWSER "$is_integrate_hshq" $NETDEFAULT_FILEBROWSER "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll filebrowser "$FMLNAME_FILEBROWSER" $USERTYPE_FILEBROWSER "https://$SUB_FILEBROWSER.$HOMESERVER_DOMAIN" "filebrowser.png"
    restartAllCaddyContainers
  fi
}

function outputConfigFileBrowser()
{
  cat <<EOFJF > $HOME/filebrowser-compose.yml
$STACK_VERSION_PREFIX filebrowser $(getScriptStackVersion filebrowser)
version: '3.5'

services:
  filebrowser:
    image: $(getScriptImageByContainerName filebrowser)
    container_name: filebrowser
    hostname: filebrowser
    restart: unless-stopped
    env_file: stack.env
    user: "\${UID}:\${GID}"
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/filebrowser/filebrowser.json:/.filebrowser.json
      - \${HSHQ_STACKS_DIR}/filebrowser/srv:/srv
      - \${HSHQ_STACKS_DIR}/filebrowser/db:/database

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true

EOFJF

  cat <<EOFJF > $HOME/filebrowser.env
UID=$USERID
GID=$GROUPID
FB_USERNAME=$FILEBROWSER_USERNAME
FB_PASSWORD='$FILEBROWSER_PASSWORD_HASH'
EOFJF

  cat <<EOFJF > $HSHQ_STACKS_DIR/filebrowser/filebrowser.json
{
  "port": 80,
  "baseURL": "",
  "address": "",
  "log": "stdout",
  "database": "/database/filebrowser.db",
  "root": "/srv"
}
EOFJF

}

function performUpdateFileBrowser()
{
  perform_stack_name=filebrowser
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=filebrowser/filebrowser:v2.24.2
      image_update_map[0]="filebrowser/filebrowser:v2.24.2,filebrowser/filebrowser:v2.27.0"
    ;;
    2)
      newVer=v3
      curImageList=filebrowser/filebrowser:v2.26.0
      image_update_map[0]="filebrowser/filebrowser:v2.26.0,filebrowser/filebrowser:v2.27.0"
    ;;
    3)
      newVer=v3
      curImageList=filebrowser/filebrowser:v2.27.0
      image_update_map[0]="filebrowser/filebrowser:v2.27.0,filebrowser/filebrowser:v2.27.0"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# PhotoPrism
function installPhotoPrism()
{
  set +e
  is_integrate_hshq=$1
  # Only install if directory does not exist
  checkDeleteStackAndDirectory photoprism "PhotoPrism"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PHOTOPRISM_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/photoprism
  mkdir $HSHQ_STACKS_DIR/photoprism/db
  mkdir $HSHQ_STACKS_DIR/photoprism/dbexport
  mkdir $HSHQ_STACKS_DIR/photoprism/app
  mkdir $HSHQ_STACKS_DIR/photoprism/app/originals
  mkdir $HSHQ_STACKS_DIR/photoprism/app/import
  mkdir $HSHQ_STACKS_DIR/photoprism/app/storage
  chmod 777 $HSHQ_STACKS_DIR/photoprism/dbexport

  initServicesCredentials
  if [ -z "$PHOTOPRISM_DATABASE_ROOT_PASSWORD" ]; then
    PHOTOPRISM_DATABASE_ROOT_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PHOTOPRISM_DATABASE_ROOT_PASSWORD $PHOTOPRISM_DATABASE_ROOT_PASSWORD
  fi

  outputConfigPhotoPrism
  echo "Starting PhotoPrism. Please be patient, this process takes a few minutes..."
  docker-compose -f $HOME/photoprism-compose-tmp.yml up -d
  search="listening at 0.0.0.0"
  isFound="F"
  i=0
  set +e
  while [ $i -le 600 ]
  do
    findtext=$(docker logs photoprism-app 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 10 seconds, total wait=$i seconds..."
    sleep 10
    i=$((i+10))
  done
  set -e
  if [ $isFound == "F" ]; then
    docker-compose -f $HOME/photoprism-compose-tmp.yml down -v
    echo "ERROR: PhotoPrism did not start up correctly..."
    return 1
  fi
  sleep 5
  docker-compose -f $HOME/photoprism-compose-tmp.yml down -v
  installStack photoprism photoprism-app "listening at 0.0.0.0" $HOME/photoprism.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  rm -f $HOME/photoprism-compose-tmp.yml

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PHOTOPRISM.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://photoprism-app:2342 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PHOTOPRISM $MANAGETLS_PHOTOPRISM "$is_integrate_hshq" $NETDEFAULT_PHOTOPRISM "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll photoprism "$FMLNAME_PHOTOPRISM" $USERTYPE_PHOTOPRISM "https://$SUB_PHOTOPRISM.$HOMESERVER_DOMAIN" "photoprism.png"
    restartAllCaddyContainers
  fi
}

function outputConfigPhotoPrism()
{
  cat <<EOFPP > $HOME/photoprism-compose-tmp.yml
version: '3.5'

services:
  photoprism-db:
    image: $(getScriptImageByContainerName photoprism-db)
    container_name: photoprism-db
    hostname: photoprism-db
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: mysqld --innodb-buffer-pool-size=128M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    networks:
      - int-photoprism-net
    volumes:
      - v-photoprism-db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=$PHOTOPRISM_DATABASE_ROOT_PASSWORD
      - MYSQL_DATABASE=$PHOTOPRISM_DATABASE_NAME
      - MYSQL_USER=$PHOTOPRISM_DATABASE_USER
      - MYSQL_PASSWORD=$PHOTOPRISM_DATABASE_USER_PASSWORD

  photoprism-app:
    image: $(getScriptImageByContainerName photoprism-app)
    container_name: photoprism-app
    hostname: photoprism-app
    restart: unless-stopped
    user: "$USERID:$GROUPID"
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    depends_on:
      - photoprism-db
    working_dir: "/photoprism"
    networks:
      - int-photoprism-net
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - $HSHQ_STACKS_DIR/photoprism/app/originals:/photoprism/originals
      - $HSHQ_STACKS_DIR/photoprism/app/import:/photoprism/import
      - $HSHQ_STACKS_DIR/photoprism/app/storage:/photoprism/storage
    environment:
      - "PHOTOPRISM_INIT=gpu tensorflow"
      - PHOTOPRISM_UID=$USERID
      - PHOTOPRISM_GID=$GROUPID
      - PHOTOPRISM_AUTH_MODE=public
      - PHOTOPRISM_SITE_URL=http://localhost:2342/
      - PHOTOPRISM_SITE_TITLE=PhotoPrism
      - "PHOTOPRISM_SITE_CAPTION=AI-Powered Photos App"
      - "PHOTOPRISM_SITE_DESCRIPTION=$HOMESERVER_NAME Photos"
      - "PHOTOPRISM_SITE_AUTHOR=$HOMESERVER_NAME"
      - PHOTOPRISM_ORIGINALS_LIMIT=5000
      - PHOTOPRISM_HTTP_COMPRESSION=gzip
      - PHOTOPRISM_LOG_LEVEL=info
      - PHOTOPRISM_READONLY=false
      - PHOTOPRISM_EXPERIMENTAL=false
      - PHOTOPRISM_DISABLE_CHOWN=true
      - PHOTOPRISM_DISABLE_WEBDAV=false
      - PHOTOPRISM_DISABLE_SETTINGS=false
      - PHOTOPRISM_DISABLE_TENSORFLOW=false
      - PHOTOPRISM_DISABLE_FACES=false
      - PHOTOPRISM_DISABLE_CLASSIFICATION=false
      - PHOTOPRISM_DISABLE_RAW=false
      - PHOTOPRISM_RAW_PRESETS=false
      - PHOTOPRISM_JPEG_QUALITY=85
      - PHOTOPRISM_DETECT_NSFW=false
      - PHOTOPRISM_UPLOAD_NSFW=true
      - HOME=/photoprism
      - PHOTOPRISM_DATABASE_DRIVER=mysql
      - PHOTOPRISM_DATABASE_SERVER=photoprism-db:3306
      - PHOTOPRISM_DATABASE_NAME=$PHOTOPRISM_DATABASE_NAME
      - PHOTOPRISM_DATABASE_USER=$PHOTOPRISM_DATABASE_USER
      - PHOTOPRISM_DATABASE_PASSWORD=$PHOTOPRISM_DATABASE_USER_PASSWORD

volumes:
  v-photoprism-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $HSHQ_STACKS_DIR/photoprism/db

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  int-photoprism-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFPP

  cat <<EOFPP > $HOME/photoprism-compose.yml
$STACK_VERSION_PREFIX photoprism $(getScriptStackVersion photoprism)
version: '3.5'

services:
  photoprism-db:
    image: $(getScriptImageByContainerName photoprism-db)
    container_name: photoprism-db
    hostname: photoprism-db
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command: mysqld --innodb-buffer-pool-size=128M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    networks:
      - int-photoprism-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-photoprism-db:/var/lib/mysql
      - \${HSHQ_SCRIPTS_DIR}/user/exportMySQL.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/photoprism/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.photoprism-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.photoprism-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.photoprism-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.photoprism-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.photoprism-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.photoprism-hourly-db.email-from=PhotoPrism Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.photoprism-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.photoprism-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.photoprism-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.photoprism-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.photoprism-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.photoprism-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.photoprism-monthly-db.email-from=PhotoPrism Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.photoprism-monthly-db.mail-only-on-error=false"

  photoprism-app:
    image: $(getScriptImageByContainerName photoprism-app)
    container_name: photoprism-app
    hostname: photoprism-app
    restart: unless-stopped
    env_file: stack.env
    user: "\${UID}:\${GID}"
    security_opt:
      - seccomp:unconfined
      - apparmor:unconfined
    depends_on:
      - photoprism-db
    working_dir: "/photoprism"
    networks:
      - int-photoprism-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/photoprism/app/originals:/photoprism/originals
      - \${HSHQ_STACKS_DIR}/photoprism/app/import:/photoprism/import
      - \${HSHQ_STACKS_DIR}/photoprism/app/storage:/photoprism/storage

volumes:
  v-photoprism-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/photoprism/db

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-photoprism-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFPP

  cat <<EOFPP > $HOME/photoprism.env
PHOTOPRISM_UID=$USERID
PHOTOPRISM_GID=$GROUPID
PHOTOPRISM_AUTH_MODE=public
PHOTOPRISM_SITE_URL=http://localhost:2342/
PHOTOPRISM_SITE_TITLE=PhotoPrism
PHOTOPRISM_SITE_CAPTION=AI-Powered Photos App
PHOTOPRISM_SITE_DESCRIPTION=$HOMESERVER_NAME Photos
PHOTOPRISM_SITE_AUTHOR=$HOMESERVER_NAME
PHOTOPRISM_ORIGINALS_LIMIT=5000
PHOTOPRISM_HTTP_COMPRESSION=gzip
PHOTOPRISM_LOG_LEVEL=info
PHOTOPRISM_READONLY=false
PHOTOPRISM_EXPERIMENTAL=false
PHOTOPRISM_DISABLE_CHOWN=true
PHOTOPRISM_DISABLE_WEBDAV=false
PHOTOPRISM_DISABLE_SETTINGS=false
PHOTOPRISM_DISABLE_TENSORFLOW=false
PHOTOPRISM_DISABLE_FACES=false
PHOTOPRISM_DISABLE_CLASSIFICATION=false
PHOTOPRISM_DISABLE_RAW=false
PHOTOPRISM_RAW_PRESETS=false
PHOTOPRISM_JPEG_QUALITY=85
PHOTOPRISM_DETECT_NSFW=false
PHOTOPRISM_UPLOAD_NSFW=true
HOME=/photoprism
PHOTOPRISM_DATABASE_DRIVER=mysql
PHOTOPRISM_DATABASE_SERVER=photoprism-db:3306
PHOTOPRISM_DATABASE_NAME=$PHOTOPRISM_DATABASE_NAME
PHOTOPRISM_DATABASE_USER=$PHOTOPRISM_DATABASE_USER
PHOTOPRISM_DATABASE_PASSWORD=$PHOTOPRISM_DATABASE_USER_PASSWORD
MYSQL_DATABASE=$PHOTOPRISM_DATABASE_NAME
MYSQL_USER=$PHOTOPRISM_DATABASE_USER
MYSQL_PASSWORD=$PHOTOPRISM_DATABASE_USER_PASSWORD
EOFPP

}

function performUpdatePhotoPrism()
{
  perform_stack_name=photoprism
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=mariadb:10.7.3,photoprism/photoprism:220901-bullseye
      image_update_map[0]="mariadb:10.7.3,mariadb:10.7.3"
      image_update_map[1]="photoprism/photoprism:220901-bullseye,photoprism/photoprism:220901-bullseye"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Guacamole
function installGuacamole()
{
  set +e
  is_integrate_hshq=$1
  # Don't proceed if directory exists
  checkDeleteStackAndDirectory guacamole "Guacamole"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_GUACAMOLE_GUACD
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_GUACAMOLE_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/guacamole
  mkdir $HSHQ_STACKS_DIR/guacamole/db
  mkdir $HSHQ_STACKS_DIR/guacamole/dbexport
  mkdir $HSHQ_STACKS_DIR/guacamole/init
  chmod 777 $HSHQ_STACKS_DIR/guacamole/dbexport
  initServicesCredentials
  if [ -z "$GUACAMOLE_DATABASE_ROOT_PASSWORD" ]; then
    GUACAMOLE_DATABASE_ROOT_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GUACAMOLE_DATABASE_ROOT_PASSWORD $GUACAMOLE_DATABASE_ROOT_PASSWORD
  fi

  outputConfigGuacamole
  docker run --rm $IMG_GUACAMOLE_WEB /opt/guacamole/bin/initdb.sh --mysql > $HSHQ_STACKS_DIR/guacamole/init/initdb.sql
  docker-compose -f $HOME/guacamole-compose-tmp.yml up -d

  echo "Waiting at least 15 seconds before continuing..."
  sleep 15
  search="ready for connections"
  isFound="F"
  i=0
  set +e
  while [ $i -le 300 ]
  do
    findtext=$(docker logs guacamole-db 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 5 seconds, total wait=$i seconds..."
    sleep 5
    i=$((i+5))
  done
  set -e
  if [ $isFound == "F" ]; then
    echo "Guacamole did not start up correctly..."
    docker-compose -f $HOME/guacamole-compose-tmp.yml down -v
    exit 1
  fi
  sleep 5

  docker-compose -f $HOME/guacamole-compose-tmp.yml down -v
  installStack guacamole guacamole-web "Server startup in" $HOME/guacamole.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  rm -f $HOME/guacamole-compose-tmp.yml

  inner_block=""
  inner_block=$inner_block">>https://$SUB_GUACAMOLE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>@notGuac {\n"
  inner_block=$inner_block">>>>>>>>not path \"/guacamole/*\"\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>>>redir @notGuac /guacamole/\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://guacamole-web:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_GUACAMOLE $MANAGETLS_GUACAMOLE "$is_integrate_hshq" $NETDEFAULT_GUACAMOLE "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll guacamole "$FMLNAME_GUACAMOLE" $USERTYPE_GUACAMOLE "https://$SUB_GUACAMOLE.$HOMESERVER_DOMAIN" "guacamole.png"
    restartAllCaddyContainers
  fi
}

function outputConfigGuacamole()
{
  cat <<EOFGC > $HOME/guacamole-compose-tmp.yml
version: '3.5'

services:
  guacamole-db:
    image: $(getScriptImageByContainerName guacamole-db)
    container_name: guacamole-db
    hostname: guacamole-db
    user: "$USERID"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-guacamole-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - $HSHQ_STACKS_DIR/guacamole/db:/var/lib/mysql
      - $HSHQ_STACKS_DIR/guacamole/init:/docker-entrypoint-initdb.d:ro
    environment:
      - MYSQL_ROOT_PASSWORD=$GUACAMOLE_DATABASE_ROOT_PASSWORD
      - MYSQL_DATABASE=$GUACAMOLE_DATABASE_NAME
      - MYSQL_USER=$GUACAMOLE_DATABASE_USER
      - MYSQL_PASSWORD=$GUACAMOLE_DATABASE_USER_PASSWORD

networks:
  int-guacamole-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFGC

  cat <<EOFGC > $HOME/guacamole-compose.yml
$STACK_VERSION_PREFIX guacamole $(getScriptStackVersion guacamole)
version: '3.5'

services:
  guacamole-db:
    image: $(getScriptImageByContainerName guacamole-db)
    container_name: guacamole-db
    hostname: guacamole-db
    user: \${UID}
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-guacamole-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/guacamole/db:/var/lib/mysql
      - \${HSHQ_SCRIPTS_DIR}/user/exportMySQL.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/guacamole/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.guacamole-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.guacamole-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.guacamole-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.guacamole-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.guacamole-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.guacamole-hourly-db.email-from=Guacamole Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.guacamole-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.guacamole-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.guacamole-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.guacamole-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.guacamole-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.guacamole-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.guacamole-monthly-db.email-from=Guacamole Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.guacamole-monthly-db.mail-only-on-error=false"

  guacamole-daemon:
    image: $(getScriptImageByContainerName guacamole-daemon)
    container_name: guacamole-daemon
    hostname: guacamole-daemon
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-guacamole-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  guacamole-web:
    image: $(getScriptImageByContainerName guacamole-web)
    container_name: guacamole-web
    hostname: guacamole-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - guacamole-db
      - guacamole-daemon
    networks:
      - int-guacamole-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-guacamole-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFGC

  cat <<EOFGC > $HOME/guacamole.env
UID=$USERID
GID=$GROUPID
GUACD_HOSTNAME=guacamole-daemon
MYSQL_HOSTNAME=guacamole-db
MYSQL_DATABASE=$GUACAMOLE_DATABASE_NAME
MYSQL_USER=$GUACAMOLE_DATABASE_USER
MYSQL_PASSWORD=$GUACAMOLE_DATABASE_USER_PASSWORD
EOFGC

}

function performUpdateGuacamole()
{
  perform_stack_name=guacamole
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=guacamole/guacd:1.5.3,guacamole/guacamole:1.5.3
      image_update_map[0]="guacamole/guacd:1.5.3,guacamole/guacd:1.5.4"
      image_update_map[1]="guacamole/guacamole:1.5.3,guacamole/guacamole:1.5.4"
    ;;
    2)
      newVer=v2
      curImageList=guacamole/guacd:1.5.4,guacamole/guacamole:1.5.4
      image_update_map[0]="guacamole/guacd:1.5.4,guacamole/guacd:1.5.4"
      image_update_map[1]="guacamole/guacamole:1.5.4,guacamole/guacamole:1.5.4"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Authelia
function installAuthelia()
{
  set +e
  is_integrate_hshq=$1
  # Exit if directory exists
  checkDeleteStackAndDirectory authelia "Authelia"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: Authelia directory exists"
    exit 1
  fi
  pullImage $IMG_AUTHELIA
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain Authelia docker image"
    exit 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/authelia
  mkdir $HSHQ_STACKS_DIR/authelia/config
  mkdir $HSHQ_STACKS_DIR/authelia/config/certs
  mkdir $HSHQ_STACKS_DIR/authelia/config/cacerts
  mkdir $HSHQ_STACKS_DIR/authelia/keys

  if [ -z "$AUTHELIA_REDIRECTION_URL" ]; then
    AUTHELIA_REDIRECTION_URL=home.$HOMESERVER_DOMAIN
    updateConfigVar AUTHELIA_REDIRECTION_URL $AUTHELIA_REDIRECTION_URL
  fi
  AUTHELIA_JWT_SECRET=$(pwgen -c -n 32 1)
  rm -f "$HSHQ_SECRETS_DIR/authelia_jwt_secret.txt"
  echo "$AUTHELIA_JWT_SECRET" > "$HSHQ_SECRETS_DIR/authelia_jwt_secret.txt"
  chmod 0400 "$HSHQ_SECRETS_DIR/authelia_jwt_secret.txt"
  AUTHELIA_SESSION_SECRET=$(pwgen -c -n 64 1)
  rm -f "$HSHQ_SECRETS_DIR/authelia_session_secret.txt"
  echo "$AUTHELIA_SESSION_SECRET" > "$HSHQ_SECRETS_DIR/authelia_session_secret.txt"
  chmod 0400 "$HSHQ_SECRETS_DIR/authelia_session_secret.txt"
  AUTHELIA_STORAGE_ENCRYPTION_KEY=$(pwgen -c -n 64 1)
  rm -f "$HSHQ_SECRETS_DIR/authelia_storage_encryption_key.txt"
  echo "$AUTHELIA_STORAGE_ENCRYPTION_KEY" > "$HSHQ_SECRETS_DIR/authelia_storage_encryption_key.txt"
  chmod 0400 "$HSHQ_SECRETS_DIR/authelia_storage_encryption_key.txt"
  AUTHELIA_REDIS_PASSWORD=$(pwgen -c -n 64 1)
  rm -f "$HSHQ_SECRETS_DIR/authelia_redis_password.txt"
  echo "$AUTHELIA_REDIS_PASSWORD" > "$HSHQ_SECRETS_DIR/authelia_redis_password.txt"
  chmod 0400 "$HSHQ_SECRETS_DIR/authelia_redis_password.txt"
  generateCert authelia authelia
  generateCert authelia-redis authelia-redis
  outputConfigAuthelia
  installStack authelia authelia "Listening for TLS connections on" $HOME/authelia.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing Authelia"
    exit $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://authelia:9091 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_AUTHELIA $MANAGETLS_AUTHELIA "$is_integrate_hshq" $NETDEFAULT_AUTHELIA "$inner_block"
}

function outputConfigAuthelia()
{
  cat <<EOFAC > $HOME/authelia-compose.yml
$STACK_VERSION_PREFIX authelia $(getScriptStackVersion authelia)
version: '3.5'

services:
  authelia:
    image: $(getScriptImageByContainerName authelia)
    container_name: authelia
    hostname: authelia
    restart: unless-stopped
    env_file: stack.env
    user: "\${UID}:\${GID}"
    security_opt:
      - no-new-privileges:true
    networks:
      - int-authelia-net
      - dock-proxy-net
      - dock-privateip-net
      - dock-ldap-net
      - dock-internalmail-net
    depends_on:
      - authelia-redis
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/${CERTS_ROOT_CA_NAME}.crt:/config/cacerts/${CERTS_ROOT_CA_NAME}.crt:ro
      - \${HSHQ_STACKS_DIR}/authelia/config:/config
      - \${HSHQ_STACKS_DIR}/authelia/keys:/keys
      - \${HSHQ_SSL_DIR}/authelia.crt:/config/certs/authelia.crt
      - \${HSHQ_SSL_DIR}/authelia.key:/config/certs/authelia.key
    secrets:
      - authelia_jwt_secret
      - authelia_session_secret
      - authelia_storage_encryption_key
      - ldap_admin_user_password
      - authelia_redis_password

  authelia-redis:
    image: $(getScriptImageByContainerName authelia-redis)
    container_name: authelia-redis
    hostname: authelia-redis
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-authelia-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt:/tls/${CERTS_ROOT_CA_NAME}.crt:ro
      - \${HSHQ_SSL_DIR}/authelia-redis.crt:/tls/authelia-redis.crt:ro
      - \${HSHQ_SSL_DIR}/authelia-redis.key:/tls/authelia-redis.key:ro
      - \${HSHQ_SSL_DIR}/dhparam.pem:/tls/dhparam.pem:ro
    environment:
      - REDIS_PASSWORD=$(cat $HSHQ_SECRETS_DIR/authelia_redis_password.txt)

secrets:
  authelia_jwt_secret:
    file: \${HSHQ_SECRETS_DIR}/authelia_jwt_secret.txt
  authelia_session_secret:
    file: \${HSHQ_SECRETS_DIR}/authelia_session_secret.txt
  authelia_storage_encryption_key:
    file: \${HSHQ_SECRETS_DIR}/authelia_storage_encryption_key.txt
  ldap_admin_user_password:
    file: \${HSHQ_SECRETS_DIR}/ldap_admin_bind_password.txt
  authelia_redis_password:
    file: \${HSHQ_SECRETS_DIR}/authelia_redis_password.txt

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-authelia-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFAC

  cat <<EOFAE > $HOME/authelia.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap_admin_user_password
AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/authelia_redis_password
ALLOW_EMPTY_PASSWORD=no
REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
REDIS_AOF_ENABLED=no
REDIS_TLS_ENABLED=yes
REDIS_TLS_PORT=6379
REDIS_TLS_CERT_FILE=/tls/authelia-redis.crt
REDIS_TLS_KEY_FILE=/tls/authelia-redis.key
REDIS_TLS_CA_FILE=/tls/${CERTS_ROOT_CA_NAME}.crt
REDIS_TLS_DH_PARAMS_FILE=/tls/dhparam.pem
REDIS_TLS_AUTH_CLIENTS=no
EOFAE

  cat <<EOFAC > $HSHQ_STACKS_DIR/authelia/config/configuration.yml
# yamllint disable rule:comments-indentation
---
###############################################################################
#                           Authelia Configuration                            #
###############################################################################

theme: dark

certificates_directory: /config/cacerts/

server:
  address: 'tcp://:9091/'
  disable_healthcheck: true
  tls:
    key: /config/certs/authelia.key
    certificate: /config/certs/authelia.crt
  endpoints:
    enable_pprof: false
    enable_expvars: false

log:
  level: info

totp:
  disable: false
  issuer: "$HOMESERVER_NAME"
  digits: 6
  period: 30
  skew: 1

webauthn:
  disable: false
  timeout: 60s
  display_name: "$HOMESERVER_NAME"
  attestation_conveyance_preference: indirect
  user_verification: preferred

duo_api:
  disable: true

authentication_backend:
  password_reset:
    disable: true
  refresh_interval: 5m
  ldap:
    address: $LDAP_URI
    implementation: custom
    timeout: 5s
    start_tls: true
    tls:
      server_name: ldapserver
      skip_verify: false
      minimum_version: TLS1.2
    base_dn: $LDAP_BASE_DN
    additional_users_dn: ou=people
    users_filter: (&(&({username_attribute}={input})(objectClass=person))(memberOf=cn=$LDAP_BASIC_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN))
    additional_groups_dn: ou=groups
    groups_filter: (&(uniquemember={dn})(objectClass=groupOfUniqueNames))
    group_search_mode: filter
    permit_referrals: false
    permit_unauthenticated_bind: false
    user: $LDAP_ADMIN_BIND_DN
    attributes:
      distinguished_name: cn
      username: uid
      display_name: cn
      mail: mail
      member_of: memberOf
      group_name: cn

#AC_BEGIN
#AC_END

session:
  name: authelia
  same_site: lax
  inactivity: 21600
  expiration: 43200
  remember_me: 21600
  cookies:
# Authelia session cookies BEGIN
    - domain: $HOMESERVER_DOMAIN
      authelia_url: https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN
      default_redirection_url: https://$AUTHELIA_REDIRECTION_URL
      name: authelia
      same_site: lax
      inactivity: 21600
      expiration: 43200
      remember_me: 21600
# Authelia session cookies END
  redis:
    host: authelia-redis
    port: 6379
    maximum_active_connections: 8
    tls:
      server_name: authelia-redis
      skip_verify: false
      minimum_version: TLS1.2

regulation:
  max_retries: 5
  find_time: 10m
  ban_time: 10m

storage:
  local:
    path: /config/db.sqlite3

ntp:
  address: udp://${NET_PRIVATEIP_SUBNET_PREFIX}.1:123
  version: 3
  max_desync: 3s
  disable_startup_check: false
  disable_failure: false

notifier:
  disable_startup_check: true
  smtp:
    address: smtp://${SMTP_HOSTNAME}:${SMTP_HOSTPORT}
    sender: "Authelia $HSHQ_ADMIN_NAME <$EMAIL_ADMIN_EMAIL_ADDRESS>"
    identifier: localhost
    subject: "[Authelia] {title}"
    startup_check_address: $EMAIL_ADMIN_EMAIL_ADDRESS
    disable_require_tls: false
    disable_html_emails: false
    tls:
      skip_verify: false
      minimum_version: TLS1.2
...
EOFAC

  set +e
  replaceTextBlockInFile "#AC_BEGIN" "#AC_END" "$(getAutheliaBlock)" $HSHQ_STACKS_DIR/authelia/config/configuration.yml true
  set -e
}

function performUpdateAuthelia()
{
  perform_stack_name=authelia
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=authelia/authelia:4.37.5,bitnami/redis:7.0.5
      image_update_map[0]="authelia/authelia:4.37.5,authelia/authelia:4.38.2"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing "true" mfUpdateAutheliaConfig
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    2)
      newVer=v2
      curImageList=authelia/authelia:4.38.2,bitnami/redis:7.0.5
      image_update_map[0]="authelia/authelia:4.38.2,authelia/authelia:4.38.2"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing "true" mfUpdateAutheliaConfig
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function mfUpdateAutheliaConfig()
{
  configfile=$HSHQ_STACKS_DIR/authelia/config/configuration.yml
  acblock="$(sed -n "/#AC_BEGIN/,/#AC_END/p" $configfile | sed '1d' | sed '$d')"
  outputConfigAuthelia
  replaceTextBlockInFile "#AC_BEGIN" "#AC_END" "$acblock" $configfile true
  rm -f $HOME/authelia.env
  cat <<EOFAE > $HOME/authelia.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap_admin_user_password
AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/authelia_redis_password
ALLOW_EMPTY_PASSWORD=no
REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
REDIS_AOF_ENABLED=no
REDIS_TLS_ENABLED=yes
REDIS_TLS_PORT=6379
REDIS_TLS_CERT_FILE=/tls/authelia-redis.crt
REDIS_TLS_KEY_FILE=/tls/authelia-redis.key
REDIS_TLS_CA_FILE=/tls/${CERTS_ROOT_CA_NAME}.crt
REDIS_TLS_DH_PARAMS_FILE=/tls/dhparam.pem
REDIS_TLS_AUTH_CLIENTS=no
EOFAE
  set +e
  docker ps | grep codeserver > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    docker container restart codeserver > /dev/null 2>&1
  fi
}

# WordPress
function installWordPress()
{
  set +e
  is_integrate_hshq=$1
  # Check if directory exists
  checkDeleteStackAndDirectory wordpress "WordPress"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_WORDPRESS
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/wordpress
  mkdir $HSHQ_STACKS_DIR/wordpress/db
  mkdir $HSHQ_STACKS_DIR/wordpress/dbexport
  mkdir $HSHQ_STACKS_DIR/wordpress/web
  chmod 777 $HSHQ_STACKS_DIR/wordpress/dbexport

  initServicesCredentials
  if [ -z "$WORDPRESS_DATABASE_ROOT_PASSWORD" ]; then
    WORDPRESS_DATABASE_ROOT_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar WORDPRESS_DATABASE_ROOT_PASSWORD $WORDPRESS_DATABASE_ROOT_PASSWORD
  fi
  outputConfigWordPress
  installStack wordpress wordpress-web "WordPress" $HOME/wordpress.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_WORDPRESS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>@insecureadmin {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_NOTHOMESUBNET\n"
  inner_block=$inner_block">>>>>>>>path /wp-login.php*\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>>>redir @insecureadmin /\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://wordpress-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_WORDPRESS $MANAGETLS_WORDPRESS "$is_integrate_hshq" $NETDEFAULT_WORDPRESS "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll wordpress "$FMLNAME_WORDPRESS" $USERTYPE_WORDPRESS "https://$SUB_WORDPRESS.$HOMESERVER_DOMAIN" "wordpress.png"
    restartAllCaddyContainers
  fi
}

function outputConfigWordPress()
{
  cat <<EOFWP > $HOME/wordpress-compose.yml
$STACK_VERSION_PREFIX wordpress $(getScriptStackVersion wordpress)
version: '3.5'

services:
  wordpress-db:
    image: $(getScriptImageByContainerName wordpress-db)
    container_name: wordpress-db
    hostname: wordpress-db
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command: mysqld --innodb-buffer-pool-size=128M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    networks:
      - int-wordpress-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-wordpress-db:/var/lib/mysql
      - \${HSHQ_SCRIPTS_DIR}/user/exportMySQL.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/wordpress/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.wordpress-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.wordpress-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.wordpress-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.wordpress-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.wordpress-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.wordpress-hourly-db.email-from=WordPress Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.wordpress-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.wordpress-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.wordpress-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.wordpress-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.wordpress-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.wordpress-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.wordpress-monthly-db.email-from=WordPress Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.wordpress-monthly-db.mail-only-on-error=false"

  wordpress-web:
    image: $(getScriptImageByContainerName wordpress-web)
    container_name: wordpress-web
    hostname: wordpress-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-wordpress-net
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-wordpress-web:/var/www/html

volumes:
  v-wordpress-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wordpress/db
  v-wordpress-web:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/wordpress/web

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-wordpress-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFWP

  cat <<EOFWP > $HOME/wordpress.env
MYSQL_ROOT_PASSWORD=$WORDPRESS_DATABASE_ROOT_PASSWORD
MYSQL_DATABASE=$WORDPRESS_DATABASE_NAME
MYSQL_USER=$WORDPRESS_DATABASE_USER
MYSQL_PASSWORD=$WORDPRESS_DATABASE_USER_PASSWORD
WORDPRESS_DB_HOST=wordpress-db
WORDPRESS_DB_NAME=$WORDPRESS_DATABASE_NAME
WORDPRESS_DB_USER=$WORDPRESS_DATABASE_USER
WORDPRESS_DB_PASSWORD=$WORDPRESS_DATABASE_USER_PASSWORD
EOFWP
}

function performUpdateWordPress()
{
  perform_stack_name=wordpress
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=mariadb:10.7.3,wordpress:php8.2-apache
      image_update_map[0]="mariadb:10.7.3,mariadb:10.7.3"
      image_update_map[1]="wordpress:php8.2-apache,wordpress:php8.3-apache"
    ;;
    2)
      newVer=v2
      curImageList=mariadb:10.7.3,wordpress:php8.3-apache
      image_update_map[0]="mariadb:10.7.3,mariadb:10.7.3"
      image_update_map[1]="wordpress:php8.3-apache,wordpress:php8.3-apache"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Ghost
function installGhost()
{
  set +e
  is_integrate_hshq=$1
  # Have to check if directory exits
  checkDeleteStackAndDirectory ghost "Ghost"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_GHOST
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/ghost
  mkdir $HSHQ_STACKS_DIR/ghost/db
  mkdir $HSHQ_STACKS_DIR/ghost/dbexport
  mkdir $HSHQ_STACKS_DIR/ghost/web
  chmod 777 $HSHQ_STACKS_DIR/ghost/dbexport
  initServicesCredentials
  if [ -z "$GHOST_DATABASE_ROOT_PASSWORD" ]; then
    GHOST_DATABASE_ROOT_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GHOST_DATABASE_ROOT_PASSWORD $GHOST_DATABASE_ROOT_PASSWORD
  fi

  outputConfigGhost
  installStack ghost ghost-web "Ghost booted in" $HOME/ghost.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_GHOST.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>@insecureadmin {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_NOTHOMESUBNET\n"
  inner_block=$inner_block">>>>>>>>path /ghost/*\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://ghost-web:2368 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_GHOST $MANAGETLS_GHOST "$is_integrate_hshq" $NETDEFAULT_GHOST "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll ghost "$FMLNAME_GHOST" $USERTYPE_GHOST "https://$SUB_GHOST.$HOMESERVER_DOMAIN" "ghost.png"
    restartAllCaddyContainers
  fi
}

function outputConfigGhost()
{
  cat <<EOFGW > $HOME/ghost-compose.yml
$STACK_VERSION_PREFIX ghost $(getScriptStackVersion ghost)
version: '3.5'

services:
  ghost-db:
    image: $(getScriptImageByContainerName ghost-db)
    container_name: ghost-db
    hostname: ghost-db
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command: mysqld --innodb-buffer-pool-size=128M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
    networks:
      - int-ghost-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-ghost-db:/var/lib/mysql
      - \${HSHQ_SCRIPTS_DIR}/user/exportMySQL.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/ghost/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.ghost-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.ghost-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.ghost-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.ghost-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.ghost-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.ghost-hourly-db.email-from=Ghost Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.ghost-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.ghost-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.ghost-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.ghost-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.ghost-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.ghost-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.ghost-monthly-db.email-from=Ghost Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.ghost-monthly-db.mail-only-on-error=false"

  ghost-web:
    image: $(getScriptImageByContainerName ghost-web)
    container_name: ghost-web
    hostname: ghost-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - ghost-db
    networks:
      - int-ghost-net
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-ghost-web:/var/lib/ghost/content

volumes:
  v-ghost-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/ghost/db
  v-ghost-web:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/ghost/web

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-ghost-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFGW

  cat <<EOFGW > $HOME/ghost.env
MYSQL_DATABASE=$GHOST_DATABASE_NAME
MYSQL_ROOT_PASSWORD=$GHOST_DATABASE_ROOT_PASSWORD
MYSQL_USER=$GHOST_DATABASE_USER
MYSQL_PASSWORD=$GHOST_DATABASE_USER_PASSWORD
database__client=mysql
database__connection__host=ghost-db
database__connection__database=$GHOST_DATABASE_NAME
database__connection__user=$GHOST_DATABASE_USER
database__connection__password=$GHOST_DATABASE_USER_PASSWORD
url=https://$SUB_GHOST.$HOMESERVER_DOMAIN
NODE_ENV=development
EOFGW
}

function performUpdateGhost()
{
  perform_stack_name=ghost
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=mariadb:10.7.3,ghost:5.59.1-alpine
      image_update_map[0]="mariadb:10.7.3,mariadb:10.7.3"
      image_update_map[1]="ghost:5.59.1-alpine,ghost:5.80.3-alpine"
    ;;
    2)
      newVer=v4
      curImageList=mariadb:10.7.3,ghost:5.75.2-alpine
      image_update_map[0]="mariadb:10.7.3,mariadb:10.7.3"
      image_update_map[1]="ghost:5.75.2-alpine,ghost:5.80.3-alpine"
    ;;
    3)
      newVer=v4
      curImageList=mariadb:10.7.3,ghost:5.78.0-alpine
      image_update_map[0]="mariadb:10.7.3,mariadb:10.7.3"
      image_update_map[1]="ghost:5.78.0-alpine,ghost:5.80.3-alpine"
    ;;
    4)
      newVer=v4
      curImageList=mariadb:10.7.3,ghost:5.80.3-alpine
      image_update_map[0]="mariadb:10.7.3,mariadb:10.7.3"
      image_update_map[1]="ghost:5.80.3-alpine,ghost:5.80.3-alpine"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# PeerTube
function installPeerTube()
{
  set +e
  is_integrate_hshq=$1
  # Evaulate whether directory exists
  checkDeleteStackAndDirectory peertube "PeerTube"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PEERTUBE_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/peertube
  mkdir $HSHQ_STACKS_DIR/peertube/config
  mkdir $HSHQ_STACKS_DIR/peertube/db
  mkdir $HSHQ_STACKS_DIR/peertube/dbexport
  mkdir $HSHQ_STACKS_DIR/peertube/data
  chmod 777 $HSHQ_STACKS_DIR/peertube/dbexport
  mkdir $HSHQ_NONBACKUP_DIR/peertube
  mkdir $HSHQ_NONBACKUP_DIR/peertube/assets
  mkdir $HSHQ_NONBACKUP_DIR/peertube/redis

  initServicesCredentials

  pt_secret=$(openssl rand -hex 32)
  set +e
  docker exec mailu-admin flask mailu alias-delete $PEERTUBE_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $ADMIN_USERNAME_BASE"_peertube" $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS
  outputConfigPeerTube
  installStack peertube peertube-app "HTTP server listening on 0.0.0.0" $HOME/peertube.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  docker exec peertube-app bash -c "echo $PEERTUBE_ADMIN_PASSWORD | npm run reset-password -- -u root" > /dev/null
  docker exec -u 999 peertube-app bash -c "npm run plugin:install -- --npm-name peertube-plugin-auth-ldap" > /dev/null
  docker exec -u 999 peertube-app bash -c "npm run plugin:install -- --npm-name peertube-plugin-livechat" > /dev/null
  docker exec -u 999 peertube-app bash -c "npm run plugin:install -- --npm-name peertube-theme-dark" > /dev/null
  docker exec peertube-db /dbexport/setupLDAP.sh
  rm -f $HSHQ_STACKS_DIR/peertube/dbexport/setupLDAP.sh
  docker container restart peertube-app

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PEERTUBE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://peertube-app:9000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PEERTUBE $MANAGETLS_PEERTUBE "$is_integrate_hshq" $NETDEFAULT_PEERTUBE "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll peertube "$FMLNAME_PEERTUBE" $USERTYPE_PEERTUBE "https://$SUB_PEERTUBE.$HOMESERVER_DOMAIN" "peertube.png"
    restartAllCaddyContainers
  fi
}

function outputConfigPeerTube()
{
  cat <<EOFPT > $HOME/peertube-compose.yml
$STACK_VERSION_PREFIX peertube $(getScriptStackVersion peertube)
version: '3.5'

services:
  peertube-db:
    image: $(getScriptImageByContainerName peertube-db)
    container_name: peertube-db
    hostname: peertube-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    depends_on:
      - peertube-redis
    networks:
      - int-peertube-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/peertube/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/peertube/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.peertube-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.peertube-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.peertube-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.peertube-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.peertube-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.peertube-hourly-db.email-from=PeerTube Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.peertube-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.peertube-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.peertube-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.peertube-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.peertube-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.peertube-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.peertube-monthly-db.email-from=PeerTube Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.peertube-monthly-db.mail-only-on-error=false"

  peertube-app:
    image: $(getScriptImageByContainerName peertube-app)
    container_name: peertube-app
    hostname: peertube-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-peertube-net
      - dock-proxy-net
      - dock-ext-net
      - dock-ldap-net
      - dock-internalmail-net
    ports:
      - 1935:1935
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/peertube/data:/data
      - \${HSHQ_STACKS_DIR}/peertube/config:/config
      - v-peertube-assets:/app/client/dist
    environment:
      - PEERTUBE_TRUST_PROXY=["127.0.0.1", "loopback", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]

  peertube-redis:
    image: $(getScriptImageByContainerName peertube-redis)
    container_name: peertube-redis
    hostname: peertube-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-peertube-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-peertube-redis:/bitnami/redis/data
    environment:
      - ALLOW_EMPTY_PASSWORD=yes

volumes:
  v-peertube-assets:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/peertube/assets
  v-peertube-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/peertube/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-peertube-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFPT

  cat <<EOFPT > $HOME/peertube.env
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$PEERTUBE_DATABASE_NAME
POSTGRES_USER=$PEERTUBE_DATABASE_USER
POSTGRES_PASSWORD=$PEERTUBE_DATABASE_USER_PASSWORD
PEERTUBE_DB_SUFFIX=db
PEERTUBE_DB_HOSTNAME=peertube-db
PEERTUBE_DB_USERNAME=$PEERTUBE_DATABASE_USER
PEERTUBE_DB_PASSWORD=$PEERTUBE_DATABASE_USER_PASSWORD
PEERTUBE_DB_SSL=false
PEERTUBE_SECRET=$pt_secret
PEERTUBE_WEBSERVER_HOSTNAME=$SUB_PEERTUBE.$HOMESERVER_DOMAIN
PEERTUBE_WEBSERVER_PORT=443
PEERTUBE_WEBSERVER_HTTPS=true
PEERTUBE_SMTP_HOSTNAME=$SMTP_HOSTNAME
PEERTUBE_SMTP_PORT=$SMTP_HOSTPORT
PEERTUBE_SMTP_FROM=$EMAIL_ADMIN_EMAIL_ADDRESS
PEERTUBE_SMTP_TLS=false
PEERTUBE_SMTP_DISABLE_STARTTLS=false
PEERTUBE_ADMIN_EMAIL=$PEERTUBE_ADMIN_EMAIL_ADDRESS
PEERTUBE_REDIS_HOSTNAME=peertube-redis
PEERTUBE_REDIS_PORT=6379
EOFPT

  cat <<EOFPT > $HSHQ_STACKS_DIR/peertube/config/production.yaml
smtp:
  ca_file: /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
theme:
  default: 'dark'
EOFPT

  cat <<EOFPT > $HSHQ_STACKS_DIR/peertube/dbexport/setupLDAP.sh
#!/bin/bash

PGPASSWORD=$PEERTUBE_DATABASE_USER_PASSWORD
sqlcmd="update plugin set settings='{\"url\": \"ldaps://ldapserver:636\",\"weight\": 100,\"bind-dn\": \"$LDAP_READONLY_USER_BIND_DN\",\"custom-ca\": \"/usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt\",\"group-mod\": \"\",\"group-base\": \"\",\"group-user\": \"\",\"group-admin\": \"\",\"search-base\": \"$LDAP_BASE_DN\",\"group-filter\": \"\",\"insecure-tls\": false,\"mail-property\": \"mail\",\"search-filter\": \"(&(|(mail={{username}})(uid={{username}}))(memberOf=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN))\",\"bind-credentials\": \"$LDAP_READONLY_USER_PASSWORD\",\"username-property\": \"uid\",\"mail-property-index\": \"0\"}' where name='auth-ldap';"
echo "\$sqlcmd" | psql -U $PEERTUBE_DATABASE_USER $PEERTUBE_DATABASE_NAME
EOFPT

  chmod +x $HSHQ_STACKS_DIR/peertube/dbexport/setupLDAP.sh
}

function performUpdatePeerTube()
{
  perform_stack_name=peertube
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=postgres:15.0-bullseye,chocobozzz/peertube:v5.2.0-bullseye,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="chocobozzz/peertube:v5.2.0-bullseye,chocobozzz/peertube:v6.0.3-bookworm"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    2)
      newVer=v3
      curImageList=postgres:15.0-bullseye,chocobozzz/peertube:v6.0.2-bookworm,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="chocobozzz/peertube:v6.0.2-bookworm,chocobozzz/peertube:v6.0.3-bookworm"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    3)
      newVer=v3
      curImageList=postgres:15.0-bullseye,chocobozzz/peertube:v6.0.3-bookworm,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="chocobozzz/peertube:v6.0.3-bookworm,chocobozzz/peertube:v6.0.3-bookworm"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# HomeAssistant
function installHomeAssistant()
{
  set +e
  is_integrate_hshq=$1
  # Evaulate whether directory exists
  checkDeleteStackAndDirectory homeassistant "HomeAssistant"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_HOMEASSISTANT_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_HOMEASSISTANT_CONFIGURATOR
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_HOMEASSISTANT_NODERED
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_HOMEASSISTANT_TASMOADMIN
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/homeassistant
  mkdir $HSHQ_STACKS_DIR/homeassistant/config
  mkdir $HSHQ_STACKS_DIR/homeassistant/config/www
  mkdir $HSHQ_STACKS_DIR/homeassistant/config/www/images
  mkdir $HSHQ_STACKS_DIR/homeassistant/config/www/plugins
  mkdir $HSHQ_STACKS_DIR/homeassistant/config/www/themes
  mkdir $HSHQ_STACKS_DIR/homeassistant/configurator
  mkdir $HSHQ_STACKS_DIR/homeassistant/db
  mkdir $HSHQ_STACKS_DIR/homeassistant/dbexport
  mkdir $HSHQ_STACKS_DIR/homeassistant/media
  mkdir $HSHQ_STACKS_DIR/homeassistant/nodered
  chmod 777 $HSHQ_STACKS_DIR/homeassistant/dbexport

  initServicesCredentials
  generateCert homeassistant-app "homeassistant-app,host.docker.internal"
  generateCert homeassistant-configurator homeassistant-configurator
  generateCert homeassistant-nodered homeassistant-nodered
  outputConfigHomeAssistant

  installStack homeassistant homeassistant-app "legacy-services successfully started" $HOME/homeassistant.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Waiting 10 seconds for HomeAssistant to load"
  sleep 10
  docker container stop homeassistant-app
  sudo mv $HSHQ_STACKS_DIR/homeassistant/configuration.yaml $HSHQ_STACKS_DIR/homeassistant/config/configuration.yaml
  docker container start homeassistant-app

  inner_block=""
  inner_block=$inner_block">>https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://host.docker.internal:$HOMEASSISTANT_LOCALHOST_PORT {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_HOMEASSISTANT_APP $MANAGETLS_HOMEASSISTANT_APP "$is_integrate_hshq" $NETDEFAULT_HOMEASSISTANT_APP "$inner_block"

  inner_block=""
  inner_block=$inner_block">>https://$SUB_HOMEASSISTANT_CONFIGURATOR.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://homeassistant-configurator {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_HOMEASSISTANT_CONFIGURATOR $MANAGETLS_HOMEASSISTANT_CONFIGURATOR "$is_integrate_hshq" $NETDEFAULT_HOMEASSISTANT_CONFIGURATOR "$inner_block"

  inner_block=""
  inner_block=$inner_block">>https://$SUB_HOMEASSISTANT_NODERED.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://homeassistant-nodered {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_HOMEASSISTANT_NODERED $MANAGETLS_HOMEASSISTANT_NODERED "$is_integrate_hshq" $NETDEFAULT_HOMEASSISTANT_NODERED "$inner_block"

  inner_block=""
  inner_block=$inner_block">>https://$SUB_HOMEASSISTANT_TASMOADMIN.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://homeassistant-tasmoadmin {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_HOMEASSISTANT_TASMOADMIN $MANAGETLS_HOMEASSISTANT_TASMOADMIN "$is_integrate_hshq" $NETDEFAULT_HOMEASSISTANT_TASMOADMIN "$inner_block"

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll homeassistant "$FMLNAME_HOMEASSISTANT_APP" $USERTYPE_HOMEASSISTANT_APP "https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN" "homeassistant.png"
    insertEnableSvcUptimeKuma homeassistant "$FMLNAME_HOMEASSISTANT_NODERED" $USERTYPE_HOMEASSISTANT_NODERED "https://$SUB_HOMEASSISTANT_NODERED.$HOMESERVER_DOMAIN" true
    insertEnableSvcUptimeKuma homeassistant "$FMLNAME_HOMEASSISTANT_TASMOADMIN" $USERTYPE_HOMEASSISTANT_TASMOADMIN "https://$SUB_HOMEASSISTANT_TASMOADMIN.$HOMESERVER_DOMAIN" true
    restartAllCaddyContainers
  fi
}

function outputConfigHomeAssistant()
{
  cat <<EOFHA > $HOME/homeassistant-compose.yml
$STACK_VERSION_PREFIX homeassistant $(getScriptStackVersion homeassistant)
version: '3.5'

services:
  homeassistant-db:
    image: $(getScriptImageByContainerName homeassistant-db)
    container_name: homeassistant-db
    hostname: homeassistant-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - dock-privateip-net
      - dock-dbs-net
    ports:
      - $HOMEASSISTANT_DB_LOCALHOST_PORT:5432
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/dbexport:/dbexport
    environment:
      - POSTGRES_DB=$HOMEASSISTANT_DATABASE_NAME
      - POSTGRES_USER=$HOMEASSISTANT_DATABASE_USER
      - POSTGRES_PASSWORD=$HOMEASSISTANT_DATABASE_USER_PASSWORD
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.homeassistant-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.homeassistant-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.homeassistant-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.homeassistant-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.homeassistant-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.homeassistant-hourly-db.email-from=Home Assistant Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.homeassistant-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.homeassistant-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.homeassistant-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.homeassistant-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.homeassistant-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.homeassistant-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.homeassistant-monthly-db.email-from=Home Assistant Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.homeassistant-monthly-db.mail-only-on-error=false"

  homeassistant-app:
    image: $(getScriptImageByContainerName homeassistant-app)
    container_name: homeassistant-app
    hostname: homeassistant-app
    restart: unless-stopped
    env_file: stack.env
    privileged: true
    depends_on:
      - homeassistant-db
    network_mode: host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - /etc/ssl/certs/ca-certificates.crt:/usr/local/lib/python3.11/site-packages/certifi/cacert.pem:ro
      - \${HSHQ_SSL_DIR}/homeassistant-app.crt:/certs/homeassistant-app.crt
      - \${HSHQ_SSL_DIR}/homeassistant-app.key:/certs/homeassistant-app.key
      - \${HSHQ_STACKS_DIR}/homeassistant/config:/config
      - \${HSHQ_STACKS_DIR}/homeassistant/media:/media

  homeassistant-nodered:
    image: $(getScriptImageByContainerName homeassistant-nodered)
    container_name: homeassistant-nodered
    hostname: homeassistant-nodered
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - homeassistant-app
    networks:
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/nodered:/data
      - \${HSHQ_SSL_DIR}/homeassistant-nodered.crt:/data/homeassistant-nodered.crt
      - \${HSHQ_SSL_DIR}/homeassistant-nodered.key:/data/homeassistant-nodered.key

  homeassistant-configurator:
    image: $(getScriptImageByContainerName homeassistant-configurator)
    container_name: homeassistant-configurator
    hostname: homeassistant-configurator
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - homeassistant-app
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/homeassistant-configurator.crt:/certs/homeassistant-configurator.crt
      - \${HSHQ_SSL_DIR}/homeassistant-configurator.key:/certs/homeassistant-configurator.key
      - \${HSHQ_STACKS_DIR}/homeassistant/configurator:/config
      - \${HSHQ_STACKS_DIR}/homeassistant/config:/hass-config

  homeassistant-tasmoadmin:
    image: $(getScriptImageByContainerName homeassistant-tasmoadmin)
    container_name: homeassistant-tasmoadmin
    hostname: homeassistant-tasmoadmin
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - homeassistant-app
    networks:
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/tasmoadmin:/data

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true

EOFHA

  cat <<EOFHA > $HOME/homeassistant.env
UID=$USERID
GID=$GROUPID
EOFHA

  cat <<EOFCF > $HSHQ_STACKS_DIR/homeassistant/configurator/settings.conf
{
    "PORT": 443,
    "BASEPATH": "/hass-config",
    "HASS_API": "",
    "USERNAME": "$HOMEASSISTANT_CONFIGURATOR_USER",
    "PASSWORD": "{sha256}$(echo -n $HOMEASSISTANT_CONFIGURATOR_USER_PASSWORD | openssl dgst -sha256 | cut -d"=" -f2 | xargs)",
    "SSL_CERTIFICATE": "/certs/homeassistant-configurator.crt",
    "SSL_KEY": "/certs/homeassistant-configurator.key"
}
EOFCF

  cat <<EOFCF > $HSHQ_STACKS_DIR/homeassistant/nodered/settings.js
module.exports = {
    flowFile: 'flows.json',
    flowFilePretty: true,
    credentialSecret: "$(pwgen -c -n 32 1)",
    https: {
      key: require("fs").readFileSync('/data/homeassistant-nodered.key'),
      cert: require("fs").readFileSync('/data/homeassistant-nodered.crt')
    },
    requireHttps: true,
    uiPort: 443,
    logging: {
        console: {
            level: "info",
            metrics: false,
            audit: false
        }
    },
    exportGlobalContextKeys: false,
    externalModules: {
    },
    editorTheme: {
        theme: "dark",
        tours: false
    },
    functionExternalModules: true,
    functionGlobalContext: {
    },
    debugMaxLength: 1000,
    mqttReconnectTime: 15000,
    serialReconnectTime: 15000,
}
EOFCF

  cat <<EOFHC > $HSHQ_STACKS_DIR/homeassistant/configuration.yaml

default_config:

homeassistant:
  time_zone: $TZ
  external_url: "https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN"
  internal_url: "https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN"
  country: US

frontend:
  themes: !include_dir_merge_named themes

tts:
  - platform: picotts
    language: 'en-US'

notify:
  - name: "LOCAL_SMTP"
    platform: smtp
    server: "$SUB_POSTFIX.$HOMESERVER_DOMAIN"
    port: 25
    timeout: 15
    sender: "$EMAIL_SMTP_EMAIL_ADDRESS"
    encryption: starttls
    verify_ssl: false
    recipient:
      - "$EMAIL_ADMIN_EMAIL_ADDRESS"
    sender_name: "HomeAssistant $HSHQ_ADMIN_NAME"

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
  ip_ban_enabled: true
  login_attempts_threshold: 5
  server_host: 0.0.0.0
  server_port: $HOMEASSISTANT_LOCALHOST_PORT
  ssl_certificate: /certs/homeassistant-app.crt
  ssl_key: /certs/homeassistant-app.key

panel_iframe:
  nodered:
    title: "Node Red"
    url: "https://$SUB_HOMEASSISTANT_NODERED.$HOMESERVER_DOMAIN"
    icon: mdi:file-tree
  configurator:
    title: "Configurator"
    icon: mdi:wrench
    url: "https://$SUB_HOMEASSISTANT_CONFIGURATOR.$HOMESERVER_DOMAIN"
    require_admin: true
  tasmoadmin:
    title: "TasmoAdmin"
    url: "https://$SUB_HOMEASSISTANT_TASMOADMIN.$HOMESERVER_DOMAIN"
    icon: mdi:home-automation

recorder:
  db_url: postgresql://$HOMEASSISTANT_DATABASE_USER:$HOMEASSISTANT_DATABASE_USER_PASSWORD@localhost:$HOMEASSISTANT_DB_LOCALHOST_PORT/$HOMEASSISTANT_DATABASE_NAME

influxdb:
  api_version: 2
  ssl: true
  host: $SUB_INFLUXDB.$HOMESERVER_DOMAIN
  port: 443
  verify_ssl: true
  ssl_ca_cert: /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
  token: "$INFLUXDB_TOKEN"
  organization: "$INFLUXDB_ORG"
  bucket: "$INFLUXDB_HA_BUCKET"

zeroconf:
  default_interface: true

EOFHC

}

function performUpdateHomeAssistant()
{
  perform_stack_name=homeassistant
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v5
      curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2023.8,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="homeassistant/home-assistant:2023.8,homeassistant/home-assistant:2024.3.1"
      image_update_map[2]="nodered/node-red:3.0.2,nodered/node-red:3.1.7"
      image_update_map[3]="causticlab/hass-configurator-docker:0.5.2,causticlab/hass-configurator-docker:0.5.2"
      image_update_map[4]="ghcr.io/tasmoadmin/tasmoadmin:v3.1.0,ghcr.io/tasmoadmin/tasmoadmin:v4.0.1"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfV4UpdateHASS false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    2)
      newVer=v5
      curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2024.1.3,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="homeassistant/home-assistant:2024.1.3,homeassistant/home-assistant:2024.3.1"
      image_update_map[2]="nodered/node-red:3.0.2,nodered/node-red:3.1.7"
      image_update_map[3]="causticlab/hass-configurator-docker:0.5.2,causticlab/hass-configurator-docker:0.5.2"
      image_update_map[4]="ghcr.io/tasmoadmin/tasmoadmin:v3.1.0,ghcr.io/tasmoadmin/tasmoadmin:v4.0.1"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfV4UpdateHASS false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    3)
      newVer=v5
      curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2024.1.5,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="homeassistant/home-assistant:2024.1.5,homeassistant/home-assistant:2024.3.1"
      image_update_map[2]="nodered/node-red:3.0.2,nodered/node-red:3.1.7"
      image_update_map[3]="causticlab/hass-configurator-docker:0.5.2,causticlab/hass-configurator-docker:0.5.2"
      image_update_map[4]="ghcr.io/tasmoadmin/tasmoadmin:v3.1.0,ghcr.io/tasmoadmin/tasmoadmin:v4.0.1"
    ;;
    4)
      newVer=v5
      curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2024.1.6,nodered/node-red:3.0.2,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v3.1.0
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="homeassistant/home-assistant:2024.1.6,homeassistant/home-assistant:2024.3.1"
      image_update_map[2]="nodered/node-red:3.0.2,nodered/node-red:3.1.7"
      image_update_map[3]="causticlab/hass-configurator-docker:0.5.2,causticlab/hass-configurator-docker:0.5.2"
      image_update_map[4]="ghcr.io/tasmoadmin/tasmoadmin:v3.1.0,ghcr.io/tasmoadmin/tasmoadmin:v4.0.1"
    ;;
    5)
      newVer=v5
      curImageList=postgres:15.0-bullseye,homeassistant/home-assistant:2024.3.1,nodered/node-red:3.1.7,causticlab/hass-configurator-docker:0.5.2,ghcr.io/tasmoadmin/tasmoadmin:v4.0.1
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="homeassistant/home-assistant:2024.3.1,homeassistant/home-assistant:2024.3.1"
      image_update_map[2]="nodered/node-red:3.1.7,nodered/node-red:3.1.7"
      image_update_map[3]="causticlab/hass-configurator-docker:0.5.2,causticlab/hass-configurator-docker:0.5.2"
      image_update_map[4]="ghcr.io/tasmoadmin/tasmoadmin:v4.0.1,ghcr.io/tasmoadmin/tasmoadmin:v4.0.1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function mfV4UpdateHASS()
{
  # Replace the config and compose files...
  # Typically, we would be more surgical with the changes,
  # but in this case, the amount of users affected is minimal.
  cat <<EOFHC > $HSHQ_STACKS_DIR/homeassistant/config/configuration.yaml

default_config:

homeassistant:
  time_zone: $TZ
  external_url: "https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN"
  internal_url: "https://$SUB_HOMEASSISTANT_APP.$HOMESERVER_DOMAIN"
  country: US

frontend:
  themes: !include_dir_merge_named themes

tts:
  - platform: picotts
    language: 'en-US'

notify:
  - name: "LOCAL_SMTP"
    platform: smtp
    server: "$SUB_POSTFIX.$HOMESERVER_DOMAIN"
    port: 25
    timeout: 15
    sender: "$EMAIL_SMTP_EMAIL_ADDRESS"
    encryption: starttls
    verify_ssl: false
    recipient:
      - "$EMAIL_ADMIN_EMAIL_ADDRESS"
    sender_name: "HomeAssistant $HSHQ_ADMIN_NAME"

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

http:
  use_x_forwarded_for: true
  trusted_proxies:
    - 10.0.0.0/8
    - 172.16.0.0/12
    - 192.168.0.0/16
  ip_ban_enabled: true
  login_attempts_threshold: 5
  server_host: 0.0.0.0
  server_port: $HOMEASSISTANT_LOCALHOST_PORT
  ssl_certificate: /certs/homeassistant-app.crt
  ssl_key: /certs/homeassistant-app.key

panel_iframe:
  nodered:
    title: "Node Red"
    url: "https://$SUB_HOMEASSISTANT_NODERED.$HOMESERVER_DOMAIN"
    icon: mdi:file-tree
  configurator:
    title: "Configurator"
    icon: mdi:wrench
    url: "https://$SUB_HOMEASSISTANT_CONFIGURATOR.$HOMESERVER_DOMAIN"
    require_admin: true
  tasmoadmin:
    title: "TasmoAdmin"
    url: "https://$SUB_HOMEASSISTANT_TASMOADMIN.$HOMESERVER_DOMAIN"
    icon: mdi:home-automation

recorder:
  db_url: postgresql://$HOMEASSISTANT_DATABASE_USER:$HOMEASSISTANT_DATABASE_USER_PASSWORD@localhost:$HOMEASSISTANT_DB_LOCALHOST_PORT/$HOMEASSISTANT_DATABASE_NAME

influxdb:
  api_version: 2
  ssl: true
  host: $SUB_INFLUXDB.$HOMESERVER_DOMAIN
  port: 443
  verify_ssl: true
  ssl_ca_cert: /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
  token: "$INFLUXDB_TOKEN"
  organization: "$INFLUXDB_ORG"
  bucket: "$INFLUXDB_HA_BUCKET"

EOFHC

  cat <<EOFHA > $HOME/homeassistant-compose.yml
$STACK_VERSION_PREFIX homeassistant $(getScriptStackVersion homeassistant)
version: '3.5'

services:
  homeassistant-db:
    image: $(getScriptImageByContainerName homeassistant-db)
    container_name: homeassistant-db
    hostname: homeassistant-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - dock-privateip-net
      - dock-dbs-net
    ports:
      - $HOMEASSISTANT_DB_LOCALHOST_PORT:5432
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/dbexport:/dbexport
    environment:
      - POSTGRES_DB=$HOMEASSISTANT_DATABASE_NAME
      - POSTGRES_USER=$HOMEASSISTANT_DATABASE_USER
      - POSTGRES_PASSWORD=$HOMEASSISTANT_DATABASE_USER_PASSWORD
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.homeassistant-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.homeassistant-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.homeassistant-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.homeassistant-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.homeassistant-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.homeassistant-hourly-db.email-from=Home Assistant Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.homeassistant-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.homeassistant-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.homeassistant-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.homeassistant-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.homeassistant-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.homeassistant-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.homeassistant-monthly-db.email-from=Home Assistant Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.homeassistant-monthly-db.mail-only-on-error=false"

  homeassistant-app:
    image: $(getScriptImageByContainerName homeassistant-app)
    container_name: homeassistant-app
    hostname: homeassistant-app
    restart: unless-stopped
    env_file: stack.env
    privileged: true
    depends_on:
      - homeassistant-db
    network_mode: host
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - /etc/ssl/certs/ca-certificates.crt:/usr/local/lib/python3.11/site-packages/certifi/cacert.pem:ro
      - \${HSHQ_SSL_DIR}/homeassistant-app.crt:/certs/homeassistant-app.crt
      - \${HSHQ_SSL_DIR}/homeassistant-app.key:/certs/homeassistant-app.key
      - \${HSHQ_STACKS_DIR}/homeassistant/config:/config
      - \${HSHQ_STACKS_DIR}/homeassistant/media:/media

  homeassistant-nodered:
    image: $(getScriptImageByContainerName homeassistant-nodered)
    container_name: homeassistant-nodered
    hostname: homeassistant-nodered
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - homeassistant-app
    networks:
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/nodered:/data
      - \${HSHQ_SSL_DIR}/homeassistant-nodered.crt:/data/homeassistant-nodered.crt
      - \${HSHQ_SSL_DIR}/homeassistant-nodered.key:/data/homeassistant-nodered.key

  homeassistant-configurator:
    image: $(getScriptImageByContainerName homeassistant-configurator)
    container_name: homeassistant-configurator
    hostname: homeassistant-configurator
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - homeassistant-app
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/homeassistant-configurator.crt:/certs/homeassistant-configurator.crt
      - \${HSHQ_SSL_DIR}/homeassistant-configurator.key:/certs/homeassistant-configurator.key
      - \${HSHQ_STACKS_DIR}/homeassistant/configurator:/config
      - \${HSHQ_STACKS_DIR}/homeassistant/config:/hass-config

  homeassistant-tasmoadmin:
    image: $(getScriptImageByContainerName homeassistant-tasmoadmin)
    container_name: homeassistant-tasmoadmin
    hostname: homeassistant-tasmoadmin
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - homeassistant-app
    networks:
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/homeassistant/tasmoadmin:/data

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true

EOFHA

  chmod 600 $HOME/homeassistant-compose.yml
  sudo chown root:root $HOME/homeassistant-compose.yml
  sudo mv $HOME/homeassistant-compose.yml $upgrade_compose_file
  insertEnableSvcUptimeKuma homeassistant "$FMLNAME_HOMEASSISTANT_TASMOADMIN" $USERTYPE_HOMEASSISTANT_TASMOADMIN "https://$SUB_HOMEASSISTANT_TASMOADMIN.$HOMESERVER_DOMAIN" true
}

# Gitlab
function installGitlab()
{
  set +e
  is_integrate_hshq=$1
  # Remember to check if exists
  checkDeleteStackAndDirectory gitlab "Gitlab"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_GITLAB_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/gitlab
  mkdir $HSHQ_STACKS_DIR/gitlab/app
  mkdir $HSHQ_STACKS_DIR/gitlab/app/config
  mkdir $HSHQ_STACKS_DIR/gitlab/app/data
  mkdir $HSHQ_STACKS_DIR/gitlab/app/logs
  mkdir $HSHQ_STACKS_DIR/gitlab/db
  mkdir $HSHQ_STACKS_DIR/gitlab/dbexport
  chmod 777 $HSHQ_STACKS_DIR/gitlab/dbexport
  mkdir $HSHQ_NONBACKUP_DIR/gitlab
  mkdir $HSHQ_NONBACKUP_DIR/gitlab/redis

  initServicesCredentials
  if [ -z "$GITLAB_ROOT_PASSWORD" ]; then
    GITLAB_ROOT_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GITLAB_ROOT_PASSWORD $GITLAB_ROOT_PASSWORD
  fi
  if [ -z "$GITLAB_REDIS_PASSWORD" ]; then
    GITLAB_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar GITLAB_REDIS_PASSWORD $GITLAB_REDIS_PASSWORD
  fi
  outputConfigGitlab
  generateCert gitlab-app gitlab-app
  installStack gitlab gitlab-app "" $HOME/gitlab.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 1
  startStopStack gitlab stop
  sudo rm -fr $HSHQ_STACKS_DIR/gitlab
  sudo rm -fr $HSHQ_NONBACKUP_DIR/gitlab

  mkdir $HSHQ_STACKS_DIR/gitlab
  mkdir $HSHQ_STACKS_DIR/gitlab/app
  mkdir $HSHQ_STACKS_DIR/gitlab/app/config
  mkdir $HSHQ_STACKS_DIR/gitlab/app/data
  mkdir $HSHQ_STACKS_DIR/gitlab/app/logs
  mkdir $HSHQ_STACKS_DIR/gitlab/db
  mkdir $HSHQ_STACKS_DIR/gitlab/dbexport
  chmod 777 $HSHQ_STACKS_DIR/gitlab/dbexport
  mkdir $HSHQ_NONBACKUP_DIR/gitlab
  mkdir $HSHQ_NONBACKUP_DIR/gitlab/redis

  mv $HOME/gitlab.rb $HSHQ_STACKS_DIR/gitlab/app/config/gitlab.rb
  mv $HOME/gitlab-postconfigure.sh $HSHQ_STACKS_DIR/gitlab/app/config/gitlab-postconfigure.sh
  chmod +x $HSHQ_STACKS_DIR/gitlab/app/config/gitlab-postconfigure.sh
  startStopStack gitlab start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_GITLAB.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://gitlab-app {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_GITLAB $MANAGETLS_GITLAB "$is_integrate_hshq" $NETDEFAULT_GITLAB "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll gitlab "$FMLNAME_GITLAB" $USERTYPE_GITLAB "https://$SUB_GITLAB.$HOMESERVER_DOMAIN" "gitlab.png"
    restartAllCaddyContainers
  fi
}

function outputConfigGitlab()
{
  cat <<EOFGL > $HOME/gitlab-compose.yml
$STACK_VERSION_PREFIX gitlab $(getScriptStackVersion gitlab)
version: '3.5'

services:
  gitlab-db:
    image: $(getScriptImageByContainerName gitlab-db)
    container_name: gitlab-db
    hostname: gitlab-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    depends_on:
      - gitlab-redis
    networks:
      - int-gitlab-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/gitlab/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/gitlab/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.gitlab-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.gitlab-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.gitlab-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.gitlab-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.gitlab-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.gitlab-hourly-db.email-from=Gitlab Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.gitlab-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.gitlab-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.gitlab-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.gitlab-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.gitlab-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.gitlab-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.gitlab-monthly-db.email-from=Gitlab Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.gitlab-monthly-db.mail-only-on-error=false"

  gitlab-app:
    image: $(getScriptImageByContainerName gitlab-app)
    container_name: gitlab-app
    hostname: gitlab-app
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-gitlab-net
      - dock-proxy-net
      - dock-ext-net
      - dock-ldap-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/gitlab-app.crt:/certs/gitlab-app.crt
      - \${HSHQ_SSL_DIR}/gitlab-app.key:/certs/gitlab-app.key
      - \${HSHQ_STACKS_DIR}/gitlab/app/config:/etc/gitlab
      - \${HSHQ_STACKS_DIR}/gitlab/app/logs:/var/log/gitlab
      - \${HSHQ_STACKS_DIR}/gitlab/app/data:/var/opt/gitlab
    environment:
      - GITLAB_ROOT_EMAIL=$EMAIL_ADMIN_EMAIL_ADDRESS
      - GITLAB_POST_RECONFIGURE_SCRIPT=/etc/gitlab/gitlab-postconfigure.sh

  gitlab-redis:
    image: $(getScriptImageByContainerName gitlab-redis)
    container_name: gitlab-redis
    hostname: gitlab-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-gitlab-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-gitlab-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$GITLAB_REDIS_PASSWORD

volumes:
  v-gitlab-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/gitlab/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-gitlab-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFGL

  cat <<EOFGL > $HOME/gitlab.env
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$GITLAB_DATABASE_NAME
POSTGRES_USER=$GITLAB_DATABASE_USER
POSTGRES_PASSWORD=$GITLAB_DATABASE_USER_PASSWORD
EOFGL

  cat <<EOFGL > $HOME/gitlab.rb
external_url 'https://$SUB_GITLAB.$HOMESERVER_DOMAIN'
gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = '$SMTP_HOSTNAME'
gitlab_rails['smtp_port'] = $SMTP_HOSTPORT
gitlab_rails['smtp_user_name'] = '$EMAIL_SMTP_EMAIL_ADDRESS'
gitlab_rails['smtp_password'] = '$EMAIL_SMTP_PASSWORD'
gitlab_rails['smtp_domain'] = '$SMTP_HOSTNAME'
gitlab_rails['smtp_authentication'] = 'login'
gitlab_rails['smtp_enable_starttls_auto'] = true
gitlab_rails['gitlab_email_enabled'] = true
gitlab_rails['gitlab_email_from'] = '$EMAIL_SMTP_EMAIL_ADDRESS'
gitlab_rails['gitlab_email_display_name'] = 'Gitlab $HSHQ_ADMIN_NAME'
gitlab_rails['gitlab_email_reply_to'] = '$EMAIL_ADMIN_EMAIL_ADDRESS'
gitlab_rails['incoming_email_enabled'] = false
alertmanager['admin_email'] = '$EMAIL_ADMIN_EMAIL_ADDRESS'
gitlab_rails['gitlab_default_theme'] = 11
gitlab_rails['trusted_proxies'] = [ '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16' ]
gitlab_rails['terraform_state_enabled'] = false
gitlab_rails['usage_ping_enabled'] = false
gitlab_rails['ldap_enabled'] = true
gitlab_rails['ldap_servers'] = YAML.load <<-'EOS'
  main:
    label: 'LDAP'
    host: 'ldapserver'
    port: 389
    uid: 'uid'
    bind_dn: '$LDAP_READONLY_USER_BIND_DN'
    password: '$LDAP_READONLY_USER_PASSWORD'
    encryption: 'start_tls' 
    verify_certificates: true
    base: '$LDAP_BASE_DN'
    group_base: 'ou=groups,$LDAP_BASE_DN'
    admin_group: '$LDAP_ADMIN_USER_GROUP_NAME'
    lowercase_usernames: true
    tls_options:
      ca_file: /usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
EOS
gitlab_rails['initial_root_password'] = '$GITLAB_ROOT_PASSWORD'
gitlab_rails['store_initial_root_password'] = false
gitlab_rails['db_adapter'] = 'postgresql'
gitlab_rails['db_database'] = '$GITLAB_DATABASE_NAME'
gitlab_rails['db_username'] = '$GITLAB_DATABASE_USER'
gitlab_rails['db_password'] = '$GITLAB_DATABASE_USER_PASSWORD'
gitlab_rails['db_host'] = 'gitlab-db'
gitlab_rails['db_port'] = 5432
gitlab_rails['redis_host'] = 'gitlab-redis'
gitlab_rails['redis_password'] = '$GITLAB_REDIS_PASSWORD'
postgresql['shared_buffers'] = '256MB'
postgresql['enable'] = false
redis['enable'] = false
puma['worker_processes'] = 2
puma['max_threads'] = 4
sidekiq['concurrency'] = 2
sidekiq['max_concurrency'] = 5
grafana['enable'] = false
prometheus_monitoring['enable'] = false
nginx['redirect_http_to_https'] = true
nginx['ssl_certificate'] = '/certs/gitlab-app.crt'
nginx['ssl_certificate_key'] = '/certs/gitlab-app.key'
nginx['real_ip_trusted_addresses'] = [ '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16' ]
nginx['real_ip_header'] = 'X-Forwarded-For'
nginx['real_ip_recursive'] = 'on'
EOFGL

  cat <<EOFGL > $HOME/gitlab-postconfigure.sh
#!/bin/bash

gitlab-rails runner 'ApplicationSetting.last.update(signup_enabled: false)'
gitlab-rails runner 'ApplicationSetting.last.update(password_authentication_enabled_for_web: false)'
echo "Gitlab Postconfigure Scirpt Completed"

EOFGL
}

function performUpdateGitlab()
{
  perform_stack_name=gitlab
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitlab/gitlab-ce:16.2.4-ce.0,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitlab/gitlab-ce:16.2.4-ce.0,gitlab/gitlab-ce:16.8.4-ce.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitlab/gitlab-ce:16.7.0-ce.0,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitlab/gitlab-ce:16.7.0-ce.0,gitlab/gitlab-ce:16.8.4-ce.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitlab/gitlab-ce:16.8.1-ce.0,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitlab/gitlab-ce:16.8.1-ce.0,gitlab/gitlab-ce:16.8.4-ce.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitlab/gitlab-ce:16.8.4-ce.0,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitlab/gitlab-ce:16.8.4-ce.0,gitlab/gitlab-ce:16.8.4-ce.0"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Vaultwarden
function installVaultwarden()
{
  set +e
  is_integrate_hshq=$1
  # Same as before, check if directory exists
  checkDeleteStackAndDirectory vaultwarden "Vaultwarden"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_VAULTWARDEN_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_VAULTWARDEN_LDAP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/vaultwarden
  mkdir $HSHQ_STACKS_DIR/vaultwarden/app
  mkdir $HSHQ_STACKS_DIR/vaultwarden/db
  mkdir $HSHQ_STACKS_DIR/vaultwarden/dbexport
  chmod 777 $HSHQ_STACKS_DIR/vaultwarden/dbexport

  initServicesCredentials
  VAULTWARDEN_ADMIN_TOKEN_HASH=$(echo -n "$VAULTWARDEN_ADMIN_TOKEN" | argon2 $(pwgen -c -n 32 1) -id -e -m 16 | sed 's/\$/\$\$/g')
  outputConfigVaultwarden
  generateCert vaultwarden-app vaultwarden-app
  installStack vaultwarden vaultwarden-app " " $HOME/vaultwarden.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>@insecureadmin {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_NOTHOMESUBNET\n"
  inner_block=$inner_block">>>>>>>>path /admin*\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>>>redir @insecureadmin /\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://vaultwarden-app {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>>>header_up X-Real-IP {remote_host}\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_VAULTWARDEN $MANAGETLS_VAULTWARDEN "$is_integrate_hshq" $NETDEFAULT_VAULTWARDEN "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll vaultwarden "$FMLNAME_VAULTWARDEN" $USERTYPE_VAULTWARDEN "https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN" "vaultwarden.png"
    insertEnableSvcHeimdall vaultwarden "$FMLNAME_VAULTWARDEN Admin" admin "https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN/admin" "vaultwarden.png" true
    restartAllCaddyContainers
  fi
  emailVaultwardenCredentials false
}

function outputConfigVaultwarden()
{
  cat <<EOFVW > $HOME/vaultwarden-compose.yml
$STACK_VERSION_PREFIX vaultwarden $(getScriptStackVersion vaultwarden)
version: '3.5'

services:
  vaultwarden-db:
    image: $(getScriptImageByContainerName vaultwarden-db)
    container_name: vaultwarden-db
    hostname: vaultwarden-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-vaultwarden-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/vaultwarden/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/vaultwarden/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.vaultwarden-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.vaultwarden-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.vaultwarden-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.vaultwarden-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.vaultwarden-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.vaultwarden-hourly-db.email-from=Vaultwarden Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.vaultwarden-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.vaultwarden-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.vaultwarden-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.vaultwarden-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.vaultwarden-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.vaultwarden-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.vaultwarden-monthly-db.email-from=Vaultwarden Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.vaultwarden-monthly-db.mail-only-on-error=false"

  vaultwarden-app:
    image: $(getScriptImageByContainerName vaultwarden-app)
    container_name: vaultwarden-app
    hostname: vaultwarden-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - vaultwarden-db
    networks:
      - int-vaultwarden-net
      - dock-proxy-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/vaultwarden-app.crt:/certs/vaultwarden-app.crt
      - \${HSHQ_SSL_DIR}/vaultwarden-app.key:/certs/vaultwarden-app.key
      - \${HSHQ_STACKS_DIR}/vaultwarden/app:/data

  vaultwarden-ldap:
    image: $(getScriptImageByContainerName vaultwarden-ldap)
    container_name: vaultwarden-ldap
    hostname: vaultwarden-ldap
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - vaultwarden-app
    networks:
      - int-vaultwarden-net
      - dock-ldap-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
    environment:
      - VAULTWARDEN_LDAP_VAULTWARDEN_ADMIN_TOKEN=$VAULTWARDEN_ADMIN_TOKEN
      - VAULTWARDEN_LDAP_BIND_PASSWORD=$LDAP_READONLY_USER_PASSWORD

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-vaultwarden-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFVW

  cat <<EOFVW > $HOME/vaultwarden.env
UID=$USERID
GID=$GROUPID
ADMIN_TOKEN=$VAULTWARDEN_ADMIN_TOKEN_HASH
DATABASE_URL=postgresql://$VAULTWARDEN_DATABASE_USER:$VAULTWARDEN_DATABASE_USER_PASSWORD@vaultwarden-db:5432/$VAULTWARDEN_DATABASE_NAME
ROCKET_TLS={certs=/certs/vaultwarden-app.crt,key=/certs/vaultwarden-app.key}
ROCKET_PORT=443
IP_HEADER=X-Forwarded-For
SIGNUPS_ALLOWED=false
DOMAIN=https://$SUB_VAULTWARDEN.$HOMESERVER_DOMAIN
SMTP_HOST=$SMTP_HOSTNAME
SMTP_FROM_NAME=Vaultwarden $HSHQ_ADMIN_NAME
SMTP_FROM=$EMAIL_ADMIN_EMAIL_ADDRESS
SMTP_PORT=$SMTP_HOSTPORT
SMTP_SECURITY=starttls
POSTGRES_DB=$VAULTWARDEN_DATABASE_NAME
POSTGRES_USER=$VAULTWARDEN_DATABASE_USER
POSTGRES_PASSWORD=$VAULTWARDEN_DATABASE_USER_PASSWORD
VAULTWARDEN_LDAP_VAULTWARDEN_URL=https://vaultwarden-app:443
VAULTWARDEN_LDAP_HOST=ldapserver
VAULTWARDEN_LDAP_SSL=true
VAULTWARDEN_LDAP_BIND_DN=$LDAP_READONLY_USER_BIND_DN
VAULTWARDEN_LDAP_SEARCH_BASE_DN=$LDAP_BASE_DN
VAULTWARDEN_LDAP_SSL_VERIFY=true
VAULTWARDEN_LDAP_SYNC_INTERVAL_SECONDS=300
VAULTWARDEN_LDAP_SEARCH_FILTER=(&(objectClass=person)(memberof=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN))
EOFVW

}

function performUpdateVaultwarden()
{
  perform_stack_name=vaultwarden
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=postgres:15.0-bullseye,vaultwarden/server:1.29.1-alpine,thegeeklab/vaultwarden-ldap:0.6.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="vaultwarden/server:1.29.1-alpine,vaultwarden/server:1.30.5-alpine"
      image_update_map[2]="thegeeklab/vaultwarden-ldap:0.6.2,thegeeklab/vaultwarden-ldap:0.6.2"
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,vaultwarden/server:1.30.1-alpine,thegeeklab/vaultwarden-ldap:0.6.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="vaultwarden/server:1.30.1-alpine,vaultwarden/server:1.30.5-alpine"
      image_update_map[2]="thegeeklab/vaultwarden-ldap:0.6.2,thegeeklab/vaultwarden-ldap:0.6.2"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,vaultwarden/server:1.30.2-alpine,thegeeklab/vaultwarden-ldap:0.6.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="vaultwarden/server:1.30.2-alpine,vaultwarden/server:1.30.5-alpine"
      image_update_map[2]="thegeeklab/vaultwarden-ldap:0.6.2,thegeeklab/vaultwarden-ldap:0.6.2"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,vaultwarden/server:1.30.5-alpine,thegeeklab/vaultwarden-ldap:0.6.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="vaultwarden/server:1.30.5-alpine,vaultwarden/server:1.30.5-alpine"
      image_update_map[2]="thegeeklab/vaultwarden-ldap:0.6.2,thegeeklab/vaultwarden-ldap:0.6.2"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Discourse
function installDiscourse()
{
  set +e
  is_integrate_hshq=$1
  # !Check if directory exists
  checkDeleteStackAndDirectory discourse "Discourse"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_DISCOURSE
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/discourse
  mkdir $HSHQ_STACKS_DIR/discourse/db
  mkdir $HSHQ_STACKS_DIR/discourse/dbexport
  mkdir $HSHQ_STACKS_DIR/discourse/app
  chmod 777 $HSHQ_STACKS_DIR/discourse/dbexport
  mkdir $HSHQ_NONBACKUP_DIR/discourse
  mkdir $HSHQ_NONBACKUP_DIR/discourse/redis

  initServicesCredentials
  if [ -z "$DISCOURSE_DATABASE_USER_PASSWORD" ]; then
    DISCOURSE_DATABASE_USER_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar DISCOURSE_DATABASE_USER_PASSWORD $DISCOURSE_DATABASE_USER_PASSWORD
  fi
  if [ -z "$DISCOURSE_REDIS_PASSWORD" ]; then
    DISCOURSE_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar DISCOURSE_REDIS_PASSWORD $DISCOURSE_REDIS_PASSWORD
  fi
  set +e
  docker exec mailu-admin flask mailu alias-delete $DISCOURSE_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $DISCOURSE_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS
  #generateCert discourse-app discourse-app
  outputConfigDiscourse
  installStack discourse discourse-app "" $HOME/discourse.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_DISCOURSE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://discourse-app:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_DISCOURSE $MANAGETLS_DISCOURSE "$is_integrate_hshq" $NETDEFAULT_DISCOURSE "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll discourse "$FMLNAME_DISCOURSE" $USERTYPE_DISCOURSE "https://$SUB_DISCOURSE.$HOMESERVER_DOMAIN" "discourse.png"
    restartAllCaddyContainers
  fi
}

function outputConfigDiscourse()
{
  cat <<EOFDC > $HOME/discourse-compose.yml
$STACK_VERSION_PREFIX discourse $(getScriptStackVersion discourse)
version: '3.5'

services:
  discourse-db:
    image: $(getScriptImageByContainerName discourse-db)
    container_name: discourse-db
    hostname: discourse-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-discourse-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/discourse/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/discourse/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.discourse-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.discourse-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.discourse-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.discourse-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.discourse-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.discourse-hourly-db.email-from=Discourse Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.discourse-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.discourse-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.discourse-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.discourse-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.discourse-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.discourse-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.discourse-monthly-db.email-from=Discourse Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.discourse-monthly-db.mail-only-on-error=false"

  discourse-app:
    image: $(getScriptImageByContainerName discourse-app)
    container_name: discourse-app
    hostname: discourse-app
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - discourse-db
      - discourse-redis
    networks:
      - int-discourse-net
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-discourse-data:/bitnami/discourse

  discourse-sidekiq:
    image: $(getScriptImageByContainerName discourse-sidekiq)
    container_name: discourse-sidekiq
    hostname: discourse-sidekiq
    restart: unless-stopped
    env_file: stack.env
    command: /opt/bitnami/scripts/discourse-sidekiq/run.sh
    depends_on:
      - discourse-db
      - discourse-redis
    networks:
      - int-discourse-net
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-discourse-data:/bitnami/discourse

  discourse-redis:
    image: $(getScriptImageByContainerName discourse-redis)
    container_name: discourse-redis
    hostname: discourse-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-discourse-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-discourse-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$DISCOURSE_REDIS_PASSWORD

volumes:
  v-discourse-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/discourse/redis
  v-discourse-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/discourse/app

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-discourse-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFDC

  cat <<EOFDC > $HOME/discourse.env
UID=$USERID
GID=$GROUPID
DISCOURSE_USERNAME=$DISCOURSE_ADMIN_USERNAME
DISCOURSE_PASSWORD=$DISCOURSE_ADMIN_PASSWORD
DISCOURSE_EMAIL=$DISCOURSE_ADMIN_EMAIL_ADDRESS
DISCOURSE_FIRST_NAME=$(echo $HOMESERVER_ABBREV | tr '[:lower:]' '[:upper:]')
DISCOURSE_LAST_NAME=Admin
DISCOURSE_SITE_NAME=$HOMESERVER_NAME Discourse
DISCOURSE_HOST=$SUB_DISCOURSE.$HOMESERVER_DOMAIN
DISCOURSE_DATABASE_HOST=discourse-db
DISCOURSE_DATABASE_PORT_NUMBER=5432
DISCOURSE_DATABASE_USER=$DISCOURSE_DATABASE_USER
DISCOURSE_DATABASE_NAME=$DISCOURSE_DATABASE_NAME
DISCOURSE_DATABASE_PASSWORD=$DISCOURSE_DATABASE_USER_PASSWORD
DISCOURSE_REDIS_HOST=discourse-redis
DISCOURSE_REDIS_PORT_NUMBER=6379
DISCOURSE_REDIS_PASSWORD=$DISCOURSE_REDIS_PASSWORD
POSTGRESQL_CLIENT_DATABASE_HOST=discourse-db
POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER=5432
POSTGRESQL_CLIENT_CREATE_DATABASE_NAME=$DISCOURSE_DATABASE_NAME
POSTGRESQL_CLIENT_POSTGRES_USER=$DISCOURSE_DATABASE_USER
POSTGRESQL_CLIENT_POSTGRES_PASSWORD=$DISCOURSE_DATABASE_USER_PASSWORD
POSTGRESQL_CLIENT_CREATE_DATABASE_EXTENSIONS=hstore,pg_trgm
POSTGRES_DB=$DISCOURSE_DATABASE_NAME
POSTGRES_USER=$DISCOURSE_DATABASE_USER
POSTGRES_PASSWORD=$DISCOURSE_DATABASE_USER_PASSWORD
DISCOURSE_SMTP_HOST=$SMTP_HOSTNAME
DISCOURSE_SMTP_PORT=$SMTP_HOSTPORT
DISCOURSE_SMTP_PROTOCOL=tls
EOFDC

}

function performUpdateDiscourse()
{
  perform_stack_name=discourse
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=postgres:15.0-bullseye,bitnami/discourse:3.0.6,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/discourse:3.0.6,bitnami/discourse:3.2.1"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): This version of Discourse cannot be upgraded to the next version. You must export your data from this instance, uninstall and reinstall Discourse, then import your data into the new instance."
      return
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/discourse:3.1.3,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/discourse:3.1.3,bitnami/discourse:3.2.1"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    3)
      # This is unstable as a fresh installation. It strangely works when upgrading from 3.1.3...
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/discourse:3.1.4,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/discourse:3.1.4,bitnami/discourse:3.2.1"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,bitnami/discourse:3.2.1,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/discourse:3.2.1,bitnami/discourse:3.2.1"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Syncthing
function installSyncthing()
{
  set +e
  is_integrate_hshq=$1
  # !Check if directory exists
  checkDeleteStackAndDirectory syncthing "Syncthing"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: Syncthing directory exists"
    exit 1
  fi
  pullImage $IMG_SYNCTHING
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain Syncthing docker image"
    exit 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/syncthing
  mkdir $HSHQ_STACKS_DIR/syncthing/config
  mkdir $HSHQ_STACKS_DIR/syncthing/data

  initServicesCredentials
  SYNCTHING_ADMIN_PASSWORD_HASH=$(htpasswd -bnBC 10 "" $SYNCTHING_ADMIN_PASSWORD | tr -d ':\n' | sed 's/$2y/$2a/')
  SYNCTHING_API_KEY=$(pwgen -c -n 32 1)
  updateConfigVar SYNCTHING_API_KEY $SYNCTHING_API_KEY
  generateCert syncthing syncthing
  outputConfigSyncthing
  installStack syncthing syncthing "Access the GUI via the following URL" $HOME/syncthing.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing Syncthing"
    exit $retval
  fi
  sleep 3
  startStopStack syncthing stop
  alltext=$(sudo cat $HSHQ_STACKS_DIR/syncthing/config/config.xml)
  replacetext='<gui enabled="true" tls="true" debugging="false">\n        <address>127.0.0.1:8384</address>\n        <user>'$SYNCTHING_ADMIN_USERNAME'</user>\n        <password>'$SYNCTHING_ADMIN_PASSWORD_HASH'</password>\n        <apikey>'$SYNCTHING_API_KEY'</apikey>\n        <theme>dark</theme>\n    </gui>'
  echo -e "${alltext%%<gui*}${replacetext}${alltext##*</gui>}" > $HOME/st_config.xml
  alltext=$(cat $HOME/st_config.xml)
  replacetext='<globalAnnounceEnabled>false</globalAnnounceEnabled>'
  echo -e "${alltext%%<globalAnnounceEnabled*}${replacetext}${alltext##*</globalAnnounceEnabled>}" > $HOME/st_config.xml
  alltext=$(cat $HOME/st_config.xml)
  replacetext='<natEnabled>false</natEnabled>'
  echo -e "${alltext%%<natEnabled*}${replacetext}${alltext##*</natEnabled>}" > $HOME/st_config.xml
  alltext=$(cat $HOME/st_config.xml)
  replacetext='<localAnnounceEnabled>false</localAnnounceEnabled>'
  echo -e "${alltext%%<localAnnounceEnabled*}${replacetext}${alltext##*</localAnnounceEnabled>}" > $HOME/st_config.xml
  alltext=$(cat $HOME/st_config.xml)
  replacetext='<relaysEnabled>false</relaysEnabled>'
  echo -e "${alltext%%<relaysEnabled*}${replacetext}${alltext##*</relaysEnabled>}" > $HOME/st_config.xml
  sudo mv $HOME/st_config.xml $HSHQ_STACKS_DIR/syncthing/config/config.xml
  startStopStack syncthing start
  sleep 3
  curl -s -H "X-API-Key: $SYNCTHING_API_KEY" -X DELETE -k https://127.0.0.1:8384/rest/config/folders/default
  inner_block=""
  inner_block=$inner_block">>https://$SUB_SYNCTHING.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://syncthing:8384 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SYNCTHING $MANAGETLS_SYNCTHING "$is_integrate_hshq" $NETDEFAULT_SYNCTHING "$inner_block"
}

function outputConfigSyncthing()
{
  cat <<EOFST > $HOME/syncthing-compose.yml
$STACK_VERSION_PREFIX syncthing $(getScriptStackVersion syncthing)
version: '3.5'

services:
  syncthing:
    image: $(getScriptImageByContainerName syncthing)
    container_name: syncthing
    hostname: syncthing
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-privateip-net
    ports:
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
      - 127.0.0.1:8384:8384
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/syncthing.crt:/var/syncthing/config/cert.pem:ro
      - \${HSHQ_SSL_DIR}/syncthing.key:/var/syncthing/config/key.pem:ro
      - \${HSHQ_SSL_DIR}/syncthing.crt:/var/syncthing/config/https-cert.pem:ro
      - \${HSHQ_SSL_DIR}/syncthing.key:/var/syncthing/config/https-key.pem:ro
      - \${HSHQ_STACKS_DIR}/syncthing/config:/var/syncthing/config
      - \${HSHQ_STACKS_DIR}/syncthing/data:/var/syncthing/data
      - \${HSHQ_BACKUP_DIR}:/backup
      - \${HSHQ_RELAYSERVER_DIR}/backup:/relayserver

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
EOFST

  cat <<EOFST > $HOME/syncthing.env
PUID=0
PGID=0
STCONFDIR=/var/syncthing/config
STDATADIR=/var/syncthing/data
STHOMEDIR=
EOFST

}

function performUpdateSyncthing()
{
  perform_stack_name=syncthing
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=syncthing/syncthing:1.23.7
      image_update_map[0]="syncthing/syncthing:1.23.7,syncthing/syncthing:1.27.4"
    ;;
    2)
      newVer=v4
      curImageList=syncthing/syncthing:1.27.1
      image_update_map[0]="syncthing/syncthing:1.27.1,syncthing/syncthing:1.27.4"
    ;;
    3)
      newVer=v4
      curImageList=syncthing/syncthing:1.27.2
      image_update_map[0]="syncthing/syncthing:1.27.2,syncthing/syncthing:1.27.4"
    ;;
    4)
      newVer=v4
      curImageList=syncthing/syncthing:1.27.4
      image_update_map[0]="syncthing/syncthing:1.27.4,syncthing/syncthing:1.27.4"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# CodeServer
function installCodeServer()
{
  set +e
  is_integrate_hshq=$1
  # !Check if directory exists
  checkDeleteStackAndDirectory codeserver "CodeServer"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_CODESERVER
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/codeserver
  mkdir $HSHQ_STACKS_DIR/codeserver/.config
  mkdir $HSHQ_STACKS_DIR/codeserver/.config/code-server
  initServicesCredentials
  CODESERVER_ADMIN_PASSWORD_HASH=$(echo -n "$CODESERVER_ADMIN_PASSWORD" | argon2 $(pwgen -c -n 32 1) -e)
  generateCert codeserver codeserver
  outputConfigCodeServer
  mv $HOME/codeserver.yaml $HSHQ_STACKS_DIR/codeserver/.config/code-server/config.yaml
  docker-compose -f $HOME/codeserver-compose-tmp.yml up -d

  search="HTTPS server listening on https"
  isFound="F"
  i=0
  set +e
  while [ $i -le 300 ]
  do
    findtext=$(docker logs codeserver 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 5 seconds, total wait=$i seconds..."
    sleep 5
    i=$((i+5))
  done
  set -e
  if [ $isFound == "F" ]; then
    echo "CodeServer did not start up correctly..."
    docker-compose -f $HOME/codeserver-compose-tmp.yml down -v
    exit 1
  fi
  sleep 5
  set -e
  docker exec codeserver code-server --install-extension cweijan.vscode-ssh
  docker-compose -f $HOME/codeserver-compose-tmp.yml down -v
  rm -f $HOME/codeserver-compose-tmp.yml
  rm -f $HSHQ_STACKS_DIR/codeserver/.local/share/code-server/User/settings.json
  mv $HOME/settings.json $HSHQ_STACKS_DIR/codeserver/.local/share/code-server/User/settings.json
  installStack codeserver codeserver "HTTPS server listening on https" $HOME/codeserver.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_CODESERVER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://codeserver:3443 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_CODESERVER $MANAGETLS_CODESERVER "$is_integrate_hshq" $NETDEFAULT_CODESERVER "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll codeserver "$FMLNAME_CODESERVER" $USERTYPE_CODESERVER "https://$SUB_CODESERVER.$HOMESERVER_DOMAIN" "codeserver.png"
    restartAllCaddyContainers
  fi
}

function outputConfigCodeServer()
{
  cat <<EOFCS > $HOME/codeserver-compose-tmp.yml
version: '3.5'

services:
  codeserver:
    image: $(getScriptImageByContainerName codeserver)
    container_name: codeserver
    hostname: codeserver
    restart: unless-stopped
    user: "$USERID:$GROUPID"
    command:
      --cert /certs/codeserver.crt
      --cert-key /certs/codeserver.key
    networks:
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - $HSHQ_STACKS_DIR/codeserver:/home/coder
      - $HSHQ_SSL_DIR/codeserver.crt:/certs/codeserver.crt
      - $HSHQ_SSL_DIR/codeserver.key:/certs/codeserver.key
    environment:
      - DOCKER_USER=$USERNAME
      - USER=$USERNAME

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFCS

  cat <<EOFCS > $HOME/codeserver-compose.yml
$STACK_VERSION_PREFIX codeserver $(getScriptStackVersion codeserver)
version: '3.5'

services:
  codeserver:
    image: $(getScriptImageByContainerName codeserver)
    container_name: codeserver
    hostname: codeserver
    restart: unless-stopped
    env_file: stack.env
    user: "\${UID}:\${GID}"
    command:
      --cert /certs/codeserver.crt
      --cert-key /certs/codeserver.key
    networks:
      - dock-proxy-net
      #- dock-ext-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/codeserver:/home/coder
      - \${HSHQ_STACKS_DIR}/authelia/config/configuration.yml:/home/coder/HSHQ/authelia/configuration.yml
      - \${HSHQ_STACKS_DIR}/caddy-common/caddyfiles:/home/coder/HSHQ/caddy/caddyfiles
      - \${HSHQ_STACKS_DIR}/caddy-common/snippets:/home/coder/HSHQ/caddy/snippets
      - \${HSHQ_SSL_DIR}/codeserver.crt:/certs/codeserver.crt
      - \${HSHQ_SSL_DIR}/codeserver.key:/certs/codeserver.key

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true
EOFCS

  cat <<EOFCS > $HOME/codeserver.env
UID=$USERID
GID=$GROUPID
DOCKER_USER=$USERNAME
USER=$USERNAME
PORT=3443
EOFCS

  cat <<EOFCS > $HOME/codeserver.yaml
bind-addr: 127.0.0.1:3443
auth: password
hashed-password: "$CODESERVER_ADMIN_PASSWORD_HASH"
cert: false
disable-telemetry: true
EOFCS

  cat <<EOFCS > $HOME/settings.json
{
    "workbench.colorTheme": "Default Dark Modern",
    "workbench.startupEditor": "none",
    "telemetry.telemetryLevel": "off",
    "workbench.editor.enablePreview": false,
    "files.autoSave": "off"
}
EOFCS

}

function performUpdateCodeServer()
{
  perform_stack_name=codeserver
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=codercom/code-server:4.16.1
      image_update_map[0]="codercom/code-server:4.16.1,codercom/code-server:4.22.1"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfAddConfigsMountCodeServer false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    2)
      newVer=v4
      curImageList=codercom/code-server:4.20.0
      image_update_map[0]="codercom/code-server:4.20.0,codercom/code-server:4.22.1"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfAddConfigsMountCodeServer false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    3)
      newVer=v4
      curImageList=codercom/code-server:4.20.1
      image_update_map[0]="codercom/code-server:4.20.1,codercom/code-server:4.22.1"
    ;;
    4)
      newVer=v4
      curImageList=codercom/code-server:4.22.1
      image_update_map[0]="codercom/code-server:4.22.1,codercom/code-server:4.22.1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function mfAddConfigsMountCodeServer()
{
  sudo grep "authelia/config/configuration.yml" $upgrade_compose_file > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    # Mount some config files into the code server container for easy access to edit
    sudo sed -i "s|/codeserver:/home/coder|/codeserver:/home/coder\n      - \${HSHQ_STACKS_DIR}/authelia/config/configuration.yml:/home/coder/HSHQ/authelia/configuration.yml\n      - \${HSHQ_STACKS_DIR}/caddy-common/caddyfiles:/home/coder/HSHQ/caddy/caddyfiles\n      - \${HSHQ_STACKS_DIR}/caddy-common/snippets:/home/coder/HSHQ/caddy/snippets|" $upgrade_compose_file
  fi
}

# Shlink
function installShlink()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory shlink "Shlink"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_SHLINK_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_SHLINK_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/shlink
  mkdir $HSHQ_STACKS_DIR/shlink/db
  mkdir $HSHQ_STACKS_DIR/shlink/dbexport
  mkdir $HSHQ_STACKS_DIR/shlink/web
  mkdir $HSHQ_NONBACKUP_DIR/shlink
  mkdir $HSHQ_NONBACKUP_DIR/shlink/redis
  chmod 777 $HSHQ_STACKS_DIR/shlink/dbexport

  initServicesCredentials
  if [ -z "$SHLINK_REDIS_PASSWORD" ]; then
    SHLINK_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar SHLINK_REDIS_PASSWORD $SHLINK_REDIS_PASSWORD
  fi
  if [ -z "$SHLINK_INITIAL_API_KEY" ]; then
    SHLINK_INITIAL_API_KEY=$(pwgen -c -n -A 8 1)"-"$(pwgen -c -n -A 4 1)"-"$(pwgen -c -n -A 4 1)"-"$(pwgen -c -n -A 4 1)"-"$(pwgen -c -n -A 12 1)
    updateConfigVar SHLINK_INITIAL_API_KEY $SHLINK_INITIAL_API_KEY
  fi

  outputConfigShlink
  installStack shlink shlink "shlink" $HOME/shlink.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_SHLINK_WEB.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://shlink-web:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SHLINK_WEB $MANAGETLS_SHLINK_WEB "$is_integrate_hshq" $NETDEFAULT_SHLINK_WEB "$inner_block"
  inner_block=""
  inner_block=$inner_block">>https://$SUB_SHLINK_APP.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://shlink-app:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SHLINK_APP $MANAGETLS_SHLINK_APP "$is_integrate_hshq" $NETDEFAULT_SHLINK_APP "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll shlink "$FMLNAME_SHLINK_WEB" $USERTYPE_SHLINK_WEB "https://$SUB_SHLINK_WEB.$HOMESERVER_DOMAIN" "shlink.png"
    restartAllCaddyContainers
  fi
}

function outputConfigShlink()
{
  cat <<EOFST > $HOME/shlink-compose.yml
$STACK_VERSION_PREFIX shlink $(getScriptStackVersion shlink)
version: '3.5'

services:
  shlink-db:
    image: $(getScriptImageByContainerName shlink-db)
    container_name: shlink-db
    hostname: shlink-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-shlink-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/shlink/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/shlink/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.shlink-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.shlink-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.shlink-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.shlink-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.shlink-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.shlink-hourly-db.email-from=Shlink Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.shlink-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.shlink-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.shlink-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.shlink-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.shlink-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.shlink-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.shlink-monthly-db.email-from=Shlink Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.shlink-monthly-db.mail-only-on-error=false"

  shlink-app:
    image: $(getScriptImageByContainerName shlink-app)
    container_name: shlink-app
    hostname: shlink-app
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - shlink-db
    networks:
      - int-shlink-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

  shlink-web:
    image: $(getScriptImageByContainerName shlink-web)
    container_name: shlink-web
    hostname: shlink-web
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - shlink-db
      - shlink-app
    networks:
      - int-shlink-net
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/shlink/web/servers.json:/usr/share/nginx/html/servers.json

  shlink-redis:
    image: $(getScriptImageByContainerName shlink-redis)
    container_name: shlink-redis
    hostname: shlink-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-shlink-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-shlink-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=\$SHLINK_REDIS_PASSWORD

volumes:
  v-shlink-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/shlink/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-shlink-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFST

  cat <<EOFST > $HOME/shlink.env
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$SHLINK_DATABASE_NAME
POSTGRES_USER=$SHLINK_DATABASE_USER
POSTGRES_PASSWORD=$SHLINK_DATABASE_USER_PASSWORD
DB_DRIVER=postgres
DB_HOST=shlink-db
DB_NAME=$SHLINK_DATABASE_NAME
DB_USER=$SHLINK_DATABASE_USER
DB_PASSWORD=$SHLINK_DATABASE_USER_PASSWORD
DEFAULT_DOMAIN=$SUB_SHLINK_APP.$HOMESERVER_DOMAIN
IS_HTTPS_ENABLED=true
INITIAL_API_KEY=$SHLINK_INITIAL_API_KEY
SHLINK_REDIS_PASSWORD=$SHLINK_REDIS_PASSWORD
REDIS_SERVERS=tcp://:$SHLINK_REDIS_PASSWORD@shlink-redis:6379

EOFST

  cat <<EOFST > $HSHQ_STACKS_DIR/shlink/web/servers.json
[
  {
    "name": "$HOMESERVER_NAME",
    "url": "https://$SUB_SHLINK_APP.$HOMESERVER_DOMAIN",
    "apiKey": "$SHLINK_INITIAL_API_KEY"
  }
]
EOFST
}

function performUpdateShlink()
{
  perform_stack_name=shlink
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=postgres:15.0-bullseye,shlinkio/shlink:3.6.3,shlinkio/shlink-web-client:3.10.2,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="shlinkio/shlink:3.6.3,shlinkio/shlink:4.0.3"
      image_update_map[2]="shlinkio/shlink-web-client:3.10.2,shlinkio/shlink-web-client:4.0.1"
      image_update_map[3]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfUpdateShlinkInternalWebUIPort false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    2)
      newVer=v3
      curImageList=postgres:15.0-bullseye,shlinkio/shlink:3.7.2,shlinkio/shlink-web-client:3.10.2,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="shlinkio/shlink:3.7.2,shlinkio/shlink:4.0.3"
      image_update_map[2]="shlinkio/shlink-web-client:3.10.2,shlinkio/shlink-web-client:4.0.1"
      image_update_map[3]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfUpdateShlinkInternalWebUIPort false
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,shlinkio/shlink:3.7.3,shlinkio/shlink-web-client:4.0.0,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="shlinkio/shlink:3.7.3,shlinkio/shlink:4.0.3"
      image_update_map[2]="shlinkio/shlink-web-client:4.0.0,shlinkio/shlink-web-client:4.0.1"
      image_update_map[3]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      if [ "$stackStatus" = "1" ];then
        startStopStack shlink stop "$portainerToken"
        sleep 3
      fi
      sudo rm -fr $HSHQ_NONBACKUP_DIR/shlink/redis/*
      upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing "true" mfShlinkFixRedisUrl
      if [ "$stackStatus" = "2" ];then
        startStopStack shlink stop "$portainerToken"
      fi
      perform_update_report="${perform_update_report}$stack_upgrade_report"
      return
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,shlinkio/shlink:4.0.3,shlinkio/shlink-web-client:4.0.1,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="shlinkio/shlink:4.0.3,shlinkio/shlink:4.0.3"
      image_update_map[2]="shlinkio/shlink-web-client:4.0.1,shlinkio/shlink-web-client:4.0.1"
      image_update_map[3]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function mfUpdateShlinkInternalWebUIPort()
{
  inner_block=""
  inner_block=$inner_block">>https://$SUB_SHLINK_WEB.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://shlink-web:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SHLINK_WEB $MANAGETLS_SHLINK_WEB true $NETDEFAULT_SHLINK_WEB "$inner_block"
  restartAllCaddyContainers
}

function mfShlinkFixRedisUrl()
{
  rm -f $HOME/shlink.env
  cat <<EOFST > $HOME/shlink.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$SHLINK_DATABASE_NAME
POSTGRES_USER=$SHLINK_DATABASE_USER
POSTGRES_PASSWORD=$SHLINK_DATABASE_USER_PASSWORD
DB_DRIVER=postgres
DB_HOST=shlink-db
DB_NAME=$SHLINK_DATABASE_NAME
DB_USER=$SHLINK_DATABASE_USER
DB_PASSWORD=$SHLINK_DATABASE_USER_PASSWORD
DEFAULT_DOMAIN=$SUB_SHLINK_APP.$HOMESERVER_DOMAIN
IS_HTTPS_ENABLED=true
INITIAL_API_KEY=$SHLINK_INITIAL_API_KEY
SHLINK_REDIS_PASSWORD=$SHLINK_REDIS_PASSWORD
REDIS_SERVERS=tcp://:$SHLINK_REDIS_PASSWORD@shlink-redis:6379

EOFST
}

# Firefly
function installFirefly()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory firefly "Firefly"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_FIREFLY
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/firefly
  mkdir $HSHQ_STACKS_DIR/firefly/db
  mkdir $HSHQ_STACKS_DIR/firefly/dbexport
  mkdir $HSHQ_STACKS_DIR/firefly/data
  mkdir $HSHQ_NONBACKUP_DIR/firefly
  mkdir $HSHQ_NONBACKUP_DIR/firefly/redis
  chmod 777 $HSHQ_STACKS_DIR/firefly/dbexport

  initServicesCredentials
  if [ -z "$FIREFLY_REDIS_PASSWORD" ]; then
    FIREFLY_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar FIREFLY_REDIS_PASSWORD $FIREFLY_REDIS_PASSWORD
  fi
  if [ -z "$FIREFLY_INITIAL_API_KEY" ]; then
    FIREFLY_INITIAL_API_KEY=$(pwgen -c -n 32 1)
    updateConfigVar FIREFLY_INITIAL_API_KEY $FIREFLY_INITIAL_API_KEY
  fi

  outputConfigFirefly
  installStack firefly firefly "" $HOME/firefly.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Firefly installed, sleeping 10 seconds..."
  sleep 10

  inner_block=""
  inner_block=$inner_block">>https://$SUB_FIREFLY.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://firefly-app:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_FIREFLY $MANAGETLS_FIREFLY "$is_integrate_hshq" $NETDEFAULT_FIREFLY "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll firefly "$FMLNAME_FIREFLY" $USERTYPE_FIREFLY "https://$SUB_FIREFLY.$HOMESERVER_DOMAIN" "firefly.png"
    restartAllCaddyContainers
  fi
}

function outputConfigFirefly()
{
  cat <<EOFFF > $HOME/firefly-compose.yml
$STACK_VERSION_PREFIX firefly $(getScriptStackVersion firefly)
version: '3.5'

services:
  firefly-db:
    image: $(getScriptImageByContainerName firefly-db)
    container_name: firefly-db
    hostname: firefly-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    depends_on:
      - firefly-redis
    networks:
      - int-firefly-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/firefly/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/firefly/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.firefly-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.firefly-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.firefly-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.firefly-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.firefly-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.firefly-hourly-db.email-from=Firefly Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.firefly-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.firefly-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.firefly-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.firefly-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.firefly-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.firefly-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.firefly-monthly-db.email-from=Firefly Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.firefly-monthly-db.mail-only-on-error=false"

  firefly-app:
    image: $(getScriptImageByContainerName firefly-app)
    container_name: firefly-app
    hostname: firefly-app
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - firefly-db
    networks:
      - int-firefly-net
      - dock-proxy-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-firefly-data:/var/www/html/storage/upload

  firefly-redis:
    image: $(getScriptImageByContainerName firefly-redis)
    container_name: firefly-redis
    hostname: firefly-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-firefly-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-firefly-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$FIREFLY_REDIS_PASSWORD

volumes:
  v-firefly-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/firefly/db
  v-firefly-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/firefly/data
  v-firefly-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/firefly/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-firefly-net:
    driver: bridge
    internal: true
    ipam:
      driver: default
EOFFF

  cat <<EOFFF > $HOME/firefly.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
SITE_OWNER=$EMAIL_ADMIN_EMAIL_ADDRESS
APP_URL=https://$SUB_FIREFLY.$HOMESERVER_DOMAIN
TRUSTED_PROXIES=**
APP_KEY=$FIREFLY_INITIAL_API_KEY
DEFAULT_LANGUAGE=en_US
DEFAULT_LOCALE=equal
MAIL_MAILER=smtp
MAIL_HOST=$SMTP_HOSTNAME
MAIL_PORT=$SMTP_HOSTPORT
MAIL_FROM=$EMAIL_ADMIN_EMAIL_ADDRESS
MAIL_ENCRYPTION=tls
DB_CONNECTION=pgsql
DB_HOST=firefly-db
DB_PORT=5432
DB_DATABASE=$FIREFLY_DATABASE_NAME
DB_USERNAME=$FIREFLY_DATABASE_USER
DB_PASSWORD=$FIREFLY_DATABASE_USER_PASSWORD
REDIS_HOST=firefly-redis
REDIS_PASSWORD=$FIREFLY_REDIS_PASSWORD
POSTGRES_DB=$FIREFLY_DATABASE_NAME
POSTGRES_USER=$FIREFLY_DATABASE_USER
POSTGRES_PASSWORD=$FIREFLY_DATABASE_USER_PASSWORD

EOFFF

}

function performUpdateFirefly()
{
  perform_stack_name=firefly
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=postgres:15.0-bullseye,fireflyiii/core:version-6.0.20,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="fireflyiii/core:version-6.0.20,fireflyiii/core:version-6.1.10"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,fireflyiii/core:version-6.1.1,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="fireflyiii/core:version-6.1.1,fireflyiii/core:version-6.1.10"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,fireflyiii/core:version-6.1.7,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="fireflyiii/core:version-6.1.7,fireflyiii/core:version-6.1.10"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,fireflyiii/core:version-6.1.10,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="fireflyiii/core:version-6.1.10,fireflyiii/core:version-6.1.10"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Excalidraw
function installExcalidraw()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory excalidraw "Excalidraw"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_EXCALIDRAW_SERVER
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_EXCALIDRAW_STORAGE
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_EXCALIDRAW_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/excalidraw
  mkdir $HSHQ_STACKS_DIR/excalidraw/redis
  if [ -z "$EXCALIDRAW_REDIS_PASSWORD" ]; then
    EXCALIDRAW_REDIS_PASSWORD=$(pwgen -c -n 64 1)
    updateConfigVar EXCALIDRAW_REDIS_PASSWORD $EXCALIDRAW_REDIS_PASSWORD
  fi

  outputConfigExcalidraw
  installStack excalidraw excalidraw-web "" $HOME/excalidraw.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Excalidraw installed, sleeping 10 seconds..."
  sleep 10

  inner_block=""
  inner_block=$inner_block">>https://$SUB_EXCALIDRAW_WEB.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://excalidraw-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_EXCALIDRAW_WEB $MANAGETLS_EXCALIDRAW_WEB "$is_integrate_hshq" $NETDEFAULT_EXCALIDRAW_WEB "$inner_block"
  inner_block=""
  inner_block=$inner_block">>https://$SUB_EXCALIDRAW_SERVER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERCORS https://$SUB_EXCALIDRAW_WEB.$HOMESERVER_DOMAIN\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERCORS https://$SUB_NEXTCLOUD.$HOMESERVER_DOMAIN\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://excalidraw-server {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_EXCALIDRAW_SERVER $MANAGETLS_EXCALIDRAW_SERVER "$is_integrate_hshq" $NETDEFAULT_EXCALIDRAW_SERVER "$inner_block"
  inner_block=""
  inner_block=$inner_block">>https://$SUB_EXCALIDRAW_STORAGE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://excalidraw-storage:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_EXCALIDRAW_STORAGE $MANAGETLS_EXCALIDRAW_STORAGE "$is_integrate_hshq" $NETDEFAULT_EXCALIDRAW_STORAGE "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll excalidraw "$FMLNAME_EXCALIDRAW_WEB" $USERTYPE_EXCALIDRAW_WEB "https://$SUB_EXCALIDRAW_WEB.$HOMESERVER_DOMAIN" "excalidraw.png"
    insertEnableSvcUptimeKuma excalidraw "$FMLNAME_EXCALIDRAW_WEB Server" $USERTYPE_EXCALIDRAW_WEB "https://$SUB_EXCALIDRAW_SERVER.$HOMESERVER_DOMAIN" true
    restartAllCaddyContainers
  fi
}

function outputConfigExcalidraw()
{
  cat <<EOFEX > $HOME/excalidraw-compose.yml
$STACK_VERSION_PREFIX excalidraw $(getScriptStackVersion excalidraw)
version: '3.5'

services:
  excalidraw-storage:
    image: $(getScriptImageByContainerName excalidraw-storage)
    container_name: excalidraw-storage
    hostname: excalidraw-storage
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - int-excalidraw-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

  excalidraw-server:
    image: $(getScriptImageByContainerName excalidraw-server)
    container_name: excalidraw-server
    hostname: excalidraw-server
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - int-excalidraw-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

  excalidraw-web:
    image: $(getScriptImageByContainerName excalidraw-web)
    container_name: excalidraw-web
    hostname: excalidraw-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - int-excalidraw-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
 
  excalidraw-redis:
    image: $(getScriptImageByContainerName excalidraw-redis)
    container_name: excalidraw-redis
    hostname: excalidraw-redis
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-excalidraw-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-excalidraw-redis:/bitnami/redis/data

volumes:
  v-excalidraw-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/excalidraw/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  int-excalidraw-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFEX

  cat <<EOFEX > $HOME/excalidraw.env
ALLOW_EMPTY_PASSWORD=no
REDIS_PASSWORD=$EXCALIDRAW_REDIS_PASSWORD
REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
STORAGE_URI=redis://:$EXCALIDRAW_REDIS_PASSWORD@excalidraw-redis:6379
BACKEND_V2_GET_URL=https://$SUB_EXCALIDRAW_STORAGE.$HOMESERVER_DOMAIN/api/v2/scenes/
BACKEND_V2_POST_URL=https://$SUB_EXCALIDRAW_STORAGE.$HOMESERVER_DOMAIN/api/v2/scenes/
LIBRARY_URL=https://libraries.excalidraw.com
LIBRARY_BACKEND=https://us-central1-excalidraw-room-persistence.cloudfunctions.net/libraries/
STORAGE_BACKEND=http
HTTP_STORAGE_BACKEND_URL=https://$SUB_EXCALIDRAW_STORAGE.$HOMESERVER_DOMAIN/api/v2
SOCKET_SERVER_URL=https://$SUB_EXCALIDRAW_SERVER.$HOMESERVER_DOMAIN
EOFEX
}

function performUpdateExcalidraw()
{
  perform_stack_name=excalidraw
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=excalidraw/excalidraw-room,kiliandeca/excalidraw-storage-backend,kiliandeca/excalidraw
      image_update_map[0]="excalidraw/excalidraw-room,excalidraw/excalidraw-room"
      image_update_map[1]="kiliandeca/excalidraw-storage-backend,kiliandeca/excalidraw-storage-backend"
      image_update_map[2]="kiliandeca/excalidraw,kiliandeca/excalidraw"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# DrawIO
function installDrawIO()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory drawio "Draw.io"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_DRAWIO_PLANTUML
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_DRAWIO_EXPORT
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_DRAWIO_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/drawio
  mkdir $HSHQ_STACKS_DIR/drawio/fonts
  outputConfigDrawIO
  installStack drawio drawio-web "" $HOME/drawio.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Draw.io installed, sleeping 10 seconds..."
  sleep 10

  set +e
  docker container ps | grep nextcloud-app > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    docker exec -u www-data nextcloud-app php occ --no-warnings config:app:set drawio DrawioUrl --value="https://$SUB_DRAWIO_WEB.$HOMESERVER_DOMAIN"
  fi
  set -e

  inner_block=""
  inner_block=$inner_block">>https://$SUB_DRAWIO_WEB.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADERALLOWFRAME\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://drawio-web:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_DRAWIO_WEB $MANAGETLS_DRAWIO_WEB "$is_integrate_hshq" $NETDEFAULT_DRAWIO_WEB "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll drawio "$FMLNAME_DRAWIO_WEB" $USERTYPE_DRAWIO_WEB "https://$SUB_DRAWIO_WEB.$HOMESERVER_DOMAIN" "drawio.png"
    restartAllCaddyContainers
  fi
}

function outputConfigDrawIO()
{
  cat <<EOFDI > $HOME/drawio-compose.yml
$STACK_VERSION_PREFIX drawio $(getScriptStackVersion drawio)
version: '3.5'

services:
  drawio-plantuml:
    image: $(getScriptImageByContainerName drawio-plantuml)
    container_name: drawio-plantuml
    hostname: drawio-plantuml
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-drawio-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-drawio-fonts:/usr/share/fonts/drawio

  drawio-export:
    image: $(getScriptImageByContainerName drawio-export)
    container_name: drawio-export
    hostname: drawio-export
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-drawio-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-drawio-fonts:/usr/share/fonts/drawio

  drawio-web:
    image: $(getScriptImageByContainerName drawio-web)
    container_name: drawio-web
    hostname: drawio-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - drawio-plantuml
      - drawio-export
    networks:
      - dock-proxy-net
      - int-drawio-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

volumes:
  v-drawio-fonts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/drawio/fonts

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  int-drawio-net:
    driver: bridge
    internal: true
    ipam:
      driver: default


EOFDI

  cat <<EOFDI > $HOME/drawio.env
DRAWIO_SELF_CONTAINED=1
PLANTUML_URL=http://drawio-plantuml:8080/
EXPORT_URL=http://drawio-export:8000/
DRAWIO_BASE_URL=https://$SUB_DRAWIO_WEB.$HOMESERVER_DOMAIN
EOFDI
}

function performUpdateDrawIO()
{
  perform_stack_name=drawio
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=jgraph/drawio:21.0.2,jgraph/plantuml-server,jgraph/export-server
      image_update_map[0]="jgraph/drawio:21.0.2,jgraph/drawio:24.0.7"
      image_update_map[1]="jgraph/plantuml-server,jgraph/plantuml-server"
      image_update_map[2]="jgraph/export-server,jgraph/export-server"
    ;;
    2)
      newVer=v3
      curImageList=jgraph/drawio:23.1.0,jgraph/plantuml-server,jgraph/export-server
      image_update_map[0]="jgraph/drawio:23.1.0,jgraph/drawio:24.0.7"
      image_update_map[1]="jgraph/plantuml-server,jgraph/plantuml-server"
      image_update_map[2]="jgraph/export-server,jgraph/export-server"
    ;;
    3)
      newVer=v3
      curImageList=jgraph/drawio:24.0.7,jgraph/plantuml-server,jgraph/export-server
      image_update_map[0]="jgraph/drawio:24.0.7,jgraph/drawio:24.0.7"
      image_update_map[1]="jgraph/plantuml-server,jgraph/plantuml-server"
      image_update_map[2]="jgraph/export-server,jgraph/export-server"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Invidious
function installInvidious()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory invidious "Invidious"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_INVIDIOUS
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/invidious
  mkdir $HSHQ_STACKS_DIR/invidious/db
  mkdir $HSHQ_STACKS_DIR/invidious/dbexport
  mkdir $HSHQ_STACKS_DIR/invidious/init
  chmod 777 $HSHQ_STACKS_DIR/invidious/dbexport

  initServicesCredentials
  INVIDIOUS_HMAC_KEY=$(pwgen -c -n 32 1)

  outputConfigInvidious
  installStack invidious invidious-web "Invidious is ready to lead at" $HOME/invidious.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Invidious installed, sleeping 10 seconds..."
  sleep 10

  inner_block=""
  inner_block=$inner_block">>https://$SUB_INVIDIOUS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://invidious-web:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_INVIDIOUS $MANAGETLS_INVIDIOUS "$is_integrate_hshq" $NETDEFAULT_INVIDIOUS "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll invidious "$FMLNAME_INVIDIOUS" $USERTYPE_INVIDIOUS "https://$SUB_INVIDIOUS.$HOMESERVER_DOMAIN" "invidious.png"
    restartAllCaddyContainers
  fi
}

function outputConfigInvidious()
{
  cat <<EOFIV > $HOME/invidious-compose.yml
$STACK_VERSION_PREFIX invidious $(getScriptStackVersion invidious)
version: '3.5'

services:
  invidious-db:
    image: $(getScriptImageByContainerName invidious-db)
    container_name: invidious-db
    hostname: invidious-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-invidious-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/invidious/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/invidious/dbexport:/dbexport
      - \${HSHQ_STACKS_DIR}/invidious/init:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=$INVIDIOUS_DATABASE_NAME
      - POSTGRES_USER=$INVIDIOUS_DATABASE_USER
      - POSTGRES_PASSWORD=$INVIDIOUS_DATABASE_USER_PASSWORD
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.invidious-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.invidious-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.invidious-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.invidious-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.invidious-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.invidious-hourly-db.email-from=Invidious Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.invidious-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.invidious-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.invidious-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.invidious-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.invidious-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.invidious-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.invidious-monthly-db.email-from=Invidious Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"

  invidious-web:
    image: $(getScriptImageByContainerName invidious-web)
    container_name: invidious-web
    hostname: invidious-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - invidious-db
    networks:
      - int-invidious-net
      - dock-proxy-net
      - dock-ext-net
    environment:
      INVIDIOUS_CONFIG: |
        db:
          dbname: $INVIDIOUS_DATABASE_NAME
          user: $INVIDIOUS_DATABASE_USER
          password: $INVIDIOUS_DATABASE_USER_PASSWORD
          host: invidious-db
          port: 5432
        check_tables: true
        https_only: true
        statistics_enabled: false
        domain: $SUB_INVIDIOUS.$HOMESERVER_DOMAIN
        hmac_key: "$INVIDIOUS_HMAC_KEY"

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-invidious-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFIV

  cat <<EOFIV > $HOME/invidious.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
EOFIV

  cat <<EOFIV > $HSHQ_STACKS_DIR/invidious/init/init.sql
-- Table: public.channels

-- DROP TABLE public.channels;

CREATE TABLE IF NOT EXISTS public.channels
(
  id text NOT NULL,
  author text,
  updated timestamp with time zone,
  deleted boolean,
  subscribed timestamp with time zone,
  CONSTRAINT channels_id_key UNIQUE (id)
);

GRANT ALL ON TABLE public.channels TO current_user;

-- Index: public.channels_id_idx

-- DROP INDEX public.channels_id_idx;

CREATE INDEX IF NOT EXISTS channels_id_idx
  ON public.channels
  USING btree
  (id COLLATE pg_catalog."default");

-- Table: public.videos

-- DROP TABLE public.videos;

CREATE UNLOGGED TABLE IF NOT EXISTS public.videos
(
  id text NOT NULL,
  info text,
  updated timestamp with time zone,
  CONSTRAINT videos_pkey PRIMARY KEY (id)
);

GRANT ALL ON TABLE public.videos TO current_user;

-- Index: public.id_idx

-- DROP INDEX public.id_idx;

CREATE UNIQUE INDEX IF NOT EXISTS id_idx
  ON public.videos
  USING btree
  (id COLLATE pg_catalog."default");

-- Table: public.channel_videos

-- DROP TABLE public.channel_videos;

CREATE TABLE IF NOT EXISTS public.channel_videos
(
  id text NOT NULL,
  title text,
  published timestamp with time zone,
  updated timestamp with time zone,
  ucid text,
  author text,
  length_seconds integer,
  live_now boolean,
  premiere_timestamp timestamp with time zone,
  views bigint,
  CONSTRAINT channel_videos_id_key UNIQUE (id)
);

GRANT ALL ON TABLE public.channel_videos TO current_user;

-- Index: public.channel_videos_ucid_idx

-- DROP INDEX public.channel_videos_ucid_idx;

CREATE INDEX IF NOT EXISTS channel_videos_ucid_idx
  ON public.channel_videos
  USING btree
  (ucid COLLATE pg_catalog."default");

-- Table: public.users

-- DROP TABLE public.users;

CREATE TABLE IF NOT EXISTS public.users
(
  updated timestamp with time zone,
  notifications text[],
  subscriptions text[],
  email text NOT NULL,
  preferences text,
  password text,
  token text,
  watched text[],
  feed_needs_update boolean,
  CONSTRAINT users_email_key UNIQUE (email)
);

GRANT ALL ON TABLE public.users TO current_user;

-- Index: public.email_unique_idx

-- DROP INDEX public.email_unique_idx;

CREATE UNIQUE INDEX IF NOT EXISTS email_unique_idx
  ON public.users
  USING btree
  (lower(email) COLLATE pg_catalog."default");

-- Table: public.session_ids

-- DROP TABLE public.session_ids;

CREATE TABLE IF NOT EXISTS public.session_ids
(
  id text NOT NULL,
  email text,
  issued timestamp with time zone,
  CONSTRAINT session_ids_pkey PRIMARY KEY (id)
);

GRANT ALL ON TABLE public.session_ids TO current_user;

-- Index: public.session_ids_id_idx

-- DROP INDEX public.session_ids_id_idx;

CREATE INDEX IF NOT EXISTS session_ids_id_idx
  ON public.session_ids
  USING btree
  (id COLLATE pg_catalog."default");

-- Table: public.nonces

-- DROP TABLE public.nonces;

CREATE TABLE IF NOT EXISTS public.nonces
(
  nonce text,
  expire timestamp with time zone,
  CONSTRAINT nonces_id_key UNIQUE (nonce)
);

GRANT ALL ON TABLE public.nonces TO current_user;

-- Index: public.nonces_nonce_idx

-- DROP INDEX public.nonces_nonce_idx;

CREATE INDEX IF NOT EXISTS nonces_nonce_idx
  ON public.nonces
  USING btree
  (nonce COLLATE pg_catalog."default");

-- Table: public.annotations

-- DROP TABLE public.annotations;

CREATE TABLE IF NOT EXISTS public.annotations
(
  id text NOT NULL,
  annotations xml,
  CONSTRAINT annotations_id_key UNIQUE (id)
);

GRANT ALL ON TABLE public.annotations TO current_user;

-- Type: public.privacy

-- DROP TYPE public.privacy;

CREATE TYPE public.privacy AS ENUM
(
    'Public',
    'Unlisted',
    'Private'
);

-- Table: public.playlists

-- DROP TABLE public.playlists;

CREATE TABLE IF NOT EXISTS public.playlists
(
    title text,
    id text primary key,
    author text,
    description text,
    video_count integer,
    created timestamptz,
    updated timestamptz,
    privacy privacy,
    index int8[]
);

GRANT ALL ON public.playlists TO current_user;

-- Table: public.playlist_videos

-- DROP TABLE public.playlist_videos;

CREATE TABLE IF NOT EXISTS public.playlist_videos
(
    title text,
    id text,
    author text,
    ucid text,
    length_seconds integer,
    published timestamptz,
    plid text references playlists(id),
    index int8,
    live_now boolean,
    PRIMARY KEY (index,plid)
);

GRANT ALL ON TABLE public.playlist_videos TO current_user;


EOFIV
}

function performUpdateInvidious()
{
  perform_stack_name=invidious
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=postgres:15.0-bullseye,quay.io/invidious/invidious
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="quay.io/invidious/invidious,quay.io/invidious/invidious"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Gitea
function installGitea()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory gitea "Gitea"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_GITEA_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/gitea
  mkdir $HSHQ_STACKS_DIR/gitea/app
  mkdir $HSHQ_STACKS_DIR/gitea/db
  mkdir $HSHQ_STACKS_DIR/gitea/dbexport
  chmod 777 $HSHQ_STACKS_DIR/gitea/dbexport

  initServicesCredentials
  outputConfigGitea
  installStack gitea gitea-app "Starting new Web server:" $HOME/gitea.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Gitea installed, sleeping 10 seconds..."
  sleep 10
  set +e
  docker exec mailu-admin flask mailu alias-delete $GITEA_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $GITEA_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS
  docker exec -u $USERID gitea-app gitea admin user create --admin --username $GITEA_ADMIN_USERNAME --password $GITEA_ADMIN_PASSWORD --email $GITEA_ADMIN_EMAIL_ADDRESS
  docker exec -u $USERID gitea-app gitea admin auth add-ldap --name OpenLDAP --security-protocol ldaps --host ldapserver --port 636 --bind-dn "$LDAP_READONLY_USER_BIND_DN" --bind-password "$LDAP_READONLY_USER_PASSWORD" --user-search-base "ou=people,$LDAP_BASE_DN" --user-filter "(&(&(uid=%s)(objectClass=person))(memberOf=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN))" --admin-filter "(memberOf=cn=$LDAP_ADMIN_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)" --username-attribute uid --firstname-attribute givenName --surname-attribute sn --email-attribute mail --avatar-attribute jpegPhoto --synchronize-users --active

  inner_block=""
  inner_block=$inner_block">>https://$SUB_GITEA.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://gitea-app:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_GITEA $MANAGETLS_GITEA "$is_integrate_hshq" $NETDEFAULT_GITEA "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll gitea "$FMLNAME_GITEA" $USERTYPE_GITEA "https://$SUB_GITEA.$HOMESERVER_DOMAIN" "gitea.png"
    restartAllCaddyContainers
  fi
}

function outputConfigGitea()
{
  cat <<EOFGL > $HOME/gitea-compose.yml
$STACK_VERSION_PREFIX gitea $(getScriptStackVersion gitea)
version: '3.5'

services:
  gitea-db:
    image: $(getScriptImageByContainerName gitea-db)
    container_name: gitea-db
    hostname: gitea-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-gitea-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/gitea/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/gitea/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.gitea-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.gitea-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.gitea-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.gitea-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.gitea-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.gitea-hourly-db.email-from=Gitea Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.gitea-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.gitea-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.gitea-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.gitea-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.gitea-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.gitea-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.gitea-monthly-db.email-from=Gitea Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.gitea-monthly-db.mail-only-on-error=false"

  gitea-app:
    image: $(getScriptImageByContainerName gitea-app)
    container_name: gitea-app
    hostname: gitea-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - gitea-db
    networks:
      - int-gitea-net
      - dock-proxy-net
      - dock-ext-net
      - dock-ldap-net
      - dock-internalmail-net
    #ports:
    #  - "2222:22"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/gitea/app:/data

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-gitea-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFGL

  cat <<EOFGL > $HOME/gitea.env
USER_UID=$USERID
USER_GID=$GROUPID
POSTGRES_DB=$GITEA_DATABASE_NAME
POSTGRES_USER=$GITEA_DATABASE_USER
POSTGRES_PASSWORD=$GITEA_DATABASE_USER_PASSWORD
DISABLE_QUERY_AUTH_TOKEN=true
GITEA__APP_NAME=$HOMESERVER_NAME
GITEA__server__ROOT_URL=https://$SUB_GITEA.$HOMESERVER_DOMAIN/
GITEA__database__DB_TYPE=postgres
GITEA__database__HOST=gitea-db:5432
GITEA__database__NAME=$GITEA_DATABASE_NAME
GITEA__database__USER=$GITEA_DATABASE_USER
GITEA__database__PASSWD=$GITEA_DATABASE_USER_PASSWORD
GITEA__mailer__ENABLED=true
GITEA__mailer__FROM=Gitea $HSHQ_ADMIN_NAME <$EMAIL_ADMIN_EMAIL_ADDRESS>
GITEA__mailer__MAILER_TYPE=smtp
GITEA__mailer__HOST=$SMTP_HOSTNAME
GITEA__mailer__SMTP_ADDR=$SMTP_HOSTNAME
GITEA__mailer__SMTP_PORT=$SMTP_HOSTPORT
GITEA__mailer__IS_TLS_ENABLED=false
GITEA__service__DISABLE_REGISTRATION=true
GITEA__security__INSTALL_LOCK=true
EOFGL

}

function performUpdateGitea()
{
  perform_stack_name=gitea
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitea/gitea:1.20.3
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitea/gitea:1.20.3,gitea/gitea:1.21.8"
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitea/gitea:1.21.3
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitea/gitea:1.21.3,gitea/gitea:1.21.8"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitea/gitea:1.21.4
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitea/gitea:1.21.4,gitea/gitea:1.21.8"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,gitea/gitea:1.21.8
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gitea/gitea:1.21.8,gitea/gitea:1.21.8"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Mealie
function installMealie()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory mealie "Mealie"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_MEALIE
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/mealie
  mkdir $HSHQ_STACKS_DIR/mealie/app
  mkdir $HSHQ_STACKS_DIR/mealie/db
  mkdir $HSHQ_STACKS_DIR/mealie/dbexport
  chmod 777 $HSHQ_STACKS_DIR/mealie/dbexport

  initServicesCredentials

  set +e
  docker exec mailu-admin flask mailu alias-delete $MEALIE_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $MEALIE_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS
  outputConfigMealie
  installStack mealie mealie-app "Application startup complete" $HOME/mealie.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_MEALIE.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://mealie-app:9000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_MEALIE $MANAGETLS_MEALIE "$is_integrate_hshq" $NETDEFAULT_MEALIE "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll mealie "$FMLNAME_MEALIE" $USERTYPE_MEALIE "https://$SUB_MEALIE.$HOMESERVER_DOMAIN" "mealie.png"
    restartAllCaddyContainers

    mealie_token=$(http -f --verify=no --timeout=300 --print="b" POST https://$SUB_MEALIE.$HOMESERVER_DOMAIN/api/auth/token username=changeme@example.com password=MyPassword | jq -r '.access_token')
    adminid=$(http -f --verify=no --timeout=300 --print="b" GET https://$SUB_MEALIE.$HOMESERVER_DOMAIN/api/users "Authorization: Bearer $mealie_token" | jq '.items[0].id' | tr -d '"')
    # Can't seem to get httpie to work, so switching to curl
    #curl -X "PUT" "https://$SUB_MEALIE.$HOMESERVER_DOMAIN/api/users/$adminid" -H "accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $mealie_token" -d "{\"username\": \"$MEALIE_ADMIN_USERNAME\",\"fullName\": \"$HOMESERVER_NAME Mealie Admin\",\"email\": \"$MEALIE_ADMIN_EMAIL_ADDRESS\",\"group\":\"Home\",\"admin\": true}" > /dev/null 2>&1
    # API is broken in v1.3.2, so we'll go direct to DB
    docker exec mealie-db bash -c "PGPASSWORD=$MEALIE_DATABASE_USER_PASSWORD echo \"update users set full_name='$HOMESERVER_NAME Mealie Admin', username='$MEALIE_ADMIN_USERNAME', email='$MEALIE_ADMIN_EMAIL_ADDRESS' where id='$adminid';\" | psql -U $MEALIE_DATABASE_USER $MEALIE_DATABASE_NAME"
    curl -X "PUT" "https://$SUB_MEALIE.$HOMESERVER_DOMAIN/api/users/password" -H "accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $mealie_token" -d "{\"currentPassword\": \"MyPassword\",\"newPassword\": \"$MEALIE_ADMIN_PASSWORD\"}" > /dev/null 2>&1
  fi
}

function outputConfigMealie()
{
  cat <<EOFGL > $HOME/mealie-compose.yml
$STACK_VERSION_PREFIX mealie $(getScriptStackVersion mealie)
version: '3.5'

services:
  mealie-db:
    image: $(getScriptImageByContainerName mealie-db)
    container_name: mealie-db
    hostname: mealie-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-mealie-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/mealie/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/mealie/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.mealie-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.mealie-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.mealie-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.mealie-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.mealie-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.mealie-hourly-db.email-from=Mealie Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.mealie-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.mealie-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.mealie-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.mealie-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.mealie-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.mealie-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.mealie-monthly-db.email-from=Mealie Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.mealie-monthly-db.mail-only-on-error=false"

  mealie-app:
    image: $(getScriptImageByContainerName mealie-app)
    container_name: mealie-app
    hostname: mealie-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - mealie-db
    networks:
      - dock-proxy-net
      - dock-ext-net
      - dock-ldap-net
      - dock-internalmail-net
      - int-mealie-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-mealie-app:/app/data

volumes:
  v-mealie-app:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/mealie/app

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-mealie-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFGL

  cat <<EOFGL > $HOME/mealie.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
PUID=$USERID
PGID=$GROUPID
DEFAULT_GROUP=Home
PRODUCTION=True
API_DOCS=True
ALLOW_SIGNUP=false
BASE_URL=https://$SUB_MEALIE.$HOMESERVER_DOMAIN
DB_ENGINE=postgres
POSTGRES_USER=$MEALIE_DATABASE_USER
POSTGRES_PASSWORD=$MEALIE_DATABASE_USER_PASSWORD
POSTGRES_SERVER=mealie-db
POSTGRES_PORT=5432
POSTGRES_DB=$MEALIE_DATABASE_NAME
TOKEN_TIME=168
SMTP_HOST=$SMTP_HOSTNAME
SMTP_PORT=587
SMTP_FROM_NAME=Mealie $HSHQ_ADMIN_NAME
SMTP_AUTH_STRATEGY=TLS
SMTP_FROM_EMAIL=$EMAIL_SMTP_EMAIL_ADDRESS
SMTP_USER=$EMAIL_SMTP_EMAIL_ADDRESS
SMTP_PASSWORD=$EMAIL_SMTP_PASSWORD
LDAP_AUTH_ENABLED=True
LDAP_SERVER_URL=$LDAP_URI
LDAP_TLS_INSECURE=False
LDAP_TLS_CACERTFILE=/usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt
LDAP_ENABLE_STARTTLS=True
LDAP_BASE_DN=$LDAP_BASE_DN
LDAP_QUERY_BIND=$LDAP_READONLY_USER_BIND_DN
LDAP_QUERY_PASSWORD=$LDAP_READONLY_USER_PASSWORD
LDAP_USER_FILTER=(&(|({id_attribute}={input})({mail_attribute}={input}))(objectClass=person)(|(memberOf=cn=$LDAP_ADMIN_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)(memberOf=cn=$LDAP_PRIMARY_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)))
LDAP_ADMIN_FILTER=(memberOf=cn=$LDAP_ADMIN_USER_GROUP_NAME,ou=groups,$LDAP_BASE_DN)
LDAP_ID_ATTRIBUTE=uid
LDAP_NAME_ATTRIBUTE=cn
LDAP_MAIL_ATTRIBUTE=mail
EOFGL

}

function performUpdateMealie()
{
  perform_stack_name=mealie
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=hkotel/mealie:v0.5.6
      image_update_map[0]="hkotel/mealie:v0.5.6,hkotel/mealie:v0.5.6"
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): This version of Mealie cannot be upgraded to the next version. You must export your data/recipes from this instance, uninstall and reinstall mealie, then import your data/recipes into the new instance. See https://nightly.mealie.io/documentation/getting-started/migrating-to-mealie-v1/ for migration instructions."
      return
    ;;
    2)
      newVer=v4
      curImageList=postgres:15.0-bullseye,ghcr.io/mealie-recipes/mealie:v1.0.0-RC2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="ghcr.io/mealie-recipes/mealie:v1.0.0-RC2,ghcr.io/mealie-recipes/mealie:v1.3.2"
    ;;
    3)
      newVer=v4
      curImageList=postgres:15.0-bullseye,ghcr.io/mealie-recipes/mealie:v1.1.0
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="ghcr.io/mealie-recipes/mealie:v1.1.0,ghcr.io/mealie-recipes/mealie:v1.3.2"
    ;;
    4)
      newVer=v4
      curImageList=postgres:15.0-bullseye,ghcr.io/mealie-recipes/mealie:v1.3.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="ghcr.io/mealie-recipes/mealie:v1.3.2,ghcr.io/mealie-recipes/mealie:v1.3.2"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Kasm
function installKasm()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory kasm "Kasm"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_KASM
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/kasm
  mkdir $HSHQ_STACKS_DIR/kasm/profiles
  mkdir $HSHQ_NONBACKUP_DIR/kasm
  mkdir $HSHQ_NONBACKUP_DIR/kasm/data

  outputConfigKasm
  installStack kasm kasm "" $HOME/kasm.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_KASM.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://kasm {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>>>transport http {\n"
  inner_block=$inner_block">>>>>>>>>>tls\n"
  inner_block=$inner_block">>>>>>>>>>tls_insecure_skip_verify\n"
  inner_block=$inner_block">>>>>>>>}\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_KASM $MANAGETLS_KASM "$is_integrate_hshq" $NETDEFAULT_KASM "$inner_block"

  inner_block=""
  inner_block=$inner_block">>https://$SUB_KASM_WIZARD.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://kasm:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>>>transport http {\n"
  inner_block=$inner_block">>>>>>>>>>tls\n"
  inner_block=$inner_block">>>>>>>>>>tls_insecure_skip_verify\n"
  inner_block=$inner_block">>>>>>>>}\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_KASM_WIZARD $MANAGETLS_KASM_WIZARD "$is_integrate_hshq" $NETDEFAULT_KASM_WIZARD "$inner_block"

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcHeimdall kasm "$FMLNAME_KASM" $USERTYPE_KASM "https://$SUB_KASM.$HOMESERVER_DOMAIN" "kasm.png" true
    insertEnableSvcHeimdall kasm "$FMLNAME_KASM_WIZARD" $USERTYPE_KASM_WIZARD "https://$SUB_KASM_WIZARD.$HOMESERVER_DOMAIN" "kasm.png" true
    restartAllCaddyContainers
  fi
}

function outputConfigKasm()
{
  cat <<EOFGL > $HOME/kasm-compose.yml
$STACK_VERSION_PREFIX kasm $(getScriptStackVersion kasm)
version: '3.5'

services:
  kasm:
    image: $(getScriptImageByContainerName kasm)
    container_name: kasm
    privileged: true
    hostname: kasm
    restart: unless-stopped
    env_file: stack.env
    networks:
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_NONBACKUP_DIR}/kasm/data:/opt
      - \${HSHQ_STACKS_DIR}/kasm/profiles:/profiles

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true

EOFGL

  cat <<EOFGL > $HOME/kasm.env
KASM_PORT=443
EOFGL

}

function performUpdateKasm()
{
  perform_stack_name=kasm
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=lscr.io/linuxserver/kasm:1.13.0
      image_update_map[0]="lscr.io/linuxserver/kasm:1.13.0,lscr.io/linuxserver/kasm:1.15.0"
    ;;
    2)
      newVer=v3
      curImageList=lscr.io/linuxserver/kasm:1.14.0
      image_update_map[0]="lscr.io/linuxserver/kasm:1.14.0,lscr.io/linuxserver/kasm:1.15.0"
    ;;
    3)
      newVer=v3
      curImageList=lscr.io/linuxserver/kasm:1.15.0
      image_update_map[0]="lscr.io/linuxserver/kasm:1.15.0,lscr.io/linuxserver/kasm:1.15.0"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# NTFY
function installNTFY()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory ntfy "NTFY"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_NTFY
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/ntfy
  mkdir $HSHQ_STACKS_DIR/ntfy/cache
  mkdir $HSHQ_STACKS_DIR/ntfy/etc
  outputConfigNTFY
  installStack ntfy ntfy "" $HOME/ntfy.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3
  inner_block=""
  inner_block=$inner_block">>https://$SUB_NTFY.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://ntfy {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_NTFY $MANAGETLS_NTFY "$is_integrate_hshq" $NETDEFAULT_NTFY "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll ntfy "$FMLNAME_NTFY" $USERTYPE_NTFY "https://$SUB_NTFY.$HOMESERVER_DOMAIN" "ntfy.png"
    restartAllCaddyContainers
  fi
}

function outputConfigNTFY()
{
  cat <<EOFNT > $HOME/ntfy-compose.yml
$STACK_VERSION_PREFIX ntfy $(getScriptStackVersion ntfy)
version: '3.5'

services:
  ntfy:
    image: $(getScriptImageByContainerName ntfy)
    container_name: ntfy
    hostname: ntfy
    restart: unless-stopped
    env_file: stack.env
    user: "\${UID}:\${GID}"
    security_opt:
      - no-new-privileges:true
    command:
      - serve
    networks:
      - dock-proxy-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/ntfy/cache:/var/cache/ntfy
      - \${HSHQ_STACKS_DIR}/ntfy/etc:/etc/ntfy
      - \${HSHQ_STACKS_DIR}/ntfy/etc/server.yml:/etc/ntfy/server.yml

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true

EOFNT

  cat <<EOFNT > $HOME/ntfy.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
EOFNT

  cat <<EOFNT > $HSHQ_STACKS_DIR/ntfy/etc/server.yml
# ntfy server config file
#
# Please refer to the documentation at https://ntfy.sh/docs/config/ for details.
# All options also support underscores (_) instead of dashes (-) to comply with the YAML spec.

# Public facing base URL of the service (e.g. https://ntfy.sh or https://ntfy.example.com)
#
# This setting is required for any of the following features:
# - attachments (to return a download URL)
# - e-mail sending (for the topic URL in the email footer)
# - iOS push notifications for self-hosted servers (to calculate the Firebase poll_request topic)
# - Matrix Push Gateway (to validate that the pushkey is correct)
#
base-url: https://$SUB_NTFY.$HOMESERVER_DOMAIN

# Listen address for the HTTP & HTTPS web server. If "listen-https" is set, you must also
# set "key-file" and "cert-file". Format: [<ip>]:<port>, e.g. "1.2.3.4:8080".
#
# To listen on all interfaces, you may omit the IP address, e.g. ":443".
# To disable HTTP, set "listen-http" to "-".
#
# listen-http: ":80"
# listen-https:

# Listen on a Unix socket, e.g. /var/lib/ntfy/ntfy.sock
# This can be useful to avoid port issues on local systems, and to simplify permissions.
#
# listen-unix: <socket-path>
# listen-unix-mode: <linux permissions, e.g. 0700>

# Path to the private key & cert file for the HTTPS web server. Not used if "listen-https" is not set.
#
# key-file: <filename>
# cert-file: <filename>

# If set, also publish messages to a Firebase Cloud Messaging (FCM) topic for your app.
# This is optional and only required to save battery when using the Android app.
#
# firebase-key-file: <filename>

# If "cache-file" is set, messages are cached in a local SQLite database instead of only in-memory.
# This allows for service restarts without losing messages in support of the since= parameter.
#
# The "cache-duration" parameter defines the duration for which messages will be buffered
# before they are deleted. This is required to support the "since=..." and "poll=1" parameter.
# To disable the cache entirely (on-disk/in-memory), set "cache-duration" to 0.
# The cache file is created automatically, provided that the correct permissions are set.
#
# The "cache-startup-queries" parameter allows you to run commands when the database is initialized,
# e.g. to enable WAL mode (see https://phiresky.github.io/blog/2020/sqlite-performance-tuning/)).
# Example:
#    cache-startup-queries: |
#       pragma journal_mode = WAL;
#       pragma synchronous = normal;
#       pragma temp_store = memory;
#       pragma busy_timeout = 15000;
#       vacuum;
#
# The "cache-batch-size" and "cache-batch-timeout" parameter allow enabling async batch writing
# of messages. If set, messages will be queued and written to the database in batches of the given
# size, or after the given timeout. This is only required for high volume servers.
#
# Debian/RPM package users:
#   Use /var/cache/ntfy/cache.db as cache file to avoid permission issues. The package
#   creates this folder for you.
#
# Check your permissions:
#   If you are running ntfy with systemd, make sure this cache file is owned by the
#   ntfy user and group by running: chown ntfy.ntfy <filename>.
#
cache-file: /var/cache/ntfy/cache.db
# cache-duration: "12h"
# cache-startup-queries:
# cache-batch-size: 0
# cache-batch-timeout: "0ms"

# If set, access to the ntfy server and API can be controlled on a granular level using
# the 'ntfy user' and 'ntfy access' commands. See the --help pages for details, or check the docs.
#
# - auth-file is the SQLite user/access database; it is created automatically if it doesn't already exist
# - auth-default-access defines the default/fallback access if no access control entry is found; it can be
#   set to "read-write" (default), "read-only", "write-only" or "deny-all".
# - auth-startup-queries allows you to run commands when the database is initialized, e.g. to enable
#   WAL mode. This is similar to cache-startup-queries. See above for details.
#
# Debian/RPM package users:
#   Use /var/lib/ntfy/user.db as user database to avoid permission issues. The package
#   creates this folder for you.
#
# Check your permissions:
#   If you are running ntfy with systemd, make sure this user database file is owned by the
#   ntfy user and group by running: chown ntfy.ntfy <filename>.
#
# auth-file: <filename>
# auth-default-access: "read-write"
# auth-startup-queries:

# If set, the X-Forwarded-For header is used to determine the visitor IP address
# instead of the remote address of the connection.
#
# WARNING: If you are behind a proxy, you must set this, otherwise all visitors are rate limited
#          as if they are one.
#
behind-proxy: true

# If enabled, clients can attach files to notifications as attachments. Minimum settings to enable attachments
# are "attachment-cache-dir" and "base-url".
#
# - attachment-cache-dir is the cache directory for attached files
# - attachment-total-size-limit is the limit of the on-disk attachment cache directory (total size)
# - attachment-file-size-limit is the per-file attachment size limit (e.g. 300k, 2M, 100M)
# - attachment-expiry-duration is the duration after which uploaded attachments will be deleted (e.g. 3h, 20h)
#
# attachment-cache-dir:
# attachment-total-size-limit: "5G"
# attachment-file-size-limit: "15M"
# attachment-expiry-duration: "3h"

# If enabled, allow outgoing e-mail notifications via the 'X-Email' header. If this header is set,
# messages will additionally be sent out as e-mail using an external SMTP server.
#
# As of today, only SMTP servers with plain text auth (or no auth at all), and STARTLS are supported.
# Please also refer to the rate limiting settings below (visitor-email-limit-burst & visitor-email-limit-burst).
#
# - smtp-sender-addr is the hostname:port of the SMTP server
# - smtp-sender-from is the e-mail address of the sender
# - smtp-sender-user/smtp-sender-pass are the username and password of the SMTP user (leave blank for no auth)
#
smtp-sender-addr: $SMTP_HOSTNAME:25
smtp-sender-from: $EMAIL_ADMIN_EMAIL_ADDRESS
# smtp-sender-user:
# smtp-sender-pass:

# If enabled, ntfy will launch a lightweight SMTP server for incoming messages. Once configured, users can send
# emails to a topic e-mail address to publish messages to a topic.
#
# - smtp-server-listen defines the IP address and port the SMTP server will listen on, e.g. :25 or 1.2.3.4:25
# - smtp-server-domain is the e-mail domain, e.g. ntfy.sh
# - smtp-server-addr-prefix is an optional prefix for the e-mail addresses to prevent spam. If set to "ntfy-",
#   for instance, only e-mails to ntfy-$topic@ntfy.sh will be accepted. If this is not set, all emails to
#   $topic@ntfy.sh will be accepted (which may obviously be a spam problem).
#
# smtp-server-listen:
# smtp-server-domain:
# smtp-server-addr-prefix:

# Web Push support (background notifications for browsers)
#
# If enabled, allows ntfy to receive push notifications, even when the ntfy web app is closed. When enabled, users
# can enable background notifications in the web app. Once enabled, ntfy will forward published messages to the push
# endpoint, which will then forward it to the browser.
#
# You must configure web-push-public/private key, web-push-file, and web-push-email-address below to enable Web Push.
# Run "ntfy webpush keys" to generate the keys.
#
# - web-push-public-key is the generated VAPID public key, e.g. AA1234BBCCddvveekaabcdfqwertyuiopasdfghjklzxcvbnm1234567890
# - web-push-private-key is the generated VAPID private key, e.g. AA2BB1234567890abcdefzxcvbnm1234567890
# - web-push-file is a database file to keep track of browser subscription endpoints, e.g. /var/cache/ntfy/webpush.db
# - web-push-email-address is the admin email address send to the push provider, e.g. sysadmin@example.com
# - web-push-startup-queries is an optional list of queries to run on startup
#
# web-push-public-key:
# web-push-private-key:
# web-push-file:
# web-push-email-address:
# web-push-startup-queries:

# If enabled, ntfy can perform voice calls via Twilio via the "X-Call" header.
#
# - twilio-account is the Twilio account SID, e.g. AC12345beefbeef67890beefbeef122586
# - twilio-auth-token is the Twilio auth token, e.g. affebeef258625862586258625862586
# - twilio-phone-number is the outgoing phone number you purchased, e.g. +18775132586
# - twilio-verify-service is the Twilio Verify service SID, e.g. VA12345beefbeef67890beefbeef122586
#
# twilio-account:
# twilio-auth-token:
# twilio-phone-number:
# twilio-verify-service:

# Interval in which keepalive messages are sent to the client. This is to prevent
# intermediaries closing the connection for inactivity.
#
# Note that the Android app has a hardcoded timeout at 77s, so it should be less than that.
#
# keepalive-interval: "45s"

# Interval in which the manager prunes old messages, deletes topics
# and prints the stats.
#
# manager-interval: "1m"

# Defines topic names that are not allowed, because they are otherwise used. There are a few default topics
# that cannot be used (e.g. app, account, settings, ...). To extend the default list, define them here.
#
# Example:
#   disallowed-topics:
#     - about
#     - pricing
#     - contact
#
# disallowed-topics:

# Defines the root path of the web app, or disables the web app entirely.
#
# Can be any simple path, e.g. "/", "/app", or "/ntfy". For backwards-compatibility reasons,
# the values "app" (maps to "/"), "home" (maps to "/app"), or "disable" (maps to "") to disable
# the web app entirely.
#
# web-root: /

# Various feature flags used to control the web app, and API access, mainly around user and
# account management.
#
# - enable-signup allows users to sign up via the web app, or API
# - enable-login allows users to log in via the web app, or API
# - enable-reservations allows users to reserve topics (if their tier allows it)
#
# enable-signup: false
# enable-login: false
# enable-reservations: false

# Server URL of a Firebase/APNS-connected ntfy server (likely "https://ntfy.sh").
#
# iOS users:
#   If you use the iOS ntfy app, you MUST configure this to receive timely notifications. You'll like want this:
#   upstream-base-url: "https://ntfy.sh"
#
# If set, all incoming messages will publish a "poll_request" message to the configured upstream server, containing
# the message ID of the original message, instructing the iOS app to poll this server for the actual message contents.
# This is to prevent the upstream server and Firebase/APNS from being able to read the message.
#
# - upstream-base-url is the base URL of the upstream server. Should be "https://ntfy.sh".
# - upstream-access-token is the token used to authenticate with the upstream server. This is only required
#   if you exceed the upstream rate limits, or the uptream server requires authentication.
#
upstream-base-url: "https://ntfy.sh"
# upstream-access-token:

# Rate limiting: Total number of topics before the server rejects new topics.
#
# global-topic-limit: 15000

# Rate limiting: Number of subscriptions per visitor (IP address)
#
# visitor-subscription-limit: 30

# Rate limiting: Allowed GET/PUT/POST requests per second, per visitor:
# - visitor-request-limit-burst is the initial bucket of requests each visitor has
# - visitor-request-limit-replenish is the rate at which the bucket is refilled
# - visitor-request-limit-exempt-hosts is a comma-separated list of hostnames, IPs or CIDRs to be
#   exempt from request rate limiting. Hostnames are resolved at the time the server is started.
#   Example: "1.2.3.4,ntfy.example.com,8.7.6.0/24"
#
# visitor-request-limit-burst: 60
# visitor-request-limit-replenish: "5s"
# visitor-request-limit-exempt-hosts: ""

# Rate limiting: Hard daily limit of messages per visitor and day. The limit is reset
# every day at midnight UTC. If the limit is not set (or set to zero), the request
# limit (see above) governs the upper limit.
#
# visitor-message-daily-limit: 0

# Rate limiting: Allowed emails per visitor:
# - visitor-email-limit-burst is the initial bucket of emails each visitor has
# - visitor-email-limit-replenish is the rate at which the bucket is refilled
#
# visitor-email-limit-burst: 16
# visitor-email-limit-replenish: "1h"

# Rate limiting: Attachment size and bandwidth limits per visitor:
# - visitor-attachment-total-size-limit is the total storage limit used for attachments per visitor
# - visitor-attachment-daily-bandwidth-limit is the total daily attachment download/upload traffic limit per visitor
#
# visitor-attachment-total-size-limit: "100M"
# visitor-attachment-daily-bandwidth-limit: "500M"

# Rate limiting: Enable subscriber-based rate limiting (mostly used for UnifiedPush)
#
# If enabled, subscribers may opt to have published messages counted against their own rate limits, as opposed
# to the publisher's rate limits. This is especially useful to increase the amount of messages that high-volume
# publishers (e.g. Matrix/Mastodon servers) are allowed to send.
#
# Once enabled, a client may send a "Rate-Topics: <topic1>,<topic2>,..." header when subscribing to topics via
# HTTP stream, or websockets, thereby registering itself as the "rate visitor", i.e. the visitor whose rate limits
# to use when publishing on this topic. Note: Setting the rate visitor requires READ-WRITE permission on the topic.
#
# UnifiedPush only: If this setting is enabled, publishing to UnifiedPush topics will lead to a HTTP 507 response if
# no "rate visitor" has been previously registered. This is to avoid burning the publisher's "visitor-message-daily-limit".
#
# visitor-subscriber-rate-limiting: false

# Payments integration via Stripe
#
# - stripe-secret-key is the key used for the Stripe API communication. Setting this values
#   enables payments in the ntfy web app (e.g. Upgrade dialog). See https://dashboard.stripe.com/apikeys.
# - stripe-webhook-key is the key required to validate the authenticity of incoming webhooks from Stripe.
#   Webhooks are essential up keep the local database in sync with the payment provider. See https://dashboard.stripe.com/webhooks.
# - billing-contact is an email address or website displayed in the "Upgrade tier" dialog to let people reach
#   out with billing questions. If unset, nothing will be displayed.
#
# stripe-secret-key:
# stripe-webhook-key:
# billing-contact:

# Metrics
#
# ntfy can expose Prometheus-style metrics via a /metrics endpoint, or on a dedicated listen IP/port.
# Metrics may be considered sensitive information, so before you enable them, be sure you know what you are
# doing, and/or secure access to the endpoint in your reverse proxy.
#
# - enable-metrics enables the /metrics endpoint for the default ntfy server (i.e. HTTP, HTTPS and/or Unix socket)
# - metrics-listen-http exposes the metrics endpoint via a dedicated [IP]:port. If set, this option implicitly
#   enables metrics as well, e.g. "10.0.1.1:9090" or ":9090"
#
# enable-metrics: false
# metrics-listen-http:

# Profiling
#
# ntfy can expose Go's net/http/pprof endpoints to support profiling of the ntfy server. If enabled, ntfy will listen
# on a dedicated listen IP/port, which can be accessed via the web browser on http://<ip>:<port>/debug/pprof/.
# This can be helpful to expose bottlenecks, and visualize call flows. See https://pkg.go.dev/net/http/pprof for details.
#
# profile-listen-http:

# Logging options
#
# By default, ntfy logs to the console (stderr), with an "info" log level, and in a human-readable text format.
# ntfy supports five different log levels, can also write to a file, log as JSON, and even supports granular
# log level overrides for easier debugging. Some options (log-level and log-level-overrides) can be hot reloaded
# by calling "kill -HUP $pid" or "systemctl reload ntfy".
#
# - log-format defines the output format, can be "text" (default) or "json"
# - log-file is a filename to write logs to. If this is not set, ntfy logs to stderr.
# - log-level defines the default log level, can be one of "trace", "debug", "info" (default), "warn" or "error".
#   Be aware that "debug" (and particularly "trace") can be VERY CHATTY. Only turn them on briefly for debugging purposes.
# - log-level-overrides lets you override the log level if certain fields match. This is incredibly powerful
#   for debugging certain parts of the system (e.g. only the account management, or only a certain visitor).
#   This is an array of strings in the format:
#      - "field=value -> level" to match a value exactly, e.g. "tag=manager -> trace"
#      - "field -> level" to match any value, e.g. "time_taken_ms -> debug"
#   Warning: Using log-level-overrides has a performance penalty. Only use it for temporary debugging.
#
# Check your permissions:
#   If you are running ntfy with systemd, make sure this log file is owned by the
#   ntfy user and group by running: chown ntfy.ntfy <filename>.
#
# Example (good for production):
#   log-level: info
#   log-format: json
#   log-file: /var/log/ntfy.log
#
# Example level overrides (for debugging, only use temporarily):
#   log-level-overrides:
#      - "tag=manager -> trace"
#      - "visitor_ip=1.2.3.4 -> debug"
#      - "time_taken_ms -> debug"
#
# log-level: info
# log-level-overrides:
# log-format: text
# log-file:

EOFNT

}

function performUpdateNTFY()
{
  perform_stack_name=ntfy
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=binwiederhier/ntfy:v2.7.0
      image_update_map[0]="binwiederhier/ntfy:v2.7.0,binwiederhier/ntfy:v2.9.0"
    ;;
    2)
      newVer=v3
      curImageList=binwiederhier/ntfy:v2.8.0
      image_update_map[0]="binwiederhier/ntfy:v2.8.0,binwiederhier/ntfy:v2.9.0"
    ;;
    3)
      newVer=v3
      curImageList=binwiederhier/ntfy:v2.9.0
      image_update_map[0]="binwiederhier/ntfy:v2.9.0,binwiederhier/ntfy:v2.9.0"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# ITTools
function installITTools()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory ittools "ITTools"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_ITTOOLS
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/ittools
  outputConfigITTools
  installStack ittools ittools "" $HOME/ittools.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3
  inner_block=""
  inner_block=$inner_block">>https://$SUB_ITTOOLS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://ittools {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_ITTOOLS $MANAGETLS_ITTOOLS "$is_integrate_hshq" $NETDEFAULT_ITTOOLS "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll ittools "$FMLNAME_ITTOOLS" $USERTYPE_ITTOOLS "https://$SUB_ITTOOLS.$HOMESERVER_DOMAIN" "ittools.png"
    restartAllCaddyContainers
  fi
}

function outputConfigITTools()
{
  cat <<EOFNT > $HOME/ittools-compose.yml
$STACK_VERSION_PREFIX ittools $(getScriptStackVersion ittools)
version: '3.5'

services:
  ittools:
    image: $(getScriptImageByContainerName ittools)
    container_name: ittools
    hostname: ittools
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true


EOFNT

  cat <<EOFNT > $HOME/ittools.env
UID=$USERID
GID=$GROUPID
EOFNT

}

function performUpdateITTools()
{
  perform_stack_name=ittools
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=ghcr.io/corentinth/it-tools:latest
      image_update_map[0]="ghcr.io/corentinth/it-tools:latest,ghcr.io/corentinth/it-tools:latest"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Remotely
function installRemotely()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory remotely "Remotely"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_REMOTELY
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/remotely
  initServicesCredentials
  docker exec mailu-admin flask mailu alias-delete $REMOTELY_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $REMOTELY_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$REMOTELY_INIT_ENV" = "true" ]; then
    sendEmail -s "Remotely Admin Login Info" -b "Remotely Admin Username: $REMOTELY_ADMIN_EMAIL_ADDRESS\nRemotely Admin Password: $REMOTELY_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    REMOTELY_INIT_ENV=true
    updateConfigVar REMOTELY_INIT_ENV $REMOTELY_INIT_ENV
  fi
  outputConfigRemotely
  installStack remotely remotely "No XML encryptor configured" $HOME/remotely.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Sleeping 10 seconds..."
  sleep 10

  startStopStack remotely stop
  sudo sqlite3 $HSHQ_STACKS_DIR/remotely/Remotely.db "update KeyValueRecords set Value='{\"AllowApiLogin\":false,\"BannedDevices\":[],\"DataRetentionInDays\":90,\"DbProvider\":\"SQLite\",\"EnableRemoteControlRecording\":false,\"EnableWindowsEventLog\":false,\"EnforceAttendedAccess\":false,\"ForceClientHttps\":true,\"KnownProxies\":[],\"MaxConcurrentUpdates\":10,\"MaxOrganizationCount\":1,\"MessageOfTheDay\":\"\",\"RedirectToHttps\":false,\"RemoteControlNotifyUser\":true,\"RemoteControlRequiresAuthentication\":true,\"RemoteControlSessionLimit\":5,\"Require2FA\":false,\"ServerUrl\":\"https://$SUB_REMOTELY.$HOMESERVER_DOMAIN\",\"SmtpCheckCertificateRevocation\":false,\"SmtpDisplayName\":\"Remotely $HSHQ_ADMIN_NAME\",\"SmtpEmail\":\"$EMAIL_ADMIN_EMAIL_ADDRESS\",\"SmtpHost\":\"$SMTP_HOSTNAME\",\"SmtpLocalDomain\":\"\",\"SmtpPassword\":\"\",\"SmtpPort\":$SMTP_HOSTPORT,\"SmtpUserName\":\"\",\"Theme\":0,\"TrustedCorsOrigins\":[],\"UseHsts\":false,\"UseHttpLogging\":false}';"
  startStopStack remotely start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_REMOTELY.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://remotely:5000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_REMOTELY $MANAGETLS_REMOTELY "$is_integrate_hshq" $NETDEFAULT_REMOTELY "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll remotely "$FMLNAME_REMOTELY" $USERTYPE_REMOTELY "https://$SUB_REMOTELY.$HOMESERVER_DOMAIN" "remotely.png"
    restartAllCaddyContainers
  fi
}

function outputConfigRemotely()
{
  cat <<EOFRM > $HOME/remotely-compose.yml
$STACK_VERSION_PREFIX remotely $(getScriptStackVersion remotely)
version: '3.5'

services:
  remotely:
    image: $(getScriptImageByContainerName remotely)
    container_name: remotely
    hostname: remotely
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/remotely:/app/AppData

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
EOFRM

  cat <<EOFRM > $HOME/remotely.env
TZ=\${TZ}
ASPNETCORE_ENVIRONMENT=Production
ASPNETCORE_HTTP_PORTS=5000
Remotely_ApplicationOptions__DbProvider=SQLite
Remotely_ConnectionStrings__SQLite=Data Source=/app/AppData/Remotely.db
EOFRM

}

function performUpdateRemotely()
{
  perform_stack_name=remotely
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=immybot/remotely:69
      image_update_map[0]="immybot/remotely:69,immybot/remotely:69"
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): This version of Remotely cannot be upgraded to the next version. You must uninstall your current version and reinstall the new version."
      return
    ;;
    2)
      newVer=v2
      curImageList=immybot/remotely:88
      image_update_map[0]="immybot/remotely:88,immybot/remotely:88"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Calibre
function installCalibre()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory calibre "Calibre"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_CALIBRE_SERVER
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_CALIBRE_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/calibre
  mkdir $HSHQ_STACKS_DIR/calibre/server
  mkdir $HSHQ_STACKS_DIR/calibre/library
  mkdir $HSHQ_STACKS_DIR/calibre/web

  initServicesCredentials

  set +e
  docker exec mailu-admin flask mailu alias-delete $CALIBRE_WEB_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $CALIBRE_WEB_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$CALIBRE_WEB_INIT_ENV" = "true" ]; then
    sendEmail -s "Calibre-Web Admin Login Info" -b "Calibre-Web Admin Username: $CALIBRE_WEB_ADMIN_USERNAME\nCalibre-Web Admin Password: $CALIBRE_WEB_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    CALIBRE_WEB_INIT_ENV=true
    updateConfigVar CALIBRE_WEB_INIT_ENV $CALIBRE_WEB_INIT_ENV
  fi

  outputConfigCalibre
  generateCert calibre-web calibre-web
  installStack calibre calibre-web "done." $HOME/calibre.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "Calibre stack installed, sleeping 10 seconds..."
  sleep 10

  docker exec -it calibre-web python3 /app/calibre-web/cps.py -p /config/app.db -s admin:$CALIBRE_WEB_ADMIN_PASSWORD
  encpw=$(docker exec -it calibre-web python3 /config/getencpw.py)
  encpw=${encpw:2:${#encpw}-4}
  startStopStack calibre stop
  cat $HSHQ_STACKS_DIR/calibre/server/.config/calibre/global.py.json | jq '.library_path |= "/library"' > $HOME/calibre_new.json
  mv -f $HOME/calibre_new.json $HSHQ_STACKS_DIR/calibre/server/.config/calibre/global.py.json
  
  rm $HSHQ_STACKS_DIR/calibre/web/getencpw.py
  sqlite3 $HSHQ_STACKS_DIR/calibre/web/app.db "UPDATE user set name='$CALIBRE_WEB_ADMIN_USERNAME', email='$CALIBRE_WEB_ADMIN_EMAIL_ADDRESS', kindle_mail='$CALIBRE_WEB_ADMIN_EMAIL_ADDRESS' where id=1;"
  sqlite3 $HSHQ_STACKS_DIR/calibre/web/app.db "UPDATE settings set mail_server='$SMTP_HOSTNAME', mail_port=25, mail_use_ssl=1, mail_from='Calibre-Web $HSHQ_ADMIN_NAME <$EMAIL_ADMIN_EMAIL_ADDRESS>', mail_size=26214400, mail_server_type=0, config_calibre_dir='/library', config_theme=1, config_login_type=1, config_ldap_provider_url='ldapserver', config_ldap_port=389, config_ldap_authentication=2, config_ldap_serv_username='$LDAP_READONLY_USER_BIND_DN', config_ldap_serv_password_e='$encpw', config_ldap_encryption=1, config_ldap_cacert_path='/usr/local/share/ca-certificates/${CERTS_ROOT_CA_NAME}.crt', config_ldap_cert_path='/certs/calibre-web.crt', config_ldap_key_path='/certs/calibre-web.key', config_ldap_dn='$LDAP_BASE_DN', config_ldap_user_object='(&(objectclass=person)(uid=%s))', config_ldap_member_user_object='(&(objectclass=person)(uid=%s))', config_ldap_openldap=1, config_ldap_group_object_filter='(&(objectclass=groupOfUniqueNames)(cn=%s))', config_ldap_group_members_field='uniqueMember', config_ldap_group_name='$LDAP_PRIMARY_USER_GROUP_NAME' where id=1;"
  startStopStack calibre start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_CALIBRE_SERVER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://calibre-server:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_CALIBRE_SERVER $MANAGETLS_CALIBRE_SERVER "$is_integrate_hshq" $NETDEFAULT_CALIBRE_SERVER "$inner_block"
  insertSubAuthelia $SUB_CALIBRE_SERVER.$HOMESERVER_DOMAIN admins

  inner_block=""
  inner_block=$inner_block">>https://$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://calibre-web:8083 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_CALIBRE_WEB $MANAGETLS_CALIBRE_WEB "$is_integrate_hshq" $NETDEFAULT_CALIBRE_WEB "$inner_block"
  insertSubAuthelia $SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN bypass

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll calibre "$FMLNAME_CALIBRE_SERVER" $USERTYPE_CALIBRE_SERVER "https://$SUB_CALIBRE_SERVER.$HOMESERVER_DOMAIN" "calibre-server.png"
    insertEnableSvcAll calibre "$FMLNAME_CALIBRE_WEB" $USERTYPE_CALIBRE_WEB "https://$SUB_CALIBRE_WEB.$HOMESERVER_DOMAIN" "calibre-web.png"
    restartAllCaddyContainers
  fi
}

function outputConfigCalibre()
{
  cat <<EOFNT > $HOME/calibre-compose.yml
$STACK_VERSION_PREFIX calibre $(getScriptStackVersion calibre)
version: '3.5'

services:
  calibre-server:
    image: $(getScriptImageByContainerName calibre-server)
    container_name: calibre-server
    hostname: calibre-server
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/calibre/server:/config
      - \${HSHQ_STACKS_DIR}/calibre/library:/library

  calibre-web:
    image: $(getScriptImageByContainerName calibre-web)
    container_name: calibre-web
    hostname: calibre-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
      - dock-ldap-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/calibre-web.crt:/certs/calibre-web.crt:ro
      - \${HSHQ_SSL_DIR}/calibre-web.key:/certs/calibre-web.key:ro
      - \${HSHQ_STACKS_DIR}/calibre/web:/config
      - \${HSHQ_STACKS_DIR}/calibre/library:/library

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-ldap-net:
    name: dock-ldap
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true

EOFNT

  cat <<EOFNT > $HOME/calibre.env
TZ=\${TZ}
PUID=$USERID
PGID=$GROUPID
CALIBRE_LDAP_AUTO_CREATE=true
EOFNT

  cat <<EOFPY > $HSHQ_STACKS_DIR/calibre/web/getencpw.py
from cryptography.fernet import Fernet
import cryptography.exceptions
from base64 import urlsafe_b64decode
f = open("/config/.key", "r")
key = f.read()
f.close()
crypter = Fernet(key)
configpw = "$LDAP_READONLY_USER_PASSWORD"
configpw_e=crypter.encrypt(configpw.encode())
print(configpw_e)
EOFPY

}

function performUpdateCalibre()
{
  perform_stack_name=calibre
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=linuxserver/calibre:7.3.0,linuxserver/calibre-web:0.6.21
      image_update_map[0]="linuxserver/calibre:7.3.0,linuxserver/calibre:7.7.0"
      image_update_map[1]="linuxserver/calibre-web:0.6.21,linuxserver/calibre-web:0.6.21-ls257"
    ;;
    2)
      newVer=v3
      curImageList=linuxserver/calibre:7.4.0,linuxserver/calibre-web:0.6.21
      image_update_map[0]="linuxserver/calibre:7.4.0,linuxserver/calibre:7.7.0"
      image_update_map[1]="linuxserver/calibre-web:0.6.21,linuxserver/calibre-web:0.6.21-ls257"
    ;;
    3)
      newVer=v3
      curImageList=linuxserver/calibre:7.7.0,linuxserver/calibre-web:0.6.21-ls257
      image_update_map[0]="linuxserver/calibre:7.7.0,linuxserver/calibre:7.7.0"
      image_update_map[1]="linuxserver/calibre-web:0.6.21-ls257,linuxserver/calibre-web:0.6.21-ls257"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Netdata
function installNetdata()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory netdata "Netdata"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_NETDATA
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/netdata
  mkdir $HSHQ_STACKS_DIR/netdata/config
  mkdir $HSHQ_STACKS_DIR/netdata/lib
  mkdir $HSHQ_NONBACKUP_DIR/netdata
  mkdir $HSHQ_NONBACKUP_DIR/netdata/cache

  outputConfigNetdata
  installStack netdata netdata "" $HOME/netdata.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_NETDATA.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://netdata:19999 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_NETDATA $MANAGETLS_NETDATA "$is_integrate_hshq" $NETDEFAULT_NETDATA "$inner_block"
  insertSubAuthelia $SUB_NETDATA.$HOMESERVER_DOMAIN admins

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll netdata "$FMLNAME_NETDATA" $USERTYPE_NETDATA "https://$SUB_NETDATA.$HOMESERVER_DOMAIN" "netdata.png"
    restartAllCaddyContainers
  fi
}

function outputConfigNetdata()
{
  cat <<EOFDZ > $HOME/netdata-compose.yml
$STACK_VERSION_PREFIX netdata $(getScriptStackVersion netdata)
version: '3.5'

services:
  netdata:
    image: $(getScriptImageByContainerName netdata)
    container_name: netdata
    hostname: netdata
    restart: unless-stopped
    pid: host
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    networks:
      - dock-proxy-net
      - dock-privateip-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - v-netdata-config:/etc/netdata
      - v-netdata-lib:/var/lib/netdata
      - v-netdata-cache:/var/cache/netdata

volumes:
  v-netdata-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/netdata/config
  v-netdata-lib:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/netdata/lib
  v-netdata-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/netdata/cache

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-privateip-net:
    name: dock-privateip
    external: true

EOFDZ

  cat <<EOFDZ > $HOME/netdata.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
EOFDZ

}

function performUpdateNetdata()
{
  perform_stack_name=netdata
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=netdata/netdata:v1.44.1
      image_update_map[0]="netdata/netdata:v1.44.1,netdata/netdata:v1.44.3"
    ;;
    2)
      newVer=v2
      curImageList=netdata/netdata:v1.44.3
      image_update_map[0]="netdata/netdata:v1.44.3,netdata/netdata:v1.44.3"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Linkwarden
function installLinkwarden()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory linkwarden "$FMLNAME_LINKWARDEN"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_LINKWARDEN
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/linkwarden
  mkdir $HSHQ_STACKS_DIR/linkwarden/db
  mkdir $HSHQ_STACKS_DIR/linkwarden/dbexport
  mkdir $HSHQ_STACKS_DIR/linkwarden/app
  chmod 777 $HSHQ_STACKS_DIR/linkwarden/dbexport

  initServicesCredentials
  if [ -z "$LINKWARDEN_NEXTAUTH_SECRET" ]; then
    LINKWARDEN_NEXTAUTH_SECRET=$(pwgen -c -n 32 1)
    updateConfigVar LINKWARDEN_NEXTAUTH_SECRET $LINKWARDEN_NEXTAUTH_SECRET
  fi

  outputConfigLinkwarden
  installStack linkwarden linkwarden "" $HOME/linkwarden.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_LINKWARDEN.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://linkwarden-app:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_LINKWARDEN $MANAGETLS_LINKWARDEN "$is_integrate_hshq" $NETDEFAULT_LINKWARDEN "$inner_block"
  insertSubAuthelia $SUB_LINKWARDEN.$HOMESERVER_DOMAIN primaryusers

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll linkwarden "$FMLNAME_LINKWARDEN" $USERTYPE_LINKWARDEN "https://$SUB_LINKWARDEN.$HOMESERVER_DOMAIN" "linkwarden.png"
    restartAllCaddyContainers
    checkAddDBSqlPad linkwarden "$FMLNAME_LINKWARDEN" postgres linkwarden-db $LINKWARDEN_DATABASE_NAME $LINKWARDEN_DATABASE_USER $LINKWARDEN_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigLinkwarden()
{
  cat <<EOFDZ > $HOME/linkwarden-compose.yml
$STACK_VERSION_PREFIX linkwarden $(getScriptStackVersion linkwarden)
version: '3.5'

services:
  linkwarden-db:
    image: $(getScriptImageByContainerName linkwarden-db)
    container_name: linkwarden-db
    hostname: linkwarden-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-linkwarden-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/linkwarden/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/linkwarden/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.linkwarden-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.linkwarden-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.linkwarden-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.linkwarden-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.linkwarden-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.linkwarden-hourly-db.email-from=Linkwarden Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.linkwarden-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.linkwarden-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.linkwarden-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.linkwarden-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.linkwarden-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.linkwarden-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.linkwarden-monthly-db.email-from=Linkwarden Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.linkwarden-monthly-db.mail-only-on-error=false"

  linkwarden-app:
    image: $(getScriptImageByContainerName linkwarden-app)
    container_name: linkwarden-app
    hostname: linkwarden-app
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - linkwarden-db
    networks:
      - int-linkwarden-net
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-linkwarden-app:/data/data

volumes:
  v-linkwarden-app:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/linkwarden/app

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-linkwarden-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFDZ

  cat <<EOFDZ > $HOME/linkwarden.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$LINKWARDEN_DATABASE_NAME
POSTGRES_USER=$LINKWARDEN_DATABASE_USER
POSTGRES_PASSWORD=$LINKWARDEN_DATABASE_USER_PASSWORD
DATABASE_URL=postgresql://$LINKWARDEN_DATABASE_USER:$LINKWARDEN_DATABASE_USER_PASSWORD@linkwarden-db:5432/$LINKWARDEN_DATABASE_NAME
NEXTAUTH_SECRET=$LINKWARDEN_NEXTAUTH_SECRET
NEXTAUTH_URL=https://$SUB_LINKWARDEN.$HOMESERVER_DOMAIN
EOFDZ

}

function performUpdateLinkwarden()
{
  perform_stack_name=linkwarden
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=postgres:15.0-bullseye,ghcr.io/linkwarden/linkwarden:v2.4.8
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="ghcr.io/linkwarden/linkwarden:v2.4.8,ghcr.io/linkwarden/linkwarden:v2.5.1"
    ;;
    2)
      newVer=v3
      curImageList=postgres:15.0-bullseye,ghcr.io/linkwarden/linkwarden:v2.4.9
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="ghcr.io/linkwarden/linkwarden:v2.4.9,ghcr.io/linkwarden/linkwarden:v2.5.1"
    ;;
    3)
      newVer=v3
      curImageList=postgres:15.0-bullseye,ghcr.io/linkwarden/linkwarden:v2.5.1
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="ghcr.io/linkwarden/linkwarden:v2.5.1,ghcr.io/linkwarden/linkwarden:v2.5.1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# StirlingPDF
function installStirlingPDF()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory stirlingpdf "StirlingPDF"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_STIRLINGPDF
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/stirlingpdf
  mkdir $HSHQ_STACKS_DIR/stirlingpdf/configs
  mkdir $HSHQ_NONBACKUP_DIR/stirlingpdf
  mkdir $HSHQ_NONBACKUP_DIR/stirlingpdf/logs
  mkdir $HSHQ_NONBACKUP_DIR/stirlingpdf/traindata

  outputConfigStirlingPDF
  installStack stirlingpdf stirlingpdf "" $HOME/stirlingpdf.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_STIRLINGPDF.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://stirlingpdf:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_STIRLINGPDF $MANAGETLS_STIRLINGPDF "$is_integrate_hshq" $NETDEFAULT_STIRLINGPDF "$inner_block"
  insertSubAuthelia $SUB_STIRLINGPDF.$HOMESERVER_DOMAIN primaryusers

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll stirlingpdf "$FMLNAME_STIRLINGPDF" $USERTYPE_STIRLINGPDF "https://$SUB_STIRLINGPDF.$HOMESERVER_DOMAIN" "stirlingpdf.png"
    restartAllCaddyContainers
  fi
}

function outputConfigStirlingPDF()
{
  cat <<EOFDZ > $HOME/stirlingpdf-compose.yml
$STACK_VERSION_PREFIX stirlingpdf $(getScriptStackVersion stirlingpdf)
version: '3.5'

services:
  stirlingpdf:
    image: $(getScriptImageByContainerName stirlingpdf)
    container_name: stirlingpdf
    hostname: stirlingpdf
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/stirlingpdf/configs:/configs
      - \${HSHQ_NONBACKUP_DIR}/stirlingpdf/logs:/logs
      - \${HSHQ_NONBACKUP_DIR}/stirlingpdf/traindata:/usr/share/tesseract-ocr/5/tessdata

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true

EOFDZ

  cat <<EOFDZ > $HOME/stirlingpdf.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
EOFDZ

}

function performUpdateStirlingPDF()
{
  perform_stack_name=stirlingpdf
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=frooodle/s-pdf:0.19.0
      image_update_map[0]="frooodle/s-pdf:0.19.0,frooodle/s-pdf:0.22.2"
    ;;
    2)
      newVer=v3
      curImageList=frooodle/s-pdf:0.20.1
      image_update_map[0]="frooodle/s-pdf:0.20.1,frooodle/s-pdf:0.22.2"
    ;;
    3)
      newVer=v3
      curImageList=frooodle/s-pdf:0.22.2
      image_update_map[0]="frooodle/s-pdf:0.22.2,frooodle/s-pdf:0.22.2"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# BarAssistant
function installBarAssistant()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory bar-assistant "Bar Assistant"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_BARASSISTANT_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_BARASSISTANT_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_MEILISEARCH
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_SALTRIM
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/bar-assistant
  mkdir $HSHQ_STACKS_DIR/bar-assistant/app
  mkdir $HSHQ_STACKS_DIR/bar-assistant/meilisearch
  mkdir $HSHQ_STACKS_DIR/bar-assistant/web
  mkdir $HSHQ_NONBACKUP_DIR/bar-assistant
  mkdir $HSHQ_NONBACKUP_DIR/bar-assistant/redis

  if [ -z "$BARASSISTANT_REDIS_PASSWORD" ]; then
    BARASSISTANT_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar BARASSISTANT_REDIS_PASSWORD $BARASSISTANT_REDIS_PASSWORD
  fi
  if [ -z "$BARASSISTANT_MEILISEARCH_KEY" ]; then
    BARASSISTANT_MEILISEARCH_KEY=$(pwgen -c -n 64 1)
    updateConfigVar BARASSISTANT_MEILISEARCH_KEY $BARASSISTANT_MEILISEARCH_KEY
  fi

  outputConfigBarAssistant
  installStack bar-assistant bar-assistant-app "ready to handle connections" $HOME/bar-assistant.env 10
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_BARASSISTANT.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://bar-assistant-web:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_BARASSISTANT $MANAGETLS_BARASSISTANT "$is_integrate_hshq" $NETDEFAULT_BARASSISTANT "$inner_block"
  insertSubAuthelia $SUB_BARASSISTANT.$HOMESERVER_DOMAIN primaryusers

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll bar-assistant "$FMLNAME_BARASSISTANT" $USERTYPE_BARASSISTANT "https://$SUB_BARASSISTANT.$HOMESERVER_DOMAIN" "bar-assistant.png"
    restartAllCaddyContainers
  fi
}

function outputConfigBarAssistant()
{
  cat <<EOFBA > $HOME/bar-assistant-compose.yml
$STACK_VERSION_PREFIX bar-assistant $(getScriptStackVersion bar-assistant)
version: '3.5'

services:
  bar-assistant-app:
    image: $(getScriptImageByContainerName bar-assistant-app)
    container_name: bar-assistant-app
    hostname: bar-assistant-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - bar-assistant-meilisearch
      - bar-assistant-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - int-bar-assistant-net
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-bar-assistant-app:/var/www/cocktails/storage/bar-assistant

  bar-assistant-meilisearch:
    image: $(getScriptImageByContainerName bar-assistant-meilisearch)
    container_name: bar-assistant-meilisearch
    hostname: bar-assistant-meilisearch
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - int-bar-assistant-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-bar-assistant-meilisearch:/meili_data

  bar-assistant-redis:
    image: $(getScriptImageByContainerName bar-assistant-redis)
    container_name: bar-assistant-redis
    hostname: bar-assistant-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-bar-assistant-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-bar-assistant-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$BARASSISTANT_REDIS_PASSWORD

  bar-assistant-saltrim:
    image: $(getScriptImageByContainerName bar-assistant-saltrim)
    container_name: bar-assistant-saltrim
    hostname: bar-assistant-saltrim
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - bar-assistant-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - int-bar-assistant-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

  bar-assistant-web:
    image: $(getScriptImageByContainerName bar-assistant-web)
    container_name: bar-assistant-web
    hostname: bar-assistant-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-bar-assistant-net
      - dock-proxy-net
      - dock-ext-net
    depends_on:
      - bar-assistant-app
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/bar-assistant/web/nginx.conf:/etc/nginx/conf.d/default.conf

volumes:
  v-bar-assistant-app:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/bar-assistant/app
  v-bar-assistant-meilisearch:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/bar-assistant/meilisearch
  v-bar-assistant-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/bar-assistant/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-bar-assistant-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFBA

  cat <<EOFBA > $HOME/bar-assistant.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
BASE_URL=https://$SUB_BARASSISTANT.$HOMESERVER_DOMAIN
APP_URL=\${BASE_URL}
DEFAULT_LOCALE=en-US
LOG_CHANNEL=stderr
API_URL=\${BASE_URL}/bar
MEILISEARCH_URL=\${BASE_URL}/search
MEILI_MASTER_KEY=$BARASSISTANT_MEILISEARCH_KEY
MEILI_ENV=production
MEILISEARCH_KEY=$BARASSISTANT_MEILISEARCH_KEY
MEILISEARCH_HOST=http://bar-assistant-meilisearch:7700
REDIS_HOST=bar-assistant-redis
REDIS_PASSWORD=$BARASSISTANT_REDIS_PASSWORD
ALLOW_REGISTRATION=true
MAIL_MAILER=smtp
MAIL_FROM_ADDRESS=$EMAIL_ADMIN_EMAIL_ADDRESS
MAIL_FROM_NAME=Bar Assistant $HSHQ_ADMIN_NAME
MAIL_HOST=$SMTP_HOSTNAME
MAIL_PORT=25
MAIL_ENCRYPTION=tls
MAIL_REQUIRE_CONFIRMATION=false
MAIL_CONFIRM_URL=\${BASE_URL}/confirmation/[id]/[hash]
MAIL_RESET_URL=\${BASE_URL}/reset-password?token=[token]
EOFBA

  cat <<EOFBA > $HSHQ_STACKS_DIR/bar-assistant/web/nginx.conf
server {
    listen 3000 default_server;
    listen [::]:3000 default_server;
    server_name _;

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    client_max_body_size 100M;

    location /bar/ {
        proxy_pass http://bar-assistant-app:3000/;
    }

    location /uploads/ {
        proxy_pass http://bar-assistant-app:3000;
    }

    location /search/ {
        proxy_pass http://bar-assistant-meilisearch:7700/;
    }

    location / {
        proxy_pass http://bar-assistant-saltrim:8080/;
    }
}
EOFBA

}

function performUpdateBarAssistant()
{
  perform_stack_name=bar-assistant
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      # Meilisearch has a more recent version, v1.6. However, moving between versions requires manual migration.
      # So, we'll use v1.4 until the migration process has been mapped out.
      # See https://www.meilisearch.com/docs/learn/cookbooks/docker#generating-dumps-and-updating-meilisearch 
      newVer=v2
      curImageList=barassistant/server:v3,getmeili/meilisearch:v1.4,bitnami/redis:7.0.5,barassistant/salt-rim:v2,nginx:1.25.3-alpine
      image_update_map[0]="barassistant/server:v3,barassistant/server:3.11.0"
      image_update_map[1]="getmeili/meilisearch:v1.4,getmeili/meilisearch:v1.6"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[3]="barassistant/salt-rim:v2,barassistant/salt-rim:2.11.0"
      image_update_map[4]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
    ;;
    2)
      newVer=v2
      curImageList=barassistant/server:3.11.0,getmeili/meilisearch:v1.6,bitnami/redis:7.0.5,barassistant/salt-rim:2.11.0,nginx:1.25.3-alpine
      image_update_map[0]="barassistant/server:3.11.0,barassistant/server:3.11.0"
      image_update_map[1]="getmeili/meilisearch:v1.6,getmeili/meilisearch:v1.6"
      image_update_map[2]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[3]="barassistant/salt-rim:2.11.0,barassistant/salt-rim:2.11.0"
      image_update_map[4]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" mfClearMeiliData false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function clearMeiliData()
{
  # This function assumes the BarAssistant stack/containers are NOT running.
  echo -e "\nClearing BarAssistant Meilisearch data...\n"
  sudo rm -fr ${HSHQ_STACKS_DIR}/bar-assistant/meilisearch/*
  sleep 3
}

function mfClearMeiliData()
{
  if [ "$stackStatus" = "1" ];then
    # Stack is running, stop it, then clear data
    startStopStack bar-assistant stop "$portainerToken"
    isStartStackFromStopped=true
    sleep 3
  fi
  clearMeiliData
}

# FreshRSS
function installFreshRSS()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory freshrss "FreshRSS"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_FRESHRSS
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/freshrss
  mkdir $HSHQ_STACKS_DIR/freshrss/db
  mkdir $HSHQ_STACKS_DIR/freshrss/dbexport
  mkdir $HSHQ_STACKS_DIR/freshrss/data
  mkdir $HSHQ_STACKS_DIR/freshrss/extensions
  chmod 777 $HSHQ_STACKS_DIR/freshrss/dbexport

  initServicesCredentials

  set +e
  docker exec mailu-admin flask mailu alias-delete $FRESHRSS_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $FRESHRSS_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$FRESHRSS_INIT_ENV" = "true" ]; then
    sendEmail -s "FreshRSS Admin Login Info" -b "FreshRSS Admin Username: $FRESHRSS_ADMIN_USERNAME\nFreshRSS Admin Password: $FRESHRSS_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    FRESHRSS_INIT_ENV=true
    updateConfigVar FRESHRSS_INIT_ENV $FRESHRSS_INIT_ENV
  fi

  outputConfigFreshRSS
  installStack freshrss freshrss-app "apache2 -D FOREGROUND" $HOME/freshrss.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 5

  inner_block=""
  inner_block=$inner_block">>https://$SUB_FRESHRSS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://freshrss-app {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_FRESHRSS $MANAGETLS_FRESHRSS "$is_integrate_hshq" $NETDEFAULT_FRESHRSS "$inner_block"
  insertSubAuthelia $SUB_FRESHRSS.$HOMESERVER_DOMAIN bypass

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll freshrss "$FMLNAME_FRESHRSS" $USERTYPE_FRESHRSS "https://$SUB_FRESHRSS.$HOMESERVER_DOMAIN" "freshrss.png"
    restartAllCaddyContainers
    checkAddDBSqlPad freshrss "$FMLNAME_FRESHRSS" postgres freshrss-db $FRESHRSS_DATABASE_NAME $FRESHRSS_DATABASE_USER $FRESHRSS_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigFreshRSS()
{
  cat <<EOFBA > $HOME/freshrss-compose.yml
$STACK_VERSION_PREFIX freshrss $(getScriptStackVersion freshrss)
version: '3.5'

services:
  freshrss-db:
    image: $(getScriptImageByContainerName freshrss-db)
    container_name: freshrss-db
    hostname: freshrss-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-freshrss-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/freshrss/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/freshrss/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.freshrss-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.freshrss-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.freshrss-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.freshrss-hourly-db.smtp-port=25"
      - "ofelia.job-exec.freshrss-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.freshrss-hourly-db.email-from=FreshRSS Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.freshrss-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.freshrss-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.freshrss-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.freshrss-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.freshrss-monthly-db.smtp-port=25"
      - "ofelia.job-exec.freshrss-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.freshrss-monthly-db.email-from=FreshRSS Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.freshrss-monthly-db.mail-only-on-error=false"

  freshrss-app:
    image: $(getScriptImageByContainerName freshrss-app)
    container_name: freshrss-app
    hostname: freshrss-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
    depends_on:
      - freshrss-db
    networks:
      - int-freshrss-net
      - dock-ext-net
      - dock-proxy-net
    volumes:
      - v-freshrss-data:/var/www/FreshRSS/data
      - v-freshrss-extensions:/var/www/FreshRSS/extensions
    environment:
      FRESHRSS_INSTALL: |-
        --auth_type form
        --environment production
        --base_url \${BASE_URL}
        --language en
        --title FreshRSS
        --api_enabled
        --db-type pgsql
        --db-host \${DB_HOST}
        --db-user \${DB_USER}
        --db-password \${DB_PASSWORD}
        --db-base \${DB_BASE}
        --default_user \${ADMIN_USERNAME}
      FRESHRSS_USER: |-
        --api_password \${ADMIN_API_PASSWORD}
        --email \${ADMIN_EMAIL}
        --language en
        --password \${ADMIN_PASSWORD}
        --user \${ADMIN_USERNAME}

volumes:
  v-freshrss-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/freshrss/data
  v-freshrss-extensions:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/freshrss/extensions

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-freshrss-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFBA

  cat <<EOFBA > $HOME/freshrss.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
BASE_URL=https://$SUB_FRESHRSS.$HOMESERVER_DOMAIN
CRON_MIN=3,33
TRUSTED_PROXY=10.0.0.0/8 172.16.0.0/12 192.168.0.0/16
POSTGRES_DB=$FRESHRSS_DATABASE_NAME
POSTGRES_USER=$FRESHRSS_DATABASE_USER
POSTGRES_PASSWORD=$FRESHRSS_DATABASE_USER_PASSWORD
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
ADMIN_USERNAME=$FRESHRSS_ADMIN_USERNAME
ADMIN_EMAIL=$FRESHRSS_ADMIN_EMAIL_ADDRESS
ADMIN_PASSWORD=$FRESHRSS_ADMIN_PASSWORD
ADMIN_API_PASSWORD=$FRESHRSS_ADMIN_PASSWORD
OIDC_ENABLED=0
DB_HOST=freshrss-db
DB_BASE=freshrssdb
DB_PASSWORD=$FRESHRSS_DATABASE_USER_PASSWORD
DB_USER=freshrss-user
EOFBA

}

function performUpdateFreshRSS()
{
  perform_stack_name=freshrss
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=postgres:15.0-bullseye,freshrss/freshrss:1.23.1
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="freshrss/freshrss:1.23.1,freshrss/freshrss:1.23.1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Keila
function installKeila()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory keila "Keila"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_KEILA
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/keila
  mkdir $HSHQ_STACKS_DIR/keila/db
  mkdir $HSHQ_STACKS_DIR/keila/dbexport
  mkdir $HSHQ_STACKS_DIR/keila/uploads
  chmod 777 $HSHQ_STACKS_DIR/keila/dbexport

  initServicesCredentials

  KEILA_SECRET_KEY_BASE=$(pwgen -c -n 64 1)
  set +e
  docker exec mailu-admin flask mailu alias-delete $KEILA_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $KEILA_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$KEILA_INIT_ENV" = "true" ]; then
    sendEmail -s "Keila Admin Login Info" -b "Keila Admin Username: $KEILA_ADMIN_EMAIL_ADDRESS\nKeila Admin Password: $KEILA_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    KEILA_INIT_ENV=true
    updateConfigVar KEILA_INIT_ENV $KEILA_INIT_ENV
  fi

  outputConfigKeila
  installStack keila keila-app "Access KeilaWeb.Endpoint at" $HOME/keila.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 5

  inner_block=""
  inner_block=$inner_block">>https://$SUB_KEILA.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://keila-app:4000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_KEILA $MANAGETLS_KEILA "$is_integrate_hshq" $NETDEFAULT_KEILA "$inner_block"
  insertSubAuthelia $SUB_KEILA.$HOMESERVER_DOMAIN bypass

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll keila "$FMLNAME_KEILA" $USERTYPE_KEILA "https://$SUB_KEILA.$HOMESERVER_DOMAIN" "keila.png"
    restartAllCaddyContainers
    checkAddDBSqlPad keila "$FMLNAME_KEILA" postgres keila-db $KEILA_DATABASE_NAME $KEILA_DATABASE_USER $KEILA_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigKeila()
{
  cat <<EOFBA > $HOME/keila-compose.yml
$STACK_VERSION_PREFIX keila $(getScriptStackVersion keila)
version: '3.5'

services:
  keila-db:
    image: $(getScriptImageByContainerName keila-db)
    container_name: keila-db
    hostname: keila-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-keila-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/keila/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/keila/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.keila-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.keila-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.keila-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.keila-hourly-db.smtp-port=25"
      - "ofelia.job-exec.keila-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.keila-hourly-db.email-from=Keila Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.keila-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.keila-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.keila-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.keila-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.keila-monthly-db.smtp-port=25"
      - "ofelia.job-exec.keila-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.keila-monthly-db.email-from=Keila Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.keila-monthly-db.mail-only-on-error=false"

  keila-app:
    image: $(getScriptImageByContainerName keila-app)
    container_name: keila-app
    hostname: keila-app
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - keila-db
    networks:
      - int-keila-net
      - dock-proxy-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-keila-uploads:/uploads

volumes:
  v-keila-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/keila/db
  v-keila-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/keila/uploads

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-keila-net:
    driver: bridge
    internal: true
    ipam:
      driver: default


EOFBA

  cat <<EOFBA > $HOME/keila.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$KEILA_DATABASE_NAME
POSTGRES_USER=$KEILA_DATABASE_USER
POSTGRES_PASSWORD=$KEILA_DATABASE_USER_PASSWORD
SECRET_KEY_BASE=$KEILA_SECRET_KEY_BASE
DB_URL=postgres://$KEILA_DATABASE_USER:$KEILA_DATABASE_USER_PASSWORD@keila-db/$KEILA_DATABASE_NAME
URL_HOST=$SUB_KEILA.$HOMESERVER_DOMAIN
URL_SCHEMA=https
MAILER_SMTP_HOST=$SMTP_HOSTNAME
MAILER_SMTP_PORT=25
MAILER_SMTP_USER=$EMAIL_SMTP_EMAIL_ADDRESS
MAILER_SMTP_PASSWORD=$EMAIL_SMTP_PASSWORD
MAILER_SMTP_FROM_EMAIL=$EMAIL_ADMIN_EMAIL_ADDRESS
MAILER_ENABLE_STARTTLS=true
KEILA_USER=$KEILA_ADMIN_EMAIL_ADDRESS
KEILA_PASSWORD=$KEILA_ADMIN_PASSWORD
DISABLE_REGISTRATION=true
USER_CONTENT_DIR=/uploads
EOFBA

}

function performUpdateKeila()
{
  perform_stack_name=keila
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=postgres:15.0-bullseye,pentacent/keila:0.13.1
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="pentacent/keila:0.13.1,pentacent/keila:0.14.0"
    ;;
    2)
      newVer=v2
      curImageList=postgres:15.0-bullseye,pentacent/keila:0.14.0
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="pentacent/keila:0.14.0,pentacent/keila:0.14.0"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Wallabag
function installWallabag()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory wallabag "Wallabag"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_WALLABAG
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/wallabag
  mkdir $HSHQ_STACKS_DIR/wallabag/db
  mkdir $HSHQ_STACKS_DIR/wallabag/dbexport
  mkdir $HSHQ_STACKS_DIR/wallabag/images
  mkdir $HSHQ_NONBACKUP_DIR/wallabag
  mkdir $HSHQ_NONBACKUP_DIR/wallabag/redis
  chmod 777 $HSHQ_STACKS_DIR/wallabag/dbexport

  initServicesCredentials
  if [ -z "$WALLABAG_ENV_SECRET" ]; then
    WALLABAG_ENV_SECRET=$(pwgen -c -n 30 1)
    updateConfigVar WALLABAG_ENV_SECRET $WALLABAG_ENV_SECRET
  fi
  if [ -z "$WALLABAG_REDIS_PASSWORD" ]; then
    WALLABAG_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar WALLABAG_REDIS_PASSWORD $WALLABAG_REDIS_PASSWORD
  fi
  set +e
  docker exec mailu-admin flask mailu alias-delete $WALLABAG_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $WALLABAG_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$WALLABAG_INIT_ENV" = "true" ]; then
    sendEmail -s "Wallabag Admin Login Info" -b "Wallabag Admin Username: $WALLABAG_ADMIN_USERNAME\nWallabag Admin Password: $WALLABAG_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    WALLABAG_INIT_ENV=true
    updateConfigVar WALLABAG_INIT_ENV $WALLABAG_INIT_ENV
  fi

  outputConfigWallabag
  installStack wallabag wallabag-app "wallabag is ready" $HOME/wallabag.env 3
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 5

  docker exec -t wallabag-app /var/www/wallabag/bin/console wallabag:install --env=prod --no-interaction > /dev/null 2>&1
  docker exec -t wallabag-app /var/www/wallabag/bin/console doctrine:migrations:migrate --env=prod --no-interaction > /dev/null 2>&1
  docker exec -t wallabag-app /var/www/wallabag/bin/console fos:user:create --env=prod --super-admin $WALLABAG_ADMIN_USERNAME $WALLABAG_ADMIN_EMAIL_ADDRESS $WALLABAG_ADMIN_PASSWORD > /dev/null 2>&1
  docker exec -t wallabag-app /var/www/wallabag/bin/console fos:user:deactivate --env=prod wallabag > /dev/null 2>&1
  docker exec wallabag-db /dbexport/setupRedis.sh > /dev/null 2>&1
  rm -f $HSHQ_STACKS_DIR/wallabag/dbexport/setupRedis.sh

  startStopStack wallabag stop
  sleep 3
  startStopStack wallabag start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_WALLABAG.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://wallabag-app {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_WALLABAG $MANAGETLS_WALLABAG "$is_integrate_hshq" $NETDEFAULT_WALLABAG "$inner_block"
  insertSubAuthelia $SUB_WALLABAG.$HOMESERVER_DOMAIN bypass

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll wallabag "$FMLNAME_WALLABAG" $USERTYPE_WALLABAG "https://$SUB_WALLABAG.$HOMESERVER_DOMAIN" "wallabag.png"
    restartAllCaddyContainers
    checkAddDBSqlPad wallabag "$FMLNAME_WALLABAG" postgres wallabag-db $WALLABAG_DATABASE_NAME $WALLABAG_DATABASE_USER $WALLABAG_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigWallabag()
{
  cat <<EOFBA > $HOME/wallabag-compose.yml
$STACK_VERSION_PREFIX wallabag $(getScriptStackVersion wallabag)
version: '3.5'

services:
  wallabag-db:
    image: $(getScriptImageByContainerName wallabag-db)
    container_name: wallabag-db
    hostname: wallabag-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-wallabag-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/wallabag/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/wallabag/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.wallabag-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.wallabag-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.wallabag-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.wallabag-hourly-db.smtp-port=25"
      - "ofelia.job-exec.wallabag-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.wallabag-hourly-db.email-from=Wallabag Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.wallabag-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.wallabag-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.wallabag-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.wallabag-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.wallabag-monthly-db.smtp-port=25"
      - "ofelia.job-exec.wallabag-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.wallabag-monthly-db.email-from=Wallabag Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.wallabag-monthly-db.mail-only-on-error=false"

  wallabag-redis:
    image: $(getScriptImageByContainerName wallabag-redis)
    container_name: wallabag-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-wallabag-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-wallabag-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$WALLABAG_REDIS_PASSWORD

  wallabag-app:
    image: $(getScriptImageByContainerName wallabag-app)
    container_name: wallabag-app
    hostname: wallabag-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - wallabag-db
      - wallabag-redis
    networks:
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
      - int-wallabag-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/wallabag/images:/var/www/wallabag/web/assets/images

volumes:
  v-wallabag-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/wallabag/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-wallabag-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFBA

  cat <<EOFBA > $HOME/wallabag.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$WALLABAG_DATABASE_NAME
POSTGRES_USER=$WALLABAG_DATABASE_USER
POSTGRES_PASSWORD=$WALLABAG_DATABASE_USER_PASSWORD
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
POPULATE_DATABASE=false
SYMFONY__ENV__DATABASE_DRIVER=pdo_pgsql
SYMFONY__ENV__DATABASE_HOST=wallabag-db
SYMFONY__ENV__DATABASE_PORT=5432
SYMFONY__ENV__DATABASE_NAME=$WALLABAG_DATABASE_NAME
SYMFONY__ENV__DATABASE_USER=$WALLABAG_DATABASE_USER
SYMFONY__ENV__DATABASE_PASSWORD=$WALLABAG_DATABASE_USER_PASSWORD
SYMFONY__ENV__MAILER_DSN=smtp://$SMTP_HOSTNAME:$SMTP_HOSTPORT
SYMFONY__ENV__FROM_EMAIL=$EMAIL_ADMIN_EMAIL_ADDRESS
SYMFONY__ENV__DOMAIN_NAME=https://$SUB_WALLABAG.$HOMESERVER_DOMAIN
SYMFONY__ENV__SERVER_NAME=$HOMESERVER_NAME
SYMFONY__ENV__SECRET=$WALLABAG_ENV_SECRET
SYMFONY__ENV__TWOFACTOR_SENDER=$EMAIL_ADMIN_EMAIL_ADDRESS
SYMFONY__ENV__REDIS_HOST=wallabag-redis
SYMFONY__ENV__REDIS_PASSWORD=$WALLABAG_REDIS_PASSWORD
EOFBA

  cat <<EOFPT > $HSHQ_STACKS_DIR/wallabag/dbexport/setupRedis.sh
#!/bin/bash

PGPASSWORD=$WALLABAG_DATABASE_USER_PASSWORD
sqlcmd="update wallabag_internal_setting set value=1 where name='import_with_redis';"
echo "\$sqlcmd" | psql -U $WALLABAG_DATABASE_USER $WALLABAG_DATABASE_NAME
EOFPT

  chmod +x $HSHQ_STACKS_DIR/wallabag/dbexport/setupRedis.sh
}

function performUpdateWallabag()
{
  perform_stack_name=wallabag
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=postgres:15.0-bullseye,bitnami/redis:7.0.5,wallabag/wallabag:2.6.8
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
      image_update_map[2]="wallabag/wallabag:2.6.8,wallabag/wallabag:2.6.8"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Jupyter
function installJupyter()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory jupyter "Jupyter"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_JUPYTER
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/jupyter
  mkdir $HSHQ_STACKS_DIR/jupyter/notebooks
  initServicesCredentials
  outputConfigJupyter
  set +e
  installStack jupyter jupyter "Jupyter .* is running at" $HOME/jupyter.env 5
  retVal=$?
  if [ $retVal -ne 0 ]; then
    return $retVal
  fi
  set -e
  if ! [ "$JUPYTER_INIT_ENV" = "true" ]; then
    sendEmail -s "Jupyter Admin Login Info" -b "Jupyter Admin Password: $JUPYTER_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    JUPYTER_INIT_ENV=true
    updateConfigVar JUPYTER_INIT_ENV $JUPYTER_INIT_ENV
  fi

  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_JUPYTER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://jupyter:8888 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_JUPYTER $MANAGETLS_JUPYTER "$is_integrate_hshq" $NETDEFAULT_JUPYTER "$inner_block"
  insertSubAuthelia $SUB_JUPYTER.$HOMESERVER_DOMAIN admins

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll jupyter "$FMLNAME_JUPYTER" $USERTYPE_JUPYTER "https://$SUB_JUPYTER.$HOMESERVER_DOMAIN" "jupyter.png"
    restartAllCaddyContainers
  fi
}

function outputConfigJupyter()
{
  cat <<EOFDZ > $HOME/jupyter-compose.yml
$STACK_VERSION_PREFIX jupyter $(getScriptStackVersion jupyter)
version: '3.5'

services:
  jupyter:
    image: $(getScriptImageByContainerName jupyter)
    container_name: jupyter
    hostname: jupyter
    restart: unless-stopped
    env_file: stack.env
    command: '/bin/bash -c "conda install jupyter -y --quiet && mkdir -p /opt/notebooks && jupyter notebook --notebook-dir=/opt/notebooks --ip="*" --port=8888 --no-browser --allow-root --NotebookApp.token=$JUPYTER_ADMIN_PASSWORD"'
    security_opt:
      - no-new-privileges:true
    tty: true
    stdin_open: true
    networks:
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/jupyter/notebooks:/opt/notebooks

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true

EOFDZ

  cat <<EOFDZ > $HOME/jupyter.env
TZ=\${TZ}
EOFDZ

}

function performUpdateJupyter()
{
  perform_stack_name=jupyter
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=continuumio/anaconda3:2023.09-0
      image_update_map[0]="continuumio/anaconda3:2023.09-0,continuumio/anaconda3:2024.02-1"
    ;;
    2)
      newVer=v2
      curImageList=continuumio/anaconda3:2024.02-1
      image_update_map[0]="continuumio/anaconda3:2024.02-1,continuumio/anaconda3:2024.02-1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Paperless
function installPaperless()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory paperless "Paperless"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PAPERLESS_GOTENBERG
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PAPERLESS_TIKA
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PAPERLESS_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/paperless
  mkdir $HSHQ_STACKS_DIR/paperless/db
  mkdir $HSHQ_STACKS_DIR/paperless/dbexport
  mkdir $HSHQ_STACKS_DIR/paperless/redis
  mkdir $HSHQ_STACKS_DIR/paperless/data
  mkdir $HSHQ_STACKS_DIR/paperless/media
  mkdir $HSHQ_STACKS_DIR/paperless/export
  mkdir $HSHQ_STACKS_DIR/paperless/consume
  chmod 777 $HSHQ_STACKS_DIR/paperless/dbexport

  initServicesCredentials
  if [ -z "$PAPERLESS_SECRET_KEY" ]; then
    PAPERLESS_SECRET_KEY=$(pwgen -c -n 64 1)
    updateConfigVar PAPERLESS_SECRET_KEY $PAPERLESS_SECRET_KEY
  fi
  if [ -z "$PAPERLESS_REDIS_PASSWORD" ]; then
    PAPERLESS_REDIS_PASSWORD=$(pwgen -c -n 32 1)
    updateConfigVar PAPERLESS_REDIS_PASSWORD $PAPERLESS_REDIS_PASSWORD
  fi
  set +e
  docker exec mailu-admin flask mailu alias-delete $PAPERLESS_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $PAPERLESS_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$PAPERLESS_INIT_ENV" = "true" ]; then
    sendEmail -s "Paperless Admin Login Info" -b "Paperless Admin Username: $PAPERLESS_ADMIN_USERNAME\nPaperless Admin Password: $PAPERLESS_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    PAPERLESS_INIT_ENV=true
    updateConfigVar PAPERLESS_INIT_ENV $PAPERLESS_INIT_ENV
  fi
  outputConfigPaperless
  installStack paperless paperless-app "celery@paperless-app ready" $HOME/paperless.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PAPERLESS.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://paperless-app:8000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PAPERLESS $MANAGETLS_PAPERLESS "$is_integrate_hshq" $NETDEFAULT_PAPERLESS "$inner_block"
  insertSubAuthelia $SUB_PAPERLESS.$HOMESERVER_DOMAIN primaryusers

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll paperless "$FMLNAME_PAPERLESS" $USERTYPE_PAPERLESS "https://$SUB_PAPERLESS.$HOMESERVER_DOMAIN" "paperless.png"
    restartAllCaddyContainers
    checkAddDBSqlPad paperless "$FMLNAME_PAPERLESS" postgres paperless-db $PAPERLESS_DATABASE_NAME $PAPERLESS_DATABASE_USER $PAPERLESS_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigPaperless()
{
  cat <<EOFJT > $HOME/paperless-compose.yml
$STACK_VERSION_PREFIX paperless $(getScriptStackVersion paperless)

services:
  paperless-db:
    image: $(getScriptImageByContainerName paperless-db)
    container_name: paperless-db
    hostname: paperless-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-paperless-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/paperless/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/paperless/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.paperless-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.paperless-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.paperless-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.paperless-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.paperless-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.paperless-hourly-db.email-from=Paperless Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.paperless-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.paperless-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.paperless-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.paperless-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.paperless-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.paperless-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.paperless-monthly-db.email-from=Paperless Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.paperless-monthly-db.mail-only-on-error=false"

  paperless-gotenberg:
    image: $(getScriptImageByContainerName paperless-gotenberg)
    container_name: paperless-gotenberg
    hostname: paperless-gotenberg
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    networks:
      - int-paperless-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  paperless-tika:
    image: $(getScriptImageByContainerName paperless-tika)
    container_name: paperless-tika
    hostname: paperless-tika
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-paperless-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  paperless-app:
    image: $(getScriptImageByContainerName paperless-app)
    container_name: paperless-app
    hostname: paperless-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - paperless-db
      - paperless-redis
      - paperless-gotenberg
      - paperless-tika
    networks:
      - dock-proxy-net
      - dock-internalmail-net
      - int-paperless-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-paperless-data:/usr/src/paperless/data
      - v-paperless-media:/usr/src/paperless/media
      - \${HSHQ_STACKS_DIR}/paperless/export:/usr/src/paperless/export
      - \${HSHQ_STACKS_DIR}/paperless/consume:/usr/src/paperless/consume

  paperless-redis:
    image: $(getScriptImageByContainerName paperless-redis)
    container_name: paperless-redis
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - int-paperless-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-paperless-redis:/bitnami/redis/data
    environment:
      - REDIS_PASSWORD=$PAPERLESS_REDIS_PASSWORD

volumes:
  v-paperless-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/paperless/data
  v-paperless-media:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/paperless/media
  v-paperless-redis:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/paperless/redis

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-paperless-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFJT

  cat <<EOFJT > $HOME/paperless.env
POSTGRES_DB=$PAPERLESS_DATABASE_NAME
POSTGRES_USER=$PAPERLESS_DATABASE_USER
POSTGRES_PASSWORD=$PAPERLESS_DATABASE_USER_PASSWORD
PAPERLESS_REDIS=redis://:$PAPERLESS_REDIS_PASSWORD@paperless-redis:6379
PAPERLESS_DBHOST=paperless-db
PAPERLESS_DBNAME=$PAPERLESS_DATABASE_NAME
PAPERLESS_DBUSER=$PAPERLESS_DATABASE_USER
PAPERLESS_DBPASS=$PAPERLESS_DATABASE_USER_PASSWORD
PAPERLESS_SECRET_KEY=$PAPERLESS_SECRET_KEY
PAPERLESS_URL=https://$SUB_PAPERLESS.$HOMESERVER_DOMAIN
PAPERLESS_ADMIN_USER=$PAPERLESS_ADMIN_USERNAME
PAPERLESS_ADMIN_MAIL=$PAPERLESS_ADMIN_EMAIL_ADDRESS
PAPERLESS_ADMIN_PASSWORD=$PAPERLESS_ADMIN_PASSWORD
PAPERLESS_TIKA_ENABLED=true
PAPERLESS_TIKA_ENDPOINT=http://paperless-tika:9998
PAPERLESS_TIKA_GOTENBERG_ENDPOINT=http://paperless-gotenberg:3000
PAPERLESS_EMAIL_HOST=$SMTP_HOSTNAME
PAPERLESS_EMAIL_PORT=$SMTP_HOSTPORT
PAPERLESS_EMAIL_FROM=$EMAIL_ADMIN_EMAIL_ADDRESS
PAPERLESS_EMAIL_USE_TLS=true
EOFJT

}

function performUpdatePaperless()
{
  perform_stack_name=paperless
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=postgres:15.0-bullseye,gotenberg/gotenberg:7.10,ghcr.io/paperless-ngx/tika:2.9.1-minimal,ghcr.io/paperless-ngx/paperless-ngx:2.4.3,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gotenberg/gotenberg:7.10,gotenberg/gotenberg:8.2.2"
      image_update_map[2]="ghcr.io/paperless-ngx/tika:2.9.1-minimal,ghcr.io/paperless-ngx/tika:2.9.1-minimal"
      image_update_map[3]="ghcr.io/paperless-ngx/paperless-ngx:2.4.3,ghcr.io/paperless-ngx/paperless-ngx:2.6.2"
      image_update_map[4]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    2)
      newVer=v2
      curImageList=postgres:15.0-bullseye,gotenberg/gotenberg:8.2.2,ghcr.io/paperless-ngx/tika:2.9.1-minimal,ghcr.io/paperless-ngx/paperless-ngx:2.6.2,bitnami/redis:7.0.5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="gotenberg/gotenberg:8.2.2,gotenberg/gotenberg:8.2.2"
      image_update_map[2]="ghcr.io/paperless-ngx/tika:2.9.1-minimal,ghcr.io/paperless-ngx/tika:2.9.1-minimal"
      image_update_map[3]="ghcr.io/paperless-ngx/paperless-ngx:2.6.2,ghcr.io/paperless-ngx/paperless-ngx:2.6.2"
      image_update_map[4]="bitnami/redis:7.0.5,bitnami/redis:7.0.5"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Speedtest Tracker Local
function installSpeedtestTrackerLocal()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory speedtest-tracker-local "SpeedtestTrackerLocal"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_SPEEDTEST_TRACKER_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-local
  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-local/db
  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-local/dbexport
  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-local/config
  chmod 777 $HSHQ_STACKS_DIR/speedtest-tracker-local/dbexport

  initServicesCredentials
  set +e

  docker exec mailu-admin flask mailu alias-delete $SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $SPEEDTEST_TRACKER_LOCAL_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$SPEEDTEST_TRACKER_LOCAL_INIT_ENV" = "true" ]; then
    sendEmail -s "SpeedtestTrackerLocal Admin Login Info" -b "SpeedtestTrackerLocal Admin Username: $SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS\nSpeedtestTrackerLocal Admin Password: $SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    SPEEDTEST_TRACKER_LOCAL_INIT_ENV=true
    updateConfigVar SPEEDTEST_TRACKER_LOCAL_INIT_ENV $SPEEDTEST_TRACKER_LOCAL_INIT_ENV
  fi

  outputConfigSpeedtestTrackerLocal
  installStack speedtest-tracker-local speedtest-tracker-local-app "\[ls.io-init\] done" $HOME/speedtest-tracker-local.env 3
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 5

  docker exec speedtest-tracker-local-db /dbexport/setupDBSettings.sh > /dev/null 2>&1
  rm -f $HSHQ_STACKS_DIR/speedtest-tracker-local/dbexport/setupDBSettings.sh
  sleep 4
  startStopStack speedtest-tracker-local stop
  sleep 1
  startStopStack speedtest-tracker-local start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://speedtest-tracker-local-app {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SPEEDTEST_TRACKER_LOCAL $MANAGETLS_SPEEDTEST_TRACKER_LOCAL "$is_integrate_hshq" $NETDEFAULT_SPEEDTEST_TRACKER_LOCAL "$inner_block"
  insertSubAuthelia $SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN admins

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll speedtest-tracker-local "$FMLNAME_SPEEDTEST_TRACKER_LOCAL" $USERTYPE_SPEEDTEST_TRACKER_LOCAL "https://$SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN" "speedtest-tracker.png"
    restartAllCaddyContainers
    checkAddDBSqlPad speedtest-tracker-local "$FMLNAME_SPEEDTEST_TRACKER_LOCAL" postgres speedtest-tracker-local-db $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigSpeedtestTrackerLocal()
{
  cat <<EOFBA > $HOME/speedtest-tracker-local-compose.yml
$STACK_VERSION_PREFIX speedtest-tracker-local $(getScriptStackVersion speedtest-tracker-local)
version: '3.5'

services:
  speedtest-tracker-local-db:
    image: $(getScriptImageByContainerName speedtest-tracker-local-db)
    container_name: speedtest-tracker-local-db
    hostname: speedtest-tracker-local-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-speedtest-tracker-local-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/speedtest-tracker-local/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/speedtest-tracker-local/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.speedtest-tracker-local-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.speedtest-tracker-local-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.speedtest-tracker-local-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.speedtest-tracker-local-hourly-db.smtp-port=25"
      - "ofelia.job-exec.speedtest-tracker-local-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.speedtest-tracker-local-hourly-db.email-from=SpeedtestTrackerLocal Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.speedtest-tracker-local-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.speedtest-tracker-local-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.speedtest-tracker-local-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.speedtest-tracker-local-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.speedtest-tracker-local-monthly-db.smtp-port=25"
      - "ofelia.job-exec.speedtest-tracker-local-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.speedtest-tracker-local-monthly-db.email-from=SpeedtestTrackerLocal Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.speedtest-tracker-local-monthly-db.mail-only-on-error=false"

  speedtest-tracker-local-app:
    image: $(getScriptImageByContainerName speedtest-tracker-local-app)
    container_name: speedtest-tracker-local-app
    hostname: speedtest-tracker-local-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - speedtest-tracker-local-db
    networks:
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
      - int-speedtest-tracker-local-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - ${HSHQ_STACKS_DIR}/speedtest-tracker-local/config:/config

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-speedtest-tracker-local-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFBA

  cat <<EOFBA > $HOME/speedtest-tracker-local.env
TZ=\${TZ}
PUID=$USERID
PGID=$GROUPID
APP_URL=https://$SUB_SPEEDTEST_TRACKER_LOCAL.$HOMESERVER_DOMAIN
POSTGRES_DB=$SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
POSTGRES_USER=$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER
POSTGRES_PASSWORD=$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
DB_CONNECTION=pgsql
DB_HOST=speedtest-tracker-local-db
DB_PORT=5432
DB_DATABASE=$SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
DB_USERNAME=$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER
DB_PASSWORD=$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD
MAIL_MAILER=smtp
MAIL_HOST=$SMTP_HOSTNAME
MAIL_PORT=$SMTP_HOSTPORT
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=$EMAIL_ADMIN_EMAIL_ADDRESS
MAIL_FROM_NAME=SpeedtestTrackerLocal $HSHQ_ADMIN_NAME

EOFBA

  pw_hash=$(htpasswd -bnBC 10 "" $SPEEDTEST_TRACKER_LOCAL_ADMIN_PASSWORD | tr -d ':\n' | sed 's/\$/\\$/g')
  rand_minute=$((3 + RANDOM % 24))
  cat <<EOFDS > $HSHQ_STACKS_DIR/speedtest-tracker-local/dbexport/setupDBSettings.sh
#!/bin/bash

PGPASSWORD=$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD
echo "update settings set payload=to_json('Speedtest Tracker Local'::text) where name='site_name';" | psql -U $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
echo "update settings set payload=to_json('$TZ'::text) where name='timezone';" | psql -U $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
echo "update settings set payload='[ { \"email_address\": \"$EMAIL_ADMIN_EMAIL_ADDRESS\" } ]' where name='mail_recipients';" | psql -U $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
echo "update settings set payload=to_json(false) where name='public_dashboard_enabled';" | psql -U $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
echo "update settings set payload=to_json(true) where name='db_has_timezone';" | psql -U $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
echo "update settings set payload=to_json('$rand_minute */3 * * *'::text) where name='speedtest_schedule';" | psql -U $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME

echo "update users set name='${HOMESERVER_ABBREV^^} SpeedtestTrackerLocal Admin', email='$SPEEDTEST_TRACKER_LOCAL_ADMIN_EMAIL_ADDRESS', password='$pw_hash' where id=1;" | psql -U $SPEEDTEST_TRACKER_LOCAL_DATABASE_USER $SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME

EOFDS

  chmod +x $HSHQ_STACKS_DIR/speedtest-tracker-local/dbexport/setupDBSettings.sh
}

function performUpdateSpeedtestTrackerLocal()
{
  perform_stack_name=speedtest-tracker-local
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=postgres:15.0-bullseye,linuxserver/speedtest-tracker:0.15.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="linuxserver/speedtest-tracker:0.15.2,linuxserver/speedtest-tracker:0.15.4"
    ;;
    2)
      newVer=v2
      curImageList=postgres:15.0-bullseye,linuxserver/speedtest-tracker:0.15.4
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="linuxserver/speedtest-tracker:0.15.4,linuxserver/speedtest-tracker:0.15.4"
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): This version of Speedtest Tracker cannot be upgraded to the next version. You must uninstall your current version and reinstall the new version."
      return
    ;;
    3)
      newVer=v3
      curImageList=postgres:15.0-bullseye,linuxserver/speedtest-tracker:0.18.3
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="linuxserver/speedtest-tracker:0.18.3,linuxserver/speedtest-tracker:0.18.3"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Speedtest Tracker VPN
function installSpeedtestTrackerVPN()
{
  set +e
  if ! [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
    return
  fi
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory speedtest-tracker-vpn "SpeedtestTrackerVPN"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_SPEEDTEST_TRACKER_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-vpn
  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-vpn/db
  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-vpn/dbexport
  mkdir $HSHQ_STACKS_DIR/speedtest-tracker-vpn/config
  chmod 777 $HSHQ_STACKS_DIR/speedtest-tracker-vpn/dbexport

  initServicesCredentials
  set +e

  docker exec mailu-admin flask mailu alias-delete $SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $SPEEDTEST_TRACKER_VPN_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$SPEEDTEST_TRACKER_VPN_INIT_ENV" = "true" ]; then
    sendEmail -s "SpeedtestTrackerVPN Admin Login Info" -b "SpeedtestTrackerVPN Admin Username: $SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS\nSpeedtestTrackerVPN Admin Password: $SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    SPEEDTEST_TRACKER_VPN_INIT_ENV=true
    updateConfigVar SPEEDTEST_TRACKER_VPN_INIT_ENV $SPEEDTEST_TRACKER_VPN_INIT_ENV
  fi

  outputConfigSpeedtestTrackerVPN
  installStack speedtest-tracker-vpn speedtest-tracker-vpn-app "\[ls.io-init\] done" $HOME/speedtest-tracker-vpn.env 3
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 5

  docker exec speedtest-tracker-vpn-db /dbexport/setupDBSettings.sh > /dev/null 2>&1
  rm -f $HSHQ_STACKS_DIR/speedtest-tracker-vpn/dbexport/setupDBSettings.sh
  sleep 4
  startStopStack speedtest-tracker-vpn stop
  sleep 1
  startStopStack speedtest-tracker-vpn start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://speedtest-tracker-vpn-app {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SPEEDTEST_TRACKER_VPN $MANAGETLS_SPEEDTEST_TRACKER_VPN "$is_integrate_hshq" $NETDEFAULT_SPEEDTEST_TRACKER_VPN "$inner_block"
  insertSubAuthelia $SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN admins

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll speedtest-tracker-vpn "$FMLNAME_SPEEDTEST_TRACKER_VPN" $USERTYPE_SPEEDTEST_TRACKER_VPN "https://$SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN" "speedtest-tracker.png"
    restartAllCaddyContainers
    checkAddDBSqlPad speedtest-tracker-vpn "$FMLNAME_SPEEDTEST_TRACKER_VPN" postgres speedtest-tracker-vpn-db $SPEEDTEST_TRACKER_VPN_DATABASE_NAME $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigSpeedtestTrackerVPN()
{
  cat <<EOFBA > $HOME/speedtest-tracker-vpn-compose.yml
$STACK_VERSION_PREFIX speedtest-tracker-vpn $(getScriptStackVersion speedtest-tracker-vpn)
version: '3.5'

services:
  speedtest-tracker-vpn-db:
    image: $(getScriptImageByContainerName speedtest-tracker-vpn-db)
    container_name: speedtest-tracker-vpn-db
    hostname: speedtest-tracker-vpn-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-speedtest-tracker-vpn-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/speedtest-tracker-vpn/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/speedtest-tracker-vpn/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.speedtest-tracker-vpn-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.speedtest-tracker-vpn-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.speedtest-tracker-vpn-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.speedtest-tracker-vpn-hourly-db.smtp-port=25"
      - "ofelia.job-exec.speedtest-tracker-vpn-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.speedtest-tracker-vpn-hourly-db.email-from=SpeedtestTrackerVPN Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.speedtest-tracker-vpn-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.speedtest-tracker-vpn-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.speedtest-tracker-vpn-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.speedtest-tracker-vpn-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.speedtest-tracker-vpn-monthly-db.smtp-port=25"
      - "ofelia.job-exec.speedtest-tracker-vpn-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.speedtest-tracker-vpn-monthly-db.email-from=SpeedtestTrackerVPN Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.speedtest-tracker-vpn-monthly-db.mail-only-on-error=false"

  speedtest-tracker-vpn-app:
    image: $(getScriptImageByContainerName speedtest-tracker-vpn-app)
    container_name: speedtest-tracker-vpn-app
    hostname: speedtest-tracker-vpn-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    depends_on:
      - speedtest-tracker-vpn-db
    networks:
      - dock-proxy-net
      - dwg-${RELAYSERVER_WG_INTERNET_NETNAME}-net
      - dock-internalmail-net
      - int-speedtest-tracker-vpn-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - ${HSHQ_STACKS_DIR}/speedtest-tracker-vpn/config:/config

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  dwg-${RELAYSERVER_WG_INTERNET_NETNAME}-net:
    name: dwg-${RELAYSERVER_WG_INTERNET_NETNAME}
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-speedtest-tracker-vpn-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFBA

  cat <<EOFBA > $HOME/speedtest-tracker-vpn.env
TZ=\${TZ}
PUID=$USERID
PGID=$GROUPID
APP_URL=https://$SUB_SPEEDTEST_TRACKER_VPN.$HOMESERVER_DOMAIN
POSTGRES_DB=$SPEEDTEST_TRACKER_VPN_DATABASE_NAME
POSTGRES_USER=$SPEEDTEST_TRACKER_VPN_DATABASE_USER
POSTGRES_PASSWORD=$SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
DB_CONNECTION=pgsql
DB_HOST=speedtest-tracker-vpn-db
DB_PORT=5432
DB_DATABASE=$SPEEDTEST_TRACKER_VPN_DATABASE_NAME
DB_USERNAME=$SPEEDTEST_TRACKER_VPN_DATABASE_USER
DB_PASSWORD=$SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD
MAIL_MAILER=smtp
MAIL_HOST=$SMTP_HOSTNAME
MAIL_PORT=$SMTP_HOSTPORT
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=$EMAIL_ADMIN_EMAIL_ADDRESS
MAIL_FROM_NAME=SpeedtestTrackerVPN $HSHQ_ADMIN_NAME

EOFBA

  pw_hash=$(htpasswd -bnBC 10 "" $SPEEDTEST_TRACKER_VPN_ADMIN_PASSWORD | tr -d ':\n' | sed 's/\$/\\$/g')
  rand_minute=$((33 + RANDOM % 24))
  cat <<EOFDS > $HSHQ_STACKS_DIR/speedtest-tracker-vpn/dbexport/setupDBSettings.sh
#!/bin/bash

PGPASSWORD=$SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD
echo "update settings set payload=to_json('Speedtest Tracker VPN'::text) where name='site_name';" | psql -U $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_NAME
echo "update settings set payload=to_json('$TZ'::text) where name='timezone';" | psql -U $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_NAME
echo "update settings set payload='[ { \"email_address\": \"$EMAIL_ADMIN_EMAIL_ADDRESS\" } ]' where name='mail_recipients';" | psql -U $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_NAME
echo "update settings set payload=to_json(false) where name='public_dashboard_enabled';" | psql -U $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_NAME
echo "update settings set payload=to_json(true) where name='db_has_timezone';" | psql -U $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_NAME
echo "update settings set payload=to_json('$rand_minute */3 * * *'::text) where name='speedtest_schedule';" | psql -U $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_NAME

echo "update users set name='${HOMESERVER_ABBREV^^} SpeedtestTrackerVPN Admin', email='$SPEEDTEST_TRACKER_VPN_ADMIN_EMAIL_ADDRESS', password='$pw_hash' where id=1;" | psql -U $SPEEDTEST_TRACKER_VPN_DATABASE_USER $SPEEDTEST_TRACKER_VPN_DATABASE_NAME

EOFDS

  chmod +x $HSHQ_STACKS_DIR/speedtest-tracker-vpn/dbexport/setupDBSettings.sh
}

function performUpdateSpeedtestTrackerVPN()
{
  perform_stack_name=speedtest-tracker-vpn
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=postgres:15.0-bullseye,linuxserver/speedtest-tracker:0.15.2
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="linuxserver/speedtest-tracker:0.15.2,linuxserver/speedtest-tracker:0.15.4"
    ;;
    2)
      newVer=v2
      curImageList=postgres:15.0-bullseye,linuxserver/speedtest-tracker:0.15.4
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="linuxserver/speedtest-tracker:0.15.4,linuxserver/speedtest-tracker:0.15.4"
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): This version of Speedtest Tracker cannot be upgraded to the next version. You must uninstall your current version and reinstall the new version."
      return
    ;;
    3)
      newVer=v3
      curImageList=postgres:15.0-bullseye,linuxserver/speedtest-tracker:0.18.3
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="linuxserver/speedtest-tracker:0.18.3,linuxserver/speedtest-tracker:0.18.3"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Change Detection
function installChangeDetection()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory changedetection "$FMLNAME_CHANGEDETECTION"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_CHANGEDETECTION_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_CHANGEDETECTION_PLAYWRIGHT_CHROME
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/changedetection
  mkdir $HSHQ_STACKS_DIR/changedetection/data

  initServicesCredentials

  if ! [ "$CHANGEDETECTION_INIT_ENV" = "true" ]; then
    sendEmail -s "Change Detection Admin Login Info" -b "Change Detection Admin Password: $CHANGEDETECTION_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    CHANGEDETECTION_INIT_ENV=true
    updateConfigVar CHANGEDETECTION_INIT_ENV $CHANGEDETECTION_INIT_ENV
  fi

  outputConfigChangeDetection
  installStack changedetection changedetection-app "wsgi starting up on" $HOME/changedetection.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3
  pass_hash=$(docker exec -it changedetection-app python3 /datastore/genpass.py)
  startStopStack changedetection stop
  rem_item="notfound"
  rem_tag="notfound"
  tmp_item=$(cat $HSHQ_STACKS_DIR/changedetection/data/url-watches.json | jq -r '.watching[] | select(.url | contains("ycombinator.com")) | .uuid')
  if ! [ -z "$tmp_item" ]; then
    rem_item="$tmp_item"
  fi
  if ! [ -z "$rem_item" ] && ! [ "$rem_item" = "notfound" ]; then
    rem_tag=$(cat $HSHQ_STACKS_DIR/changedetection/data/url-watches.json | jq -r --arg remitem "$rem_item" '.watching[$remitem].tags[0]')
  fi
  cat $HSHQ_STACKS_DIR/changedetection/data/url-watches.json | jq --arg mylist "[ \"mailto://$SMTP_HOSTNAME:$SMTP_HOSTPORT?from=$EMAIL_ADMIN_EMAIL_ADDRESS&to=$EMAIL_ADMIN_EMAIL_ADDRESS\" ]" '.settings.application.notification_urls |= ($mylist | fromjson)' | jq --arg remtag "$rem_tag" 'del(.settings.application.tags[$remtag])' | jq --arg remitem $rem_item 'del(.watching[$remitem])' | jq --arg passhash $pass_hash '.settings.application.password |= $passhash' > $HSHQ_STACKS_DIR/changedetection/url-watches.json

  sudo rm -fr $HSHQ_STACKS_DIR/changedetection/data/$rem_item
  sudo chmod 644 $HSHQ_STACKS_DIR/changedetection/url-watches.json
  sudo chown root:root $HSHQ_STACKS_DIR/changedetection/url-watches.json
  sudo mv $HSHQ_STACKS_DIR/changedetection/url-watches.json $HSHQ_STACKS_DIR/changedetection/data/url-watches.json
  sudo rm -f $HSHQ_STACKS_DIR/changedetection/data/genpass.py
  startStopStack changedetection start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://changedetection-app:5000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_CHANGEDETECTION $MANAGETLS_CHANGEDETECTION "$is_integrate_hshq" $NETDEFAULT_CHANGEDETECTION "$inner_block"
  insertSubAuthelia $SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN primaryusers

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll changedetection "$FMLNAME_CHANGEDETECTION" $USERTYPE_CHANGEDETECTION "https://$SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN" "changedetection.png"
    restartAllCaddyContainers
  fi
}

function outputConfigChangeDetection()
{
  cat <<EOFCD > $HOME/changedetection-compose.yml
$STACK_VERSION_PREFIX changedetection $(getScriptStackVersion changedetection)
version: '3.5'

services:
  changedetection-app:
    image: $(getScriptImageByContainerName changedetection-app)
    container_name: changedetection-app
    hostname: changedetection-app
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-changedetection-net
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
    depends_on:
      - changedetection-playwright-chrome
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - v-changedetection-data:/datastore

  changedetection-playwright-chrome:
    image: $(getScriptImageByContainerName changedetection-playwright-chrome)
    container_name: changedetection-playwright-chrome
    hostname: changedetection-playwright-chrome
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-changedetection-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

volumes:
  v-changedetection-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/changedetection/data

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-changedetection-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFCD

  cat <<EOFCD > $HOME/changedetection.env
TZ=${TZ}
PUID=$USERID
PGID=$GROUPID
PORT=5000
PLAYWRIGHT_DRIVER_URL=ws://changedetection-playwright-chrome:3000
BASE_URL=https://$SUB_CHANGEDETECTION.$HOMESERVER_DOMAIN
HIDE_REFERER=true
SCREEN_WIDTH=1920
SCREEN_HEIGHT=1024
SCREEN_DEPTH=16
MAX_CONCURRENT_CHROME_PROCESSES=10
EOFCD

  cat <<EOFCD > $HSHQ_STACKS_DIR/changedetection/data/genpass.py
import base64
import hashlib
import secrets
password="$CHANGEDETECTION_ADMIN_PASSWORD"
salt = secrets.token_bytes(32)
key = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
store = base64.b64encode(salt + key).decode('ascii')
print(store)
EOFCD

}

function performUpdateChangeDetection()
{
  perform_stack_name=changedetection
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=ghcr.io/dgtlmoon/changedetection.io:0.45.14,dgtlmoon/sockpuppetbrowser
      image_update_map[0]="ghcr.io/dgtlmoon/changedetection.io:0.45.14,ghcr.io/dgtlmoon/changedetection.io:0.45.16"
      image_update_map[1]="dgtlmoon/sockpuppetbrowser,dgtlmoon/sockpuppetbrowser:latest"
    ;;
    2)
      newVer=v2
      curImageList=ghcr.io/dgtlmoon/changedetection.io:0.45.16,dgtlmoon/sockpuppetbrowser:latest
      image_update_map[0]="ghcr.io/dgtlmoon/changedetection.io:0.45.16,ghcr.io/dgtlmoon/changedetection.io:0.45.16"
      image_update_map[1]="dgtlmoon/sockpuppetbrowser:latest,dgtlmoon/sockpuppetbrowser:latest"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Huginn
function installHuginn()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory huginn "$FMLNAME_HUGINN"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_HUGINN_APP
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/huginn
  mkdir $HSHQ_STACKS_DIR/huginn/db
  mkdir $HSHQ_STACKS_DIR/huginn/dbexport
  chmod 777 $HSHQ_STACKS_DIR/huginn/dbexport

  initServicesCredentials
  if [ -z "$HUGINN_APP_SECRET_TOKEN" ]; then
    HUGINN_APP_SECRET_TOKEN=$(openssl rand -hex 64)
    updateConfigVar HUGINN_APP_SECRET_TOKEN $HUGINN_APP_SECRET_TOKEN
  fi
  set +e
  docker exec mailu-admin flask mailu alias-delete $HUGINN_ADMIN_EMAIL_ADDRESS
  sleep 5
  addUserMailu alias $HUGINN_ADMIN_USERNAME $HOMESERVER_DOMAIN $EMAIL_ADMIN_EMAIL_ADDRESS

  if ! [ "$HUGINN_INIT_ENV" = "true" ]; then
    sendEmail -s "Huginn Admin Login Info" -b "Huginn Admin Username: $HUGINN_ADMIN_USERNAME\nHuginn Admin Password: $HUGINN_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    HUGINN_INIT_ENV=true
    updateConfigVar HUGINN_INIT_ENV $HUGINN_INIT_ENV
  fi

  outputConfigHuginn
  installStack huginn huginn-app "" $HOME/huginn.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3

  inner_block=""
  inner_block=$inner_block">>https://$SUB_HUGINN.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://huginn-app:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_HUGINN $MANAGETLS_HUGINN "$is_integrate_hshq" $NETDEFAULT_HUGINN "$inner_block"
  insertSubAuthelia $SUB_HUGINN.$HOMESERVER_DOMAIN primaryusers

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll huginn "$FMLNAME_HUGINN" $USERTYPE_HUGINN "https://$SUB_HUGINN.$HOMESERVER_DOMAIN" "huginn.png"
    restartAllCaddyContainers
    checkAddDBSqlPad huginn "$FMLNAME_HUGINN" postgres huginn-db $HUGINN_DATABASE_NAME $HUGINN_DATABASE_USER $HUGINN_DATABASE_USER_PASSWORD
    echo ""
  fi
}

function outputConfigHuginn()
{
  cat <<EOFDZ > $HOME/huginn-compose.yml
$STACK_VERSION_PREFIX huginn $(getScriptStackVersion huginn)
version: '3.5'

services:
  huginn-db:
    image: $(getScriptImageByContainerName huginn-db)
    container_name: huginn-db
    hostname: huginn-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-huginn-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/huginn/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/huginn/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.huginn-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.huginn-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.huginn-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.huginn-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.huginn-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.huginn-hourly-db.email-from=Huginn Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.huginn-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.huginn-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.huginn-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.huginn-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.huginn-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.huginn-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.huginn-monthly-db.email-from=Huginn Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.huginn-monthly-db.mail-only-on-error=false"

  huginn-app:
    image: $(getScriptImageByContainerName huginn-app)
    container_name: huginn-app
    hostname: huginn-app
    restart: unless-stopped
    env_file: stack.env
    depends_on:
      - huginn-db
    networks:
      - int-huginn-net
      - dock-proxy-net
      - dock-ext-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
  int-huginn-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFDZ

  cat <<EOFDZ > $HOME/huginn.env
UID=$USERID
GID=$GROUPID
TZ=${TZ}
POSTGRES_DB=$HUGINN_DATABASE_NAME
POSTGRES_USER=$HUGINN_DATABASE_USER
POSTGRES_PASSWORD=$HUGINN_DATABASE_USER_PASSWORD
APP_SECRET_TOKEN=$HUGINN_APP_SECRET_TOKEN
DOMAIN=$SUB_HUGINN.$HOMESERVER_DOMAIN
PORT=3000
DATABASE_ADAPTER=postgresql
DATABASE_ENCODING=utf8
DATABASE_RECONNECT=true
DATABASE_NAME=$HUGINN_DATABASE_NAME
DATABASE_POOL=20
DATABASE_USERNAME=$HUGINN_DATABASE_USER
DATABASE_PASSWORD=$HUGINN_DATABASE_USER_PASSWORD
DATABASE_HOST=huginn-db
DATABASE_PORT=5432
FORCE_SSL=false
SKIP_INVITATION_CODE=true
REQUIRE_CONFIRMED_EMAIL=true
ALLOW_UNCONFIRMED_ACCESS_FOR=0
MIN_PASSWORD_LENGTH=16
USE_JQ=jq
USE_GRAPHVIZ_DOT=dot
SMTP_DOMAIN=$SMTP_HOSTNAME
SMTP_SERVER=$SMTP_HOSTNAME
SMTP_PORT=$SMTP_HOSTPORT
SMTP_USER_NAME=none
SMTP_ENABLE_STARTTLS_AUTO=true
SMTP_SSL=false
EMAIL_FROM_ADDRESS=Huginn $HSHQ_ADMIN_NAME <$EMAIL_ADMIN_EMAIL_ADDRESS>
SEED_USERNAME=$HUGINN_ADMIN_USERNAME
SEED_PASSWORD=$HUGINN_ADMIN_PASSWORD
SEED_EMAIL=$HUGINN_ADMIN_EMAIL_ADDRESS
TWITTER_OAUTH_KEY=
TWITTER_OAUTH_SECRET=
THIRTY_SEVEN_SIGNALS_OAUTH_KEY=
THIRTY_SEVEN_SIGNALS_OAUTH_SECRET=
GITHUB_OAUTH_KEY=
GITHUB_OAUTH_SECRET=
TUMBLR_OAUTH_KEY=
TUMBLR_OAUTH_SECRET=
EVERNOTE_OAUTH_KEY=
EVERNOTE_OAUTH_SECRET=
USE_EVERNOTE_SANDBOX=true
EOFDZ

}

function performUpdateHuginn()
{
  perform_stack_name=huginn
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=postgres:15.0-bullseye,ghcr.io/huginn/huginn:c2839b8a78335a1cb7052d6ee1c4fbdc11ee6bb5
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="ghcr.io/huginn/huginn:c2839b8a78335a1cb7052d6ee1c4fbdc11ee6bb5,ghcr.io/huginn/huginn:c2839b8a78335a1cb7052d6ee1c4fbdc11ee6bb5"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Coturn
function installCoturn()
{
  # Since we allow other stack install functions to install Coturn,
  # we need to just return if already installed.
  if [ -d $HSHQ_STACKS_DIR/coturn ]; then
    return
  fi
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory coturn "$FMLNAME_COTURN"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_COTURN
  retVal=$?
  if [ $retVal -ne 0 ]; then
    return 1 $retVal
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/coturn
  initServicesCredentials
  outputConfigCoturn
  generateCert coturn "coturn,$SUB_COTURN.$HOMESERVER_DOMAIN"
  set +e
  installStack coturn coturn "" $HOME/coturn.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3
}

function outputConfigCoturn()
{
  cat <<EOFOF > $HOME/coturn-compose.yml
$STACK_VERSION_PREFIX coturn $(getScriptStackVersion coturn)
version: '3.5'

services:
  coturn:
    image: $(getScriptImageByContainerName coturn)
    container_name: coturn
    hostname: coturn
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - "3478:3478"
      - "3478:3478/udp"
      - "5349:5349"
      - "5349:5349/udp"
      - "14100-14200:14100-14200/udp"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/coturn/turnserver.conf:/etc/coturn/turnserver.conf
      - \${HSHQ_SSL_DIR}/coturn.crt:/usr/local/etc/cert.pem
      - \${HSHQ_SSL_DIR}/coturn.key:/usr/local/etc/key.pem

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true

EOFOF

  cat <<EOFRM > $HOME/coturn.env
TZ=\${TZ}
EOFRM

  cat <<EOFRM > $HSHQ_STACKS_DIR/coturn/turnserver.conf
listening-port=3478
tls-listening-port=5349
min-port=14100
max-port=14200
fingerprint
use-auth-secret
static-auth-secret=$COTURN_STATIC_SECRET
realm=$SUB_COTURN.$HOMESERVER_DOMAIN
total-quota=0
bps-capacity=0
stale-nonce=600
cert=/usr/local/etc/cert.pem
pkey=/usr/local/etc/key.pem
no-multicast-peers
no-rfc5780
no-stun-backward-compatibility
response-origin-only-with-rfc5780
no-cli
EOFRM

}

function performUpdateCoturn()
{
  perform_stack_name=coturn
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=coturn/coturn:4.6
      image_update_map[0]="coturn/coturn:4.6,coturn/coturn:4.6"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# FileDrop
function installFileDrop()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory filedrop "FileDrop"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  git clone https://github.com/mat-sz/filedrop.git $HSHQ_BUILD_DIR/filedrop
  docker build --build-arg VITE_APP_NAME=FileDrop -t filedrop/filedrop:1 $HSHQ_BUILD_DIR/filedrop
  retVal=$?
  sudo rm -fr $HSHQ_BUILD_DIR/filedrop
  if [ $retVal -ne 0 ]; then
    return 1
  fi
  if ! [ -d $HSHQ_STACKS_DIR/coturn ]; then
    echo "Missing coturn, installing..."
    installCoturn
    retval=$?
    if [ $retval -ne 0 ]; then
      notifyStackInstallFailure Coturn
    fi
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/filedrop
  outputConfigFileDrop
  installStack filedrop filedrop "" $HOME/filedrop.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  sleep 3
  inner_block=""
  inner_block=$inner_block">>https://$SUB_FILEDROP.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://filedrop:5000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_FILEDROP $MANAGETLS_FILEDROP "$is_integrate_hshq" $NETDEFAULT_FILEDROP "$inner_block"
  insertSubAuthelia $SUB_FILEDROP.$HOMESERVER_DOMAIN bypass

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll filedrop "$FMLNAME_FILEDROP" $USERTYPE_FILEDROP "https://$SUB_FILEDROP.$HOMESERVER_DOMAIN" "filedrop.png"
    restartAllCaddyContainers
  fi
}

function outputConfigFileDrop()
{
  cat <<EOFDZ > $HOME/filedrop-compose.yml
$STACK_VERSION_PREFIX filedrop $(getScriptStackVersion filedrop)
version: '3.5'

services:
  filedrop:
    image: $(getScriptImageByContainerName filedrop)
    container_name: filedrop
    hostname: filedrop
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true

EOFDZ

  cat <<EOFDZ > $HOME/filedrop.env
TZ=\${TZ}
WS_HOST=0.0.0.0
WS_APP_NAME=$HOMESERVER_NAME FileDrop
WS_ABUSE_EMAIL=$EMAIL_ADMIN_EMAIL_ADDRESS
WS_REQUIRE_CRYPTO=1
TURN_MODE=hmac
TURN_SERVER=turn:$SUB_COTURN.$HOMESERVER_DOMAIN:5349
TURN_USERNAME=filedrop
TURN_SECRET=$COTURN_STATIC_SECRET
STUN_SERVER=
EOFDZ

}

function performUpdateFileDrop()
{
  perform_stack_name=filedrop
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=filedrop/filedrop:1
      image_update_map[0]="filedrop/filedrop:1,filedrop/filedrop:1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Piped
function installPiped()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory piped "Piped"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PIPED_FRONTEND
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PIPED_PROXY
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PIPED_API
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PIPED_CRON
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_PIPED_WEB
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/piped
  mkdir $HSHQ_STACKS_DIR/piped/db
  mkdir $HSHQ_STACKS_DIR/piped/dbexport
  mkdir $HSHQ_STACKS_DIR/piped/config
  mkdir $HSHQ_STACKS_DIR/piped/cron
  mkdir $HSHQ_STACKS_DIR/piped/web
  mkdir $HSHQ_NONBACKUP_DIR/piped
  mkdir $HSHQ_NONBACKUP_DIR/piped/proxy
  chmod 777 $HSHQ_STACKS_DIR/piped/dbexport

  initServicesCredentials
  outputConfigPiped
  installStack piped piped-app "" $HOME/piped.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://piped-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PIPED_FRONTEND $MANAGETLS_PIPED_FRONTEND "$is_integrate_hshq" $NETDEFAULT_PIPED_FRONTEND "$inner_block"
  insertSubAuthelia $SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN primaryusers

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PIPED_PROXY.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>uri replace \"&ump=1\" \"\"\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://piped-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PIPED_PROXY $MANAGETLS_PIPED_PROXY "$is_integrate_hshq" $NETDEFAULT_PIPED_PROXY "$inner_block"
  insertSubAuthelia $SUB_PIPED_PROXY.$HOMESERVER_DOMAIN bypass

  inner_block=""
  inner_block=$inner_block">>https://$SUB_PIPED_API.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://piped-web {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_PIPED_API $MANAGETLS_PIPED_API "$is_integrate_hshq" $NETDEFAULT_PIPED_API "$inner_block"
  insertSubAuthelia $SUB_PIPED_API.$HOMESERVER_DOMAIN bypass

  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll piped "$FMLNAME_PIPED_FRONTEND" $USERTYPE_PIPED_FRONTEND "https://$SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN" "piped.png"
    restartAllCaddyContainers
    checkAddDBSqlPad piped "$FMLNAME_PIPED_FRONTEND" postgres piped-db $PIPED_DATABASE_NAME $PIPED_DATABASE_USER $PIPED_DATABASE_USER_PASSWORD
  fi
}

function outputConfigPiped()
{
  cat <<EOFPI > $HOME/piped-compose.yml
$STACK_VERSION_PREFIX piped $(getScriptStackVersion piped)
version: '3.5'

services:
  piped-db:
    image: $(getScriptImageByContainerName piped-db)
    container_name: piped-db
    hostname: piped-db
    user: "\${UID}:\${GID}"
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    shm_size: 256mb
    networks:
      - int-piped-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/piped/db:/var/lib/postgresql/data
      - \${HSHQ_SCRIPTS_DIR}/user/exportPostgres.sh:/exportDB.sh:ro
      - \${HSHQ_STACKS_DIR}/piped/dbexport:/dbexport
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.piped-hourly-db.schedule=@every 1h"
      - "ofelia.job-exec.piped-hourly-db.command=/exportDB.sh"
      - "ofelia.job-exec.piped-hourly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.piped-hourly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.piped-hourly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.piped-hourly-db.email-from=Piped Hourly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.piped-hourly-db.mail-only-on-error=true"
      - "ofelia.job-exec.piped-monthly-db.schedule=0 0 8 1 * *"
      - "ofelia.job-exec.piped-monthly-db.command=/exportDB.sh"
      - "ofelia.job-exec.piped-monthly-db.smtp-host=$SMTP_HOSTNAME"
      - "ofelia.job-exec.piped-monthly-db.smtp-port=$SMTP_HOSTPORT"
      - "ofelia.job-exec.piped-monthly-db.email-to=$EMAIL_ADMIN_EMAIL_ADDRESS"
      - "ofelia.job-exec.piped-monthly-db.email-from=Piped Monthly DB Export <$EMAIL_ADMIN_EMAIL_ADDRESS>"
      - "ofelia.job-exec.piped-monthly-db.mail-only-on-error=false"

  piped-frontend:
    image: $(getScriptImageByContainerName piped-frontend)
    container_name: piped-frontend
    hostname: piped-frontend
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    entrypoint: ash -c 'sed -i s/pipedapi.kavin.rocks/$SUB_PIPED_API.$HOMESERVER_DOMAIN/g /usr/share/nginx/html/assets/* && /docker-entrypoint.sh && nginx -g "daemon off;"'
    depends_on:
      - piped-api
    networks:
      - int-piped-net
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro

  piped-proxy:
    image: $(getScriptImageByContainerName piped-proxy)
    container_name: piped-proxy
    hostname: piped-proxy
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-piped-net
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - v-piped-proxy:/app/socket

  piped-api:
    image: $(getScriptImageByContainerName piped-api)
    container_name: piped-api
    hostname: piped-api
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-piped-net
      - dock-proxy-net
      - dock-ext-net
    depends_on:
      - piped-db
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/piped/config/config.properties:/app/config.properties:ro

  piped-cron:
    image: $(getScriptImageByContainerName piped-cron)
    container_name: piped-cron
    hostname: piped-cron
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    tty: true
    networks:
      - int-piped-net
      - dock-ext-net
    depends_on:
      - piped-web
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/piped/cron/updateSubs.sh:/updateSubs.sh
    labels:
      - "ofelia.enabled=true"
      - "ofelia.job-exec.piped-subs.schedule=@every 15m"
      - "ofelia.job-exec.piped-subs.command=/updateSubs.sh"

  piped-web:
    image: $(getScriptImageByContainerName piped-web)
    container_name: piped-web
    hostname: piped-web
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - int-piped-net
      - dock-proxy-net
    depends_on:
      - piped-frontend
      - piped-proxy
      - piped-api
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/piped/web/nginx.conf:/etc/nginx/nginx.conf:ro
      - \${HSHQ_STACKS_DIR}/piped/web/pipedapi.conf:/etc/nginx/conf.d/pipedapi.conf:ro
      - \${HSHQ_STACKS_DIR}/piped/web/pipedproxy.conf:/etc/nginx/conf.d/pipedproxy.conf:ro
      - \${HSHQ_STACKS_DIR}/piped/web/pipedfrontend.conf:/etc/nginx/conf.d/pipedfrontend.conf:ro
      - \${HSHQ_STACKS_DIR}/piped/web/ytproxy.conf:/etc/nginx/snippets/ytproxy.conf:ro
      - v-piped-proxy:/var/run/ytproxy

volumes:
  v-piped-proxy:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_NONBACKUP_DIR}/piped/proxy

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
  int-piped-net:
    driver: bridge
    internal: true
    ipam:
      driver: default

EOFPI

  cat <<EOFPI > $HOME/piped.env
TZ=\${TZ}
UID=$USERID
GID=$GROUPID
POSTGRES_DB=$PIPED_DATABASE_NAME
POSTGRES_USER=$PIPED_DATABASE_USER
POSTGRES_PASSWORD=$PIPED_DATABASE_USER_PASSWORD
POSTGRES_INITDB_ARGS=--encoding='UTF8' --lc-collate='C' --lc-ctype='C'
UDS=1
EOFPI

  cat <<EOFPI > $HSHQ_STACKS_DIR/piped/config/config.properties
PORT: 8080
HTTP_WORKERS: 2
PROXY_PART: https://$SUB_PIPED_PROXY.$HOMESERVER_DOMAIN
CAPTCHA_BASE_URL: 
CAPTCHA_API_KEY: 
API_URL: https://$SUB_PIPED_API.$HOMESERVER_DOMAIN
FRONTEND_URL: https://$SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN
COMPROMISED_PASSWORD_CHECK: false
DISABLE_REGISTRATION: false
FEED_RETENTION: 30
hibernate.connection.url: jdbc:postgresql://piped-db:5432/$PIPED_DATABASE_NAME
hibernate.connection.driver_class: org.postgresql.Driver
hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
hibernate.connection.username: $PIPED_DATABASE_USER
hibernate.connection.password: $PIPED_DATABASE_USER_PASSWORD
EOFPI

  cat <<EOFPI > $HSHQ_STACKS_DIR/piped/web/nginx.conf
user root;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    server_names_hash_bucket_size 128;
    log_format main '\$remote_addr - \$remote_user [\$time_local] "\$request" '
    '\$status \$body_bytes_sent "\$http_referer" '
    '"\$http_user_agent" "\$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    sendfile on;
    tcp_nodelay on;
    keepalive_timeout 65;
    resolver 127.0.0.11 ipv6=off valid=10s;
    include /etc/nginx/conf.d/*.conf;
}

EOFPI

  cat <<EOFPI > $HSHQ_STACKS_DIR/piped/web/pipedapi.conf
proxy_cache_path /tmp/pipedapi_cache levels=1:2 keys_zone=pipedapi:4m max_size=2g inactive=60m use_temp_path=off;

server {
    listen 80;
    server_name $SUB_PIPED_API.$HOMESERVER_DOMAIN;

    set \$backend "http://piped-api:8080";

    location / {
        proxy_cache pipedapi;
        proxy_pass \$backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "keep-alive";
    }
}

EOFPI

  cat <<EOFPI > $HSHQ_STACKS_DIR/piped/web/pipedfrontend.conf
server {
    listen 80;
    server_name $SUB_PIPED_FRONTEND.$HOMESERVER_DOMAIN;

    set \$backend "http://piped-frontend:80";

    location / {
        proxy_pass \$backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "keep-alive";
    }
}

EOFPI

  cat <<EOFPI > $HSHQ_STACKS_DIR/piped/web/pipedproxy.conf
server {
    listen 80;
    server_name $SUB_PIPED_PROXY.$HOMESERVER_DOMAIN;

    location ~ (/videoplayback|/api/v4/|/api/manifest/) {
        include snippets/ytproxy.conf;
        add_header Cache-Control private always;
    }

    location / {
        include snippets/ytproxy.conf;
        add_header Cache-Control "public, max-age=604800";
    }
}

EOFPI

  cat <<EOFPI > $HSHQ_STACKS_DIR/piped/web/ytproxy.conf
proxy_buffering on;
proxy_buffers 1024 16k;
proxy_set_header X-Forwarded-For "";
proxy_set_header CF-Connecting-IP "";
proxy_hide_header "alt-svc";
sendfile on;
sendfile_max_chunk 512k;
tcp_nopush on;
aio threads=default;
aio_write on;
directio 16m;
proxy_hide_header Cache-Control;
proxy_hide_header etag;
proxy_http_version 1.1;
proxy_set_header Connection keep-alive;
proxy_max_temp_file_size 32m;
access_log off;
proxy_pass http://unix:/var/run/ytproxy/actix.sock;

EOFPI

  cat <<EOFPI > $HSHQ_STACKS_DIR/piped/cron/updateSubs.sh
#!/bin/bash

sqlcmd="SELECT DISTINCT(channel) FROM users_subscribed;"
echo "\$sqlcmd" | PGPASSWORD=\$POSTGRES_PASSWORD psql -qtA -h piped-db -U \$POSTGRES_USER \$POSTGRES_DB | xargs -I\\{} curl -sk -o /dev/null "https://$SUB_PIPED_API.$HOMESERVER_DOMAIN/channel/{}"

EOFPI

  chmod 751 $HSHQ_STACKS_DIR/piped/cron/updateSubs.sh

}

function performUpdatePiped()
{
  perform_stack_name=piped
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=postgres:15.0-bullseye,1337kavin/piped-frontend:latest,1337kavin/piped-proxy:latest,1337kavin/piped:latest,barrypiccinni/psql-curl,nginx:1.25.3-alpine
      image_update_map[0]="postgres:15.0-bullseye,postgres:15.0-bullseye"
      image_update_map[1]="1337kavin/piped-frontend:latest,1337kavin/piped-frontend:latest"
      image_update_map[2]="1337kavin/piped-proxy:latest,1337kavin/piped-proxy:latest"
      image_update_map[2]="1337kavin/piped:latest,1337kavin/piped:latest"
      image_update_map[2]="barrypiccinni/psql-curl,barrypiccinni/psql-curl"
      image_update_map[2]="nginx:1.25.3-alpine,nginx:1.25.3-alpine"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Script-server
function installScriptServer()
{
  if [ -d $HSHQ_STACKS_DIR/script-server ]; then
    return
  fi
  set +e
  retVal=0
  if ! [ -f $HOME/script-server.zip ]; then
    wget -q -O $HOME/script-server.zip https://github.com/bugy/script-server/releases/download/1.18.0/script-server.zip
    retVal=$?
  fi
  if [ $retVal -ne 0 ] || ! [ -f $HOME/script-server.zip ]; then
    echo "ERROR: Could not obtain Script-server zip file"
    exit 1
  fi
  mkdir $HSHQ_STACKS_DIR/script-server
  unzip $HOME/script-server.zip -d $HSHQ_STACKS_DIR/script-server > /dev/null 2>&1
  retVal=$?
  if [ $retVal -ne 0 ]; then
    sudo rm -fr $HSHQ_STACKS_DIR/script-server
    echo "ERROR: There was a problem extracting the Script-server zip file"
    exit 1
  fi
  set -e
  rm $HOME/script-server.zip
  sudo chown -R $USERNAME:$USERNAME $HSHQ_STACKS_DIR/script-server
  mkdir -p $HSHQ_STACKS_DIR/script-server/conf/scripts
  mkdir -p $HSHQ_STACKS_DIR/script-server/conf/theme

  pip3 install tornado > /dev/null 2>&1
  initServicesCredentials
  generateCert script-server "script-server,host.docker.internal" $HOMESERVER_HOST_IP
  outputConfigScriptServer
  htpasswd -bcBC 10 $HSHQ_STACKS_DIR/script-server/users $SCRIPTSERVER_ADMIN_USERNAME $SCRIPTSERVER_ADMIN_PASSWORD > /dev/null 2>&1
  cp $HSHQ_ASSETS_DIR/images/script-server.ico $HSHQ_STACKS_DIR/script-server/web/favicon.ico
  cp $HSHQ_ASSETS_DIR/images/script-server_header.jpg $HSHQ_STACKS_DIR/script-server/conf/theme/
  cp $HSHQ_ASSETS_DIR/images/script-server_login.jpg $HSHQ_STACKS_DIR/script-server/conf/theme/
  cp $HSHQ_ASSETS_DIR/images/HSHQ-ApplyJoin.png $HSHQ_STACKS_DIR/script-server/web/img/
  cp $HSHQ_ASSETS_DIR/images/HSHQ-Invite.png $HSHQ_STACKS_DIR/script-server/web/img/

  sudo chmod 644 $HSHQ_SCRIPTS_DIR/root/runScriptServer.service
  sudo chown root:root $HSHQ_SCRIPTS_DIR/root/runScriptServer.service
  sudo rm -f /etc/systemd/system/runScriptServer.service
  sudo ln -s $HSHQ_SCRIPTS_DIR/root/runScriptServer.service /etc/systemd/system/runScriptServer.service
  inner_block=""
  inner_block=$inner_block">>https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://host.docker.internal:$SCRIPTSERVER_LOCALHOST_PORT {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SCRIPTSERVER $MANAGETLS_SCRIPTSERVER "$is_integrate_hshq" $NETDEFAULT_SCRIPTSERVER "$inner_block"
  insertSubAuthelia $SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN admins
  insertEnableSvcAll script-server "$FMLNAME_SCRIPTSERVER" $USERTYPE_SCRIPTSERVER "https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN" "script-server.png"
  insertEnableSvcHeimdall script-server "$FMLNAME_SCRIPTSERVER (IP)" $USERTYPE_SCRIPTSERVER "https://$HOMESERVER_HOST_IP:$SCRIPTSERVER_LOCALHOST_PORT" "script-server.png"
  restartAllCaddyContainers
  sudo systemctl daemon-reload
  sudo systemctl enable runScriptServer
  sudo systemctl start runScriptServer
  sleep 3
  fullResetScriptServer
  if ! [ "$SCRIPTSERVER_INIT_ENV" = "true" ]; then
    sendEmail -s "Script-server Login Info" -b "Script-server Username: $SCRIPTSERVER_ADMIN_USERNAME\nScript-server Password: $SCRIPTSERVER_ADMIN_PASSWORD\n" -f "$HSHQ_ADMIN_NAME <$EMAIL_SMTP_EMAIL_ADDRESS>"
    SCRIPTSERVER_INIT_ENV=true
    updateConfigVar SCRIPTSERVER_INIT_ENV $SCRIPTSERVER_INIT_ENV
  fi
}

function outputConfigScriptServer()
{
  sudo tee $HSHQ_SCRIPTS_DIR/root/runScriptServer.service >/dev/null <<EOFHS
[Unit]
Description=Script-server
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
ExecStart=/usr/bin/python3 $HSHQ_STACKS_DIR/script-server/launcher.py
User=$USERNAME

[Install]
WantedBy=multi-user.target
EOFHS

  cat <<EOFHS > $HSHQ_STACKS_DIR/script-server/conf/conf.json
{
  "port": $SCRIPTSERVER_LOCALHOST_PORT,
  "address": "0.0.0.0",
  "title": "Script-server",
  "ssl": {
    "key_path": "$HSHQ_SSL_DIR/script-server.key",
    "cert_path": "$HSHQ_SSL_DIR/script-server.crt"
  },
  "auth": {
    "type": "htpasswd",
    "htpasswd_path": "$HSHQ_STACKS_DIR/script-server/users"
  },
  "access": {
	"allowed_users": [ "$SCRIPTSERVER_ADMIN_USERNAME" ],
	"admin_users": [ "$SCRIPTSERVER_ADMIN_USERNAME" ]
  },
  "alerts": {
    "destinations": [
      {
        "type": "email",
        "from": "Script-server ${HSHQ_ADMIN_NAME}<$EMAIL_SMTP_EMAIL_ADDRESS>",
        "to": "$EMAIL_ADMIN_EMAIL_ADDRESS",
        "server": "$SUB_POSTFIX.$HOMESERVER_DOMAIN",
        "auth_enabled": false,
        "tls": true,
        "url": "https://$SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN/test_alerts"
      }
    ]
  }
}
EOFHS

  cat <<EOFHS > $HSHQ_STACKS_DIR/script-server/conf/theme/theme.css
html:root {
    --hover-color: rgba(255, 255, 255, 0.04);
    --focus-color: rgba(255, 255, 255, 0.12);
    --focus-color-solid: #424242;

    --font-color-main: rgba(255, 255, 255, 0.87);
    --font-color-medium: rgba(255, 255, 255, 0.60);
    --font-color-disabled: rgba(255, 255, 255, 0.38);

    --primary-color: #FFFFAC;
    --primary-color-raised-hover-solid: #FFFFAC;
    --primary-color-raised-focus-solid: #FFFFAC;
    --primary-color-when-focused: rgba(0, 0, 0, 0.12);
    --primary-color-when-hovered: rgba(0, 0, 0, 0.04);
    --font-on-primary-color-main: rgba(0, 0, 0, 0.87);
    --font-on-primary-color-medium: rgba(0, 0, 0, 0.60);

    --primary-color-dark-color: #3F647F;
    --primary-color-dark-when-focused: rgba(0, 0, 0, 0.12);
    --primary-color-dark-when-hovered: rgba(0, 0, 0, 0.04);
    --font-on-primary-color-dark-main: rgba(0, 0, 0, 0.87);
    --font-on-primary-color-dark-medium: rgba(0, 0, 0, 0.60);

    --primary-color-light-color: #FFFFAC;

    --surface-color: #000000;

    --background-color: #21292C;
    --background-color-slight-emphasis: rgba(255, 255, 255, 0.05);
    --background-color-high-emphasis: rgba(255, 255, 255, 0.09);
    --background-color-level-4dp: rgba(255, 255, 255, 0.09);
    --background-color-level-8dp: rgba(255, 255, 255, 0.12);
    --background-color-level-16dp: rgba(255, 255, 255, 0.15);
    --background-color-disabled: rgba(255, 255, 255, 0.12);

    --script-header-background: url('../theme/script-server_header.jpg') center / cover no-repeat;
    --login-header-background: url('../theme/script-server_login.jpg') center / cover no-repeat;

    --separator-color: #424242;

    --outline-color: rgba(255, 255, 255, 0.18);

}

.script-parameters-panel .parameter textarea {
    max-height: 10em !important;
    overflow: auto !important;
}

.readonly-field.long {
    max-height: 20em !important;
    width: 100% !important;
    overflow: auto !important;
}

.log-panel {
  min-height: 20em !important;
  overflow: auto !important;
}

EOFHS

  outputAllScriptServerScripts
  outputStackListsScriptServer
}

function performUpdateScriptServer()
{
  return
}

function clearAllScriptServerScripts()
{
  rm -fr $HSHQ_STACKS_DIR/script-server/conf/scripts/*
  rm -fr $HSHQ_STACKS_DIR/script-server/conf/runners/*
  rm -fr $HSHQ_STACKS_DIR/script-server/conf/deleted/*
}

function fullResetScriptServer()
{
  clearAllScriptServerScripts
  rm -f $HSHQ_STACKS_DIR/script-server/logs/processes/*
  rm -fr $HSHQ_STACKS_DIR/script-server/temp/uploadFiles/*
  outputAllScriptServerScripts
}

function outputAllScriptServerScripts()
{
  group_id_misc="01 Misc Utils"
  group_id_services="02 Services"
  group_id_scriptserver="03 Script-server Utils"
  group_id_systemutils="04 System Utils"
  group_id_testing="05 Testing"
  group_id_mynetwork="06 My Network"
  group_id_othernetworks="07 Other Networks"
  group_id_relayserver="08 RelayServer Utils"

  # Util scripts
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
#!/bin/bash

function getArgumentValue()
{
  arg_name="\$1"
  arg_string="\$@"
  shift
  while [[ \$# -gt 0 ]]
  do
    if [[ "\$1" =~ ^-\${arg_name}= ]]; then
      echo "\$1" | sed 's/^[^=]*=//' | sed 's/ *\$//g'
    fi
    shift
  done
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkConfirm.sh
#!/bin/bash

if ! [ "\$1" = "confirm" ]; then
  echo "ERROR: Confirmation was not entered correctly."
  exit
fi

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh
#!/bin/bash

echo "\$1" | sudo -S -v -p "" > /dev/null 2>&1
if [ \$? -ne 0 ]; then
  echo "ERROR: Password is incorrect."
  exit 1
fi

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh
#!/bin/bash

source $HSHQ_LIB_SCRIPT lib
checkDecryptConfigFile \$1

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
#!/bin/bash

if [ "\$(checkHSHQScriptOpen)" = "true" ]; then
  echo "ERROR: The HSHQ script is already open or running in a different instance. If you are sure that this has occurred erroneously, then run the System Utils -> Reset HSHQ Open Status function to reset it."
  exit 8
fi

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/generateRandomIP.sh
#!/bin/bash

echo 10.\$(( \$RANDOM % 256 )).\$(( \$RANDOM % 256 )).\$((\$((\$RANDOM%250))+1))

EOFSC

  # 01 Misc Utils
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/restartAuthelia.sh
#!/bin/bash

docker container restart authelia > /dev/null 2>&1
echo "Authelia successfully restarted."

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/restartAuthelia.json
{
  "name": "01 Restart Authelia",
  "script_path": "conf/scripts/restartAuthelia.sh",
  "description": "Restarts Authelia container. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This is typically useful after updates have been applied to the configuration.",
  "group": "$group_id_misc",
  "parameters": []
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/restartCaddyContainer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
caddyinstance=\$(getArgumentValue caddyinstance "\$@")
docker container restart "\$caddyinstance"

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/restartCaddyContainer.json
{
  "name": "02 Restart Caddy Container",
  "script_path": "conf/scripts/restartCaddyContainer.sh",
  "description": "Restarts a specific Caddy container. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Caddy Instances",
      "required": true,
      "param": "-caddyinstance=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "docker ps -a --filter name=caddy- --format \"{{.Names}}\"",
        "shell": true
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/restartAllCaddyContainers.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
confirm=\$(getArgumentValue confirm "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkConfirm.sh "\$confirm"

source $HSHQ_LIB_SCRIPT lib
restartAllCaddyContainers
echo "Caddy containers successfully restarted."

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/restartAllCaddyContainers.json
{
  "name": "03 Restart All Caddy Containers",
  "script_path": "conf/scripts/restartAllCaddyContainers.sh",
  "description": "Restarts all Caddy containers. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Enter confirm in the box below.",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Enter 'confirm' to continue.",
      "required": true,
      "param": "-confirm=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/generateSignedCertificate.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

certs_filename=\$(getArgumentValue filename "\$@")
certs_domains=\$(getArgumentValue domains "\$@")
certs_ipaddresses=\$(getArgumentValue ipaddresses "\$@")
certs_startdate=\$(getArgumentValue startdate "\$@")
certs_enddate=\$(getArgumentValue enddate "\$@")

set +e
generateCert "\$certs_filename" "\$certs_domains" "\$certs_ipaddresses" "\$certs_startdate" "\$certs_enddate"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/generateSignedCertificate.json
{
  "name": "04 Generate Signed Certificate",
  "script_path": "conf/scripts/generateSignedCertificate.sh",
  "description": "Generates a certificate signed by the Root CA. [Need Help?](https://forum.homeserverhq.com/)<br/>\n- The resulting key/certificate pair will be stored in $HSHQ_SSL_DIR.\n- Multiple domain names and/or IP addresses should be a comma-separated list (no spaces).\n- Dates should be formatted as '2023-01-01 00:00:00 GMT'.\n- Leave start date empty to default to current date/time.\n- If end date is empty, then the certificate will expire $CERTS_INTERNAL_CA_DAYS days after the start date.",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "secure": true,
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    },
    {
      "name": "Enter the filename",
      "required": true,
      "param": "-filename=",
      "same_arg_param": true,
      "type": "text",
      "secure": false,
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    },
    {
      "name": "Enter domain names",
      "required": true,
      "param": "-domains=",
      "same_arg_param": true,
      "type": "text",
      "secure": false,
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    },
    {
      "name": "Enter IP addresses",
      "required": false,
      "param": "-ipaddresses=",
      "same_arg_param": true,
      "type": "text",
      "secure": false,
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    },
    {
      "name": "Enter start date",
      "required": false,
      "param": "-startdate=",
      "same_arg_param": true,
      "type": "text",
      "secure": false,
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    },
    {
      "name": "Enter end date",
      "required": false,
      "param": "-enddate=",
      "same_arg_param": true,
      "type": "text",
      "secure": false,
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/resetCaddyData.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

caddyinstance=\$(getArgumentValue caddyinstance "\$@")

set +e
echo "Clearing out data for \$caddyinstance"
sudo $HSHQ_SCRIPTS_DIR/userasroot/resetCaddyContainer.sh \$caddyinstance
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/resetCaddyData.json
{
  "name": "05 Reset Caddy Data",
  "script_path": "conf/scripts/resetCaddyData.sh",
  "description": "Clears out all data for the selected Caddy instance and restarts the stack. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This should only be used as a last resort if you encountering continual issues that do not resolve after restarting the stack.",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Caddy Instance",
      "required": true,
      "param": "-caddyinstance=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "docker ps -a --filter name=caddy- --format \"{{.Names}}\"",
        "shell": true
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/restartAllStacks.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Restarting all stacks..."
restartAllStacks
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/restartAllStacks.json
{
  "name": "06 Restart All Stacks",
  "script_path": "conf/scripts/restartAllStacks.sh",
  "description": "Restarts all stacks. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>1. Stops all Docker stacks.\n2. Removes all Docker networks.\n3. Restarts the Docker daemon.\n4. Recreates all Docker networks.\n5. Starts all stacks that were stopped.<br/>\nThis function is useful to do a full fresh reboot of all services. You should rarely if ever need to do this, but there are certain situations where it might be needed. The most prevalent case is when you run an update on the host system and docker is updated to a new version. The docker daemon is restarted as a result, but sometimes not everything comes back up correctly. Depending on the number of stacks, this could take 10-15 minutes to complete. You will also lose access to this web app during the process, but it will continue to run in the background, so be patient (unless you are accessing this utility via IP on your home network, which is preferred). If you stop the process midway through, then you will have to manually fix any issues from the state that everything is in.",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/emailCredentialsVaultwarden.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")

source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Emailing login credentials in Vaultwarden format..."
emailVaultwardenCredentials false
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/emailCredentialsVaultwarden.json
{
  "name": "07 Email Vaultwarden Credentials",
  "script_path": "conf/scripts/emailCredentialsVaultwarden.sh",
  "description": "Emails Vaultwarden credentials. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Emails all login credentials, in a format that can easily be imported into Vaultwarden, to the email manager's mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS).",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/emailRootCA.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")

source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Emailing Root CA..."
sendRootCAEmail
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/emailRootCA.json
{
  "name": "08 Email Root CA",
  "script_path": "conf/scripts/emailRootCA.sh",
  "description": "Emails Root CA. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Emails the Root Certificate Authority (CA) certificate to the email manager's mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS).",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/emailUserVaultwardenTemplate.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")

source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

username=\$(getArgumentValue username "\$@")
emailaddr=\$(getArgumentValue emailaddr "\$@")

set +e
echo "Emailing Vaultwarden import template to user..."
emailUserVaultwardenCredentials "\$username" "\$emailaddr"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/emailUserVaultwardenTemplate.json
{
  "name": "09 Email User VW Template",
  "script_path": "conf/scripts/emailUserVaultwardenTemplate.sh",
  "description": "Emails Vaultwarden template to user. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function emails a Vaultwarden import template to the provided user at the provided email address. The template keeps all of the LDAP-based services together as a single entry within the Vaultwarden password manager. The default password is simply 'abcdefg', but the user only needs to change this one entry to their correct password. If they change their LDAP password in the future, then they need only change this one entry within Vaultwarden. The is simply a suggested convenience method for your users.",
  "group": "$group_id_misc",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter LDAP username",
      "required": true,
      "param": "-username=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter email address",
      "required": true,
      "param": "-emailaddr=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  # 02 Services
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/installServicesFromList.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

services=\$(getArgumentValue services "\$@")

set +e
installListOfServices "\$services"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/installServicesFromList.json
{
  "name": "01 Install Service(s)",
  "script_path": "conf/scripts/installServicesFromList.sh",
  "description": "Select the service(s) that you wish to install. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Note that after each service is installed, the reverse proxy (Caddy) will be restarted. The reverse proxy also serves <ins>this Script-server webpage</ins> (if you are accessing it via $SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN rather than via IP address), so the console output will desync when this occurs. The process will continue to run in the background albeit this issue, so be patient and allow the process to complete. You can also refresh this webpage to resync the output. If you are accessing it via IP, then you will not experience any desync. The full log of the installation process can be viewed in the HISTORY section (bottom left corner).<br/><br/>More details on all services can be found on the [HomeServerHQ Wiki](https://wiki.homeserverhq.com/en/foss-projects)",
  "group": "$group_id_services",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "List of Services To Install",
      "required": true,
      "param": "-services=",
      "same_arg_param": true,
      "type": "multiselect",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "while read filename; do if ! [ -d ~/hshq/data/stacks/\$filename ]; then echo \"\$filename\"; fi; done < conf/optionalStackList.txt",
        "shell": true
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/installAllAvailableServices.sh
#!/bin/bash

#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
installAllAvailableStacks false
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/installAllAvailableServices.json
{
  "name": "02 Install All Available Services",
  "script_path": "conf/scripts/installAllAvailableServices.sh",
  "description": "Installs all available services that are not on the disabled list. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Note that after each service is installed, the reverse proxy (Caddy) will be restarted. The reverse proxy also serves <ins>this Script-server webpage</ins> (if you are accessing it via $SUB_SCRIPTSERVER.$HOMESERVER_DOMAIN rather than via IP address), so the console output will desync when this occurs. The process will continue to run in the background albeit this issue, so be patient and allow the process to complete. You can also refresh this webpage to resync the output. If you are accessing it via IP, then you will not experience any desync. The full log of the installation process can be viewed in the HISTORY section (bottom left corner). <br/><br/>More details on all services can be found on the [HomeServerHQ Wiki](https://wiki.homeserverhq.com/en/foss-projects)",
  "group": "$group_id_services",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/updateServicesFromList.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

services=\$(getArgumentValue services "\$@")

set +e
updateListOfStacks "\$services"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/updateServicesFromList.json
{
  "name": "03 Update Service(s)",
  "script_path": "conf/scripts/updateServicesFromList.sh",
  "description": "Select the service(s) that you wish to update. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_services",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "List of Services To Update",
      "required": true,
      "param": "-services=",
      "same_arg_param": true,
      "type": "multiselect",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "cat conf/updateStackList.txt",
        "shell": true
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/updateAllAvailableServices.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
performAllAvailableStackUpdates false
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/updateAllAvailableServices.json
{
  "name": "04 Update All Available Services",
  "script_path": "conf/scripts/updateAllAvailableServices.sh",
  "description": "Updates all available services that have an update available. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_services",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeServicesFromList.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

services=\$(getArgumentValue services "\$@")

set +e
echo "Removing services: \$services"
deleteListOfStacks true "\$services"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeServicesFromList.json
{
  "name": "05 Remove Service(s)",
  "script_path": "conf/scripts/removeServicesFromList.sh",
  "description": "Select the service(s) that you wish to remove. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This will <ins>***permanently***</ins> remove <ins>***ALL***</ins> data related to this service.",
  "group": "$group_id_services",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "List of Services To Remove",
      "required": true,
      "param": "-services=",
      "same_arg_param": true,
      "type": "multiselect",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "while read filename; do if [ -d ~/hshq/data/stacks/\$filename ]; then echo \"\$filename\"; fi; done < conf/optionalStackList.txt",
        "shell": true
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/refreshServicesLists.sh
#!/bin/bash

#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Refreshing all services lists..."
outputStackListsScriptServer
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/refreshServicesLists.json
{
  "name": "06 Refresh Services Lists",
  "script_path": "conf/scripts/refreshServicesLists.sh",
  "description": "Refreshes all services lists. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function will check the state of all available services and refresh the associated lists within this user interface, i.e. Install/Update/Remove. These lists are normally updated automatically. However, in the event of an error or some other unforeseen circumstance, this will perform a manual refresh.",
  "group": "$group_id_services",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  # 03 Script-server Utils
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/clearScriptServerProcessLogs.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
confirm=\$(getArgumentValue confirm "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkConfirm.sh "\$confirm"

rm -f $HSHQ_STACKS_DIR/script-server/logs/processes/*
echo "Logs have been cleared."

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/clearScriptServerProcessLogs.json
{
  "name": "01 Clear History",
  "script_path": "conf/scripts/clearScriptServerProcessLogs.sh",
  "description": "Clears out all of the process logs (history) in this app. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Enter confirm in the box below.",
  "group": "$group_id_scriptserver",
  "parameters": [
    {
      "name": "Enter 'confirm' to continue.",
      "required": true,
      "param": "-confirm=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/restoreScriptServerScripts.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
outputAllScriptServerScripts
echo "Script-server scripts restored."
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/restoreScriptServerScripts.json
{
  "name": "02 Restore Scripts",
  "script_path": "conf/scripts/restoreScriptServerScripts.sh",
  "description": "Restores all Script-server scripts. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Does not clear/remove any scripts, but will overwrite those with the same name.",
  "group": "$group_id_scriptserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/clearRestoreScriptServerScripts.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
clearAllScriptServerScripts
outputAllScriptServerScripts
echo "Script-server scripts cleared and restored."
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/clearRestoreScriptServerScripts.json
{
  "name": "03 Clear and Restore Scripts",
  "script_path": "conf/scripts/clearRestoreScriptServerScripts.sh",
  "description": "Clears and restores all Script-server scripts. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>If you have added/modified any scripts, they will be deleted.",
  "group": "$group_id_scriptserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/fullResetScriptServerScripts.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
fullResetScriptServer
echo "Script-server fully reset."
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/fullResetScriptServerScripts.json
{
  "name": "04 Full Script-server Reset",
  "script_path": "conf/scripts/fullResetScriptServerScripts.sh",
  "description": "Performs a full reset. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Performs a full reset and restore of all scripts and runners in the Script-server app to default. Deletes all logs and temp files. If you have added/modified any scripts, they will be deleted.",
  "group": "$group_id_scriptserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  # 04 System Utils
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkUpdateHSHQ.sh
#!/bin/bash

source $HSHQ_LIB_SCRIPT lib

latest_ver_wrapper=\$(getLatestVersionWrapper)
this_ver_wrapper=\$(getThisVersionWrapper)
latest_ver_lib=\$(getLatestVersionLib)
this_ver_lib=\$(getThisVersionLib)

if [ -z \$latest_ver_wrapper ]; then
  echo "ERROR: Could not obtain latest wrapper version, check your internet connection and try again."
  exit
fi

if [ \$this_ver_wrapper -eq 0 ]; then
  echo "ERROR: Could not determine current wrapper version."
  exit
fi

if [ -z \$latest_ver_lib ]; then
  echo "ERROR: Could not obtain latest lib version, check your internet connection and try again."
  exit
fi

if [ \$this_ver_lib -eq 0 ]; then
  echo "ERROR: Could not determine current lib version."
  exit
fi

output_rep=""
is_any_avail=false

if [ \$this_ver_wrapper -lt \$latest_ver_wrapper ]; then
  output_rep="\${output_rep}There is a a new version of the wrapper script available.\n"
  output_rep="\${output_rep}Current wrapper version: \${this_ver_wrapper}\n"
  output_rep="\${output_rep}Latest wrapper version: \${latest_ver_wrapper}\n\n"
  is_any_avail=true
fi

if [ \$this_ver_lib -lt \$latest_ver_lib ]; then
  output_rep="\${output_rep}There is a a new version of the lib script available.\n"
  output_rep="\${output_rep}Current lib version: \${this_ver_lib}\n"
  output_rep="\${output_rep}Latest lib version: \${latest_ver_lib}\n\n"
  is_any_avail=true
fi

if [ "\$is_any_avail" = "true" ]; then
  echo -e "==========UPDATES AVAILABLE==========\n"
  echo -e "\${output_rep}\n"
else
  echo -e "Your system is up to date.\n"
  echo -e "Current wrapper version: \${this_ver_wrapper}"
  echo -e "Latest wrapper version: \${latest_ver_wrapper}\n"
  echo -e "Current lib version: \${this_ver_lib}"
  echo -e "Latest lib version: \${latest_ver_lib}\n"
fi

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/checkUpdateHSHQ.json
{
  "name": "01 Check Update HSHQ",
  "script_path": "conf/scripts/checkUpdateHSHQ.sh",
  "description": "Check for updates. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Checks for updates to either the wrapper script ($HSHQ_WRAP_FILENAME) or the lib script ($HSHQ_LIB_FILENAME). Does not perform any actions, just simply informs if there is an update available.<br/><br/>Github Releases: https://github.com/homeserverhq/hshq/releases<br/>Changelog: https://homeserverhq.com/changelog.txt",
  "group": "$group_id_systemutils",
  "parameters": []
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/performUpdateHSHQ.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh

set +e
echo "Updating HSHQ..."
is_any_updated=false

latest_ver_wrapper=\$(getLatestVersionWrapper)
this_ver_wrapper=\$(getThisVersionWrapper)
latest_ver_lib=\$(getLatestVersionLib)
this_ver_lib=\$(getThisVersionLib)

if [ -z \$latest_ver_wrapper ]; then
  echo "ERROR: Could not obtain latest wrapper version, check your internet connection and try again."
  exit
fi

if [ \$this_ver_wrapper -eq 0 ]; then
  echo "ERROR: Could not determine current wrapper version."
  exit
fi

if [ -z \$latest_ver_lib ]; then
  echo "ERROR: Could not obtain latest lib version, check your internet connection and try again."
  exit
fi

if [ \$this_ver_lib -eq 0 ]; then
  echo "ERROR: Could not determine current lib version."
  exit
fi

if [ \$this_ver_wrapper -lt \$latest_ver_wrapper ]; then
  wget -q -O \$HSHQ_WRAP_TMP \$HSHQ_WRAP_URL
  if [ \$? -ne 0 ]; then
    rm -f \$HSHQ_WRAP_TMP
    echo "ERROR: Could not obtain current version of wrapper script."
    exit
  fi
  hshq_wrap_dl_version=\$(sed -n 2p \$HSHQ_WRAP_TMP | cut -d"=" -f2)
  wget -q -O $HOME/wrap-\${hshq_wrap_dl_version}.sig \$HSHQ_SIG_BASE_URL/wrap-\${hshq_wrap_dl_version}.sig
  verifyFile \$HSHQ_WRAP_TMP $HOME/wrap-\${hshq_wrap_dl_version}.sig
  ver_res=\$?
  rm -f $HOME/wrap-\${hshq_wrap_dl_version}.sig
  if [ \$ver_res -ne 0 ]; then
    # Not verified, raise the red flag
    rm -f \$HSHQ_WRAP_TMP
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@  SECURITY ALERT  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo "@ There was a verification error on the latest wrapper version (Version \${hshq_wrap_dl_version}). @"
    echo "@         Please email security@homeserverhq.com as soon as possible.        @"
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    exit 8
  fi
  rm -f \$HSHQ_WRAP_SCRIPT
  mv \$HSHQ_WRAP_TMP \$HSHQ_WRAP_SCRIPT
  is_any_updated=true
  echo "Wrapper script verified and updated."
fi

if [ \$this_ver_lib -lt \$latest_ver_lib ]; then
  wget -q -O \$HSHQ_LIB_TMP \$HSHQ_LIB_URL
  if [ \$? -ne 0 ]; then
    rm -f \$HSHQ_LIB_TMP
    echo "ERROR: Could not obtain current version of lib script."
    exit
  fi
  hshq_lib_dl_version=\$(sed -n 2p \$HSHQ_LIB_TMP | cut -d"=" -f2)
  wget -q -O $HOME/lib-\${hshq_lib_dl_version}.sig \$HSHQ_SIG_BASE_URL/lib-\${hshq_lib_dl_version}.sig
  verifyFile \$HSHQ_LIB_TMP $HOME/lib-\${hshq_lib_dl_version}.sig
  ver_res=\$?
  rm -f $HOME/lib-\${hshq_lib_dl_version}.sig
  if [ \$ver_res -ne 0 ]; then
    # Not verified, raise the red flag
    rm -f \$HSHQ_LIB_TMP
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@  SECURITY ALERT  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    echo "@   There was a verification error on the latest lib version (Version \${hshq_lib_dl_version}).   @"
    echo "@         Please email security@homeserverhq.com as soon as possible.        @"
    echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
    exit 8
  fi
  rm -f \$HSHQ_LIB_SCRIPT
  mv \$HSHQ_LIB_TMP \$HSHQ_LIB_SCRIPT
  echo "Lib script verified!"
fi

source $HSHQ_LIB_SCRIPT lib
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

if ! [ "\$is_any_updated" = "true" ]; then
  is_any_updated="\$is_update_performed"
fi

if [ "\$is_any_updated" = "true" ]; then
  echo "All updates have been successfully applied."
else
  echo "No updates available. Your system is already up to date."
fi

set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/performUpdateHSHQ.json
{
  "name": "02 Perform Update HSHQ",
  "script_path": "conf/scripts/performUpdateHSHQ.sh",
  "description": "Performs HSHQ Updates. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Checks for updates to either the wrapper script ($HSHQ_WRAP_FILENAME) or the lib script ($HSHQ_LIB_FILENAME), and automatically applies update(s) if available. Only applies update(s) with a valid signature on the new source code.",
  "group": "$group_id_systemutils",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/updateHostAndReboot.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh

set +e
echo "Updating Linux and rebooting..."
sudo DEBIAN_FRONTEND=noninteractive apt update && sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y && sudo DEBIAN_FRONTEND=noninteractive apt autoremove -y && sudo reboot
set -e

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/updateHostAndReboot.json
{
  "name": "03 Update Linux OS and Reboot",
  "script_path": "conf/scripts/updateHostAndReboot.sh",
  "description": "Updates the host Linux Ubuntu OS and reboots the HomeServer. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This process will (obviously) disconnect you from this web app during the reboot process. It can take up to 5-10 minutes for all of the services to come back up after reboot, so be patient.",
  "group": "$group_id_systemutils",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/poweroffHomeServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"

echo "Powering down..."
sudo poweroff

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/poweroffHomeServer.json
{
  "name": "04 Power off HomeServer",
  "script_path": "conf/scripts/poweroffHomeServer.sh",
  "description": "Shuts down the HomeServer. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_systemutils",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/downloadAllDockerImages.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
confirm=\$(getArgumentValue confirm "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkConfirm.sh "\$confirm"

echo "Downloading all docker images..."
pullDockerImages

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/downloadAllDockerImages.json
{
  "name": "05 Download All Docker Images",
  "script_path": "conf/scripts/downloadAllDockerImages.sh",
  "description": "Downloads all docker images. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Enter confirm in the box below.",
  "group": "$group_id_systemutils",
  "parameters": [
    {
      "name": "Enter 'confirm' to continue.",
      "required": true,
      "param": "-confirm=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/resetHSHQOpenStatus.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
confirm=\$(getArgumentValue confirm "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkConfirm.sh "\$confirm"

source $HSHQ_LIB_SCRIPT lib
closeHSHQScript
echo "HSHQ status successfully reset."
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/resetHSHQOpenStatus.json
{
  "name": "06 Reset HSHQ Open Status",
  "script_path": "conf/scripts/resetHSHQOpenStatus.sh",
  "description": "Resets the HSHQ open status. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This is a safeguard to ensure only <ins>***ONE***</ins> instance is running at a time. Only reset this state if you are sure no other instances are running in other windows or consoles. Enter confirm in the box below.",
  "group": "$group_id_systemutils",
  "parameters": [
    {
      "name": "Enter 'confirm' to continue.",
      "required": true,
      "param": "-confirm=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/changeConnectionEmail.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selconnection=\$(getArgumentValue selconnection "\$@")
newemail=\$(getArgumentValue newemail "\$@")

set +e
change_id="\$(echo \$selconnection | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
is_changed=false
if [ "\$(checkValidEmail \$newemail)" = "false" ]; then
  echo "ERROR: Invalid email address."
else
  sqlite3 $HSHQ_DB "update connections set EmailAddress='\$newemail' where ID='\$change_id';"
  echo "Email address successfully changed."
  is_changed=true
fi
set -e
performExitFunctions false

if ! [ "\$is_changed" = "true" ]; then
  exit 1
fi
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/changeConnectionEmail.json
{
  "name": "07 Change Connection Email",
  "script_path": "conf/scripts/changeConnectionEmail.sh",
  "description": "Change a connection email. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function will allow you to change any email address in the connections database. Be very careful with any changes, as it will affect where notifications are sent when network changes occur.",
  "group": "$group_id_systemutils",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select connection",
      "required": true,
      "param": "-selconnection=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name,': ',EmailAddress from connections order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter new email address",
      "required": true,
      "param": "-newemail=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/displayAllConnections.sh
#!/bin/bash

source $HSHQ_LIB_SCRIPT lib

echo "  | Name | EmailAddress | NetworkType | PublicKey | IPAddress |"
echo "---------------------------------------------------------------------------------------"
sqlite3 -separator " | " \$HSHQ_DB "select ' ',Name,EmailAddress,NetworkType,PublicKey,IPAddress,' ' from connections order by ID;"
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/displayAllConnections.json
{
  "name": "08 Display All Connections",
  "script_path": "conf/scripts/displayAllConnections.sh",
  "description": "Display all network connections. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function outputs all network connections to the console. If you are hosting a VPN, the output will include all connections that you manage.",
  "group": "$group_id_systemutils"
}

EOFSC

  # 05 Testing
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/sudoPasswordTest.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"

echo "Sudo password is correct."

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/sudoPasswordTest.json
{
  "name": "01 Sudo Password Test",
  "script_path": "conf/scripts/sudoPasswordTest.sh",
  "description": "Checks if sudo (super user do...something) password is correct. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_testing",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/decryptConfigPasswordTest.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"

echo "Config decrypt password is correct."

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/decryptConfigPasswordTest.json
{
  "name": "02 Decrypt Config Password Test",
  "script_path": "conf/scripts/decryptConfigPasswordTest.sh",
  "description": "Checks if config decrypt password is correct. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_testing",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkOpenStatus.sh
#!/bin/bash

source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh

echo "The HSHQ script is not currently open in any other instance."

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/checkOpenStatus.json
{
  "name": "03 Check HSHQ Open Status",
  "script_path": "conf/scripts/checkOpenStatus.sh",
  "description": "Checks if the HSHQ script is open in another instance. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This is a safeguard to ensure only <ins>***ONE***</ins> instance is running at a time. If you need to reset it, go to Reset HSHQ Open Status in System Utils.",
  "group": "$group_id_testing",
  "parameters": []
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkIPAddress.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

ischeckall=\$(getArgumentValue ischeckall "\$@")
ipaddr=\$(getArgumentValue ipaddr "\$@")
cidrlen=\$(getArgumentValue cidrlen "\$@")

set +e
is_check_all=false
if [ "\$ischeckall" = "Yes" ]; then
  is_check_all=true
fi
retVal=\$(isNetworkIntersectOurNetworks "\${ipaddr}/\${cidrlen}" \$is_check_all)
if [ -z "\$retVal" ]; then
  echo -e "\nThere are no network collisions with \${ipaddr}/\${cidrlen}\n"
else
  echo -e "\nNetwork Collision: \$retVal\n"
fi
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/checkIPAddress.json
{
  "name": "04 Check for Network Collision",
  "script_path": "conf/scripts/checkIPAddress.sh",
  "description": "Tests an IP address or subnet for network collisions. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function checks whether the provided IP address or subnet intersects with any of the networks that this HomeServer is on. It does not assert any consequential actions, just performs the tests.<br/><br/>Regarding Check all possible connections - with it set to No, it will only check the network connections directly on this HomeServer. With it set to Yes, it will check any and all connections that this HomeServer manages, i.e. if hosting a VPN, then it will check all User and/or HS Internet connections, which may be on behalf of another device in the network. If the explanation for this distinction is confusing, then ask on the [Forum](https://forum.homeserverhq.com/).<br/><br/>If you want to test a subnet range, then input its CIDR length. For a single IP address, leave it at the default of 32.",
  "group": "$group_id_testing",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Check all possible connections?",
      "required": true,
      "param": "-ischeckall=",
      "same_arg_param": true,
      "type": "list",
      "default": "No",
      "values": [
        "Yes",
        "No"
      ],
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter an IP address",
      "required": true,
      "param": "-ipaddr=",
      "same_arg_param": true,
      "type": "ip4",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "default": { 
        "script": "conf/scripts/generateRandomIP.sh"
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "CIDR length",
      "required": true,
      "param": "-cidrlen=",
      "same_arg_param": true,
      "type": "int",
      "ui": {
        "width_weight": 1
      },
      "default": "32",
      "min": "0",
      "max": "32",
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/checkWireGuardKey.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh

checkkey=\$(getArgumentValue checkkey "\$@")

set +e
retVal=\$(checkValidWireGuardKey "\$checkkey")
if [ "\$retVal" = "true" ]; then
  echo -e "\nThe key is valid.\n"
else
  echo -e "\nThe key is NOT valid.\n"
fi
set -e

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/checkWireGuardKey.json
{
  "name": "05 Check WireGuard Key",
  "script_path": "conf/scripts/checkWireGuardKey.sh",
  "description": "Tests a WireGuard key for validity. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function checks whether the provided key (public/private/preshared) is a valid WireGuard key.",
  "group": "$group_id_testing",
  "parameters": [
    {
      "name": "Enter an key",
      "required": true,
      "param": "-checkkey=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/testPortainer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Testing Portainer"
echo "Getting auth token..."
portainerToken="\$(getPortainerToken -u \$PORTAINER_ADMIN_USERNAME -p \$PORTAINER_ADMIN_PASSWORD)"
if [ \$? -eq 0 ]; then
  echo "Querying stacks..."
  tVal=\$(http --check-status --ignore-stdin --verify=no --timeout=300 --print="b" GET https://127.0.0.1:\$PORTAINER_LOCAL_HTTPS_PORT/api/stacks "Authorization: Bearer \$portainerToken" endpointId==1)
  if [ \$? -eq 0 ]; then
    echo "Succesfully executed query, connection is good!"
  else
    echo "ERROR: There was a problem running a query on the stacks"
  fi
else
  echo "ERROR: Could not get auth token - either there is a problem with the service or bad credentials"
fi

echo "End Test"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/testPortainer.json
{
  "name": "06 Test Portainer Connection",
  "script_path": "conf/scripts/testPortainer.sh",
  "description": "Tests Portainer Connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function tests the connectivity with the Portainer API. It acquires an auth token, then runs a simple query. If you change the admin password (in both Portainer and the config file), then use this function to test it before running any other utilities.",
  "group": "$group_id_testing",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  # 06 My Network
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/myNetworkInviteConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

configname=\$(getArgumentValue configname "\$@")

set +e
if [ -z "\$configname" ]; then
  echo "\$2" > \$HOME/apply_hsv.cnf
else
  echo "\$3" > \$HOME/apply_hsv.cnf
fi
performNetworkInvite "\$HOME/apply_hsv.cnf" "\$configname"
retVal=\$?
rm -f \$HOME/apply_hsv.cnf
performExitFunctions false
exit \$retVal
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/myNetworkInviteConnection.json
{
  "name": "01 Invite to Network",
  "script_path": "conf/scripts/myNetworkInviteConnection.sh",
  "description": "Performs a network invite. [Need Help?](https://forum.homeserverhq.com/)<br/>![HSHQ-Invite.png](/img/HSHQ-Invite.png)To invite a HomeServer or User to your network, you should have recieved an application via email. Paste the contents of the application into the corresponding field below. Ensure to review the details of the application including the email sender. You should <ins>***NEVER***</ins> invite anyone to your network that you do not know and trust. An invitation will be automatically sent to the requesting email address upon execution. The name field only applies to User applications, for your your own internal nomenclature (use the Description that the applicant provided in the email as reference). Names for other connection types will be automatically generated.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter a name for this configuration (User invites only)",
      "required": false,
      "param": "-configname=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the application",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/myNetworkInviteUserConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

configname=\$(getArgumentValue configname "\$@")
requestemailaddress=\$(getArgumentValue requestemailaddress "\$@")
requestinternet=\$(getArgumentValue requestinternet "\$@")
ipaddress=\$(getArgumentValue ipaddress "\$@")
publickey=\$(getArgumentValue publickey "\$@")
presharedkey=\$(getArgumentValue presharedkey "\$@")

req_internet=false
if [ "\$requestinternet" = "Yes" ]; then
  req_internet=true
fi
set +e
createMyNetworkUserInvite "\$requestemailaddress" "\$req_internet" "\$ipaddress" "\$publickey" "\$presharedkey" "\$HOME/apply_hsv.cnf"
retVal=\$?
if [ \$retVal -eq 0 ]; then
  performNetworkInvite "\$HOME/apply_hsv.cnf" "\$configname"
  retVal=\$?
fi
rm -f \$HOME/apply_hsv.cnf
performExitFunctions false
exit \$retVal
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/myNetworkInviteUserConnection.json
{
  "name": "02 Invite User to Network",
  "script_path": "conf/scripts/myNetworkInviteUserConnection.sh",
  "description": "Performs a user invite to your network. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function allows you to skip the application process and jump right to the invitation. If you received an application via email, then it would be easier to use the standard 06 My Network -> 01 Invite to Network function. However, if someone emailed you their public key (and interface IP address), or you are adding a client device to your network, then this utilty can help speed up the process. <ins>***However***</ins>, if this is a new profile with no provided public key, then take the proper precautions as this method will generate and insert the <ins>***ACTUAL***</ins> private key into the configuration, i.e. <ins>***DO NOT***</ins> send this configuration to an email address of a centralized email provider, nor share this configuration over any other public channels. Treat it as <ins>***HIGHLY CONFIDENTIAL***</ins>. <br/>\nIf you are requesting a new profile: \n1. Leave the interface IP address blank.\n2. If the public key is left blank, then a key pair will be generated and included in the configuration.\n\nIf you already have an existing profile:\n1. Include both the interface IP address and the public key of your existing profile.\n2. When the recipient receives the WireGuard configuration via email, append the peer configuration to the existing WireGuard profile.\n\nIf the preshared key is blank in any case, one will be generated.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter a name for this configuration",
      "required": true,
      "param": "-configname=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the requesting email address",
      "required": true,
      "param": "-requestemailaddress=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Request public internet access?",
      "required": true,
      "param": "-requestinternet=",
      "same_arg_param": true,
      "type": "list",
      "default": "No",
      "values": [
        "Yes",
        "No"
      ],
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the interface IP address",
      "required": false,
      "param": "-ipaddress=",
      "same_arg_param": true,
      "type": "ip4",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the public key",
      "required": false,
      "param": "-publickey=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the preshared key",
      "required": false,
      "param": "-presharedkey=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/changeHSPrimaryInternetIP.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

ipaddr=\$(getArgumentValue ipaddr "\$@")

set +e
changeHSInternetPrimaryIPAddress \$ipaddr
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/changeHSPrimaryInternetIP.json
{
  "name": "03 Change Primary HS Int IP",
  "script_path": "conf/scripts/changeHSPrimaryInternetIP.sh",
  "description": "Changes the interface IP address of the primary HomeServer Internet connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>The main use case for this function is in the event of a network collision. If this connection is the cause of the collision, then change it to something else, within the 10.0.0.0/8 range. A new randomly selected value has been generated for you (refresh the page to regenerate a new one). No logic checks will be applied until execution, so even a randomly generated value could result in an error. If so, just try again with a new value (or use the 05 Testing -> 04 Check for Network Collision function to find a non-intersecting IP).",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter a new IP address",
      "required": true,
      "param": "-ipaddr=",
      "same_arg_param": true,
      "type": "ip4",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "default": { 
        "script": "conf/scripts/generateRandomIP.sh"
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/changeUserIP.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selconnection=\$(getArgumentValue selconnection "\$@")
ipaddr=\$(getArgumentValue ipaddr "\$@")

set +e
rem_id="\$(echo \$selconnection | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
changeUserIPAddress \$rem_id \$ipaddr
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/changeUserIP.json
{
  "name": "04 Change User IP",
  "script_path": "conf/scripts/changeUserIP.sh",
  "description": "Changes the interface IP address of a user connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>The main use case for this function is if a user requests a new interface IP address due to a collision. A new randomly selected value has been generated for you (refresh the page to regenerate a new one). No logic checks will be applied until execution, so even a randomly generated value could result in an error. If so, just try again with a new value (or use the 05 Testing -> 04 Check for Network Collision function to find a non-intersecting IP).<br/><br/>Upon a successful change, an email will be automatically sent to the corresponding email address for this connection. If <ins>you</ins> are the one initiating the change, i.e. the user did not request the change, then ensure to confer with them beforehand, since changing it has potential cascading effects on their device's interface peers.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select connection",
      "required": true,
      "param": "-selconnection=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name,' - ',IPAddress from connections where ConnectionType='user' and NetworkType='mynetwork' order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter a new IP address",
      "required": true,
      "param": "-ipaddr=",
      "same_arg_param": true,
      "type": "ip4",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "default": { 
        "script": "conf/scripts/generateRandomIP.sh"
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeHSVPNConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selconnection=\$(getArgumentValue selconnection "\$@")
removeReason="\$3"

set +e
rem_id="\$(echo \$selconnection | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
removeMyNetworkHomeServerVPNConnection \$rem_id "\$removeReason"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeHSVPNConnection.json
{
  "name": "05 Remove HS VPN Connection",
  "script_path": "conf/scripts/removeHSVPNConnection.sh",
  "description": "Removes a HomeServer VPN connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>The reason for removal will be emailed to the manager of the HomeServer being removed.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select connection",
      "required": true,
      "param": "-selconnection=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name from connections where ConnectionType='homeserver_vpn' and NetworkType='mynetwork' order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter a reason for removal",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeHSInternetConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selconnection=\$(getArgumentValue selconnection "\$@")
removeReason="\$3"

set +e
rem_id="\$(echo \$selconnection | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
removeMyNetworkHomeServerInternetConnection "\$rem_id" "\$removeReason"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeHSInternetConnection.json
{
  "name": "06 Remove HS Int Connection",
  "script_path": "conf/scripts/removeHSInternetConnection.sh",
  "description": "Removes a HomeServer Internet connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>The reason for removal will be emailed to the manager of the HomeServer with the internet connection being removed.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select connection",
      "required": true,
      "param": "-selconnection=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name from connections where ConnectionType='homeserver_internet' and NetworkType='mynetwork' order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter a reason for removal",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeUserConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selconnection=\$(getArgumentValue selconnection "\$@")
removeReason="\$3"

set +e
rem_id="\$(echo \$selconnection | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
removeMyNetworkUserConnection "\$rem_id" "\$removeReason"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeUserConnection.json
{
  "name": "07 Remove User Connection",
  "script_path": "conf/scripts/removeUserConnection.sh",
  "description": "Removes a user connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>The reason for removal will be emailed to the user being removed.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select connection",
      "required": true,
      "param": "-selconnection=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name from connections where ConnectionType='user' and NetworkType='mynetwork' order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter a reason for removal",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/emailHomeServersDNSList.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Emailing HomeServers DNS list..."
showEmailMyNetworkHomeServerDNSListNoMenu
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/emailHomeServersDNSList.json
{
  "name": "08 Email HomeServers DNS List",
  "script_path": "conf/scripts/emailHomeServersDNSList.sh",
  "description": "Emails HomeServers DNS list to self. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Emails a list of all HomeServers on your network and their corresponding internal IP addresses to the email manager's mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS). The format of the list is the standard import format for HomeServers.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/emailUsersDNSList.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Emailing HomeServer DNS list for users..."
showEmailMyNetworkHomeServerDNSListClientDNSNoMenu
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/emailUsersDNSList.json
{
  "name": "09 Email Users DNS List",
  "script_path": "conf/scripts/emailUsersDNSList.sh",
  "description": "Emails HomeServers DNS list to self. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Emails a list of all HomeServers on your network and their corresponding internal IP addresses to the email manager's mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS). The format of the list is compatible with DNSMasq (a DNS server that is used for client devices within this ecosystem).",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/emailMyNetworkUserDetails.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Emailing user details..."
sendEmailMyNetworkFullUserDetails
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/emailMyNetworkUserDetails.json
{
  "name": "10 Email User Details",
  "script_path": "conf/scripts/emailMyNetworkUserDetails.sh",
  "description": "Emails user details to self. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Emails the full details for all user connections to the email manager's mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS). The main use case for this function is if you want to tear down and rebuild the primary network. This will allow you to re-add the users to the new network with the same information.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/emailMyNetworkBroadcast.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

strMsg="\$2"
set +e
echo "Emailing broadcast message..."
sendEmailMyNetworkBroadcast "\$strMsg"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/emailMyNetworkBroadcast.json
{
  "name": "11 Email All Broadcast",
  "script_path": "conf/scripts/emailMyNetworkBroadcast.sh",
  "description": "Emails a broadcast message. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function will send a broadcast message to all users and connected devices on your network.",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter the message",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/createClientDNSServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

cdnsname=\$(getArgumentValue cdnsname "\$@")
set +e
echo "Creating ClientDNS Server..."
performMyNetworkCreateClientDNS "\$cdnsname"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/createClientDNSServer.json
{
  "name": "12 Create ClientDNS Server",
  "script_path": "conf/scripts/createClientDNSServer.sh",
  "description": "Creates a ClientDNS server. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Creates a DNS server that can be used by client devices that are connected to multiple networks. This type of DNS server will 'intercept' DNS requests before they fall through to another underlying primary DNS server (the default fallback is the HomeServer's AdguardHome where this ClientDNS is installed). The main use case for this is when a client device is connected to a network to which the HomeServer is <ins>***NOT***</ins> connected. The DNS records for this foreign network cannot be stored on the HomeServer, since it is not on that network and would thus cause errors with the HomeServer's routing logic. A ClientDNS server resolves this problem.<br/><br/>The name for this server must contain 3-10 lowercase alpha-numeric characters, no spaces or special characters. An email containing the setup details will be sent to the email manager's mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS).",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter a name",
      "required": true,
      "param": "-cdnsname=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeClientDNSServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selserver=\$(getArgumentValue selserver "\$@")
set +e
ss_id="\$(echo \$selserver | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
ss_name="\$(echo \$selserver | cut -d ')' -f2 | sed 's/ //g')"
performMyNetworkRemoveClientDNS "\$ss_id" "\$ss_name" true true
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeClientDNSServer.json
{
  "name": "13 Remove ClientDNS Server",
  "script_path": "conf/scripts/removeClientDNSServer.sh",
  "description": "Removes a ClientDNS server. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select server",
      "required": true,
      "param": "-selserver=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name from connections where ConnectionType='clientdns' and NetworkType='mynetwork' order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removePrimaryVPNConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

disconnectReason="\$3"

set +e
removeMyNetworkPrimaryVPN "\$disconnectReason"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removePrimaryVPNConnection.json
{
  "name": "14 Remove Primary VPN",
  "script_path": "conf/scripts/removePrimaryVPNConnection.sh",
  "description": "Complete removal of primary VPN. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>If you are hosting a VPN, this will: \n1. Remove all HomeServers from your network.\n2. Delete all ClientDNS servers and data.\n3. Disconnect you from your RelayServer and delete its local backup data.\n4. Disable sending/receiving external email.\n5. In short, <ins>***TOTAL HOSTED VPN DESTRUCTION***</ins>\n\nIf you have joined this VPN as primary, this will: \n1. Disconnect you from this network.\n2. Disable sending/receiving external email.\n\nThis operation will not affect any other networks on which you are currently hosting, although you will be without external email services. The reason for disconnect/removal will be emailed to all HomeServers and clients on the network (before dismantling).",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter a reason for disconnect/removal",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/uploadHomeServerLogo.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

img=\$(getArgumentValue img "\$@")
uploadHomeServerLogo "\$img"
performExitFunctions false
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/uploadHomeServerLogo.json
{
  "name": "15 Upload HomeServer Logo",
  "script_path": "conf/scripts/uploadHomeServerLogo.sh",
  "description": "Upload HomeServer Logo. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function uploads the logo image for your HomeServer as shown in the HomeServers section of the home page. It will also replace the file $HSHQ_ASSETS_DIR/images/${HOMESERVER_DOMAIN}.png, and your logo will be displayed on other networks accordingly (given that the other manager(s) run the 06 My Network -> 16 Update HomeServer Logos function). The image must be a .png and it can be no larger than 1MB (1024 KB).",
  "group": "$group_id_mynetwork",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select Image",
      "required": true,
      "param": "-img=",
      "same_arg_param": true,
      "type": "file_upload",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/updateHomeServerLogoImages.sh
#!/bin/bash

source $HSHQ_LIB_SCRIPT lib
updateHomeServerLogoImages

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/updateHomeServerLogoImages.json
{
  "name": "16 Update HomeServer Logos",
  "script_path": "conf/scripts/updateHomeServerLogoImages.sh",
  "description": "Updates HomeServer Logos. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function downloads the logo images for each of the HomeServers shown in the HomeServers section of the home page. If you wish to set the logo image for your own HomeServer, then run the 06 My Network -> 15 Upload HomeServer Logo function and select the image of your choice, and your logo will be displayed on other networks accordingly (given that the other manager(s) run this function). The downloaded images must be in .png format and can be no larger than 1MB (1024 KB).",
  "group": "$group_id_mynetwork",
  "parameters": []
}

EOFSC

  # 07 Other Networks
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/applyHSVPNConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

applyemailaddress=\$(getArgumentValue applyemailaddress "\$@")

set +e
sendOtherNetworkApplyHomeServerVPNConfig "\$applyemailaddress" false ""
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/applyHSVPNConnection.json
{
  "name": "01 HS VPN Application",
  "script_path": "conf/scripts/applyHSVPNConnection.sh",
  "description": "Generates and sends a HomeServer VPN application to the recipient email address. [Need Help?](https://forum.homeserverhq.com/)<br/>![HSHQ-ApplyJoin.png](/img/HSHQ-ApplyJoin.png)A HomeServer VPN connection will allow you to host selected services on the private network to which you are applying. The recipient email should be the network administrator of that network. Ensure to double check the email address, as this will automatically send the application upon execution. You will also receive a manager (MGR) copy of this request in your admin mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS). Upon approval, you will recieve a join invitation via email. Go to the Join Network function with the invitation to finalize the connection.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter the recipient email address",
      "required": true,
      "param": "-applyemailaddress=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/applyHSInternetConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

applyemailaddress=\$(getArgumentValue applyemailaddress "\$@")

set +e
sendOtherNetworkApplyHomeServerInternetConfig "\${applyemailaddress}"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/applyHSInternetConnection.json
{
  "name": "02 HS Internet Application",
  "script_path": "conf/scripts/applyHSInternetConnection.sh",
  "description": "Generates and sends a HomeServer internet application to the recipient email address. [Need Help?](https://forum.homeserverhq.com/)<br/>![HSHQ-ApplyJoin.png](/img/HSHQ-ApplyJoin.png)A HomeServer internet connection will allow you to masquerade your internet IP address for a docker network (and thus specific docker containers) on your HomeServer via the RelayServer of the network to which you are applying. The recipient email should be the network administrator of that network. Ensure to double check the email address, as this will automatically send the application upon execution. You will also receive a manager (MGR) copy of this request in your admin mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS). Upon approval, you will recieve a join invitation via email. Go to the Join Network function with the invitation to finalize the connection.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter the recipient email address",
      "required": true,
      "param": "-applyemailaddress=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/applyUserConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

applyemailaddress=\$(getArgumentValue applyemailaddress "\$@")
requestemailaddress=\$(getArgumentValue requestemailaddress "\$@")
requestinternet=\$(getArgumentValue requestinternet "\$@")
ipaddress=\$(getArgumentValue ipaddress "\$@")
publickey=\$(getArgumentValue publickey "\$@")
description=\$(getArgumentValue description "\$@")

req_internet=false
if [ "\$requestinternet" = "Yes" ]; then
  req_internet=true
fi
set +e
sendOtherNetworkApplyUserConfig "\$applyemailaddress" "\$requestemailaddress" "\$req_internet" "\$ipaddress" "\$publickey" "\$description"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/applyUserConnection.json
{
  "name": "03 User Connection Application",
  "script_path": "conf/scripts/applyUserConnection.sh",
  "description": "Generates and sends a user application to the recipient email address. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>A user application is specifically for a client device (desktop, laptop, mobile, etc.) to access the private network to which you are applying. The recipient email should be the network administrator of that network. Ensure to double check all of the inputs, as this will automatically send the application upon execution. Also ensure the client device has access to the requesting email in order to be notified of updates to the network. If you request public internet access and it is approved, then you can masquerade your internet traffic for the device via the RelayServer of that network. The description field is to convey what the connection will be used for, i.e. My cellphone, Home desktop, etc.<br/>\nIf you are requesting a new profile: \n1. Leave the interface IP address blank.\n2. If the public key is left blank, then a key pair will be generated and the private key will be sent to the requesting email.\n3. When the requestor receives the invitation to the network, they must marry their private key back into the provided WireGuard configuration (replacing the one provided).\n\nIf you are making a request on an existing profile:\n1. Include both the interface IP address and the public key of the existing profile.\n2. When the WireGuard configuration is received via email, append the peer configuration to the existing WireGuard profile.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter the recipient email address",
      "required": true,
      "param": "-applyemailaddress=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the requesting email address",
      "required": true,
      "param": "-requestemailaddress=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter a description",
      "required": true,
      "param": "-description=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Request public internet access?",
      "required": true,
      "param": "-requestinternet=",
      "same_arg_param": true,
      "type": "list",
      "default": "No",
      "values": [
        "Yes",
        "No"
      ],
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the interface IP address",
      "required": false,
      "param": "-ipaddress=",
      "same_arg_param": true,
      "type": "ip4",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the public key",
      "required": false,
      "param": "-publickey=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/applyHSVPNPrimaryConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

lecertsubs=\$(getArgumentValue lecertsubs "\$@")

set +e
sendOtherNetworkApplyHomeServerVPNConfig "na" true "\$lecertsubs"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/applyHSVPNPrimaryConnection.json
{
  "name": "04 Primary VPN Application",
  "script_path": "conf/scripts/applyHSVPNPrimaryConnection.sh",
  "description": "Generates a HomeServer primary VPN application. [Need Help?](https://forum.homeserverhq.com/)<br/>![HSHQ-ApplyJoin.png](/img/HSHQ-ApplyJoin.png)A primary VPN connection will allow you to host selected services as well as route your email. This function is specifically for joining a pre-existing network managed by someone you know and trust. You must point the DNS records on the domain name provider for your domain to the RelayServer of this network. Upon execution, you will receive the application in your admin mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS). Since this is your primary VPN, which will route your email, you will have to use other means to send the application. There is nothing confidential in the application, it can be safely transmitted on any 3rd party medium (i.e. a centralized email provider, etc.). Upon approval, you will need to obtain the join invitation from the administrator of the network which you are applying (perhaps through the same means with which this application is transferred). Go to the Join Network function with the invitation to finalize the connection.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter the LE cert subdomains",
      "required": true,
      "param": "-lecertsubs=",
      "same_arg_param": true,
      "type": "text",
      "default": "$(getLetsEncryptCertsDefault)",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/joinNetwork.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "\$3" > \$HOME/join_hsv.cnf
performNetworkJoin true \$HOME/join_hsv.cnf
rm -f \$HOME/join_hsv.cnf

set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/joinNetwork.json
{
  "name": "05 Join Network",
  "script_path": "conf/scripts/joinNetwork.sh",
  "description": "Joins a network via a provided configuration. [Need Help?](https://forum.homeserverhq.com/)<br/>![HSHQ-ApplyJoin.png](/img/HSHQ-ApplyJoin.png)This is the third and final step in establishing a connection with a private network. This function can be used for either a HomeServer VPN or HomeServer Internet connection. Paste the contents of the invitation you received via email into the corresponding field below. The private key that was generated during the application step will be automatically married back into this configuration based on the request ID.<br/><br/>Ensure to review the details of the invitation, specifically the email sender. You should <ins>***NEVER***</ins> just paste and execute an invitation from someone that you do not know and trust. There are safeguards that will help mitigate spoofing, but nothing is ever guaranteed.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter the invitation",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/disconnectVPNConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selconnection=\$(getArgumentValue selconnection "\$@")
disconnectReason="\$4"

set +e
dis_id="\$(echo \$selconnection | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
disconnectOtherNetworkHomeServerVPNConnection \$dis_id "\$disconnectReason"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/disconnectVPNConnection.json
{
  "name": "06 Disconnect VPN Connection",
  "script_path": "conf/scripts/disconnectVPNConnection.sh",
  "description": "Disconnect a HomeServer VPN connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>The reason for disconnecting will be emailed to the manager of the network.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select connection",
      "required": true,
      "param": "-selconnection=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name from connections where ConnectionType='homeserver_vpn' and NetworkType='other' order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter a reason for disconnecting",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/disconnectInternetConnection.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

selconnection=\$(getArgumentValue selconnection "\$@")
disconnectReason="\$4"

set +e
dis_id="\$(echo \$selconnection | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"
disconnectOtherNetworkHomeServerInternetConnection "\$dis_id" "\$disconnectReason"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/disconnectInternetConnection.json
{
  "name": "07 Disconnect Int Connection",
  "script_path": "conf/scripts/disconnectInternetConnection.sh",
  "description": "Disconnect a HomeServer internet connection. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>The reason for disconnecting will be emailed to the manager of the network.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select connection",
      "required": true,
      "param": "-selconnection=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',Name from connections where ConnectionType='homeserver_internet' and NetworkType='other' order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter a reason for disconnecting",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/updateHomeServerDNS.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Updating HomeServer DNS..."
echo "\$2" > \$HOME/dns.tmp
updateHomeServerDNS \$HOME/dns.tmp
rm -f \$HOME/dns.tmp
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/updateHomeServerDNS.json
{
  "name": "08 Update HomeServer DNS",
  "script_path": "conf/scripts/updateHomeServerDNS.sh",
  "description": "Update HomeServer DNS. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function allows you to update the DNS records for servers on other networks on which you are hosting. You do not need to use this for changes to your network, only changes to other networks. You should receive notices to update via email. Paste the indicated section within the email into the DNS config field below.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter DNS config",
      "required": true,
      "type": "multiline_text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/syncAdguardDNS.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Sync Adguard DNS server from database..."
syncAdguardDNSFromDB
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/syncAdguardDNS.json
{
  "name": "09 Sync Adguard DNS Server",
  "script_path": "conf/scripts/syncAdguardDNS.sh",
  "description": "Sync Adguard DNS server from database. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function sychronizes the DNS records from the database to the primary DNS server (Adguard). This should rarely if ever be needed. However, if you accidentally make changes to your Adguard server, or perhaps some other unforeseen circumstance, then this can restore back to the correct values.",
  "group": "$group_id_othernetworks",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  # 08 RelayServer Utils
  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/addDomainToRelayServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

adddomain=\$(getArgumentValue adddomain "\$@")
mailsubdomain=\$(getArgumentValue mailsubdomain "\$@")
ms_id="\$(echo \$mailsubdomain | cut -d ')' -f1 | sed 's/(//g' | sed 's/ //g')"

set +e
echo "Adding \$adddomain with ID: \$ms_id"
addSecondaryDomainToRelayServer "\$adddomain" "\$ms_id"
retVal=\$?
set -e
performExitFunctions false
exit \$retVal
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/addDomainToRelayServer.json
{
  "name": "01 Add Secondary Domain",
  "script_path": "conf/scripts/addDomainToRelayServer.sh",
  "description": "Adds a new secondary domain to the RelayServer. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function will add the domain entered below to the RelayServer. It will forward the mail sent to this domain to the selected mail subdomain, and configure the internal DNS records to point to the same corresponding HomeServer. Only HomeServers that use this network as their primary network can be selected.<br/>\nAdding a secondary domain requires three steps:\n1. Add the domain using <ins>this</ins> function. Upon execution, the DNS info will be sent to the email manager's mailbox ($EMAIL_ADMIN_EMAIL_ADDRESS).\n2. Using the DNS info from Step 1, update the DNS records at the domain name provider for the new domain.\n3. Add the domain to Mailu, in order to send/receive email on this domain. Using Mailu web interface: Sign in Admin -> Mail domains (left sidebar) -> New domain (top right corner).",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter domain name",
      "required": true,
      "param": "-adddomain=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the internal mail subdomain",
      "required": true,
      "param": "-mailsubdomain=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select '(',ID,') ',MailHost from mailhosts order by ID asc;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeDomainFromRelayServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

seldomain=\$(getArgumentValue seldomain "\$@")

dom_only="\$(echo \$seldomain | cut -d '(' -f1 | sed 's/ //g')"

set +e
echo "Removing \$dom_only..."
removeSecondaryDomainFromRelayServer "\$dom_only"
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeDomainFromRelayServer.json
{
  "name": "02 Remove Secondary Domain",
  "script_path": "conf/scripts/removeDomainFromRelayServer.sh",
  "description": "Removes a secondary domain from the RelayServer. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This will also remove any LetsEncrypt paths and exposed (sub)domains on this domain as well.",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter domain name",
      "required": true,
      "param": "-seldomain=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select Domain,' (',MailHost,')' from mailhostmap join mailhosts on mailhostmap.MailHostID = mailhosts.ID where IsFirstDomain=false order by mailhostmap.MailHostID;\" | sed 's/|//g'",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/addLEDomainToRelayServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

adddomain=\$(getArgumentValue adddomain "\$@")
basedom=\$(getArgumentValue basedom "\$@")

is_err=false
if [ -z "\$adddomain" ]; then
  add_domain="\$basedom"
else
  if ! [ \$(checkValidString "\$adddomain" "-") = "false" ]; then
    add_domain="\$adddomain.\$basedom"
  else
    echo "ERROR: Invalid subdomain name"
    is_err=true
  fi
fi
if [ "\$is_err" = "false" ]; then
  set +e
  echo "Adding LetsEncrypt subdomain..."
  addLECertPathsToRelayServer "\$add_domain" "\$basedom"
  retVal=\$?
else
  retVal=2
fi
set -e
performExitFunctions false
exit \$retVal

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/addLEDomainToRelayServer.json
{
  "name": "03 Add LE Subdomain",
  "script_path": "conf/scripts/addLEDomainToRelayServer.sh",
  "description": "Add subdomain to be managed by LetsEncrypt. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Due to certificate trust chain issues with certain apps, typically mobile apps, there are particular cases where a service needs to serve a certificate chain that is signed by a non-custom Root CA. This function will add the requisite forwarding path on the RelayServer for a LetsEncrypt http challenge and allow the internal certificate to be managed by LetsEncrypt. There are more manual steps on the HomeServer side to fully enable LE cert management for a particular service. This function merely adds the path on the RelayServer. The services that are known to (or potentially) have these issues are already implemented by default.<br/>\nSelect the base domain, then enter only the subdomain portion in the subsequent field, i.e. without the base domain.",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select the base domain",
      "required": true,
      "param": "-basedom=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select Domain from mailhostmap order by MailHostID asc, IsFirstDomain desc;\"",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter the subdomain",
      "required": true,
      "param": "-adddomain=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeLEDomainFromRelayServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

seldomain=\$(getArgumentValue seldomain "\$@")
set +e
echo "Removing LetsEncrypt subdomain..."
removeLECertPathsFromRelayServer "\$seldomain"
retVal=\$?
set -e
performExitFunctions false
exit \$retVal
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeLEDomainFromRelayServer.json
{
  "name": "04 Remove LE Subdomain",
  "script_path": "conf/scripts/removeLEDomainFromRelayServer.sh",
  "description": "Removes path for LetsEncrypt from RelayServer. [Need Help?](https://forum.homeserverhq.com/)",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select the base domain",
      "required": true,
      "param": "-basedom=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select BaseDomain from lecertdomains group by BaseDomain;\"",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Select the (sub)domain",
      "required": true,
      "param": "-seldomain=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select Domain from lecertdomains where BaseDomain='\${Select the base domain}';\"",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/addExposeDomainToRelayServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

adddomain=\$(getArgumentValue adddomain "\$@")
basedom=\$(getArgumentValue basedom "\$@")

is_err=false
if [ -z "\$adddomain" ]; then
  add_domain="\$basedom"
else
  if ! [ \$(checkValidString "\$adddomain" "-") = "false" ]; then
    add_domain="\$adddomain.\$basedom"
  else
    echo "ERROR: Invalid subdomain name"
    is_err=true
  fi
fi
if [ "\$is_err" = "false" ]; then
  set +e
  echo "Adding exposed domain..."
  addExposeDomainPathsToRelayServer "\$add_domain" "\$basedom"
  retVal=\$?
else
  retVal=2
fi
set -e
performExitFunctions false
exit \$retVal
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/addExposeDomainToRelayServer.json
{
  "name": "05 Add Exposed Subdomain",
  "script_path": "conf/scripts/addExposeDomainToRelayServer.sh",
  "description": "Adds an exposed (sub)domain to the RelayServer. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>This function allows you to expose a particular service on your HomeServer to the public internet. <ins>***Be very careful***</ins> with this capability as it will allow anyone on the internet to access the service that you expose. It will also automatically request (free)certificates for this (sub)domain from ZeroSSL on the RelayServer upon execution. Also note that for security reasons, some services are protected behind Authelia. So you can either expose Authelia to maintain that same security wall, or move the particular service into bypass mode in the Authelia configuration.<br/>\nSelect the base domain, then enter only the subdomain portion in the provided field below (all lowercase), i.e. www, filebrowser, etc. If the subdomain field is left blank, then the base domain will be added (you will need the base domain added if exposing Mastodon and/or Matrix (Synapse) for federation purposes).<br/>\nTo figure out what the subdomain is for a particular service, look in the address bar in your browser when accessing the service on your HomeServer. For example, if you wanted to expose Mealie, you should see https://mealie.$HOMESERVER_DOMAIN/ in the address bar, thus the subdomain is mealie.",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select the base domain",
      "required": true,
      "param": "-basedom=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select Domain from mailhostmap order by MailHostID asc, IsFirstDomain desc;\"",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Enter subdomain",
      "required": false,
      "param": "-adddomain=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/removeExposeDomainFromRelayServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

seldomain=\$(getArgumentValue seldomain "\$@")
set +e
echo "Removing exposed domain..."
removeExposeDomainPathsFromRelayServer "\$seldomain"
retVal=\$?
set -e
performExitFunctions false
exit \$retVal
EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/removeExposeDomainFromRelayServer.json
{
  "name": "06 Remove Exposed Subdomain",
  "script_path": "conf/scripts/removeExposeDomainFromRelayServer.sh",
  "description": "Removes an exposed (sub)domain from RelayServer. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Select the base domain",
      "required": true,
      "param": "-basedom=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select BaseDomain from exposedomains group by BaseDomain;\"",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    },
    {
      "name": "Select the (sub)domain",
      "required": true,
      "param": "-seldomain=",
      "same_arg_param": true,
      "type": "list",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "values": {
        "script": "sqlite3 $HSHQ_DB \"select Domain from exposedomains where BaseDomain='\${Select the base domain}';\"",
        "shell": true
      },
      "secure": false,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/resetCaddyDNSRelayServer.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

set +e
echo "Resetting Caddy data on RelayServer..."
resetCaddyDataRelayServer false
set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/resetCaddyDNSRelayServer.json
{
  "name": "07 Reset Caddy Data",
  "script_path": "conf/scripts/resetCaddyDNSRelayServer.sh",
  "description": "Reset Caddy data on RelayServer. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>Clears out all data for the RelayServer Caddy instance and restarts the stack. This should only be used as a last resort if you encountering continual issues that do not resolve after restarting the stack.",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/scripts/hostVPN.sh
#!/bin/bash

source $HSHQ_STACKS_DIR/script-server/conf/scripts/argumentUtils.sh
sudopw=\$(getArgumentValue sudopw "\$@")
configpw=\$(getArgumentValue configpw "\$@")
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkPass.sh "\$sudopw"
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkDecrypt.sh "\$configpw"
source $HSHQ_LIB_SCRIPT lib
source $HSHQ_STACKS_DIR/script-server/conf/scripts/checkHSHQOpenStatus.sh
decryptConfigFileAndLoadEnvNoPrompts "\$configpw"

cursshport=\$(getArgumentValue cursshport "\$@")
curusername=\$(getArgumentValue curusername "\$@")
curuserpass=\$(getArgumentValue curuserpass "\$@")
newsshport=\$(getArgumentValue newsshport "\$@")
newusername=\$(getArgumentValue newusername "\$@")
newuserpass=\$(getArgumentValue newuserpass "\$@")

set +e

set -e
performExitFunctions false

EOFSC

  cat <<EOFSC > $HSHQ_STACKS_DIR/script-server/conf/runners/hostVPN.json
{
  "name": "05 Host VPN",
  "script_path": "conf/scripts/hostVPN.sh",
  "description": "Host a VPN. [Need Help?](https://forum.homeserverhq.com/)<br/><br/>",
  "group": "$group_id_relayserver",
  "parameters": [
    {
      "name": "Enter sudo password",
      "required": true,
      "param": "-sudopw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter config decrypt password",
      "required": true,
      "param": "-configpw=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter current SSH port",
      "required": true,
      "param": "-cursshport=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter current username",
      "required": true,
      "param": "-curusername=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter current user password",
      "required": true,
      "param": "-curuserpass=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter new SSH port",
      "required": true,
      "param": "-newsshport=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter new username",
      "required": true,
      "param": "-newusername=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    },
    {
      "name": "Enter new user password",
      "required": true,
      "param": "-newuserpass=",
      "same_arg_param": true,
      "type": "text",
      "ui": {
        "width_weight": 2,
        "separator_before": {
          "type": "new_line"
        }
      },
      "secure": true,
      "pass_as": "argument"
    }
  ]
}

EOFSC

  # Need to do a bit more work to migrate this function to web UI.
  rm -f $HSHQ_STACKS_DIR/script-server/conf/scripts/hostVPN.sh
  rm -f $HSHQ_STACKS_DIR/script-server/conf/runners/hostVPN.json
  # Also need to add transfer primary VPN function

  # Set permissions
  chmod 700 $HSHQ_STACKS_DIR/script-server/conf/scripts/*
  chmod 600 $HSHQ_STACKS_DIR/script-server/conf/runners/*
}

function outputStackListsScriptServer()
{
  echo ${HSHQ_REQUIRED_STACKS},${HSHQ_OPTIONAL_STACKS} | sed "s|,|\n|g" > $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_FULL_STACKLIST_FILENAME
  sort -o $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_FULL_STACKLIST_FILENAME $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_FULL_STACKLIST_FILENAME
  echo ${HSHQ_OPTIONAL_STACKS} | sed "s|,|\n|g" > $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_OPTIONAL_STACKLIST_FILENAME
  sort -o $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_OPTIONAL_STACKLIST_FILENAME $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_OPTIONAL_STACKLIST_FILENAME
  echo $(getStacksToUpdate) | sed "s|,|\n|g" > $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_UPDATE_STACKLIST_FILENAME
  sort -o $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_UPDATE_STACKLIST_FILENAME $HSHQ_STACKS_DIR/script-server/conf/$SCRIPTSERVER_UPDATE_STACKLIST_FILENAME
}

# SQLPad
function installSQLPad()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory sqlpad "SQLPad"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_SQLPAD
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/sqlpad
  initServicesCredentials
  SQLPAD_PASSPHRASE=$(pwgen -c -n 64 1)
  generateCert sqlpad sqlpad
  outputConfigSQLPad
  installStack sqlpad sqlpad "Welcome to SQLPad" $HOME/sqlpad.env 5
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_SQLPAD.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://sqlpad:3000 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_SQLPAD $MANAGETLS_SQLPAD "$is_integrate_hshq" $NETDEFAULT_SQLPAD "$inner_block"
  if ! [ "$is_integrate_hshq" = "false" ]; then
    insertEnableSvcAll sqlpad "$FMLNAME_SQLPAD" $USERTYPE_SQLPAD "https://$SUB_SQLPAD.$HOMESERVER_DOMAIN" "sqlpad.png"
    restartAllCaddyContainers
  fi
}

function outputConfigSQLPad()
{
  cat <<EOFSP > $HOME/sqlpad-compose.yml
$STACK_VERSION_PREFIX sqlpad $(getScriptStackVersion sqlpad)
version: '3.5'

services:
  sqlpad:
    image: $(getScriptImageByContainerName sqlpad)
    container_name: sqlpad
    hostname: sqlpad
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-dbs-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/sqlpad.crt:/certs/sqlpad.crt
      - \${HSHQ_SSL_DIR}/sqlpad.key:/certs/sqlpad.key
      - \${HSHQ_STACKS_DIR}/sqlpad:/var/lib/sqlpad

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-dbs-net:
    name: dock-dbs
    external: true
EOFSP

  cat <<EOFSP > $HOME/sqlpad.env
SQLPAD_ADMIN=$SQLPAD_ADMIN_USERNAME
SQLPAD_ADMIN_PASSWORD=$SQLPAD_ADMIN_PASSWORD
SQLPAD_APP_LOG_LEVEL=info
SQLPAD_WEB_LOG_LEVEL=info
SQLPAD_ALLOW_CSV_DOWNLOAD=true
SQLPAD_EDITOR_WORD_WRAP=false
SQLPAD_HTTPS_CERT_PATH=/certs/sqlpad.crt
SQLPAD_HTTPS_KEY_PATH=/certs/sqlpad.key
SQLPAD_PASSPHRASE=$SQLPAD_PASSPHRASE
SQLPAD_CONNECTIONS__discourse__name=Discourse
SQLPAD_CONNECTIONS__discourse__driver=postgres
SQLPAD_CONNECTIONS__discourse__host=discourse-db
SQLPAD_CONNECTIONS__discourse__database=$DISCOURSE_DATABASE_NAME
SQLPAD_CONNECTIONS__discourse__username=$DISCOURSE_DATABASE_USER
SQLPAD_CONNECTIONS__discourse__password=$DISCOURSE_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__discourse__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__discourse__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__firefly__name=Firefly
SQLPAD_CONNECTIONS__firefly__driver=postgres
SQLPAD_CONNECTIONS__firefly__host=firefly-db
SQLPAD_CONNECTIONS__firefly__database=$FIREFLY_DATABASE_NAME
SQLPAD_CONNECTIONS__firefly__username=$FIREFLY_DATABASE_USER
SQLPAD_CONNECTIONS__firefly__password=$FIREFLY_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__firefly__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__firefly__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__freshrss__name=FreshRSS
SQLPAD_CONNECTIONS__freshrss__driver=postgres
SQLPAD_CONNECTIONS__freshrss__host=freshrss-db
SQLPAD_CONNECTIONS__freshrss__database=$FRESHRSS_DATABASE_NAME
SQLPAD_CONNECTIONS__freshrss__username=$FRESHRSS_DATABASE_USER
SQLPAD_CONNECTIONS__freshrss__password=$FRESHRSS_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__freshrss__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__freshrss__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__ghost__name=Ghost
SQLPAD_CONNECTIONS__ghost__driver=mysql
SQLPAD_CONNECTIONS__ghost__host=ghost-db
SQLPAD_CONNECTIONS__ghost__database=$GHOST_DATABASE_NAME
SQLPAD_CONNECTIONS__ghost__username=$GHOST_DATABASE_USER
SQLPAD_CONNECTIONS__ghost__password=$GHOST_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__ghost__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__ghost__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__gitea__name=Gitea
SQLPAD_CONNECTIONS__gitea__driver=postgres
SQLPAD_CONNECTIONS__gitea__host=gitea-db
SQLPAD_CONNECTIONS__gitea__database=$GITEA_DATABASE_NAME
SQLPAD_CONNECTIONS__gitea__username=$GITEA_DATABASE_USER
SQLPAD_CONNECTIONS__gitea__password=$GITEA_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__gitea__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__gitea__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__gitlab__name=Gitlab
SQLPAD_CONNECTIONS__gitlab__driver=postgres
SQLPAD_CONNECTIONS__gitlab__host=gitlab-db
SQLPAD_CONNECTIONS__gitlab__database=$GITLAB_DATABASE_NAME
SQLPAD_CONNECTIONS__gitlab__username=$GITLAB_DATABASE_USER
SQLPAD_CONNECTIONS__gitlab__password=$GITLAB_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__gitlab__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__gitlab__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__guacamole__name=Guacamole
SQLPAD_CONNECTIONS__guacamole__driver=mysql
SQLPAD_CONNECTIONS__guacamole__host=guacamole-db
SQLPAD_CONNECTIONS__guacamole__database=$GUACAMOLE_DATABASE_NAME
SQLPAD_CONNECTIONS__guacamole__username=$GUACAMOLE_DATABASE_USER
SQLPAD_CONNECTIONS__guacamole__password=$GUACAMOLE_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__guacamole__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__guacamole__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__homeassistant__name=HomeAssistant
SQLPAD_CONNECTIONS__homeassistant__driver=postgres
SQLPAD_CONNECTIONS__homeassistant__host=homeassistant-db
SQLPAD_CONNECTIONS__homeassistant__database=$HOMEASSISTANT_DATABASE_NAME
SQLPAD_CONNECTIONS__homeassistant__username=$HOMEASSISTANT_DATABASE_USER
SQLPAD_CONNECTIONS__homeassistant__password=$HOMEASSISTANT_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__homeassistant__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__homeassistant__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__huginn__name=Huginn
SQLPAD_CONNECTIONS__huginn__driver=postgres
SQLPAD_CONNECTIONS__huginn__host=huginn-db
SQLPAD_CONNECTIONS__huginn__database=$HUGINN_DATABASE_NAME
SQLPAD_CONNECTIONS__huginn__username=$HUGINN_DATABASE_USER
SQLPAD_CONNECTIONS__huginn__password=$HUGINN_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__huginn__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__huginn__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__invidious__name=Invidious
SQLPAD_CONNECTIONS__invidious__driver=postgres
SQLPAD_CONNECTIONS__invidious__host=invidious-db
SQLPAD_CONNECTIONS__invidious__database=$INVIDIOUS_DATABASE_NAME
SQLPAD_CONNECTIONS__invidious__username=$INVIDIOUS_DATABASE_USER
SQLPAD_CONNECTIONS__invidious__password=$INVIDIOUS_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__invidious__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__invidious__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__keila__name=Keila
SQLPAD_CONNECTIONS__keila__driver=postgres
SQLPAD_CONNECTIONS__keila__host=keila-db
SQLPAD_CONNECTIONS__keila__database=$KEILA_DATABASE_NAME
SQLPAD_CONNECTIONS__keila__username=$KEILA_DATABASE_USER
SQLPAD_CONNECTIONS__keila__password=$KEILA_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__keila__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__keila__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__linkwarden__name=Linkwarden
SQLPAD_CONNECTIONS__linkwarden__driver=postgres
SQLPAD_CONNECTIONS__linkwarden__host=linkwarden-db
SQLPAD_CONNECTIONS__linkwarden__database=$LINKWARDEN_DATABASE_NAME
SQLPAD_CONNECTIONS__linkwarden__username=$LINKWARDEN_DATABASE_USER
SQLPAD_CONNECTIONS__linkwarden__password=$LINKWARDEN_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__linkwarden__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__linkwarden__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__mastodon__name=Mastodon
SQLPAD_CONNECTIONS__mastodon__driver=postgres
SQLPAD_CONNECTIONS__mastodon__host=mastodon-db
SQLPAD_CONNECTIONS__mastodon__database=$MASTODON_DATABASE_NAME
SQLPAD_CONNECTIONS__mastodon__username=$MASTODON_DATABASE_USER
SQLPAD_CONNECTIONS__mastodon__password=$MASTODON_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__mastodon__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__mastodon__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__matrix__name=Matrix
SQLPAD_CONNECTIONS__matrix__driver=postgres
SQLPAD_CONNECTIONS__matrix__host=matrix-db
SQLPAD_CONNECTIONS__matrix__database=$MATRIX_DATABASE_NAME
SQLPAD_CONNECTIONS__matrix__username=$MATRIX_DATABASE_USER
SQLPAD_CONNECTIONS__matrix__password=$MATRIX_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__matrix__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__matrix__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__mealie__name=Mealie
SQLPAD_CONNECTIONS__mealie__driver=postgres
SQLPAD_CONNECTIONS__mealie__host=mealie-db
SQLPAD_CONNECTIONS__mealie__database=$MEALIE_DATABASE_NAME
SQLPAD_CONNECTIONS__mealie__username=$MEALIE_DATABASE_USER
SQLPAD_CONNECTIONS__mealie__password=$MEALIE_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__mealie__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__mealie__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__nextcloud__name=Nextcloud
SQLPAD_CONNECTIONS__nextcloud__driver=postgres
SQLPAD_CONNECTIONS__nextcloud__host=nextcloud-db
SQLPAD_CONNECTIONS__nextcloud__database=$NEXTCLOUD_DATABASE_NAME
SQLPAD_CONNECTIONS__nextcloud__username=$NEXTCLOUD_DATABASE_USER
SQLPAD_CONNECTIONS__nextcloud__password=$NEXTCLOUD_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__nextcloud__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__nextcloud__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__paperless__name=Paperless
SQLPAD_CONNECTIONS__paperless__driver=postgres
SQLPAD_CONNECTIONS__paperless__host=paperless-db
SQLPAD_CONNECTIONS__paperless__database=$PAPERLESS_DATABASE_NAME
SQLPAD_CONNECTIONS__paperless__username=$PAPERLESS_DATABASE_USER
SQLPAD_CONNECTIONS__paperless__password=$PAPERLESS_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__paperless__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__paperless__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__peertube__name=PeerTube
SQLPAD_CONNECTIONS__peertube__driver=postgres
SQLPAD_CONNECTIONS__peertube__host=peertube-db
SQLPAD_CONNECTIONS__peertube__database=$PEERTUBE_DATABASE_NAME
SQLPAD_CONNECTIONS__peertube__username=$PEERTUBE_DATABASE_USER
SQLPAD_CONNECTIONS__peertube__password=$PEERTUBE_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__peertube__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__peertube__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__photoprism__name=PhotoPrism
SQLPAD_CONNECTIONS__photoprism__driver=mysql
SQLPAD_CONNECTIONS__photoprism__host=photoprism-db
SQLPAD_CONNECTIONS__photoprism__database=$PHOTOPRISM_DATABASE_NAME
SQLPAD_CONNECTIONS__photoprism__username=$PHOTOPRISM_DATABASE_USER
SQLPAD_CONNECTIONS__photoprism__password=$PHOTOPRISM_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__photoprism__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__photoprism__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__shlink__name=Shlink
SQLPAD_CONNECTIONS__shlink__driver=postgres
SQLPAD_CONNECTIONS__shlink__host=shlink-db
SQLPAD_CONNECTIONS__shlink__database=$SHLINK_DATABASE_NAME
SQLPAD_CONNECTIONS__shlink__username=$SHLINK_DATABASE_USER
SQLPAD_CONNECTIONS__shlink__password=$SHLINK_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__shlink__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__shlink__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__speedtesttrackerlocal__name=SpeedtestTrackerLocal
SQLPAD_CONNECTIONS__speedtesttrackerlocal__driver=postgres
SQLPAD_CONNECTIONS__speedtesttrackerlocal__host=speedtest-tracker-local-db
SQLPAD_CONNECTIONS__speedtesttrackerlocal__database=$SPEEDTEST_TRACKER_LOCAL_DATABASE_NAME
SQLPAD_CONNECTIONS__speedtesttrackerlocal__username=$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER
SQLPAD_CONNECTIONS__speedtesttrackerlocal__password=$SPEEDTEST_TRACKER_LOCAL_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__speedtesttrackerlocal__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__speedtesttrackerlocal__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__speedtesttrackervpn__name=SpeedtestTrackerVPN
SQLPAD_CONNECTIONS__speedtesttrackervpn__driver=postgres
SQLPAD_CONNECTIONS__speedtesttrackervpn__host=speedtest-tracker-vpn-db
SQLPAD_CONNECTIONS__speedtesttrackervpn__database=$SPEEDTEST_TRACKER_VPN_DATABASE_NAME
SQLPAD_CONNECTIONS__speedtesttrackervpn__username=$SPEEDTEST_TRACKER_VPN_DATABASE_USER
SQLPAD_CONNECTIONS__speedtesttrackervpn__password=$SPEEDTEST_TRACKER_VPN_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__speedtesttrackervpn__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__speedtesttrackervpn__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__vaultwarden__name=Vaultwarden
SQLPAD_CONNECTIONS__vaultwarden__driver=postgres
SQLPAD_CONNECTIONS__vaultwarden__host=vaultwarden-db
SQLPAD_CONNECTIONS__vaultwarden__database=$VAULTWARDEN_DATABASE_NAME
SQLPAD_CONNECTIONS__vaultwarden__username=$VAULTWARDEN_DATABASE_USER
SQLPAD_CONNECTIONS__vaultwarden__password=$VAULTWARDEN_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__vaultwarden__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__vaultwarden__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__wallabag__name=Wallabag
SQLPAD_CONNECTIONS__wallabag__driver=postgres
SQLPAD_CONNECTIONS__wallabag__host=wallabag-db
SQLPAD_CONNECTIONS__wallabag__database=$WALLABAG_DATABASE_NAME
SQLPAD_CONNECTIONS__wallabag__username=$WALLABAG_DATABASE_USER
SQLPAD_CONNECTIONS__wallabag__password=$WALLABAG_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__wallabag__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__wallabag__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__wikijs__name=Wikijs
SQLPAD_CONNECTIONS__wikijs__driver=postgres
SQLPAD_CONNECTIONS__wikijs__host=wikijs-db
SQLPAD_CONNECTIONS__wikijs__database=$WIKIJS_DATABASE_NAME
SQLPAD_CONNECTIONS__wikijs__username=$WIKIJS_DATABASE_USER
SQLPAD_CONNECTIONS__wikijs__password=$WIKIJS_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__wikijs__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__wikijs__idleTimeoutSeconds=900
SQLPAD_CONNECTIONS__wordpress__name=WordPress
SQLPAD_CONNECTIONS__wordpress__driver=mysql
SQLPAD_CONNECTIONS__wordpress__host=wordpress-db
SQLPAD_CONNECTIONS__wordpress__database=$WORDPRESS_DATABASE_NAME
SQLPAD_CONNECTIONS__wordpress__username=$WORDPRESS_DATABASE_USER
SQLPAD_CONNECTIONS__wordpress__password=$WORDPRESS_DATABASE_USER_PASSWORD
SQLPAD_CONNECTIONS__wordpress__multiStatementTransactionEnabled='false'
SQLPAD_CONNECTIONS__wordpress__idleTimeoutSeconds=900
EOFSP

}

function performUpdateSQLPad()
{
  perform_stack_name=sqlpad
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v4
      curImageList=sqlpad/sqlpad:7.1.2
      image_update_map[0]="sqlpad/sqlpad:7.1.2,sqlpad/sqlpad:7.4.1"
    ;;
    2)
      newVer=v4
      curImageList=sqlpad/sqlpad:7.2.0
      image_update_map[0]="sqlpad/sqlpad:7.2.0,sqlpad/sqlpad:7.4.1"
    ;;
    3)
      newVer=v4
      curImageList=sqlpad/sqlpad:7.3.1
      image_update_map[0]="sqlpad/sqlpad:7.3.1,sqlpad/sqlpad:7.4.1"
    ;;
    4)
      newVer=v4
      curImageList=sqlpad/sqlpad:7.4.1
      image_update_map[0]="sqlpad/sqlpad:7.4.1,sqlpad/sqlpad:7.4.1"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function modFunUpdateSQLPad()
{
  grep "SQLPAD_CONNECTIONS__${sdb_name}__name" $HOME/${updateStackName}.env > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    return 2
  fi
  echo "SQLPAD_CONNECTIONS__${sdb_name}__name=$sdb_formal" >> $HOME/${updateStackName}.env
  echo "SQLPAD_CONNECTIONS__${sdb_name}__driver=$sdb_driver" >> $HOME/${updateStackName}.env
  echo "SQLPAD_CONNECTIONS__${sdb_name}__host=$sdb_host" >> $HOME/${updateStackName}.env
  echo "SQLPAD_CONNECTIONS__${sdb_name}__database=$sdb_database" >> $HOME/${updateStackName}.env
  echo "SQLPAD_CONNECTIONS__${sdb_name}__username=$sdb_username" >> $HOME/${updateStackName}.env
  echo "SQLPAD_CONNECTIONS__${sdb_name}__password=$sdb_password" >> $HOME/${updateStackName}.env
  echo "SQLPAD_CONNECTIONS__${sdb_name}__multiStatementTransactionEnabled='false'" >> $HOME/${updateStackName}.env
  echo "SQLPAD_CONNECTIONS__${sdb_name}__idleTimeoutSeconds=900" >> $HOME/${updateStackName}.env
}

function checkAddDBSqlPad()
{
  sdb_name=$1
  sdb_formal=$2
  sdb_driver=$3
  sdb_host=$4
  sdb_database=$5
  sdb_username=$6
  sdb_password=$7
  set +e
  updateStackEnv sqlpad modFunUpdateSQLPad
}

# Heimdall
function installHeimdall()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory heimdall "Heimdall"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: Heimdall directory exists"
    exit 1
  fi
  pullImage $IMG_HEIMDALL
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain Heimdall docker image"
    exit 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/heimdall
  mkdir $HSHQ_STACKS_DIR/heimdall/config
  mkdir $HSHQ_STACKS_DIR/heimdall/html

  initServicesCredentials
  if [ -z "$HEIMDALL_WINDOW_TITLE" ]; then
    HEIMDALL_WINDOW_TITLE="$HOMESERVER_NAME Home"
    updateConfigVar HEIMDALL_WINDOW_TITLE "$HEIMDALL_WINDOW_TITLE"
  fi
  HEIMDALL_APP_NAME="Heimdall"

  generateCert heimdall heimdall
  outputConfigHeimdall
  docker-compose -f $HOME/heimdall-compose-tmp.yml up -d

  stack_loaded_text="service 99-ci-service-check successfully started"
  search="$stack_loaded_text"
  isFound="F"
  i=0
  set +e
  while [ $i -le 300 ]
  do
    findtext=$(docker logs heimdall 2>&1 | grep "$search")
    if ! [ -z "$findtext" ]; then
      isFound="T"
      break
    fi
    echo "Container not ready, sleeping 5 seconds, total wait=$i seconds..."
    sleep 1
    i=$((i+1))
  done
  set -e
  if [ $isFound == "F" ]; then
    echo "Heimdall did not start up correctly..."
    docker-compose -f $HOME/heimdall-compose-tmp.yml down -v
    exit 1
  fi
  sleep 3

  docker-compose -f $HOME/heimdall-compose-tmp.yml down -v
  rm -f $HOME/heimdall-compose-tmp.yml

  sed -i "s|^APP_NAME=.*|APP_NAME=\"$HEIMDALL_WINDOW_TITLE\"|g" $HSHQ_STACKS_DIR/heimdall/config/www/.env
  sed -i "s|^MAIL_HOST=.*|MAIL_HOST=|g" $HSHQ_STACKS_DIR/heimdall/config/www/.env
  # https://github.com/linuxserver/Heimdall/issues/840
  sed -i "s|^SESSION_LIFETIME=.*|SESSION_LIFETIME=5256000|g" $HSHQ_STACKS_DIR/heimdall/config/www/.env
  echo "SESSION_SECURE_COOKIE=true" >> $HSHQ_STACKS_DIR/heimdall/config/www/.env

  admin_password_hash=$(htpasswd -nbBC 10 $HEIMDALL_ADMIN_USERNAME $HEIMDALL_ADMIN_PASSWORD | cut -d":" -f2-)
  user_password_hash=$(htpasswd -nbBC 10 $HEIMDALL_USER_USERNAME $HEIMDALL_USER_PASSWORD | cut -d":" -f2-)
  hs_password_hash=$(htpasswd -nbBC 10 $HEIMDALL_HOMESERVERS_USERNAME $HEIMDALL_HOMESERVERS_PASSWORD | cut -d":" -f2-)
  rs_password_hash=$(htpasswd -nbBC 10 $HEIMDALL_RELAYSERVER_USERNAME $HEIMDALL_RELAYSERVER_PASSWORD | cut -d":" -f2-)
  curdt=$(getCurrentDate)

  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "DELETE FROM users;"
  cp $HSHQ_ASSETS_DIR/images/admin.png $HSHQ_STACKS_DIR/heimdall/config/www/avatars/
  cp $HSHQ_ASSETS_DIR/images/users.png $HSHQ_STACKS_DIR/heimdall/config/www/avatars/
  cp $HSHQ_ASSETS_DIR/images/homeserver.png $HSHQ_STACKS_DIR/heimdall/config/www/avatars/
  cp $HSHQ_ASSETS_DIR/images/relayserver.png $HSHQ_STACKS_DIR/heimdall/config/www/avatars/
  cp $HSHQ_ASSETS_DIR/images/adminbackground.jpg $HSHQ_STACKS_DIR/heimdall/config/www/backgrounds/
  cp $HSHQ_ASSETS_DIR/images/userbackground.jpg $HSHQ_STACKS_DIR/heimdall/config/www/backgrounds/
  cp $HSHQ_ASSETS_DIR/images/wghomeserversbackground.jpg $HSHQ_STACKS_DIR/heimdall/config/www/backgrounds/
  cp $HSHQ_ASSETS_DIR/images/relayserverbackground.jpg $HSHQ_STACKS_DIR/heimdall/config/www/backgrounds/

  org_name_no_spaces=$(echo "$HOMESERVER_NAME" | sed 's| ||g')
  domain_noext=$(getDomainNoTLD $HOMESERVER_DOMAIN)
  search_provider="\n${domain_noext}:\n   id: ${domain_noext}\n   url: https://$SUB_SEARXNG.$HOMESERVER_DOMAIN\n   name: \"$HOMESERVER_NAME\"\n   method: get\n   target: _blank\n   query: q"
  echo -e "$search_provider" >> $HSHQ_STACKS_DIR/heimdall/config/www/searchproviders.yaml

  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO users(id,username,email,avatar,password,autologin,public_front,remember_token,created_at,updated_at) VALUES(1,'$HEIMDALL_ADMIN_USERNAME','$EMAIL_ADMIN_EMAIL_ADDRESS','avatars/admin.png','$admin_password_hash',NULL,0,NULL,'$curdt','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO users(id,username,email,avatar,password,autologin,public_front,remember_token,created_at,updated_at) VALUES(2,'$HEIMDALL_USER_USERNAME','$EMAIL_ADMIN_EMAIL_ADDRESS','avatars/users.png','$user_password_hash',NULL,1,NULL,'$curdt','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO users(id,username,email,avatar,password,autologin,public_front,remember_token,created_at,updated_at) VALUES(3,'$HEIMDALL_HOMESERVERS_USERNAME','$EMAIL_ADMIN_EMAIL_ADDRESS','avatars/homeserver.png','$hs_password_hash',NULL,1,NULL,'$curdt','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO users(id,username,email,avatar,password,autologin,public_front,remember_token,created_at,updated_at) VALUES(4,'$HEIMDALL_RELAYSERVER_USERNAME','$EMAIL_ADMIN_EMAIL_ADDRESS','avatars/relayserver.png','$rs_password_hash',NULL,0,NULL,'$curdt','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(7,1,'_blank');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(7,2,'_blank');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(7,3,'_blank');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(7,4,'_blank');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(2,1,'backgrounds/adminbackground.jpg');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(2,2,'backgrounds/userbackground.jpg');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(2,3,'backgrounds/wghomeserversbackground.jpg');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(2,4,'backgrounds/relayserverbackground.jpg');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(4,1,'${domain_noext}');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(4,2,'${domain_noext}');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(4,3,'${domain_noext}');"
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(4,4,'${domain_noext}');"

  if ! [ "$(isServiceDisabled searxng)" = "true" ]; then
    sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO setting_user(setting_id,user_id,uservalue) VALUES(3,2,1);"
  fi

  insertServicesHeimdall
  installStack heimdall heimdall "$stack_loaded_text" $HOME/heimdall.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing Heimdall"
    exit $retval
  fi

  inner_block=""
  inner_block=$inner_block">>https://$SUB_HEIMDALL.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy https://heimdall {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_HEIMDALL $MANAGETLS_HEIMDALL "$is_integrate_hshq" $NETDEFAULT_HEIMDALL "$inner_block"
}

function outputConfigHeimdall()
{
  cat <<EOFHC > $HOME/heimdall-compose-tmp.yml
version: '3.5'

services:
  heimdall:
    image: $(getScriptImageByContainerName heimdall)
    container_name: heimdall
    hostname: heimdall
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - $HSHQ_STACKS_DIR/heimdall/config:/config
      - $HSHQ_SSL_DIR/heimdall.crt:/config/keys/cert.crt
      - $HSHQ_SSL_DIR/heimdall.key:/config/keys/cert.key
      - v-heimdall:/var/www/localhost/heimdall
    environment:
      - PUID=$USERID
      - PGID=$GROUPID
      - APP_NAME=$HEIMDALL_APP_NAME

volumes:
  v-heimdall:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $HSHQ_STACKS_DIR/heimdall/html

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFHC

  cat <<EOFHC > $HOME/heimdall-compose.yml
$STACK_VERSION_PREFIX heimdall $(getScriptStackVersion heimdall)
version: '3.5'

services:
  heimdall:
    image: $(getScriptImageByContainerName heimdall)
    container_name: heimdall
    hostname: heimdall
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/heimdall/config:/config
      - \${HSHQ_SSL_DIR}/heimdall.crt:/config/keys/cert.crt
      - \${HSHQ_SSL_DIR}/heimdall.key:/config/keys/cert.key
      - v-heimdall:/var/www/localhost/heimdall
      - \${HSHQ_STACKS_DIR}/heimdall/app.php:/var/www/localhost/heimdall/config/app.php
      - \${HSHQ_STACKS_DIR}/heimdall/list.json:/var/www/localhost/heimdall/public/list.json

volumes:
  v-heimdall:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: \${HSHQ_STACKS_DIR}/heimdall/html

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
EOFHC

  cat <<EOFHE > $HOME/heimdall.env
PUID=$USERID
PGID=$GROUPID
APP_NAME=$HEIMDALL_APP_NAME
EOFHE

  cat <<EOFHA > $HSHQ_STACKS_DIR/heimdall/app.php
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application. This value is used when the
    | framework needs to place the application's name in a notification or
    | any other location as required by the application or its packages.
    |
    */

    'name' => env('APP_NAME', 'Heimdall'),
    'version' => '2.4.13',

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services your application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | your application so that it is used when running Artisan tasks.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    'asset_url' => env('ASSET_URL', null),
    'appsource' => env('APP_SOURCE', 'https://localhost/'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. We have gone
    | ahead and set this to a sensible default for you out of the box.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by the translation service provider. You are free to set this value
    | to any of the locales which will be supported by the application.
    |
    */

    'locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Application Fallback Locale
    |--------------------------------------------------------------------------
    |
    | The fallback locale determines the locale to use when the current one
    | is not available. You may change the value to correspond to any of
    | the language folders that are provided through your application.
    |
    */

    'fallback_locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Faker Locale
    |--------------------------------------------------------------------------
    |
    | This locale will be used by the Faker PHP library when generating fake
    | data for your database seeds. For example, this will be used to get
    | localized telephone numbers, street address information and more.
    |
    */

    'faker_locale' => 'en_US',

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is used by the Illuminate encrypter service and should be set
    | to a random, 32 character string, otherwise these encrypted strings
    | will not be safe. Please do this before deploying an application!
    |
    */

    'key' => env('APP_KEY', 'base64:I206O8ibx+GQyRE7BeOxDobn04Mfmyyc5Ptzns/C0mY='),

    'cipher' => 'AES-256-CBC',

    /*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    |
    | The service providers listed here will be automatically loaded on the
    | request to your application. Feel free to add your own services to
    | this array to grant expanded functionality to your applications.
    |
    */

    'providers' => [

        /*
         * Laravel Framework Service Providers...
         */
        Illuminate\Auth\AuthServiceProvider::class,
        Illuminate\Broadcasting\BroadcastServiceProvider::class,
        Illuminate\Bus\BusServiceProvider::class,
        Illuminate\Cache\CacheServiceProvider::class,
        Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,
        Illuminate\Cookie\CookieServiceProvider::class,
        Illuminate\Database\DatabaseServiceProvider::class,
        Illuminate\Encryption\EncryptionServiceProvider::class,
        Illuminate\Filesystem\FilesystemServiceProvider::class,
        Illuminate\Foundation\Providers\FoundationServiceProvider::class,
        Illuminate\Hashing\HashServiceProvider::class,
        Illuminate\Mail\MailServiceProvider::class,
        Illuminate\Notifications\NotificationServiceProvider::class,
        Illuminate\Pagination\PaginationServiceProvider::class,
        Illuminate\Pipeline\PipelineServiceProvider::class,
        Illuminate\Queue\QueueServiceProvider::class,
        Illuminate\Redis\RedisServiceProvider::class,
        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,
        Illuminate\Session\SessionServiceProvider::class,
        Illuminate\Translation\TranslationServiceProvider::class,
        Illuminate\Validation\ValidationServiceProvider::class,
        Illuminate\View\ViewServiceProvider::class,

        /*
         * Package Service Providers...
         */
        Collective\Html\HtmlServiceProvider::class,
        /*
         * Application Service Providers...
         */
        App\Providers\AppServiceProvider::class,
        App\Providers\AuthServiceProvider::class,
        // App\Providers\BroadcastServiceProvider::class,
        App\Providers\EventServiceProvider::class,
        App\Providers\RouteServiceProvider::class,

    ],

    /*
    |--------------------------------------------------------------------------
    | Class Aliases
    |--------------------------------------------------------------------------
    |
    | This array of class aliases will be registered when this application
    | is started. However, feel free to register as many as you wish as
    | the aliases are "lazy" loaded so they don't hinder performance.
    |
    */

    'aliases' => [

        'App' => Illuminate\Support\Facades\App::class,
        'Arr' => Illuminate\Support\Arr::class,
        'Artisan' => Illuminate\Support\Facades\Artisan::class,
        'Auth' => Illuminate\Support\Facades\Auth::class,
        'Blade' => Illuminate\Support\Facades\Blade::class,
        'Broadcast' => Illuminate\Support\Facades\Broadcast::class,
        'Bus' => Illuminate\Support\Facades\Bus::class,
        'Cache' => Illuminate\Support\Facades\Cache::class,
        'Config' => Illuminate\Support\Facades\Config::class,
        'Cookie' => Illuminate\Support\Facades\Cookie::class,
        'Crypt' => Illuminate\Support\Facades\Crypt::class,
        'DB' => Illuminate\Support\Facades\DB::class,
        'Eloquent' => Illuminate\Database\Eloquent\Model::class,
        'Event' => Illuminate\Support\Facades\Event::class,
        'File' => Illuminate\Support\Facades\File::class,
        'Form' => Collective\Html\FormFacade::class,
        'Gate' => Illuminate\Support\Facades\Gate::class,
        'Hash' => Illuminate\Support\Facades\Hash::class,
        'Html' => Collective\Html\HtmlFacade::class,
        'Http' => Illuminate\Support\Facades\Http::class,
        'Lang' => Illuminate\Support\Facades\Lang::class,
        'Log' => Illuminate\Support\Facades\Log::class,
        'Mail' => Illuminate\Support\Facades\Mail::class,
        'Notification' => Illuminate\Support\Facades\Notification::class,
        'Password' => Illuminate\Support\Facades\Password::class,
        'Queue' => Illuminate\Support\Facades\Queue::class,
        'Redirect' => Illuminate\Support\Facades\Redirect::class,
        'Redis' => Illuminate\Support\Facades\Redis::class,
        'Request' => Illuminate\Support\Facades\Request::class,
        'Response' => Illuminate\Support\Facades\Response::class,
        'Route' => Illuminate\Support\Facades\Route::class,
        'Schema' => Illuminate\Support\Facades\Schema::class,
        'Session' => Illuminate\Support\Facades\Session::class,
        'Storage' => Illuminate\Support\Facades\Storage::class,
        'Str' => Illuminate\Support\Str::class,
        'URL' => Illuminate\Support\Facades\URL::class,
        'Validator' => Illuminate\Support\Facades\Validator::class,
        'View' => Illuminate\Support\Facades\View::class,
        'Yaml' => Symfony\Component\Yaml\Yaml::class,

        'SupportedApps' => App\SupportedApps::class,
        'EnhancedApps' => App\EnhancedApps::class,

    ],

];
EOFHA

  cat <<EOFHL > $HSHQ_STACKS_DIR/heimdall/list.json
{
	"appcount": 0,
	"apps": []
}
EOFHL

}

function performUpdateHeimdall()
{
  perform_stack_name=heimdall
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=linuxserver/heimdall:2.4.13
      image_update_map[0]="linuxserver/heimdall:2.4.13,linuxserver/heimdall:2.4.13"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function insertEnableSvcAll()
{
  insertEnableSvcHeimdall "$1" "$2" "$3" "$4" "$5" true
  insertEnableSvcUptimeKuma "$1" "$2" "$3" "$4" true
}

function disableSvcAll()
{
  user_type=$1
  svc_url=$2
  is_manage_container=$3
  disableSvcHeimdall "$1" "$2" "$3"
  disableSvcUptimeKuma "$2" "$3"
}

function deleteSvcAll()
{
  user_type=$1
  svc_url=$2
  is_manage_container=$3
  deleteSvcHeimdall "$1" "$2" "$3"
  deleteSvcUptimeKuma "$2" "$3"
}

function getHeimdallUserIDFromType()
{
  user_type=$1
  if [ "$user_type" = "admin" ]; then
    user_id=1
  elif [ "$user_type" = "user" ]; then
    user_id=2
  elif [ "$user_type" = "homeservers" ]; then
    user_id=3
  elif [ "$user_type" = "relayserver" ]; then
    user_id=4
  else
    user_id=0
  fi
  echo $user_id
}

function checkInsertServiceHeimdall()
{
  svc_stack_name=$1
  svc_proper_name=$2
  user_type=$3
  svc_url=$4
  svc_img=$5
  is_restart=$6
  svc_is_active=$7

  user_id=$(getHeimdallUserIDFromType $user_type)
  docker container stop heimdall > /dev/null 2>&1
  insert_id=$(sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "select id from items where user_id='$user_id' and url='$svc_url';")
  if [ -z $insert_id ]; then
    insertIntoHeimdallDB "$svc_proper_name" "$user_type" "$svc_url" "$svc_is_active" "$svc_img"
  else
    sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set pinned=$svc_is_active where user_id='$user_id' and url='$svc_url';"
    sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set deleted_at=NULL where user_id='$user_id' and url='$svc_url';"
  fi
  if [ "$is_restart" = "true" ]; then
    docker container start heimdall > /dev/null 2>&1
  fi
}

function insertEnableSvcHeimdall()
{
  checkInsertServiceHeimdall "$1" "$2" "$3" "$4" "$5" "$6" 1
}

function disableSvcHeimdall()
{
  user_type=$1
  svc_url=$2
  is_manage_container=$3
  user_id=$(getHeimdallUserIDFromType $user_type)
  if [ "$IS_INSTALLED" = "true" ] && [ -f $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite ]; then
    if [ "$is_manage_container" = "true" ]; then
      docker container stop heimdall >/dev/null
    fi
    sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "update items set pinned=0 where user_id='$user_id' and url='$svc_url';"
    if [ "$is_manage_container" = "true" ]; then
      docker container start heimdall >/dev/null
    fi
  fi
}

function deleteSvcHeimdall()
{
  user_type=$1
  svc_url=$2
  is_manage_container=$3
  user_id=$(getHeimdallUserIDFromType $user_type)
  if [ "$IS_INSTALLED" = "true" ] && [ -f $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite ]; then
    if [ "$is_manage_container" = "true" ]; then
      docker container stop heimdall >/dev/null
    fi
    sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "delete from items where user_id='$user_id' and url='$svc_url';"
    if [ "$is_manage_container" = "true" ]; then
      docker container start heimdall >/dev/null
    fi
  fi
}

function insertIntoHeimdallDB()
{
  svc_proper_name=$1
  user_type=$2
  svc_url=$3
  svc_is_active=$4
  svc_img=$5

  curdt=$(getCurrentDate)
  user_id=$(getHeimdallUserIDFromType $user_type)

  if [ "$user_type" = "admin" ]; then
    color_string=$ADMIN_COLOR_CODE
  elif [ "$user_type" = "user" ]; then
    color_string=$USERS_COLOR_CODE
  elif [ "$user_type" = "homeservers" ]; then
    color_string=$HOMESERVERS_COLOR_CODE
  elif [ "$user_type" = "relayserver" ]; then
    color_string=$RELAYSERVER_COLOR_CODE
  fi

  cp $HSHQ_ASSETS_DIR/images/$svc_img $HSHQ_STACKS_DIR/heimdall/config/www/icons/

  # Ensure we always add the next item at the end
  lastOrder=$(sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "select max(\"order\") from items;")
  if [ -z $lastOrder ]; then
    thisOrder=1
  else
    thisOrder=$(($lastOrder + 1))
  fi
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO items(id,title,colour,icon,url,description,pinned,\"order\",deleted_at,created_at,updated_at,type,user_id,class,appid,appdescription) VALUES(NULL,'$svc_proper_name','$color_string','icons/$svc_img','$svc_url',NULL,$svc_is_active,$thisOrder,NULL,'$curdt','$curdt',0,$user_id,NULL,'null',NULL);"
  insert_id=$(sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "select id from items where user_id='$user_id' and url='$svc_url';")
  sqlite3 $HSHQ_STACKS_DIR/heimdall/config/www/app.sqlite "INSERT INTO item_tag(item_id,tag_id,created_at,updated_at) VALUES($insert_id,0,NULL,NULL);"
}

function bulkImportHomeServerLinksHeimdall()
{
  domainList=$1
  OIFS=$IFS
  IFS=$(echo -en "\n\b")
  lines=$(cat $domainList)
  for curLine in $lines
  do
    if [ -z "$curLine" ]; then
      continue
    fi
    curHSName=$(echo "$curLine" | cut -d "|" -f1)
    curDomain=$(echo "$curLine" | cut -d "|" -f2)
    if ! [ -z "$curDomain" ]; then
      insertEnableSvcHeimdall heimdall "$curHSName" homeservers "https://home.${curDomain}" "hs2.png" false
    fi
  done
  IFS=$OLDIFS
  docker container start heimdall >/dev/null
}

# Caddy
function initCaddyCommon()
{
  mkdir $HSHQ_STACKS_DIR/caddy-common
  mkdir $HSHQ_STACKS_DIR/caddy-common/caddyfiles
  mkdir $HSHQ_STACKS_DIR/caddy-common/files
  mkdir $HSHQ_STACKS_DIR/caddy-common/lecerts
  mkdir $HSHQ_STACKS_DIR/caddy-common/primary-certs
  mkdir $HSHQ_STACKS_DIR/caddy-common/scripts
  mkdir $HSHQ_STACKS_DIR/caddy-common/snippets
  cp $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.crt $HSHQ_STACKS_DIR/caddy-common/files/${CERTS_ROOT_CA_NAME}.crt
  cp $HSHQ_SSL_DIR/${CERTS_ROOT_CA_NAME}.der $HSHQ_STACKS_DIR/caddy-common/files/${CERTS_ROOT_CA_NAME}.der
  cat <<EOFCF > $HSHQ_STACKS_DIR/caddy-common/snippets/head.snip
($CADDY_SNIPPET_SAFEHEADER) {
  header {
    Referrer-Policy "same-origin"
    Strict-Transport-Security "max-age=31536000;"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    X-Frame-Options "SAMEORIGIN"
    X-Robots-Tag "noindex, nofollow"
    -Server
  }
}

($CADDY_SNIPPET_SAFEHEADERALLOWFRAME) {
  header {
    Referrer-Policy "same-origin"
    Strict-Transport-Security "max-age=31536000;"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    X-Robots-Tag "noindex, nofollow"
    -Server
  }
}

($CADDY_SNIPPET_SAFEHEADERALLOWCORS) {
  header {
    Access-Control-Allow-Origin *
    Referrer-Policy "same-origin"
    Strict-Transport-Security "max-age=31536000;"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    X-Robots-Tag "noindex, nofollow"
    -Server
  }
}

($CADDY_SNIPPET_SAFEHEADERCORS) {
  @origin{args[0]} header Origin {args[0]}
  header @origin{args[0]} {
    Access-Control-Allow-Origin "{args[0]}"
    Referrer-Policy "same-origin"
    Strict-Transport-Security "max-age=31536000;"
    X-XSS-Protection "1; mode=block"
    X-Content-Type-Options "nosniff"
    X-Robots-Tag "noindex, nofollow"
    -Server
  }
}

($CADDY_SNIPPET_TRUSTEDPROXIES) {
  trusted_proxies $TRUSTED_PROXIES
}

($CADDY_SNIPPET_NOTHOMESUBNET) {
  not remote_ip {\$CADDY_HSHQ_PRIVATE_IPS}
}

($CADDY_SNIPPET_RIP) {
  @subnet remote_ip {\$CADDY_HSHQ_CA_SUBNET}
}

EOFCF

  cat <<EOFCF > $HSHQ_STACKS_DIR/caddy-common/snippets/svcs.snip
# sn-base-domain BEGIN
(sn-base-domain) {
  https://$HOMESERVER_DOMAIN {
    import $CADDY_SNIPPET_RIP
    import $CADDY_SNIPPET_TLS_HSHQ
    import safe-header
    header "/.well-known/matrix/*" {
      Content-Type application/json
    }
    route {
      respond "/.well-known/matrix/server" 200 {
        body "{ \"m.server\": \"$SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN:443\" }"
        close
      }
      respond "/.well-known/matrix/client" 200 {
        body "{ \"m.homeserver\": {\"base_url\": \"https://$SUB_MATRIX_SYNAPSE.$HOMESERVER_DOMAIN/\" } }"
        close
      }
      redir /.well-known/webfinger https://$SUB_MASTODON.$HOMESERVER_DOMAIN{uri} permanent
      redir /.well-known/host-meta https://$SUB_MASTODON.$HOMESERVER_DOMAIN{uri} permanent
      redir https://home.$HOMESERVER_DOMAIN
    }
  }
}
# sn-base-domain END

# sn-sub-home BEGIN
(sn-sub-home) {
  https://home.$HOMESERVER_DOMAIN {
    import $CADDY_SNIPPET_TLS_HSHQ
    import $CADDY_SNIPPET_RIP
    import $CADDY_SNIPPET_FWDAUTH
    import $CADDY_SNIPPET_SAFEHEADER
    handle @subnet {
      redir https://$SUB_HEIMDALL.$HOMESERVER_DOMAIN
    }
    respond 404
  }
}
# sn-sub-home END

# sn-sub-${SUB_FILES} BEGIN
(sn-sub-${SUB_FILES}) {
  http://$SUB_FILES.$HOMESERVER_DOMAIN {
    root * /files
    file_server browse
    header Content-Type "application/octet-stream"
    header Content-Disposition "attachment"
    redir /ca.crt /${CERTS_ROOT_CA_NAME}.crt
    redir /ca.der /${CERTS_ROOT_CA_NAME}.der
  }
}
# sn-sub-${SUB_FILES} END

# sn-sub-${SUB_IMAGES} BEGIN
(sn-sub-${SUB_IMAGES}) {
  https://$SUB_IMAGES.$HOMESERVER_DOMAIN {
    import $CADDY_SNIPPET_RIP
    import $CADDY_SNIPPET_TLS_HSHQ
    root * /images
    file_server
  }
}
# sn-sub-${SUB_IMAGES} END

EOFCF

  cat <<EOFCF > $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Home
import /snippets/svcs.snip
import sn-base-domain
import sn-sub-home
import sn-sub-${SUB_FILES}
import sn-sub-${SUB_IMAGES}
EOFCF

  cp $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Home $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Primary
  cp $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Home $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Other
  docker volume create --driver local -o device=$HSHQ_STACKS_DIR/caddy-common/primary-certs -o o=bind -o type=none caddy-primary-certs
}

function installCaddy()
{
  set +e
  net_name=$1
  net_type=$2
  bind_ip=$3
  ca_name=$4
  ca_url=$5
  ca_subdomain=$6
  ca_ip=$7
  add_rip="$8"

  caddy_net_name=caddy-$net_name
  checkDeleteStackAndDirectory $caddy_net_name "Caddy"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/$caddy_net_name
  mkdir $HSHQ_STACKS_DIR/$caddy_net_name/config
  mkdir $HSHQ_STACKS_DIR/$caddy_net_name/data
  outputConfigCaddy $net_name $caddy_net_name $net_type $bind_ip $ca_name $ca_url $ca_subdomain $ca_ip "$add_rip"
  installStack $caddy_net_name $caddy_net_name "serving initial configuration" $HOME/$caddy_net_name.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
}

function outputConfigCaddy()
{
  net_name=$1
  caddy_net_name=$2
  net_type=$3
  bind_ip=$4
  ca_name=$5
  ca_url=$6
  ca_subdomain=$7
  ca_ip=$8
  add_rip="$9"

  case "$net_type" in
    home)
      cat <<EOFCF > $HOME/$caddy_net_name-compose.yml
$STACK_VERSION_PREFIX $caddy_net_name $(getScriptStackVersion $caddy_net_name)
version: '3.5'

services:
  $caddy_net_name:
    image: $IMG_CADDY
    container_name: $caddy_net_name
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - "\${HOMESERVER_HOST_IP}:80:80"
      - "\${HOMESERVER_HOST_IP}:443:443"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/${CERTS_ROOT_CA_NAME}.crt:/data/caddy/pki/authorities/$ca_name/root.crt:ro
      - \${HSHQ_SSL_DIR}/${CERTS_ROOT_CA_NAME}.key:/data/caddy/pki/authorities/$ca_name/root.key:ro
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/Caddyfile:/etc/caddy/Caddyfile
      - \${HSHQ_STACKS_DIR}/caddy-common/caddyfiles/CaddyfileBody-Home:/config/CaddyfileBody
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/data:/data
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/config:/config
      - \${HSHQ_STACKS_DIR}/caddy-common/scripts:/scripts:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/snippets:/snippets:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/files:/files:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/lecerts:/lecerts:ro
      - \${HSHQ_ASSETS_DIR}/images:/images:ro

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFCF
      cat <<EOFCF > $HSHQ_STACKS_DIR/$caddy_net_name/Caddyfile
{
  email $EMAIL_ADMIN_EMAIL_ADDRESS
  renew_interval {\$CERT_RENEW_INTERVAL}
  pki {
    ca {\$CADDY_HSHQ_CA_NAME} {
      intermediate_cn "$CERTS_INTERNAL_INTERMEDIATE_CN"
      intermediate_lifetime {\$CERT_INTERMEDIATE_LIFETIME}
    }
  }
}

import /snippets/head.snip

($CADDY_SNIPPET_TLS_HSHQ) {
  tls {
    issuer internal {
      ca {\$CADDY_HSHQ_CA_NAME}
      lifetime {\$CERT_LEAF_LIFETIME}
    }
  }
}

($CADDY_SNIPPET_FWDAUTH) {
  # Uncomment the following block in order to employ Authelia on your home network
  #forward_auth https://authelia:9091 {
  #  uri /api/verify?rd=https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN
  #  copy_headers Remote-User Remote-Groups Remote-Name Remote-Email
  #}
}

https://$SUB_CADDY.$HOMESERVER_DOMAIN {
  import $CADDY_SNIPPET_RIP
  import $CADDY_SNIPPET_TLS_HSHQ
  acme_server {
    ca {\$CADDY_HSHQ_CA_NAME}
    lifetime {\$CERT_LEAF_LIFETIME}
  }
}

import /config/CaddyfileBody

EOFCF
      ;;
    primary)
      if [ "$PRIMARY_VPN_SETUP_TYPE" = "host" ]; then
        cat <<EOFCF > $HOME/$caddy_net_name-compose.yml
$STACK_VERSION_PREFIX $caddy_net_name $(getScriptStackVersion $caddy_net_name)
version: '3.5'

services:
  $caddy_net_name:
    image: $IMG_CADDY
    container_name: $caddy_net_name
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - "$bind_ip:80:80"
      - "$bind_ip:443:443"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/${CERTS_ROOT_CA_NAME}.crt:/data/caddy/pki/authorities/$ca_name/root.crt:ro
      - \${HSHQ_SSL_DIR}/${CERTS_ROOT_CA_NAME}.key:/data/caddy/pki/authorities/$ca_name/root.key:ro
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/Caddyfile:/etc/caddy/Caddyfile
      - \${HSHQ_STACKS_DIR}/caddy-common/caddyfiles/CaddyfileBody-Primary:/config/CaddyfileBody
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/data:/data
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/config:/config
      - \${HSHQ_STACKS_DIR}/caddy-common/scripts:/scripts:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/snippets:/snippets:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/files:/files:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/lecerts:/lecerts:ro
      - \${HSHQ_ASSETS_DIR}/images:/images:ro
      - caddy-primary-certs:/data/caddy/certificates

volumes:
  caddy-primary-certs:
    external: true

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFCF
        cat <<EOFCF > $HSHQ_STACKS_DIR/$caddy_net_name/Caddyfile
{
  email $EMAIL_ADMIN_EMAIL_ADDRESS
  acme_ca https://acme-v02.api.letsencrypt.org/directory
  renew_interval {\$CERT_RENEW_INTERVAL}
  pki {
    ca {\$CADDY_HSHQ_CA_NAME} {
      intermediate_cn "$CERTS_INTERNAL_INTERMEDIATE_CN"
      intermediate_lifetime {\$CERT_INTERMEDIATE_LIFETIME}
    }
  }
}

import /snippets/head.snip

($CADDY_SNIPPET_TLS_HSHQ) {
  tls {
    issuer internal {
      ca {\$CADDY_HSHQ_CA_NAME}
      lifetime {\$CERT_LEAF_LIFETIME}
    }
  }
}

($CADDY_SNIPPET_FWDAUTH) {
  forward_auth https://authelia:9091 {
    uri /api/verify?rd=https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN
    copy_headers Remote-User Remote-Groups Remote-Name Remote-Email
  }
}

https://$SUB_CADDY.$HOMESERVER_DOMAIN {
  import $CADDY_SNIPPET_RIP
  import $CADDY_SNIPPET_TLS_HSHQ
  acme_server {
    ca {\$CADDY_HSHQ_CA_NAME}
    lifetime {\$CERT_LEAF_LIFETIME}
  }
}

import /config/CaddyfileBody

EOFCF
      elif [ "$PRIMARY_VPN_SETUP_TYPE" = "join" ]; then
        cat <<EOFCF > $HOME/$caddy_net_name-compose.yml
$STACK_VERSION_PREFIX $caddy_net_name $(getScriptStackVersion $caddy_net_name)
version: '3.5'

services:
  $caddy_net_name:
    image: $IMG_CADDY
    container_name: $caddy_net_name
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - "$bind_ip:80:80"
      - "$bind_ip:443:443"
    extra_hosts:
      - host.docker.internal:host-gateway
      - "$ca_subdomain:$ca_ip"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_SSL_DIR}/${CERTS_ROOT_CA_NAME}.crt:/data/caddy/pki/authorities/$ca_name/root.crt:ro
      - \${HSHQ_SSL_DIR}/${CERTS_ROOT_CA_NAME}.key:/data/caddy/pki/authorities/$ca_name/root.key:ro
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/Caddyfile:/etc/caddy/Caddyfile
      - \${HSHQ_STACKS_DIR}/caddy-common/caddyfiles/CaddyfileBody-Primary:/config/CaddyfileBody
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/data:/data
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/config:/config
      - \${HSHQ_STACKS_DIR}/caddy-common/scripts:/scripts:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/snippets:/snippets:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/files:/files:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/lecerts:/lecerts:ro
      - \${HSHQ_ASSETS_DIR}/images:/images:ro
      - caddy-primary-certs:/data/caddy/certificates

volumes:
  caddy-primary-certs:
    external: true

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFCF
        cat <<EOFCF > $HSHQ_STACKS_DIR/$caddy_net_name/Caddyfile
{
  email $EMAIL_ADMIN_EMAIL_ADDRESS
  acme_ca https://acme-v02.api.letsencrypt.org/directory
  renew_interval {\$CERT_RENEW_INTERVAL}
}

import /snippets/head.snip

($CADDY_SNIPPET_TLS_HSHQ) {
  tls {
    ca {\$CADDY_HSHQ_CA_URL}
  }
}

($CADDY_SNIPPET_FWDAUTH) {
  forward_auth https://authelia:9091 {
    uri /api/verify?rd=https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN
    copy_headers Remote-User Remote-Groups Remote-Name Remote-Email
  }
}

import /config/CaddyfileBody

EOFCF
      else
        # This should never happen
        echo "Undefined error(1) in outputConfigCaddy, exiting..."
        exit 1
      fi
      ;;
    other)
      cat <<EOFCF > $HOME/$caddy_net_name-compose.yml
$STACK_VERSION_PREFIX $caddy_net_name $(getScriptStackVersion $caddy_net_name)
version: '3.5'

services:
  $caddy_net_name:
    image: $IMG_CADDY
    container_name: $caddy_net_name
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-proxy-net
      - dock-ext-net
    ports:
      - "$bind_ip:80:80"
      - "$bind_ip:443:443"
    extra_hosts:
      - "$ca_subdomain:$ca_ip"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/Caddyfile:/etc/caddy/Caddyfile
      - \${HSHQ_STACKS_DIR}/caddy-common/caddyfiles/CaddyfileBody-$caddy_net_name:/config/CaddyfileBody
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/data:/data
      - \${HSHQ_STACKS_DIR}/$caddy_net_name/config:/config
      - \${HSHQ_STACKS_DIR}/caddy-common/snippets:/snippets:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/files:/files:ro
      - \${HSHQ_STACKS_DIR}/caddy-common/lecerts:/lecerts:ro
      - \${HSHQ_ASSETS_DIR}/images:/images:ro

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
EOFCF
      cp $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Other $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-$caddy_net_name
      cat <<EOFCF > $HSHQ_STACKS_DIR/$caddy_net_name/Caddyfile
{
  email $EMAIL_ADMIN_EMAIL_ADDRESS
  renew_interval {\$CERT_RENEW_INTERVAL}
}

import /snippets/head.snip

($CADDY_SNIPPET_TLS_HSHQ) {
  tls {
    ca {\$CADDY_HSHQ_CA_URL}
  }
}

($CADDY_SNIPPET_FWDAUTH) {
  forward_auth https://authelia:9091 {
    uri /api/verify?rd=https://$SUB_AUTHELIA.$HOMESERVER_DOMAIN
    copy_headers Remote-User Remote-Groups Remote-Name Remote-Email
  }
}

import /config/CaddyfileBody

EOFCF
      ;;
    *)
      # This should never happen
      echo "Undefined error(2) in outputConfigCaddy, exiting..."
      exit 1
      ;;
  esac

  cat <<EOFCE > $HOME/$caddy_net_name.env
CERT_RENEW_INTERVAL=$CADDY_CERT_RENEW_INTERVAL
CERT_INTERMEDIATE_LIFETIME=$CADDY_CERT_INTERMEDIATE_LIFETIME
CERT_LEAF_LIFETIME=$CADDY_CERT_LEAF_LIFETIME
CADDY_HSHQ_CA_NAME=$ca_name
CADDY_HSHQ_CA_SUBNET=127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16 $add_rip
CADDY_HSHQ_PRIVATE_IPS=\${HOMESERVER_HOST_RANGE} $(getPrivateIPRangesCaddy)
CADDY_HSHQ_CA_URL=$ca_url
EOFCE

}

function performUpdateCaddy()
{
  perform_stack_name=$2
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=caddy:2.7.4
      image_update_map[0]="caddy:2.7.4,caddy:2.7.6"
    ;;
    2)
      newVer=v2
      curImageList=caddy:2.7.6
      image_update_map[0]="caddy:2.7.6,caddy:2.7.6"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function updateCaddyBlocks()
{
  subdom=$1
  manage_tls=$2
  is_integrate_hshq=$3
  svc_nettype=$4
  inner_block="$5"
  if [ "$is_integrate_hshq" = "false" ]; then
    return
  fi
  case "$manage_tls" in
    hshq)
      tls_block="import $CADDY_SNIPPET_TLS_HSHQ" ;;
    le)
      tls_block="tls /lecerts/$subdom.${HOMESERVER_DOMAIN}.crt /lecerts/$subdom.${HOMESERVER_DOMAIN}.key"
      primary_block="$(echo $inner_block | sed 's|REPLACE-TLS-BLOCK||g' | sed 's|>| |g')"
      if ! [ -f $HSHQ_STACKS_DIR/caddy-common/lecerts/$subdom.${HOMESERVER_DOMAIN}.crt ]; then
        generateCert $subdom.${HOMESERVER_DOMAIN} $subdom.${HOMESERVER_DOMAIN} "" "2023-01-01 00:00:00 GMT"
        sudo mv -f $HSHQ_SSL_DIR/$subdom.${HOMESERVER_DOMAIN}.crt $HSHQ_STACKS_DIR/caddy-common/lecerts/
        sudo mv -f $HSHQ_SSL_DIR/$subdom.${HOMESERVER_DOMAIN}.key $HSHQ_STACKS_DIR/caddy-common/lecerts/
        sudo chmod 600 $HSHQ_STACKS_DIR/caddy-common/lecerts/$subdom.${HOMESERVER_DOMAIN}.*
        sudo chown root:root $HSHQ_STACKS_DIR/caddy-common/lecerts/$subdom.${HOMESERVER_DOMAIN}.*
      fi
      addLECertPathsToRelayServer $subdom.${HOMESERVER_DOMAIN} ${HOMESERVER_DOMAIN}
      ;;
    *)
      tls_block="import $CADDY_SNIPPET_TLS_HSHQ" ;;
  esac
  snippet_block_begin="# sn-sub-${subdom} BEGIN"
  snippet_block_end="# sn-sub-${subdom} END"
  inner_block_repl=$(echo $inner_block | sed "s|REPLACE-TLS-BLOCK|$tls_block|g")
  snippet_block="(sn-sub-${subdom}) {\n${inner_block_repl}\n}"
  addReplaceCaddySnippet "$snippet_block_begin" "$snippet_block_end" "$snippet_block"
  addCaddySnippetImport home sn-sub-${subdom} $svc_nettype
  addCaddySnippetImport other sn-sub-${subdom} $svc_nettype
  case "$manage_tls" in
    hshq)
      replaceTextBlockInFile "$snippet_block_begin" "$snippet_block_end" "" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Primary false
      addCaddySnippetImport primary sn-sub-${subdom} $svc_nettype
      ;;
    le)
      removeCaddySnippetImport primary sn-sub-${subdom}
      replaceOrAppendTextBlockInFile "$snippet_block_begin" "$snippet_block_end" "$primary_block" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Primary
      ;;
    *)
      addCaddySnippetImport primary sn-sub-${subdom} $svc_nettype
      ;;
  esac
}

function addReplaceCaddySnippet()
{
  begin_block=$1
  end_block=$2
  block_text="$3"
  snip_file=$HSHQ_STACKS_DIR/caddy-common/snippets/svcs.snip
  replaceOrAppendTextBlockInFile "$begin_block" "$end_block" "$block_text" $snip_file ">"
}

function removeCaddySnippet()
{
  begin_block="$1"
  end_block="$2"
  snip_file=$HSHQ_STACKS_DIR/caddy-common/snippets/svcs.snip
  removeTextBlockInFile "$begin_block" "$end_block" $snip_file
}

function addCaddySnippetImport()
{
  net_type=$1
  svc_name=$2
  svc_nettype=$3
  case "$net_type" in
    home)
      checkAddLineToFile "import $svc_name" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Home ;;
    primary)
      if [ "$svc_nettype" = "primary" ] || [ "$svc_nettype" = "other" ]; then
        checkAddLineToFile "import $svc_name" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Primary
      fi ;;
    other)
      if [ "$svc_nettype" = "other" ]; then
        checkAddLineToFile "import $svc_name" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Other
      fi ;;
  esac
}

function checkAddLineToFile()
{
  add_line=$1
  sn_file=$2
  set +e
  grep "$add_line" $sn_file
  if [ $? -ne 0 ]; then
    echo -e "$add_line" >> $sn_file
  fi
  set -e
}

function removeCaddySnippetImport()
{
  net_type=$1
  svc_name=$2
  case "$net_type" in
    home)
      sed -i "/import $svc_name/d" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Home ;;
    primary)
      sed -i "/import $svc_name/d" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Primary ;;
    other)
      sed -i "/import $svc_name/d" $HSHQ_STACKS_DIR/caddy-common/caddyfiles/CaddyfileBody-Other ;;
  esac
}

function restartAllCaddyContainers()
{
  caddy_arr=($(docker ps -a --filter name=caddy- --format "{{.Names}}"))
  for curcaddy in "${caddy_arr[@]}"
  do
    docker container restart $curcaddy
  done
  docker container restart ofelia
}

# ClientDNS
function installClientDNS()
{
  set +e
  cdns_stack_name=$1
  cdns_ip_address=$2
  CUR_CLIENTDNS_ADMIN_USERNAME=$3
  CUR_CLIENTDNS_ADMIN_PASSWORD=$4
  checkDeleteStackAndDirectory clientdns-${cdns_stack_name} "ClientDNS-${cdns_stack_name}"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_WIREGUARD
  if [ $? -ne 0 ]; then
    return 1
  fi
  pullImage $IMG_DNSMASQ
  if [ $? -ne 0 ]; then
    return 1
  fi
  set -e

  mkdir -p $HSHQ_STACKS_DIR/clientdns-${cdns_stack_name}
  cdns_stack_name_upper=$(echo $cdns_stack_name | tr '[:lower:]' '[:upper:]')
  checkAddServiceToConfig "clientdns-${cdns_stack_name}" "CLIENTDNS_${cdns_stack_name_upper}_ADMIN_USERNAME=$CUR_CLIENTDNS_ADMIN_USERNAME,CLIENTDNS_${cdns_stack_name_upper}_ADMIN_PASSWORD=$CUR_CLIENTDNS_ADMIN_PASSWORD"
  docker network create --driver=bridge tmpnet >/dev/null
  clientdns_subnet=$(getDockerSubnet tmpnet)
  clientdns_subnet_prefix=$(echo $clientdns_subnet | rev | cut -d "." -f2- | rev)
  docker network rm tmpnet >/dev/null
  docker network create -o com.docker.network.bridge.name=brcd-${cdns_stack_name} --driver=bridge --subnet $clientdns_subnet cdns-${cdns_stack_name} > /dev/null
  outputConfigClientDNS $cdns_stack_name
  sudo mv $HSHQ_WIREGUARD_DIR/users/clientdns-${cdns_stack_name}.conf $HSHQ_STACKS_DIR/clientdns-${cdns_stack_name}/clientdns-${cdns_stack_name}.conf
  installStack clientdns-${cdns_stack_name} clientdns-${cdns_stack_name}-wireguard "\[ls.io-init\] done" $HOME/clientdns-${cdns_stack_name}.env
  retval=$?
  if [ $retval -ne 0 ]; then
    return $retval
  fi
  echo "ClientDNS-${cdns_stack_name} installed, sleeping 5 seconds..."
  sleep 5

  inner_block=""
  inner_block=$inner_block">>https://${SUB_CLIENTDNS}-${cdns_stack_name}.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://clientdns-${cdns_stack_name}-dnsmasq:8080 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks ${SUB_CLIENTDNS}-${cdns_stack_name} $MANAGETLS_CLIENTDNS "true" $NETDEFAULT_CLIENTDNS "$inner_block"
  insertEnableSvcHeimdall clientdns "${FMLNAME_CLIENTDNS}-${cdns_stack_name}" $USERTYPE_CLIENTDNS "https://${SUB_CLIENTDNS}-${cdns_stack_name}.$HOMESERVER_DOMAIN" "dnsmasq.png" true
  restartAllCaddyContainers
}

function outputConfigClientDNS()
{
  cat <<EOFGL > $HOME/clientdns-${cdns_stack_name}-compose.yml
$STACK_VERSION_PREFIX clientdns-${cdns_stack_name} $(getScriptStackVersion clientdns-${cdns_stack_name})
version: '3.5'

services:
  clientdns-${cdns_stack_name}-dnsmasq:
    image: $IMG_DNSMASQ
    container_name: clientdns-${cdns_stack_name}-dnsmasq
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      dock-ext-net:
      dock-proxy-net:
      cdns-${cdns_stack_name}-net:
        ipv4_address: \${CLIENTDNS_SUBNET_PREFIX}.253
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/clientdns-${cdns_stack_name}/dnsmasq.conf:/etc/dnsmasq.conf
    environment:
      - HTTP_USER=$CUR_CLIENTDNS_ADMIN_USERNAME
      - HTTP_PASS=$CUR_CLIENTDNS_ADMIN_PASSWORD

  clientdns-${cdns_stack_name}-wireguard:
    image: $IMG_WIREGUARD
    container_name: clientdns-${cdns_stack_name}-wireguard
    hostname: clientdns-${cdns_stack_name}-wireguard
    restart: unless-stopped
    env_file: stack.env
    cap_add:
      - NET_ADMIN
    networks:
      - dock-ext-net
      - cdns-${cdns_stack_name}-net
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - \${HSHQ_STACKS_DIR}/clientdns-${cdns_stack_name}/Corefile:/config/coredns/Corefile:ro
      - \${HSHQ_STACKS_DIR}/clientdns-${cdns_stack_name}/clientdns-${cdns_stack_name}.conf:/config/wg0.conf

networks:
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-ext-net:
    name: dock-ext
    external: true
  cdns-${cdns_stack_name}-net:
    name: cdns-${cdns_stack_name}
    external: true

EOFGL

  cat <<EOFGL > $HOME/clientdns-${cdns_stack_name}.env
TZ=\${TZ}
PUID=$USERID
PGID=$GROUPID
CLIENTDNS_SUBNET_PREFIX=$clientdns_subnet_prefix
USE_COREDNS=true
EOFGL

  cat <<EOFCD > $HSHQ_STACKS_DIR/clientdns-${cdns_stack_name}/dnsmasq.conf
# IP Address of this DNS Server: $cdns_ip_address
#======================
no-resolv
no-hosts
domain-needed
bogus-priv
server=127.0.0.11
cache-size=0
#======================
# Add new entries here


EOFCD

  cat <<EOFCF > $HSHQ_STACKS_DIR/clientdns-${cdns_stack_name}/Corefile
. {
    loop
    reload 15s
    forward . ${clientdns_subnet_prefix}.253
}
EOFCF

}

function performUpdateClientDNS()
{
  perform_stack_name=$2
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v1
      curImageList=jpillora/dnsmasq:1.1,linuxserver/wireguard:1.0.20210914
      image_update_map[0]="jpillora/dnsmasq:1.1,jpillora/dnsmasq:1.1"
      image_update_map[1]="linuxserver/wireguard:1.0.20210914,linuxserver/wireguard:1.0.20210914"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# Ofelia
function installOfelia()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory ofelia "Ofelia"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: Ofelia directory exists"
    exit 1
  fi
  pullImage $IMG_OFELIA
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain Ofelia docker image"
    exit 1
  fi
  set -e
  mkdir $HSHQ_STACKS_DIR/ofelia
  outputConfigOfelia
  installStack ofelia ofelia "" $HOME/ofelia.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing Ofelia"
    exit $retval
  fi
}

function outputConfigOfelia()
{
  cat <<EOFOF > $HOME/ofelia-compose.yml
$STACK_VERSION_PREFIX ofelia $(getScriptStackVersion ofelia)
version: '3.5'

services:
  ofelia:
    image: $(getScriptImageByContainerName ofelia)
    container_name: ofelia
    hostname: ofelia
    restart: unless-stopped
    command: daemon --docker
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-internalmail-net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
    labels:
      - "ofelia.job-local.my-test-job.schedule=@every 5m"
      - "ofelia.job-local.my-test-job.command=date"

networks:
  dock-internalmail-net:
    name: dock-internalmail
    external: true
EOFOF

  cat <<EOFRM > $HOME/ofelia.env
TZ=\${TZ}
EOFRM

}

function performUpdateOfelia()
{
  perform_stack_name=ofelia
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v3
      curImageList=mcuadros/ofelia:v0.3.7
      image_update_map[0]="mcuadros/ofelia:v0.3.7,mcuadros/ofelia:0.3.10"
    ;;
    2)
      newVer=v3
      curImageList=mcuadros/ofelia:v0.3.9
      image_update_map[0]="mcuadros/ofelia:v0.3.9,mcuadros/ofelia:0.3.10"
    ;;
    3)
      newVer=v3
      curImageList=mcuadros/ofelia:0.3.10
      image_update_map[0]="mcuadros/ofelia:0.3.10,mcuadros/ofelia:0.3.10"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

# UptimeKuma
function installUptimeKuma()
{
  set +e
  is_integrate_hshq=$1
  checkDeleteStackAndDirectory uptimekuma "Uptimekuma"
  cdRes=$?
  if [ $cdRes -ne 0 ]; then
    echo "ERROR: Uptimekuma directory exists"
    exit 1
  fi
  pullImage $IMG_UPTIMEKUMA
  if [ $? -ne 0 ]; then
    echo "ERROR: Could not obtain Uptimekuma docker image"
    exit 1
  fi
  set -e

  mkdir $HSHQ_STACKS_DIR/uptimekuma
  mkdir $HSHQ_STACKS_DIR/uptimekuma/app

  initServicesCredentials
  UPTIMEKUMA_PASSWORD_HASH=$(htpasswd -bnBC 10 "" $UPTIMEKUMA_PASSWORD | tr -d ':\n' | sed 's/$2y/$2a/')
  outputConfigUptimeKuma
  installStack uptimekuma uptimekuma "Listening on 3001" $HOME/uptimekuma.env
  retval=$?
  if [ $retval -ne 0 ]; then
    echo "ERROR: There was a problem installing Uptimekuma"
    exit $retval
  fi
  startStopStack uptimekuma stop
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO user(id,username,password,active,timezone,twofa_secret,twofa_status,twofa_last_token) VALUES(1,'$UPTIMEKUMA_USERNAME','$UPTIMEKUMA_PASSWORD_HASH',1,'$TZ',NULL,0,NULL);"
  curdt=$(getCurrentDate)
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO tag(id,name,color,created_date) VALUES(1,'Admin','$ADMIN_COLOR_CODE','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO tag(id,name,color,created_date) VALUES(2,'User','$USERS_COLOR_CODE','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO tag(id,name,color,created_date) VALUES(3,'RelayServer','$RELAYSERVER_COLOR_CODE','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO tag(id,name,color,created_date) VALUES(4,'HomeServers','$HOMESERVERS_COLOR_CODE','$curdt');"
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO notification(id,name,active,user_id,is_default,config) VALUES(1,'Service Alerts',1,1,1,'{\"name\":\"Service Alerts\",\"type\":\"smtp\",\"isDefault\":true,\"smtpSecure\":false,\"smtpHost\":\"$SMTP_HOSTNAME\",\"smtpPort\":$SMTP_HOSTPORT,\"smtpFrom\":\"\\\"Uptime Kuma $HSHQ_ADMIN_NAME\\\" <$EMAIL_ADMIN_EMAIL_ADDRESS>\",\"smtpTo\":\"$EMAIL_ADMIN_EMAIL_ADDRESS\",\"applyExisting\":true}');"
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "REPLACE INTO setting(key,value,type) VALUES('keepDataPeriodDays',30,'general');"
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "REPLACE INTO setting(key,value,type) VALUES('primaryBaseURL','https://$SUB_UPTIMEKUMA.$HOMESERVER_DOMAIN','general');"
  insertServicesUptimeKuma
  startStopStack uptimekuma start

  inner_block=""
  inner_block=$inner_block">>https://$SUB_UPTIMEKUMA.$HOMESERVER_DOMAIN {\n"
  inner_block=$inner_block">>>>REPLACE-TLS-BLOCK\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_RIP\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_FWDAUTH\n"
  inner_block=$inner_block">>>>import $CADDY_SNIPPET_SAFEHEADER\n"
  inner_block=$inner_block">>>>handle @subnet {\n"
  inner_block=$inner_block">>>>>>reverse_proxy http://uptimekuma:3001 {\n"
  inner_block=$inner_block">>>>>>>>import $CADDY_SNIPPET_TRUSTEDPROXIES\n"
  inner_block=$inner_block">>>>>>}\n"
  inner_block=$inner_block">>>>}\n"
  inner_block=$inner_block">>>>respond 404\n"
  inner_block=$inner_block">>}"
  updateCaddyBlocks $SUB_UPTIMEKUMA $MANAGETLS_UPTIMEKUMA "$is_integrate_hshq" $NETDEFAULT_UPTIMEKUMA "$inner_block"
}

function outputConfigUptimeKuma()
{
  cat <<EOFUK > $HOME/uptimekuma-compose.yml
$STACK_VERSION_PREFIX uptimekuma $(getScriptStackVersion uptimekuma)
version: '3.5'

services:
  uptimekuma:
    image: $(getScriptImageByContainerName uptimekuma)
    container_name: uptimekuma
    hostname: uptimekuma
    restart: unless-stopped
    env_file: stack.env
    security_opt:
      - no-new-privileges:true
    networks:
      - dock-ext-net
      - dock-proxy-net
      - dock-internalmail-net
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - /usr/share/ca-certificates:/usr/share/ca-certificates:ro
      - /usr/local/share/ca-certificates:/usr/local/share/ca-certificates:ro
      - \${HSHQ_STACKS_DIR}/uptimekuma/app:/app/data

networks:
  dock-ext-net:
    name: dock-ext
    external: true
  dock-proxy-net:
    name: dock-proxy
    external: true
  dock-internalmail-net:
    name: dock-internalmail
    external: true
EOFUK

  cat <<EOFUK > $HOME/uptimekuma.env
NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt
PUID=$USERID
PGID=$GROUPID
EOFUK
}

function performUpdateUptimeKuma()
{
  perform_stack_name=uptimekuma
  prepPerformUpdate "$1"
  if [ $? -ne 0 ]; then return 1; fi
  # The current version is included as a placeholder for when the next version arrives.
  case "$perform_stack_ver" in
    1)
      newVer=v2
      curImageList=louislam/uptime-kuma:1.23.0-alpine
      image_update_map[0]="louislam/uptime-kuma:1.23.0-alpine,louislam/uptime-kuma:1.23.11-alpine"
    ;;
    2)
      newVer=v2
      curImageList=louislam/uptime-kuma:1.23.11-alpine
      image_update_map[0]="louislam/uptime-kuma:1.23.11-alpine,louislam/uptime-kuma:1.23.11-alpine"
    ;;
    *)
      is_upgrade_error=true
      perform_update_report="ERROR ($perform_stack_name): Unknown version (v$perform_stack_ver)"
      return
    ;;
  esac
  upgradeStack "$perform_stack_name" "$perform_stack_id" "$oldVer" "$newVer" "$curImageList" "$perform_compose" "$portainerToken" doNothing false
  perform_update_report="${perform_update_report}$stack_upgrade_report"
}

function insertServiceUptimeKuma()
{
  svc_proper_name=$1
  user_type=$2
  svc_url=$3
  svc_is_active=$4
  curdt=$(getCurrentDate)
  user_id=0
  if [ "$user_type" = "admin" ]; then
    user_id=1
  elif [ "$user_type" = "user" ]; then
    user_id=2
  elif [ "$user_type" = "relayserver" ]; then
    user_id=3
  elif [ "$user_type" = "homeservers" ]; then
    user_id=4
  else
    user_id=0
  fi
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO monitor(id,name,active,user_id,interval,url,type,weight,hostname,port,created_date,keyword,maxretries,ignore_tls,upside_down,maxredirects,accepted_statuscodes_json,dns_resolve_type,dns_resolve_server,dns_last_result,retry_interval,push_token,method,body,headers,basic_auth_user,basic_auth_pass,docker_host,docker_container,proxy_id,expiry_notification,mqtt_topic,mqtt_success_message,mqtt_username,mqtt_password,database_connection_string,database_query,auth_method,auth_domain,auth_workstation,grpc_url,grpc_protobuf,grpc_body,grpc_metadata,grpc_method,grpc_service_name,grpc_enable_tls,radius_username,radius_password,radius_called_station_id,radius_called_station_id,radius_secret,resend_interval,packet_size,game) VALUES(NULL,'$svc_proper_name',$svc_is_active,1,$UPTIMEKUMA_HEARTBEAT_INTERVAL,'$svc_url','http',2000,NULL,NULL,'$curdt',NULL,$UPTIMEKUMA_HEARTBEAT_RETRIES,0,0,10,'[\"200-299\"]','A','9.9.9.9',NULL,$UPTIMEKUMA_RETRY_INTERVAL,NULL,'GET',NULL,NULL,NULL,NULL,NULL,'',NULL,0,'','','','',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,NULL,NULL,NULL,NULL,NULL,$UPTIMEKUMA_RESEND_NOTIFY,56,NULL);"
  svc_id=$(sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "Select id from monitor where url='$svc_url';")
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO monitor_tag(id,monitor_id,tag_id,value) VALUES(NULL,$svc_id,$user_id,'');"
  sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "INSERT INTO monitor_notification(id,monitor_id,notification_id) VALUES(NULL,$svc_id,1);"
}

function checkInsertServiceUptimeKuma()
{
  svc_stack_name=$1
  svc_proper_name=$2
  user_type=$3
  svc_url=$4
  is_restart=$5
  svc_is_active=$6

  set +e
  docker container stop uptimekuma > /dev/null 2>&1
  set -e
  svc_id=$(sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "Select id from monitor where url='$svc_url';")
  if [ -z $svc_id ]; then
    insertServiceUptimeKuma "$svc_proper_name" "$user_type" "$svc_url" "$svc_is_active"
  else
    sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "Update monitor set active=$svc_is_active where url='$svc_url';"
  fi
  set +e
  if [ "$is_restart" = "true" ]; then
    docker container start uptimekuma > /dev/null 2>&1
  fi
  set -e
}

function insertEnableSvcUptimeKuma()
{
  checkInsertServiceUptimeKuma "$1" "$2" "$3" "$4" "$5" 1
}

function disableSvcUptimeKuma()
{
  svc_url=$1
  is_manage_container=$2
  if [ "$IS_INSTALLED" = "true" ] && [ -f $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db ]; then
    if [ "$is_manage_container" = "true" ]; then
      docker container stop uptimekuma >/dev/null
    fi
    sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "Update monitor set active=0 where url='$svc_url';"
    if [ "$is_manage_container" = "true" ]; then
      docker container start uptimekuma >/dev/null
    fi
  fi
}

function deleteSvcUptimeKuma()
{
  svc_url=$1
  is_manage_container=$2
  if [ "$IS_INSTALLED" = "true" ] && [ -f $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db ]; then
    if [ "$is_manage_container" = "true" ]; then
      docker container stop uptimekuma >/dev/null
    fi
    sqlite3 $HSHQ_STACKS_DIR/uptimekuma/app/kuma.db "Delete from monitor where url='$svc_url';"
    if [ "$is_manage_container" = "true" ]; then
      docker container start uptimekuma >/dev/null
    fi
  fi
}

# Purposely verbose, to list all of the current methods used to call this script.
# The -a option is deprecated, but will remain to provide backwards-compatibility
# with the prior version of the wrapper script, hshq.sh.
case "$1" in
  "lib")     init;;
  "run")     main "$@";;
  "install") main "$@";;
  "-a")      main "$@";;
  "")        main "$@";;
  *)         main "$@";;
esac
